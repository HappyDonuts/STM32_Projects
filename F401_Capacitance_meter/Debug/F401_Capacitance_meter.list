
F401_Capacitance_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000153c  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006360  08006360  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006368  08006368  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000008c  080063fc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080063fc  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9b0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec7  00000000  00000000  0002ea6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  000315e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016df0  00000000  00000000  000321c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a46b  00000000  00000000  00048fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ca55  00000000  00000000  0005341b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfe70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc8  00000000  00000000  000dfeec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e0c 	.word	0x08004e0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08004e0c 	.word	0x08004e0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
	/* MAIN CODE */
	display = ssd1306_new(i2c, 0x78); // 0x79
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <main_s+0x80>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2178      	movs	r1, #120	; 0x78
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f9f8 	bl	80012ea <ssd1306_new>
 8000efa:	4602      	mov	r2, r0
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <main_s+0x84>)
 8000efe:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim_charge);
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <main_s+0x88>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fc22 	bl	800374e <HAL_TIM_Base_Start_IT>
	HAL_Delay(500);
 8000f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0e:	f000 ff8d 	bl	8001e2c <HAL_Delay>
	HAL_TIM_Base_Stop_IT(tim_charge);
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <main_s+0x88>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fc3d 	bl	8003796 <HAL_TIM_Base_Stop_IT>
	double counter = tim_charge->Instance->CNT;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <main_s+0x88>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff faed 	bl	8000504 <__aeabi_ui2d>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	e9c7 3400 	strd	r3, r4, [r7]

	SSD1306_Putint(display, counter,  NO, 1);
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <main_s+0x84>)
 8000f34:	681c      	ldr	r4, [r3, #0]
 8000f36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f3a:	f7ff fe0d 	bl	8000b58 <__aeabi_d2iz>
 8000f3e:	4601      	mov	r1, r0
 8000f40:	2301      	movs	r3, #1
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <main_s+0x8c>)
 8000f44:	4620      	mov	r0, r4
 8000f46:	f000 fc7b 	bl	8001840 <SSD1306_Putint>
	SSD1306_Putint(display, cycles,  NO, 2);
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <main_s+0x84>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <main_s+0x90>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	4619      	mov	r1, r3
 8000f54:	2302      	movs	r3, #2
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <main_s+0x8c>)
 8000f58:	f000 fc72 	bl	8001840 <SSD1306_Putint>
	SSD1306_UpdateScreen(display);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <main_s+0x84>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fa9e 	bl	80014a2 <SSD1306_UpdateScreen>
//
//	HAL_GPIO_WritePin(PORT_Q6, PIN_Q6, 0);
//	HAL_GPIO_WritePin(PORT_Q3, PIN_Q3, 0);
//	HAL_Delay(2000);

	while(1){
 8000f66:	e7fe      	b.n	8000f66 <main_s+0x7e>
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	200000c4 	.word	0x200000c4
 8000f70:	20000004 	.word	0x20000004
 8000f74:	08004e24 	.word	0x08004e24
 8000f78:	200000a8 	.word	0x200000a8

08000f7c <HAL_TIM_PeriodElapsedCallback>:
//
/**
  * @brief  Period elapsed callback.
  * @retval none
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	/* TIM CALLBACK CODE */
	if (htim == tim_charge){
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		static uint8_t ready = 0;
		if (ready == 1){
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d105      	bne.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x26>
			cycles++;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000fa0:	801a      	strh	r2, [r3, #0]
		}
		ready = 1;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
	}
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	200000aa 	.word	0x200000aa
 8000fbc:	200000a8 	.word	0x200000a8

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc4:	f000 fec0 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc8:	f000 f80a 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fcc:	f000 f8ec 	bl	80011a8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000fd0:	f000 f870 	bl	80010b4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000fd4:	f000 f89c 	bl	8001110 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 8000fd8:	f7ff ff86 	bl	8000ee8 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x1c>
	...

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 ffb2 	bl	8003f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <SystemClock_Config+0xcc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <SystemClock_Config+0xd0>)
 800102e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001054:	2308      	movs	r3, #8
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001058:	2354      	movs	r3, #84	; 0x54
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001060:	2304      	movs	r3, #4
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 0320 	add.w	r3, r7, #32
 8001068:	4618      	mov	r0, r3
 800106a:	f001 ff1d 	bl	8002ea8 <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001074:	f000 f932 	bl	80012dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2102      	movs	r1, #2
 8001094:	4618      	mov	r0, r3
 8001096:	f002 f977 	bl	8003388 <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010a0:	f000 f91c 	bl	80012dc <Error_Handler>
  }
}
 80010a4:	bf00      	nop
 80010a6:	3750      	adds	r7, #80	; 0x50
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_I2C2_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <MX_I2C2_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_I2C2_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_I2C2_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_I2C2_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_I2C2_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_I2C2_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_I2C2_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_I2C2_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <MX_I2C2_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_I2C2_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_I2C2_Init+0x50>)
 80010f2:	f001 f96b 	bl	80023cc <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 f8ee 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000c8 	.word	0x200000c8
 8001108:	40005800 	.word	0x40005800
 800110c:	00061a80 	.word	0x00061a80

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM2_Init+0x94>)
 800112e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64999;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001142:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001146:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001156:	f002 facf 	bl	80036f8 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001160:	f000 f8bc 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001172:	f002 fc43 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f8ae 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM2_Init+0x94>)
 800118e:	f002 fe2f 	bl	8003df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 f8a0 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000011c 	.word	0x2000011c

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a40      	ldr	r2, [pc, #256]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a39      	ldr	r2, [pc, #228]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <MX_GPIO_Init+0x120>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <MX_GPIO_Init+0x124>)
 8001236:	f001 f8af 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2110      	movs	r1, #16
 800123e:	4824      	ldr	r0, [pc, #144]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001240:	f001 f8aa 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800124a:	4821      	ldr	r0, [pc, #132]	; (80012d0 <MX_GPIO_Init+0x128>)
 800124c:	f001 f8a4 	bl	8002398 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4818      	ldr	r0, [pc, #96]	; (80012cc <MX_GPIO_Init+0x124>)
 800126a:	f000 ff13 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800126e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_GPIO_Init+0x12c>)
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001284:	f000 ff06 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_GPIO_Init+0x12c>)
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	480e      	ldr	r0, [pc, #56]	; (80012d8 <MX_GPIO_Init+0x130>)
 800129e:	f000 fef9 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 80012a2:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80012a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_GPIO_Init+0x128>)
 80012bc:	f000 feea 	bl	8002094 <HAL_GPIO_Init>

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020400 	.word	0x40020400
 80012d4:	10110000 	.word	0x10110000
 80012d8:	40020000 	.word	0x40020000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <ssd1306_new>:
#include "ssd1306_basic.h"

/* SSD1306 data buffer */
//static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

ssd1306_t* ssd1306_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70fb      	strb	r3, [r7, #3]
	ssd1306_t* ssd1306 = malloc(sizeof(*ssd1306));
 80012f6:	f44f 6086 	mov.w	r0, #1072	; 0x430
 80012fa:	f002 fe25 	bl	8003f48 <malloc>
 80012fe:	4603      	mov	r3, r0
 8001300:	60fb      	str	r3, [r7, #12]
	SSD1306_Init(ssd1306, hi2c, addr);
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	461a      	mov	r2, r3
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f805 	bl	8001318 <SSD1306_Init>
	return ssd1306;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <SSD1306_Init>:

uint8_t SSD1306_Init(ssd1306_t* ssd1306, I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	71fb      	strb	r3, [r7, #7]

	ssd1306->hi2c = hi2c;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	605a      	str	r2, [r3, #4]
	ssd1306->addr = addr;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	701a      	strb	r2, [r3, #0]
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306->hi2c, ssd1306->addr, 1, 20000) != HAL_OK) {
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6858      	ldr	r0, [r3, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b299      	uxth	r1, r3
 800133c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001340:	2201      	movs	r2, #1
 8001342:	f001 fa79 	bl	8002838 <HAL_I2C_IsDeviceReady>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SSD1306_Init+0x38>
		/* Return false */
		return 0;
 800134c:	2300      	movs	r3, #0
 800134e:	e0a4      	b.n	800149a <SSD1306_Init+0x182>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;
	
	/* Init LCD */
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE);
 8001350:	22ae      	movs	r2, #174	; 0xae
 8001352:	2100      	movs	r1, #0
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 fb90 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE); //display off
 800135a:	22ae      	movs	r2, #174	; 0xae
 800135c:	2100      	movs	r1, #0
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 fb8b 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //Set Memory Addressing Mode
 8001364:	2220      	movs	r2, #32
 8001366:	2100      	movs	r1, #0
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 fb86 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800136e:	2210      	movs	r2, #16
 8001370:	2100      	movs	r1, #0
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 fb81 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001378:	22b0      	movs	r2, #176	; 0xb0
 800137a:	2100      	movs	r1, #0
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fb7c 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xC8); //Set COM Output Scan Direction
 8001382:	22c8      	movs	r2, #200	; 0xc8
 8001384:	2100      	movs	r1, #0
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 fb77 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //---set low column address
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 fb72 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //---set high column address
 8001396:	2210      	movs	r2, #16
 8001398:	2100      	movs	r1, #0
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 fb6d 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x40); //--set start line address
 80013a0:	2240      	movs	r2, #64	; 0x40
 80013a2:	2100      	movs	r1, #0
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 fb68 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x81); //--set contrast control register
 80013aa:	2281      	movs	r2, #129	; 0x81
 80013ac:	2100      	movs	r1, #0
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 fb63 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xFF);
 80013b4:	22ff      	movs	r2, #255	; 0xff
 80013b6:	2100      	movs	r1, #0
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 fb5e 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA1); //--set segment re-map 0 to 127
 80013be:	22a1      	movs	r2, #161	; 0xa1
 80013c0:	2100      	movs	r1, #0
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 fb59 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA6); //--set normal display
 80013c8:	22a6      	movs	r2, #166	; 0xa6
 80013ca:	2100      	movs	r1, #0
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 fb54 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 80013d2:	22a8      	movs	r2, #168	; 0xa8
 80013d4:	2100      	movs	r1, #0
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fb4f 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x3F); //
 80013dc:	223f      	movs	r2, #63	; 0x3f
 80013de:	2100      	movs	r1, #0
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 fb4a 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013e6:	22a4      	movs	r2, #164	; 0xa4
 80013e8:	2100      	movs	r1, #0
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 fb45 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD3); //-set display offset
 80013f0:	22d3      	movs	r2, #211	; 0xd3
 80013f2:	2100      	movs	r1, #0
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 fb40 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //-not offset
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 fb3b 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 8001404:	22d5      	movs	r2, #213	; 0xd5
 8001406:	2100      	movs	r1, #0
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 fb36 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xF0); //--set divide ratio
 800140e:	22f0      	movs	r2, #240	; 0xf0
 8001410:	2100      	movs	r1, #0
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 fb31 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD9); //--set pre-charge period
 8001418:	22d9      	movs	r2, #217	; 0xd9
 800141a:	2100      	movs	r1, #0
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 fb2c 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x22); //
 8001422:	2222      	movs	r2, #34	; 0x22
 8001424:	2100      	movs	r1, #0
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fb27 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDA); //--set com pins hardware configuration
 800142c:	22da      	movs	r2, #218	; 0xda
 800142e:	2100      	movs	r1, #0
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 fb22 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x12);
 8001436:	2212      	movs	r2, #18
 8001438:	2100      	movs	r1, #0
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 fb1d 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDB); //--set vcomh
 8001440:	22db      	movs	r2, #219	; 0xdb
 8001442:	2100      	movs	r1, #0
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fb18 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //0x20,0.77xVcc
 800144a:	2220      	movs	r2, #32
 800144c:	2100      	movs	r1, #0
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fb13 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x8D); //--set DC-DC enable
 8001454:	228d      	movs	r2, #141	; 0x8d
 8001456:	2100      	movs	r1, #0
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 fb0e 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x14); //
 800145e:	2214      	movs	r2, #20
 8001460:	2100      	movs	r1, #0
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 fb09 	bl	8001a7a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAF); //--turn on SSD1306 panel
 8001468:	22af      	movs	r2, #175	; 0xaf
 800146a:	2100      	movs	r1, #0
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 fb04 	bl	8001a7a <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(ssd1306, SSD1306_COLOR_BLACK);
 8001472:	2100      	movs	r1, #0
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f845 	bl	8001504 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(ssd1306);
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f811 	bl	80014a2 <SSD1306_UpdateScreen>
	
	/* Set default values */
	ssd1306->CurrentX = 0;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = 0;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	815a      	strh	r2, [r3, #10]
	
	/* Initialized OK */
	ssd1306->Initialized = 1;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	735a      	strb	r2, [r3, #13]
	ssd1306->Inverted= 0;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	731a      	strb	r2, [r3, #12]
	
	/* Return OK */
	return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(ssd1306_t* ssd1306) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e022      	b.n	80014f6 <SSD1306_UpdateScreen+0x54>
		ssd1306_I2C_Write(ssd1306, 0x00, 0xB0 + m);
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	3b50      	subs	r3, #80	; 0x50
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	2100      	movs	r1, #0
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fadd 	bl	8001a7a <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x00);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fad8 	bl	8001a7a <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x10);
 80014ca:	2210      	movs	r2, #16
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fad3 	bl	8001a7a <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(ssd1306, 0x40, &ssd1306->SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	4613      	mov	r3, r2
 80014d8:	015b      	lsls	r3, r3, #5
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	3308      	adds	r3, #8
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	1d9a      	adds	r2, r3, #6
 80014e6:	2384      	movs	r3, #132	; 0x84
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fa6d 	bl	80019ca <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3301      	adds	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	d9d9      	bls.n	80014b0 <SSD1306_UpdateScreen+0xe>
	}
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <SSD1306_Fill>:

void SSD1306_Fill(ssd1306_t* ssd1306, SSD1306_COLOR_t color) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(ssd1306->SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(ssd1306->SSD1306_Buffer));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 000e 	add.w	r0, r3, #14
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <SSD1306_Fill+0x1c>
 800151c:	2300      	movs	r3, #0
 800151e:	e000      	b.n	8001522 <SSD1306_Fill+0x1e>
 8001520:	23ff      	movs	r3, #255	; 0xff
 8001522:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8001526:	4619      	mov	r1, r3
 8001528:	f002 fd16 	bl	8003f58 <memset>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(ssd1306_t* ssd1306, uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001534:	b490      	push	{r4, r7}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4603      	mov	r3, r0
 8001544:	817b      	strh	r3, [r7, #10]
 8001546:	460b      	mov	r3, r1
 8001548:	813b      	strh	r3, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
	if (
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	2b83      	cmp	r3, #131	; 0x83
 8001552:	d85a      	bhi.n	800160a <SSD1306_DrawPixel+0xd6>
		x >= SSD1306_WIDTH ||
 8001554:	893b      	ldrh	r3, [r7, #8]
 8001556:	2b3f      	cmp	r3, #63	; 0x3f
 8001558:	d857      	bhi.n	800160a <SSD1306_DrawPixel+0xd6>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (ssd1306->Inverted) {
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	7b1b      	ldrb	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <SSD1306_DrawPixel+0x3c>
		color = (SSD1306_COLOR_t)!color;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf0c      	ite	eq
 8001568:	2301      	moveq	r3, #1
 800156a:	2300      	movne	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	71fb      	strb	r3, [r7, #7]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d123      	bne.n	80015be <SSD1306_DrawPixel+0x8a>
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001576:	897a      	ldrh	r2, [r7, #10]
 8001578:	893b      	ldrh	r3, [r7, #8]
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	b298      	uxth	r0, r3
 800157e:	4601      	mov	r1, r0
 8001580:	460b      	mov	r3, r1
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	440b      	add	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	7b9b      	ldrb	r3, [r3, #14]
 8001590:	b25a      	sxtb	r2, r3
 8001592:	893b      	ldrh	r3, [r7, #8]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b25c      	sxtb	r4, r3
 80015a4:	897a      	ldrh	r2, [r7, #10]
 80015a6:	4601      	mov	r1, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	015b      	lsls	r3, r3, #5
 80015ac:	440b      	add	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	b2e1      	uxtb	r1, r4
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	739a      	strb	r2, [r3, #14]
 80015bc:	e026      	b.n	800160c <SSD1306_DrawPixel+0xd8>
	} else {
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015be:	897a      	ldrh	r2, [r7, #10]
 80015c0:	893b      	ldrh	r3, [r7, #8]
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b298      	uxth	r0, r3
 80015c6:	4601      	mov	r1, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	440b      	add	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	7b9b      	ldrb	r3, [r3, #14]
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	893b      	ldrh	r3, [r7, #8]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	b25c      	sxtb	r4, r3
 80015f0:	897a      	ldrh	r2, [r7, #10]
 80015f2:	4601      	mov	r1, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	440b      	add	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	b2e1      	uxtb	r1, r4
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	460a      	mov	r2, r1
 8001606:	739a      	strb	r2, [r3, #14]
 8001608:	e000      	b.n	800160c <SSD1306_DrawPixel+0xd8>
		return;
 800160a:	bf00      	nop
	}
}
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bc90      	pop	{r4, r7}
 8001612:	4770      	bx	lr

08001614 <SSD1306_GotoXY>:

void SSD1306_GotoXY(ssd1306_t* ssd1306, uint16_t x, uint16_t y) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	ssd1306->CurrentX = x;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = y;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	883a      	ldrh	r2, [r7, #0]
 800162e:	815a      	strh	r2, [r3, #10]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SSD1306_Putc>:

char SSD1306_Putc(ssd1306_t* ssd1306, uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	461a      	mov	r2, r3
 8001648:	460b      	mov	r3, r1
 800164a:	72fb      	strb	r3, [r7, #11]
 800164c:	4613      	mov	r3, r2
 800164e:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	891b      	ldrh	r3, [r3, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
	if (
 800165c:	2b83      	cmp	r3, #131	; 0x83
 800165e:	dc07      	bgt.n	8001670 <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (ssd1306->CurrentY + Font->FontHeight)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	895b      	ldrh	r3, [r3, #10]
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 800166c:	2b3f      	cmp	r3, #63	; 0x3f
 800166e:	dd01      	ble.n	8001674 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8001670:	2300      	movs	r3, #0
 8001672:	e05e      	b.n	8001732 <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	e04b      	b.n	8001712 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	3b20      	subs	r3, #32
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	7849      	ldrb	r1, [r1, #1]
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4619      	mov	r1, r3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	440b      	add	r3, r1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	e030      	b.n	8001700 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d010      	beq.n	80016d0 <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t) color);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	891a      	ldrh	r2, [r3, #8]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b299      	uxth	r1, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	895a      	ldrh	r2, [r3, #10]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff ff33 	bl	8001534 <SSD1306_DrawPixel>
 80016ce:	e014      	b.n	80016fa <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t)!color);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	891a      	ldrh	r2, [r3, #8]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b299      	uxth	r1, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	895a      	ldrh	r2, [r3, #10]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	7abb      	ldrb	r3, [r7, #10]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff ff1d 	bl	8001534 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4293      	cmp	r3, r2
 800170a:	d3c8      	bcc.n	800169e <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	461a      	mov	r2, r3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4293      	cmp	r3, r2
 800171c:	d3ad      	bcc.n	800167a <SSD1306_Putc+0x3e>
			}
		}
	}
	
	/* Increase pointer */
	ssd1306->CurrentX += Font->FontWidth;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	891a      	ldrh	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4413      	add	r3, r2
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	811a      	strh	r2, [r3, #8]
	
	/* Return character written */
	return ch;
 8001730:	7afb      	ldrb	r3, [r7, #11]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <int_str>:
 * @brief  Represents an integer number with a char array
 * @param  integer: int to be represented
 * @param  unit: unit of the value, 2 char array ("mV", " A", etc.)
 * @retval Char array containing a char for each digit
 */
char* int_str(int integer,  char* unit){
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	466b      	mov	r3, sp
 8001748:	461d      	mov	r5, r3
	char negative = ' ';
 800174a:	2320      	movs	r3, #32
 800174c:	76fb      	strb	r3, [r7, #27]
	if (integer < 0) {
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	da04      	bge.n	800175e <int_str+0x22>
		integer = -integer;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	425b      	negs	r3, r3
 8001758:	607b      	str	r3, [r7, #4]
		negative = '-';
 800175a:	232d      	movs	r3, #45	; 0x2d
 800175c:	76fb      	strb	r3, [r7, #27]
	}

	int size = SSD1306_digits(integer);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f8da 	bl	8001918 <SSD1306_digits>
 8001764:	4603      	mov	r3, r0
 8001766:	617b      	str	r3, [r7, #20]
	if (size > 7){
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b07      	cmp	r3, #7
 800176c:	dd01      	ble.n	8001772 <int_str+0x36>
			return "OVERLOAD";
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <int_str+0xf8>)
 8001770:	e05b      	b.n	800182a <int_str+0xee>
	}
	char data_char[size];
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	1e43      	subs	r3, r0, #1
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	4603      	mov	r3, r0
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	f04f 0400 	mov.w	r4, #0
 8001788:	00d4      	lsls	r4, r2, #3
 800178a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800178e:	00cb      	lsls	r3, r1, #3
 8001790:	4603      	mov	r3, r0
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	f04f 0400 	mov.w	r4, #0
 80017a0:	00d4      	lsls	r4, r2, #3
 80017a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80017a6:	00cb      	lsls	r3, r1, #3
 80017a8:	4603      	mov	r3, r0
 80017aa:	3307      	adds	r3, #7
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	ebad 0d03 	sub.w	sp, sp, r3
 80017b4:	466b      	mov	r3, sp
 80017b6:	3300      	adds	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
	sprintf(data_char,"%d", integer);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	491e      	ldr	r1, [pc, #120]	; (8001838 <int_str+0xfc>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fc89 	bl	80040d8 <siprintf>

	static char int_str[11];
	for(int i=1; i<11; i++){
 80017c6:	2301      	movs	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e024      	b.n	8001816 <int_str+0xda>
		if (i<size+1){
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	da09      	bge.n	80017ea <int_str+0xae>
			int_str[i] = data_char[i-1];
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b01      	subs	r3, #1
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	5cd1      	ldrb	r1, [r2, r3]
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <int_str+0x100>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	460a      	mov	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	e012      	b.n	8001810 <int_str+0xd4>
		} else if (i < 9){
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	dc05      	bgt.n	80017fc <int_str+0xc0>
			int_str[i] = ' ';
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <int_str+0x100>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	2220      	movs	r2, #32
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e009      	b.n	8001810 <int_str+0xd4>
		} else {
			int_str[i] = unit[i-9];
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3b09      	subs	r3, #9
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	7819      	ldrb	r1, [r3, #0]
 8001806:	4a0d      	ldr	r2, [pc, #52]	; (800183c <int_str+0x100>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	460a      	mov	r2, r1
 800180e:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<11; i++){
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	3301      	adds	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b0a      	cmp	r3, #10
 800181a:	ddd7      	ble.n	80017cc <int_str+0x90>
		}
	}
	int_str[0] = negative;
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <int_str+0x100>)
 800181e:	7efb      	ldrb	r3, [r7, #27]
 8001820:	7013      	strb	r3, [r2, #0]
	int_str[8] = ' ';
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <int_str+0x100>)
 8001824:	2220      	movs	r2, #32
 8001826:	721a      	strb	r2, [r3, #8]
	return int_str;
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <int_str+0x100>)
 800182a:	46ad      	mov	sp, r5
}
 800182c:	4618      	mov	r0, r3
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	08004e28 	.word	0x08004e28
 8001838:	08004e34 	.word	0x08004e34
 800183c:	200000ac 	.word	0x200000ac

08001840 <SSD1306_Putint>:
 * @note   @ref If the number has mora than 6 digits, displays OVERLOAD
 * @param  data: integer to be written
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @param  slot: slot to be used. 1, 2, and 3 are large slots. 4 and 5 are small slots
 */
void SSD1306_Putint(ssd1306_t* ssd1306, int data, char* unit, uint8_t slot) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	70fb      	strb	r3, [r7, #3]

	char* integer_str = int_str(data, unit);
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	68b8      	ldr	r0, [r7, #8]
 8001852:	f7ff ff73 	bl	800173c <int_str>
 8001856:	61b8      	str	r0, [r7, #24]
	uint16_t x_slot = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	83fb      	strh	r3, [r7, #30]
	uint16_t y_slot = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	83bb      	strh	r3, [r7, #28]
	FontDef_t font = Font_11x18;
 8001860:	4a2a      	ldr	r2, [pc, #168]	; (800190c <SSD1306_Putint+0xcc>)
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800186a:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (slot) {
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	3b01      	subs	r3, #1
 8001872:	2b04      	cmp	r3, #4
 8001874:	d82b      	bhi.n	80018ce <SSD1306_Putint+0x8e>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <SSD1306_Putint+0x3c>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	08001891 	.word	0x08001891
 8001880:	08001897 	.word	0x08001897
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018a3 	.word	0x080018a3
 800188c:	080018b7 	.word	0x080018b7
	case 1:
		y_slot = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	83bb      	strh	r3, [r7, #28]
		break;
 8001894:	e01b      	b.n	80018ce <SSD1306_Putint+0x8e>
	case 2:
		y_slot = 17;
 8001896:	2311      	movs	r3, #17
 8001898:	83bb      	strh	r3, [r7, #28]
		break;
 800189a:	e018      	b.n	80018ce <SSD1306_Putint+0x8e>
	case 3:
		y_slot = 34;
 800189c:	2322      	movs	r3, #34	; 0x22
 800189e:	83bb      	strh	r3, [r7, #28]
		break;
 80018a0:	e015      	b.n	80018ce <SSD1306_Putint+0x8e>
	case 4:
		y_slot = 53;
 80018a2:	2335      	movs	r3, #53	; 0x35
 80018a4:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <SSD1306_Putint+0xd0>)
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b0:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80018b4:	e00b      	b.n	80018ce <SSD1306_Putint+0x8e>
	case 5:
		x_slot = 65;
 80018b6:	2341      	movs	r3, #65	; 0x41
 80018b8:	83fb      	strh	r3, [r7, #30]
		y_slot = 53;
 80018ba:	2335      	movs	r3, #53	; 0x35
 80018bc:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <SSD1306_Putint+0xd0>)
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c8:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80018cc:	bf00      	nop
	}
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80018ce:	8bba      	ldrh	r2, [r7, #28]
 80018d0:	8bfb      	ldrh	r3, [r7, #30]
 80018d2:	4619      	mov	r1, r3
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fe9d 	bl	8001614 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &font, 1);
 80018da:	f107 0210 	add.w	r2, r7, #16
 80018de:	2301      	movs	r3, #1
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <SSD1306_Putint+0xd4>)
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f84c 	bl	8001980 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80018e8:	8bba      	ldrh	r2, [r7, #28]
 80018ea:	8bfb      	ldrh	r3, [r7, #30]
 80018ec:	4619      	mov	r1, r3
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff fe90 	bl	8001614 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, integer_str, &font, 1);
 80018f4:	f107 0210 	add.w	r2, r7, #16
 80018f8:	2301      	movs	r3, #1
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f83f 	bl	8001980 <SSD1306_Puts>
}
 8001902:	bf00      	nop
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000010 	.word	0x20000010
 8001910:	20000008 	.word	0x20000008
 8001914:	08004e38 	.word	0x08004e38

08001918 <SSD1306_digits>:
/**
 * @brief  Calculates the number of digits needed to represent an integer
 * @param  int: integer to be processed
 * @retval Number of digits in an integer
 */
uint8_t SSD1306_digits(int integer){
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	uint8_t digits;
	if (integer==0){
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <SSD1306_digits+0x14>
		digits = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	e021      	b.n	8001970 <SSD1306_digits+0x58>
	}
	else {
		digits = floor(log10(integer))+1;
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7fe fdf9 	bl	8000524 <__aeabi_i2d>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	ec44 3b10 	vmov	d0, r3, r4
 800193a:	f002 ffa1 	bl	8004880 <log10>
 800193e:	eeb0 7a40 	vmov.f32	s14, s0
 8001942:	eef0 7a60 	vmov.f32	s15, s1
 8001946:	eeb0 0a47 	vmov.f32	s0, s14
 800194a:	eef0 0a67 	vmov.f32	s1, s15
 800194e:	f002 ff13 	bl	8004778 <floor>
 8001952:	ec51 0b10 	vmov	r0, r1, d0
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <SSD1306_digits+0x64>)
 800195c:	f7fe fc96 	bl	800028c <__adddf3>
 8001960:	4603      	mov	r3, r0
 8001962:	460c      	mov	r4, r1
 8001964:	4618      	mov	r0, r3
 8001966:	4621      	mov	r1, r4
 8001968:	f7ff f91e 	bl	8000ba8 <__aeabi_d2uiz>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
	}
	return digits;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	bf00      	nop
 800197c:	3ff00000 	.word	0x3ff00000

08001980 <SSD1306_Puts>:

char SSD1306_Puts(ssd1306_t* ssd1306, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str) {
 800198e:	e012      	b.n	80019b6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(ssd1306, *str, Font, color) != *str) {
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	7819      	ldrb	r1, [r3, #0]
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fe4f 	bl	800163c <SSD1306_Putc>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d002      	beq.n	80019b0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	e008      	b.n	80019c2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
	while (*str) {
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1e8      	bne.n	8001990 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <ssd1306_I2C_WriteMulti>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(ssd1306_t* ssd1306, uint8_t reg, uint8_t* data, uint16_t count) {
 80019ca:	b5b0      	push	{r4, r5, r7, lr}
 80019cc:	b08a      	sub	sp, #40	; 0x28
 80019ce:	af02      	add	r7, sp, #8
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	461a      	mov	r2, r3
 80019d6:	460b      	mov	r3, r1
 80019d8:	72fb      	strb	r3, [r7, #11]
 80019da:	4613      	mov	r3, r2
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	466b      	mov	r3, sp
 80019e0:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80019e2:	893b      	ldrh	r3, [r7, #8]
 80019e4:	1c58      	adds	r0, r3, #1
 80019e6:	1e43      	subs	r3, r0, #1
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	f04f 0400 	mov.w	r4, #0
 80019fa:	00d4      	lsls	r4, r2, #3
 80019fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a00:	00cb      	lsls	r3, r1, #3
 8001a02:	4603      	mov	r3, r0
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	f04f 0400 	mov.w	r4, #0
 8001a12:	00d4      	lsls	r4, r2, #3
 8001a14:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a18:	00cb      	lsls	r3, r1, #3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	3307      	adds	r3, #7
 8001a1e:	08db      	lsrs	r3, r3, #3
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	ebad 0d03 	sub.w	sp, sp, r3
 8001a26:	ab02      	add	r3, sp, #8
 8001a28:	3300      	adds	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
	dt[0] = reg;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	7afa      	ldrb	r2, [r7, #11]
 8001a30:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8001a32:	2301      	movs	r3, #1
 8001a34:	77fb      	strb	r3, [r7, #31]
 8001a36:	e00a      	b.n	8001a4e <ssd1306_I2C_WriteMulti+0x84>
		dt[i] = data[i-1];
 8001a38:	7ffb      	ldrb	r3, [r7, #31]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	441a      	add	r2, r3
 8001a40:	7ffb      	ldrb	r3, [r7, #31]
 8001a42:	7811      	ldrb	r1, [r2, #0]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	77fb      	strb	r3, [r7, #31]
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	893a      	ldrh	r2, [r7, #8]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d2ef      	bcs.n	8001a38 <ssd1306_I2C_WriteMulti+0x6e>
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, count, 10);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6858      	ldr	r0, [r3, #4]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b299      	uxth	r1, r3
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	893c      	ldrh	r4, [r7, #8]
 8001a66:	230a      	movs	r3, #10
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	f000 fde6 	bl	800263c <HAL_I2C_Master_Transmit>
 8001a70:	46ad      	mov	sp, r5
}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bdb0      	pop	{r4, r5, r7, pc}

08001a7a <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(ssd1306_t* ssd1306, uint8_t reg, uint8_t data) {
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]
 8001a86:	4613      	mov	r3, r2
 8001a88:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2];
	dt[0] = reg;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a8e:	78bb      	ldrb	r3, [r7, #2]
 8001a90:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, 2, 10);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6858      	ldr	r0, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	f107 020c 	add.w	r2, r7, #12
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	f000 fdc9 	bl	800263c <HAL_I2C_Master_Transmit>
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_I2C_MspInit+0xa4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d13c      	bne.n	8001ba0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_I2C_MspInit+0xa8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_I2C_MspInit+0xa8>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_I2C_MspInit+0xa8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b48:	2312      	movs	r3, #18
 8001b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b54:	2304      	movs	r3, #4
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <HAL_I2C_MspInit+0xac>)
 8001b60:	f000 fa98 	bl	8002094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b64:	2308      	movs	r3, #8
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001b74:	2309      	movs	r3, #9
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <HAL_I2C_MspInit+0xac>)
 8001b80:	f000 fa88 	bl	8002094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_I2C_MspInit+0xa8>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_I2C_MspInit+0xa8>)
 8001b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_I2C_MspInit+0xa8>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40005800 	.word	0x40005800
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d115      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_TIM_Base_MspInit+0x48>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_TIM_Base_MspInit+0x48>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_TIM_Base_MspInit+0x48>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	201c      	movs	r0, #28
 8001be8:	f000 fa1d 	bl	8002026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bec:	201c      	movs	r0, #28
 8001bee:	f000 fa36 	bl	800205e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f8ca 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM2_IRQHandler+0x10>)
 8001c62:	f001 fdc3 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000011c 	.word	0x2000011c

08001c70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <_sbrk+0x50>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x16>
		heap_end = &end;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <_sbrk+0x50>)
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <_sbrk+0x54>)
 8001c84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <_sbrk+0x50>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <_sbrk+0x50>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	466a      	mov	r2, sp
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d907      	bls.n	8001caa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c9a:	f002 f92b 	bl	8003ef4 <__errno>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	230c      	movs	r3, #12
 8001ca2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	e006      	b.n	8001cb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <_sbrk+0x50>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <_sbrk+0x50>)
 8001cb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200000b8 	.word	0x200000b8
 8001cc4:	20000168 	.word	0x20000168

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <SystemInit+0x28>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <SystemInit+0x28>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SystemInit+0x28>)
 8001cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cfa:	e003      	b.n	8001d04 <LoopCopyDataInit>

08001cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d02:	3104      	adds	r1, #4

08001d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d04:	480b      	ldr	r0, [pc, #44]	; (8001d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d0c:	d3f6      	bcc.n	8001cfc <CopyDataInit>
  ldr  r2, =_sbss
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d10:	e002      	b.n	8001d18 <LoopFillZerobss>

08001d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d14:	f842 3b04 	str.w	r3, [r2], #4

08001d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d1c:	d3f9      	bcc.n	8001d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d1e:	f7ff ffd3 	bl	8001cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f002 f8ed 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7ff f94b 	bl	8000fc0 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001d30:	08006370 	.word	0x08006370
  ldr  r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d38:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8001d3c:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8001d40:	20000164 	.word	0x20000164

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f94d 	bl	8002010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fe9a 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f965 	bl	800207a <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f92d 	bl	8002026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000018 	.word	0x20000018
 8001de4:	20000020 	.word	0x20000020
 8001de8:	2000001c 	.word	0x2000001c

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000020 	.word	0x20000020
 8001e10:	2000015c 	.word	0x2000015c

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	2000015c 	.word	0x2000015c

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_Delay+0x40>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000020 	.word	0x20000020

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <__NVIC_EnableIRQ+0x38>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fdc:	d301      	bcc.n	8001fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00f      	b.n	8002002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <SysTick_Config+0x40>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fea:	210f      	movs	r1, #15
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f7ff ff8e 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <SysTick_Config+0x40>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <SysTick_Config+0x40>)
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010

08002010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff29 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002038:	f7ff ff3e 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 800203c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	6978      	ldr	r0, [r7, #20]
 8002044:	f7ff ff8e 	bl	8001f64 <NVIC_EncodePriority>
 8002048:	4602      	mov	r2, r0
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff5d 	bl	8001f10 <__NVIC_SetPriority>
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff31 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffa2 	bl	8001fcc <SysTick_Config>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e159      	b.n	8002364 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8148 	bne.w	800235e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d00b      	beq.n	80020ee <HAL_GPIO_Init+0x5a>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e2:	2b11      	cmp	r3, #17
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d130      	bne.n	8002150 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 0201 	and.w	r2, r3, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0xfc>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b12      	cmp	r3, #18
 800218e:	d123      	bne.n	80021d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a2 	beq.w	800235e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_GPIO_Init+0x2e4>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a55      	ldr	r2, [pc, #340]	; (8002378 <HAL_GPIO_Init+0x2e4>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_GPIO_Init+0x2e4>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002236:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x202>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a47      	ldr	r2, [pc, #284]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x1fe>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x1fa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a45      	ldr	r2, [pc, #276]	; (800238c <HAL_GPIO_Init+0x2f8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x1f6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a44      	ldr	r2, [pc, #272]	; (8002390 <HAL_GPIO_Init+0x2fc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x1f2>
 8002282:	2304      	movs	r3, #4
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002286:	2307      	movs	r3, #7
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002296:	2300      	movs	r3, #0
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a8:	4934      	ldr	r1, [pc, #208]	; (800237c <HAL_GPIO_Init+0x2e8>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_GPIO_Init+0x300>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022da:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <HAL_GPIO_Init+0x300>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <HAL_GPIO_Init+0x300>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002304:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_GPIO_Init+0x300>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_GPIO_Init+0x300>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_GPIO_Init+0x300>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_GPIO_Init+0x300>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_GPIO_Init+0x300>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f67f aea2 	bls.w	80020b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800236c:	bf00      	nop
 800236e:	3724      	adds	r7, #36	; 0x24
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40013c00 	.word	0x40013c00

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b4:	e003      	b.n	80023be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e11f      	b.n	800261e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fb86 	bl	8001b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002430:	f001 f94e 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a7b      	ldr	r2, [pc, #492]	; (8002628 <HAL_I2C_Init+0x25c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d807      	bhi.n	8002450 <HAL_I2C_Init+0x84>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a7a      	ldr	r2, [pc, #488]	; (800262c <HAL_I2C_Init+0x260>)
 8002444:	4293      	cmp	r3, r2
 8002446:	bf94      	ite	ls
 8002448:	2301      	movls	r3, #1
 800244a:	2300      	movhi	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e006      	b.n	800245e <HAL_I2C_Init+0x92>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_I2C_Init+0x264>)
 8002454:	4293      	cmp	r3, r2
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0db      	b.n	800261e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a72      	ldr	r2, [pc, #456]	; (8002634 <HAL_I2C_Init+0x268>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a64      	ldr	r2, [pc, #400]	; (8002628 <HAL_I2C_Init+0x25c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d802      	bhi.n	80024a0 <HAL_I2C_Init+0xd4>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3301      	adds	r3, #1
 800249e:	e009      	b.n	80024b4 <HAL_I2C_Init+0xe8>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	4a63      	ldr	r2, [pc, #396]	; (8002638 <HAL_I2C_Init+0x26c>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	3301      	adds	r3, #1
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4956      	ldr	r1, [pc, #344]	; (8002628 <HAL_I2C_Init+0x25c>)
 80024d0:	428b      	cmp	r3, r1
 80024d2:	d80d      	bhi.n	80024f0 <HAL_I2C_Init+0x124>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1e59      	subs	r1, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	bf38      	it	cc
 80024ec:	2304      	movcc	r3, #4
 80024ee:	e04f      	b.n	8002590 <HAL_I2C_Init+0x1c4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <HAL_I2C_Init+0x150>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1e58      	subs	r0, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e012      	b.n	8002542 <HAL_I2C_Init+0x176>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e58      	subs	r0, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	0099      	lsls	r1, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Init+0x17e>
 8002546:	2301      	movs	r3, #1
 8002548:	e022      	b.n	8002590 <HAL_I2C_Init+0x1c4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10e      	bne.n	8002570 <HAL_I2C_Init+0x1a4>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1e58      	subs	r0, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	440b      	add	r3, r1
 8002560:	fbb0 f3f3 	udiv	r3, r0, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256e:	e00f      	b.n	8002590 <HAL_I2C_Init+0x1c4>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	0099      	lsls	r1, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	6809      	ldr	r1, [r1, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6911      	ldr	r1, [r2, #16]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68d2      	ldr	r2, [r2, #12]
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	000186a0 	.word	0x000186a0
 800262c:	001e847f 	.word	0x001e847f
 8002630:	003d08ff 	.word	0x003d08ff
 8002634:	431bde83 	.word	0x431bde83
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	461a      	mov	r2, r3
 8002648:	460b      	mov	r3, r1
 800264a:	817b      	strh	r3, [r7, #10]
 800264c:	4613      	mov	r3, r2
 800264e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff fbe0 	bl	8001e14 <HAL_GetTick>
 8002654:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b20      	cmp	r3, #32
 8002660:	f040 80e0 	bne.w	8002824 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2319      	movs	r3, #25
 800266a:	2201      	movs	r2, #1
 800266c:	4970      	ldr	r1, [pc, #448]	; (8002830 <HAL_I2C_Master_Transmit+0x1f4>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa92 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	e0d3      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_I2C_Master_Transmit+0x50>
 8002688:	2302      	movs	r3, #2
 800268a:	e0cc      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d007      	beq.n	80026b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2221      	movs	r2, #33	; 0x21
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2210      	movs	r2, #16
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a50      	ldr	r2, [pc, #320]	; (8002834 <HAL_I2C_Master_Transmit+0x1f8>)
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f9ca 	bl	8002a94 <I2C_MasterRequestWrite>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e08d      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002720:	e066      	b.n	80027f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	6a39      	ldr	r1, [r7, #32]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fb0c 	bl	8002d44 <I2C_WaitOnTXEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b04      	cmp	r3, #4
 8002738:	d107      	bne.n	800274a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_I2C_Master_Transmit+0x188>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	6a39      	ldr	r1, [r7, #32]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fafc 	bl	8002dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d107      	bne.n	80027ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e01a      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d194      	bne.n	8002722 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	00100002 	.word	0x00100002
 8002834:	ffff0000 	.word	0xffff0000

08002838 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff fae4 	bl	8001e14 <HAL_GetTick>
 800284c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 8110 	bne.w	8002a80 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2319      	movs	r3, #25
 8002866:	2201      	movs	r2, #1
 8002868:	4988      	ldr	r1, [pc, #544]	; (8002a8c <HAL_I2C_IsDeviceReady+0x254>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f994 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e103      	b.n	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_IsDeviceReady+0x50>
 8002884:	2302      	movs	r3, #2
 8002886:	e0fc      	b.n	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2224      	movs	r2, #36	; 0x24
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a70      	ldr	r2, [pc, #448]	; (8002a90 <HAL_I2C_IsDeviceReady+0x258>)
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f952 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0b6      	b.n	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002914:	897b      	ldrh	r3, [r7, #10]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002922:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002924:	f7ff fa76 	bl	8001e14 <HAL_GetTick>
 8002928:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b02      	cmp	r3, #2
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002958:	e025      	b.n	80029a6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800295a:	f7ff fa5b 	bl	8001e14 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d302      	bcc.n	8002970 <HAL_I2C_IsDeviceReady+0x138>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	22a0      	movs	r2, #160	; 0xa0
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2ba0      	cmp	r3, #160	; 0xa0
 80029b0:	d005      	beq.n	80029be <HAL_I2C_IsDeviceReady+0x186>
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <HAL_I2C_IsDeviceReady+0x186>
 80029b8:	7dbb      	ldrb	r3, [r7, #22]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0cd      	beq.n	800295a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d129      	bne.n	8002a28 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2319      	movs	r3, #25
 8002a00:	2201      	movs	r2, #1
 8002a02:	4922      	ldr	r1, [pc, #136]	; (8002a8c <HAL_I2C_IsDeviceReady+0x254>)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f8c7 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e036      	b.n	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e02c      	b.n	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a36:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a40:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2319      	movs	r3, #25
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4910      	ldr	r1, [pc, #64]	; (8002a8c <HAL_I2C_IsDeviceReady+0x254>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f8a3 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e012      	b.n	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	f4ff af33 	bcc.w	80028d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	00100002 	.word	0x00100002
 8002a90:	ffff0000 	.word	0xffff0000

08002a94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d006      	beq.n	8002abe <I2C_MasterRequestWrite+0x2a>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d003      	beq.n	8002abe <I2C_MasterRequestWrite+0x2a>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002abc:	d108      	bne.n	8002ad0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e00b      	b.n	8002ae8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	2b12      	cmp	r3, #18
 8002ad6:	d107      	bne.n	8002ae8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f84f 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00c      	beq.n	8002b1a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e035      	b.n	8002b86 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b22:	d108      	bne.n	8002b36 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b24:	897b      	ldrh	r3, [r7, #10]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b32:	611a      	str	r2, [r3, #16]
 8002b34:	e01b      	b.n	8002b6e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	11db      	asrs	r3, r3, #7
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f003 0306 	and.w	r3, r3, #6
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f063 030f 	orn	r3, r3, #15
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	490f      	ldr	r1, [pc, #60]	; (8002b90 <I2C_MasterRequestWrite+0xfc>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f876 	bl	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e010      	b.n	8002b86 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b64:	897b      	ldrh	r3, [r7, #10]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <I2C_MasterRequestWrite+0x100>)
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f866 	bl	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	00010008 	.word	0x00010008
 8002b94:	00010002 	.word	0x00010002

08002b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba8:	e025      	b.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d021      	beq.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7ff f92f 	bl	8001e14 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e023      	b.n	8002c3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10d      	bne.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	e00c      	b.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d0b6      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c54:	e051      	b.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d123      	bne.n	8002cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e046      	b.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d021      	beq.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7ff f8ad 	bl	8001e14 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e020      	b.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10c      	bne.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e00b      	b.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d18d      	bne.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d50:	e02d      	b.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f878 	bl	8002e48 <I2C_IsAcknowledgeFailed>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e02d      	b.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d021      	beq.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7ff f853 	bl	8001e14 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d116      	bne.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e007      	b.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b80      	cmp	r3, #128	; 0x80
 8002dba:	d1ca      	bne.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd2:	e02d      	b.n	8002e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f837 	bl	8002e48 <I2C_IsAcknowledgeFailed>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e02d      	b.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d021      	beq.n	8002e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7ff f812 	bl	8001e14 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d116      	bne.n	8002e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e007      	b.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d1ca      	bne.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5e:	d11b      	bne.n	8002e98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e25b      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d075      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ec6:	4ba3      	ldr	r3, [pc, #652]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d00c      	beq.n	8002eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4ba0      	ldr	r3, [pc, #640]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d112      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b9d      	ldr	r3, [pc, #628]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b99      	ldr	r3, [pc, #612]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d157      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e236      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x74>
 8002f0e:	4b91      	ldr	r3, [pc, #580]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a90      	ldr	r2, [pc, #576]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a8a      	ldr	r2, [pc, #552]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a87      	ldr	r2, [pc, #540]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f40:	4b84      	ldr	r3, [pc, #528]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a83      	ldr	r2, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b81      	ldr	r3, [pc, #516]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a80      	ldr	r2, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe ff58 	bl	8001e14 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe ff54 	bl	8001e14 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1fb      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe ff44 	bl	8001e14 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe ff40 	bl	8001e14 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1e7      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b62      	ldr	r3, [pc, #392]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11c      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1bb      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4952      	ldr	r1, [pc, #328]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	e03a      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003018:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <HAL_RCC_OscConfig+0x2b0>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fef9 	bl	8001e14 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003026:	f7fe fef5 	bl	8001e14 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e19c      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4940      	ldr	r1, [pc, #256]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_OscConfig+0x2b0>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fed8 	bl	8001e14 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003068:	f7fe fed4 	bl	8001e14 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e17b      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d030      	beq.n	80030f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_RCC_OscConfig+0x2b4>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe feb8 	bl	8001e14 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fe feb4 	bl	8001e14 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e15b      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x200>
 80030c6:	e015      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_RCC_OscConfig+0x2b4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fea1 	bl	8001e14 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fe fe9d 	bl	8001e14 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e144      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a0 	beq.w	8003242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x2b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d121      	bne.n	8003182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_RCC_OscConfig+0x2b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_RCC_OscConfig+0x2b8>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fe fe63 	bl	8001e14 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	e011      	b.n	8003176 <HAL_RCC_OscConfig+0x2ce>
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
 8003160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003164:	f7fe fe56 	bl	8001e14 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e0fd      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_RCC_OscConfig+0x4d4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d106      	bne.n	8003198 <HAL_RCC_OscConfig+0x2f0>
 800318a:	4b7d      	ldr	r3, [pc, #500]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a7c      	ldr	r2, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	e01c      	b.n	80031d2 <HAL_RCC_OscConfig+0x32a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x312>
 80031a0:	4b77      	ldr	r3, [pc, #476]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a76      	ldr	r2, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	4b74      	ldr	r3, [pc, #464]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a73      	ldr	r2, [pc, #460]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e00b      	b.n	80031d2 <HAL_RCC_OscConfig+0x32a>
 80031ba:	4b71      	ldr	r3, [pc, #452]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a70      	ldr	r2, [pc, #448]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b6e      	ldr	r3, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a6d      	ldr	r2, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fe fe1b 	bl	8001e14 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe fe17 	bl	8001e14 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0bc      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ee      	beq.n	80031e2 <HAL_RCC_OscConfig+0x33a>
 8003204:	e014      	b.n	8003230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fe fe05 	bl	8001e14 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fe01 	bl	8001e14 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0a6      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	4b56      	ldr	r3, [pc, #344]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b52      	ldr	r3, [pc, #328]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a51      	ldr	r2, [pc, #324]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8092 	beq.w	8003370 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324c:	4b4c      	ldr	r3, [pc, #304]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d05c      	beq.n	8003312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d141      	bne.n	80032e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003260:	4b48      	ldr	r3, [pc, #288]	; (8003384 <HAL_RCC_OscConfig+0x4dc>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe fdd5 	bl	8001e14 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe fdd1 	bl	8001e14 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e078      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	019b      	lsls	r3, r3, #6
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	4933      	ldr	r1, [pc, #204]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b6:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fdaa 	bl	8001e14 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fda6 	bl	8001e14 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e04d      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x41c>
 80032e2:	e045      	b.n	8003370 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x4dc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe fd93 	bl	8001e14 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe fd8f 	bl	8001e14 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e036      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x44a>
 8003310:	e02e      	b.n	8003370 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e029      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	429a      	cmp	r2, r3
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d115      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003346:	4013      	ands	r3, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334c:	4293      	cmp	r3, r2
 800334e:	d10d      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000
 8003380:	40023800 	.word	0x40023800
 8003384:	42470060 	.word	0x42470060

08003388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0cc      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b68      	ldr	r3, [pc, #416]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d90c      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d044      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d119      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d003      	beq.n	8003446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	2b03      	cmp	r3, #3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e067      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4934      	ldr	r1, [pc, #208]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe fccc 	bl	8001e14 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe fcc8 	bl	8001e14 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e04f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d20c      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4601      	mov	r1, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	fa21 f303 	lsr.w	r3, r1, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fc2c 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	0800630c 	.word	0x0800630c
 800354c:	20000018 	.word	0x20000018
 8003550:	2000001c 	.word	0x2000001c

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356a:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_GetSysClockFreq+0x158>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d007      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x32>
 8003576:	2b08      	cmp	r3, #8
 8003578:	d008      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x38>
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 808d 	bne.w	800369a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003580:	4b4b      	ldr	r3, [pc, #300]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003582:	60bb      	str	r3, [r7, #8]
       break;
 8003584:	e08c      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003586:	4b4b      	ldr	r3, [pc, #300]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003588:	60bb      	str	r3, [r7, #8]
      break;
 800358a:	e089      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800358c:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_GetSysClockFreq+0x158>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003594:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003596:	4b45      	ldr	r3, [pc, #276]	; (80036ac <HAL_RCC_GetSysClockFreq+0x158>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d023      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a2:	4b42      	ldr	r3, [pc, #264]	; (80036ac <HAL_RCC_GetSysClockFreq+0x158>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	ea03 0501 	and.w	r5, r3, r1
 80035b8:	ea04 0602 	and.w	r6, r4, r2
 80035bc:	4a3d      	ldr	r2, [pc, #244]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80035be:	fb02 f106 	mul.w	r1, r2, r6
 80035c2:	2200      	movs	r2, #0
 80035c4:	fb02 f205 	mul.w	r2, r2, r5
 80035c8:	440a      	add	r2, r1
 80035ca:	493a      	ldr	r1, [pc, #232]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80035cc:	fba5 0101 	umull	r0, r1, r5, r1
 80035d0:	1853      	adds	r3, r2, r1
 80035d2:	4619      	mov	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f04f 0400 	mov.w	r4, #0
 80035da:	461a      	mov	r2, r3
 80035dc:	4623      	mov	r3, r4
 80035de:	f7fd fb03 	bl	8000be8 <__aeabi_uldivmod>
 80035e2:	4603      	mov	r3, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e049      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ea:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_RCC_GetSysClockFreq+0x158>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	f04f 0400 	mov.w	r4, #0
 80035f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	ea03 0501 	and.w	r5, r3, r1
 8003600:	ea04 0602 	and.w	r6, r4, r2
 8003604:	4629      	mov	r1, r5
 8003606:	4632      	mov	r2, r6
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	f04f 0400 	mov.w	r4, #0
 8003610:	0154      	lsls	r4, r2, #5
 8003612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003616:	014b      	lsls	r3, r1, #5
 8003618:	4619      	mov	r1, r3
 800361a:	4622      	mov	r2, r4
 800361c:	1b49      	subs	r1, r1, r5
 800361e:	eb62 0206 	sbc.w	r2, r2, r6
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	f04f 0400 	mov.w	r4, #0
 800362a:	0194      	lsls	r4, r2, #6
 800362c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003630:	018b      	lsls	r3, r1, #6
 8003632:	1a5b      	subs	r3, r3, r1
 8003634:	eb64 0402 	sbc.w	r4, r4, r2
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	00e2      	lsls	r2, r4, #3
 8003642:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003646:	00d9      	lsls	r1, r3, #3
 8003648:	460b      	mov	r3, r1
 800364a:	4614      	mov	r4, r2
 800364c:	195b      	adds	r3, r3, r5
 800364e:	eb44 0406 	adc.w	r4, r4, r6
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	02a2      	lsls	r2, r4, #10
 800365c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003660:	0299      	lsls	r1, r3, #10
 8003662:	460b      	mov	r3, r1
 8003664:	4614      	mov	r4, r2
 8003666:	4618      	mov	r0, r3
 8003668:	4621      	mov	r1, r4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	461a      	mov	r2, r3
 8003672:	4623      	mov	r3, r4
 8003674:	f7fd fab8 	bl	8000be8 <__aeabi_uldivmod>
 8003678:	4603      	mov	r3, r0
 800367a:	460c      	mov	r4, r1
 800367c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_GetSysClockFreq+0x158>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	3301      	adds	r3, #1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	fbb2 f3f3 	udiv	r3, r2, r3
 8003696:	60bb      	str	r3, [r7, #8]
      break;
 8003698:	e002      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800369c:	60bb      	str	r3, [r7, #8]
      break;
 800369e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a0:	68bb      	ldr	r3, [r7, #8]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	017d7840 	.word	0x017d7840

080036b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000018 	.word	0x20000018

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d4:	f7ff fff0 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036d8:	4601      	mov	r1, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0a9b      	lsrs	r3, r3, #10
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4a03      	ldr	r2, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	0800631c 	.word	0x0800631c

080036f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e01d      	b.n	8003746 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe fa48 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f000 fa40 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d007      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_Base_Stop_IT+0x48>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_Base_Stop_IT+0x48>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0202 	mvn.w	r2, #2
 8003818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9a5 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f997 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f9a8 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0204 	mvn.w	r2, #4
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f97b 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f96d 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f97e 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0208 	mvn.w	r2, #8
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f951 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f943 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f954 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0210 	mvn.w	r2, #16
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2208      	movs	r2, #8
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f927 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f919 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f92a 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0201 	mvn.w	r2, #1
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fb06 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 faa2 	bl	8003ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d10e      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d107      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8ef 	bl	8003ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d10e      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0220 	mvn.w	r2, #32
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa6c 	bl	8003ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0a6      	b.n	8003b62 <HAL_TIM_ConfigClockSource+0x166>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d067      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x120>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d80b      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x6c>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d073      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d802      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x62>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d06f      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a5c:	e078      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d06c      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
 8003a62:	2b30      	cmp	r3, #48	; 0x30
 8003a64:	d06a      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a66:	e073      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d00d      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x8c>
 8003a6c:	2b70      	cmp	r3, #112	; 0x70
 8003a6e:	d804      	bhi.n	8003a7a <HAL_TIM_ConfigClockSource+0x7e>
 8003a70:	2b50      	cmp	r3, #80	; 0x50
 8003a72:	d033      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0xe0>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d041      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a78:	e06a      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7e:	d066      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x152>
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d017      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a86:	e063      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f000 f98a 	bl	8003db0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aaa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	609a      	str	r2, [r3, #8]
      break;
 8003ab4:	e04c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f000 f973 	bl	8003db0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad8:	609a      	str	r2, [r3, #8]
      break;
 8003ada:	e039      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f000 f8e7 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2150      	movs	r1, #80	; 0x50
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f940 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003afa:	e029      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f000 f906 	bl	8003d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2160      	movs	r1, #96	; 0x60
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f930 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e019      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f000 f8c7 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f920 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003b3a:	e009      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 f917 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e000      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <TIM_Base_SetConfig+0xe4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00f      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bda:	d00b      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <TIM_Base_SetConfig+0xe8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <TIM_Base_SetConfig+0xec>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <TIM_Base_SetConfig+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <TIM_Base_SetConfig+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01b      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d017      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <TIM_Base_SetConfig+0xe8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <TIM_Base_SetConfig+0xec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <TIM_Base_SetConfig+0xf0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <TIM_Base_SetConfig+0xf4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <TIM_Base_SetConfig+0xf8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <TIM_Base_SetConfig+0xfc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <TIM_Base_SetConfig+0xe4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d103      	bne.n	8003c8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	615a      	str	r2, [r3, #20]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f023 030a 	bic.w	r3, r3, #10
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f023 0210 	bic.w	r2, r3, #16
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	031b      	lsls	r3, r3, #12
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f043 0307 	orr.w	r3, r3, #7
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e050      	b.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d018      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d013      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10c      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	40014000 	.word	0x40014000

08003ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <__errno>:
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <__errno+0x8>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000024 	.word	0x20000024

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4e0d      	ldr	r6, [pc, #52]	; (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1ba4      	subs	r4, r4, r6
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	42a5      	cmp	r5, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4e0b      	ldr	r6, [pc, #44]	; (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	; (8003f44 <__libc_init_array+0x44>)
 8003f14:	f000 ff7a 	bl	8004e0c <_init>
 8003f18:	1ba4      	subs	r4, r4, r6
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2500      	movs	r5, #0
 8003f1e:	42a5      	cmp	r5, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f28:	4798      	blx	r3
 8003f2a:	3501      	adds	r5, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f32:	4798      	blx	r3
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	08006368 	.word	0x08006368
 8003f3c:	08006368 	.word	0x08006368
 8003f40:	08006368 	.word	0x08006368
 8003f44:	0800636c 	.word	0x0800636c

08003f48 <malloc>:
 8003f48:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <malloc+0xc>)
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	f000 b859 	b.w	8004004 <_malloc_r>
 8003f52:	bf00      	nop
 8003f54:	20000024 	.word	0x20000024

08003f58 <memset>:
 8003f58:	4402      	add	r2, r0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d100      	bne.n	8003f62 <memset+0xa>
 8003f60:	4770      	bx	lr
 8003f62:	f803 1b01 	strb.w	r1, [r3], #1
 8003f66:	e7f9      	b.n	8003f5c <memset+0x4>

08003f68 <_free_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	2900      	cmp	r1, #0
 8003f6e:	d045      	beq.n	8003ffc <_free_r+0x94>
 8003f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f74:	1f0c      	subs	r4, r1, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bfb8      	it	lt
 8003f7a:	18e4      	addlt	r4, r4, r3
 8003f7c:	f000 f8cc 	bl	8004118 <__malloc_lock>
 8003f80:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <_free_r+0x98>)
 8003f82:	6813      	ldr	r3, [r2, #0]
 8003f84:	4610      	mov	r0, r2
 8003f86:	b933      	cbnz	r3, 8003f96 <_free_r+0x2e>
 8003f88:	6063      	str	r3, [r4, #4]
 8003f8a:	6014      	str	r4, [r2, #0]
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f92:	f000 b8c2 	b.w	800411a <__malloc_unlock>
 8003f96:	42a3      	cmp	r3, r4
 8003f98:	d90c      	bls.n	8003fb4 <_free_r+0x4c>
 8003f9a:	6821      	ldr	r1, [r4, #0]
 8003f9c:	1862      	adds	r2, r4, r1
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	bf04      	itt	eq
 8003fa2:	681a      	ldreq	r2, [r3, #0]
 8003fa4:	685b      	ldreq	r3, [r3, #4]
 8003fa6:	6063      	str	r3, [r4, #4]
 8003fa8:	bf04      	itt	eq
 8003faa:	1852      	addeq	r2, r2, r1
 8003fac:	6022      	streq	r2, [r4, #0]
 8003fae:	6004      	str	r4, [r0, #0]
 8003fb0:	e7ec      	b.n	8003f8c <_free_r+0x24>
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	b10a      	cbz	r2, 8003fbc <_free_r+0x54>
 8003fb8:	42a2      	cmp	r2, r4
 8003fba:	d9fa      	bls.n	8003fb2 <_free_r+0x4a>
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	1858      	adds	r0, r3, r1
 8003fc0:	42a0      	cmp	r0, r4
 8003fc2:	d10b      	bne.n	8003fdc <_free_r+0x74>
 8003fc4:	6820      	ldr	r0, [r4, #0]
 8003fc6:	4401      	add	r1, r0
 8003fc8:	1858      	adds	r0, r3, r1
 8003fca:	4282      	cmp	r2, r0
 8003fcc:	6019      	str	r1, [r3, #0]
 8003fce:	d1dd      	bne.n	8003f8c <_free_r+0x24>
 8003fd0:	6810      	ldr	r0, [r2, #0]
 8003fd2:	6852      	ldr	r2, [r2, #4]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	4401      	add	r1, r0
 8003fd8:	6019      	str	r1, [r3, #0]
 8003fda:	e7d7      	b.n	8003f8c <_free_r+0x24>
 8003fdc:	d902      	bls.n	8003fe4 <_free_r+0x7c>
 8003fde:	230c      	movs	r3, #12
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	e7d3      	b.n	8003f8c <_free_r+0x24>
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	1821      	adds	r1, r4, r0
 8003fe8:	428a      	cmp	r2, r1
 8003fea:	bf04      	itt	eq
 8003fec:	6811      	ldreq	r1, [r2, #0]
 8003fee:	6852      	ldreq	r2, [r2, #4]
 8003ff0:	6062      	str	r2, [r4, #4]
 8003ff2:	bf04      	itt	eq
 8003ff4:	1809      	addeq	r1, r1, r0
 8003ff6:	6021      	streq	r1, [r4, #0]
 8003ff8:	605c      	str	r4, [r3, #4]
 8003ffa:	e7c7      	b.n	8003f8c <_free_r+0x24>
 8003ffc:	bd38      	pop	{r3, r4, r5, pc}
 8003ffe:	bf00      	nop
 8004000:	200000bc 	.word	0x200000bc

08004004 <_malloc_r>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	1ccd      	adds	r5, r1, #3
 8004008:	f025 0503 	bic.w	r5, r5, #3
 800400c:	3508      	adds	r5, #8
 800400e:	2d0c      	cmp	r5, #12
 8004010:	bf38      	it	cc
 8004012:	250c      	movcc	r5, #12
 8004014:	2d00      	cmp	r5, #0
 8004016:	4606      	mov	r6, r0
 8004018:	db01      	blt.n	800401e <_malloc_r+0x1a>
 800401a:	42a9      	cmp	r1, r5
 800401c:	d903      	bls.n	8004026 <_malloc_r+0x22>
 800401e:	230c      	movs	r3, #12
 8004020:	6033      	str	r3, [r6, #0]
 8004022:	2000      	movs	r0, #0
 8004024:	bd70      	pop	{r4, r5, r6, pc}
 8004026:	f000 f877 	bl	8004118 <__malloc_lock>
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <_malloc_r+0xac>)
 800402c:	6814      	ldr	r4, [r2, #0]
 800402e:	4621      	mov	r1, r4
 8004030:	b991      	cbnz	r1, 8004058 <_malloc_r+0x54>
 8004032:	4c20      	ldr	r4, [pc, #128]	; (80040b4 <_malloc_r+0xb0>)
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	b91b      	cbnz	r3, 8004040 <_malloc_r+0x3c>
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f83d 	bl	80040b8 <_sbrk_r>
 800403e:	6020      	str	r0, [r4, #0]
 8004040:	4629      	mov	r1, r5
 8004042:	4630      	mov	r0, r6
 8004044:	f000 f838 	bl	80040b8 <_sbrk_r>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d124      	bne.n	8004096 <_malloc_r+0x92>
 800404c:	230c      	movs	r3, #12
 800404e:	6033      	str	r3, [r6, #0]
 8004050:	4630      	mov	r0, r6
 8004052:	f000 f862 	bl	800411a <__malloc_unlock>
 8004056:	e7e4      	b.n	8004022 <_malloc_r+0x1e>
 8004058:	680b      	ldr	r3, [r1, #0]
 800405a:	1b5b      	subs	r3, r3, r5
 800405c:	d418      	bmi.n	8004090 <_malloc_r+0x8c>
 800405e:	2b0b      	cmp	r3, #11
 8004060:	d90f      	bls.n	8004082 <_malloc_r+0x7e>
 8004062:	600b      	str	r3, [r1, #0]
 8004064:	50cd      	str	r5, [r1, r3]
 8004066:	18cc      	adds	r4, r1, r3
 8004068:	4630      	mov	r0, r6
 800406a:	f000 f856 	bl	800411a <__malloc_unlock>
 800406e:	f104 000b 	add.w	r0, r4, #11
 8004072:	1d23      	adds	r3, r4, #4
 8004074:	f020 0007 	bic.w	r0, r0, #7
 8004078:	1ac3      	subs	r3, r0, r3
 800407a:	d0d3      	beq.n	8004024 <_malloc_r+0x20>
 800407c:	425a      	negs	r2, r3
 800407e:	50e2      	str	r2, [r4, r3]
 8004080:	e7d0      	b.n	8004024 <_malloc_r+0x20>
 8004082:	428c      	cmp	r4, r1
 8004084:	684b      	ldr	r3, [r1, #4]
 8004086:	bf16      	itet	ne
 8004088:	6063      	strne	r3, [r4, #4]
 800408a:	6013      	streq	r3, [r2, #0]
 800408c:	460c      	movne	r4, r1
 800408e:	e7eb      	b.n	8004068 <_malloc_r+0x64>
 8004090:	460c      	mov	r4, r1
 8004092:	6849      	ldr	r1, [r1, #4]
 8004094:	e7cc      	b.n	8004030 <_malloc_r+0x2c>
 8004096:	1cc4      	adds	r4, r0, #3
 8004098:	f024 0403 	bic.w	r4, r4, #3
 800409c:	42a0      	cmp	r0, r4
 800409e:	d005      	beq.n	80040ac <_malloc_r+0xa8>
 80040a0:	1a21      	subs	r1, r4, r0
 80040a2:	4630      	mov	r0, r6
 80040a4:	f000 f808 	bl	80040b8 <_sbrk_r>
 80040a8:	3001      	adds	r0, #1
 80040aa:	d0cf      	beq.n	800404c <_malloc_r+0x48>
 80040ac:	6025      	str	r5, [r4, #0]
 80040ae:	e7db      	b.n	8004068 <_malloc_r+0x64>
 80040b0:	200000bc 	.word	0x200000bc
 80040b4:	200000c0 	.word	0x200000c0

080040b8 <_sbrk_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4c06      	ldr	r4, [pc, #24]	; (80040d4 <_sbrk_r+0x1c>)
 80040bc:	2300      	movs	r3, #0
 80040be:	4605      	mov	r5, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	f7fd fdd4 	bl	8001c70 <_sbrk>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_sbrk_r+0x1a>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_sbrk_r+0x1a>
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	20000160 	.word	0x20000160

080040d8 <siprintf>:
 80040d8:	b40e      	push	{r1, r2, r3}
 80040da:	b500      	push	{lr}
 80040dc:	b09c      	sub	sp, #112	; 0x70
 80040de:	ab1d      	add	r3, sp, #116	; 0x74
 80040e0:	9002      	str	r0, [sp, #8]
 80040e2:	9006      	str	r0, [sp, #24]
 80040e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040e8:	4809      	ldr	r0, [pc, #36]	; (8004110 <siprintf+0x38>)
 80040ea:	9107      	str	r1, [sp, #28]
 80040ec:	9104      	str	r1, [sp, #16]
 80040ee:	4909      	ldr	r1, [pc, #36]	; (8004114 <siprintf+0x3c>)
 80040f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f4:	9105      	str	r1, [sp, #20]
 80040f6:	6800      	ldr	r0, [r0, #0]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	a902      	add	r1, sp, #8
 80040fc:	f000 f868 	bl	80041d0 <_svfiprintf_r>
 8004100:	9b02      	ldr	r3, [sp, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	b01c      	add	sp, #112	; 0x70
 8004108:	f85d eb04 	ldr.w	lr, [sp], #4
 800410c:	b003      	add	sp, #12
 800410e:	4770      	bx	lr
 8004110:	20000024 	.word	0x20000024
 8004114:	ffff0208 	.word	0xffff0208

08004118 <__malloc_lock>:
 8004118:	4770      	bx	lr

0800411a <__malloc_unlock>:
 800411a:	4770      	bx	lr

0800411c <__ssputs_r>:
 800411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	688e      	ldr	r6, [r1, #8]
 8004122:	429e      	cmp	r6, r3
 8004124:	4682      	mov	sl, r0
 8004126:	460c      	mov	r4, r1
 8004128:	4690      	mov	r8, r2
 800412a:	4699      	mov	r9, r3
 800412c:	d837      	bhi.n	800419e <__ssputs_r+0x82>
 800412e:	898a      	ldrh	r2, [r1, #12]
 8004130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004134:	d031      	beq.n	800419a <__ssputs_r+0x7e>
 8004136:	6825      	ldr	r5, [r4, #0]
 8004138:	6909      	ldr	r1, [r1, #16]
 800413a:	1a6f      	subs	r7, r5, r1
 800413c:	6965      	ldr	r5, [r4, #20]
 800413e:	2302      	movs	r3, #2
 8004140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004144:	fb95 f5f3 	sdiv	r5, r5, r3
 8004148:	f109 0301 	add.w	r3, r9, #1
 800414c:	443b      	add	r3, r7
 800414e:	429d      	cmp	r5, r3
 8004150:	bf38      	it	cc
 8004152:	461d      	movcc	r5, r3
 8004154:	0553      	lsls	r3, r2, #21
 8004156:	d530      	bpl.n	80041ba <__ssputs_r+0x9e>
 8004158:	4629      	mov	r1, r5
 800415a:	f7ff ff53 	bl	8004004 <_malloc_r>
 800415e:	4606      	mov	r6, r0
 8004160:	b950      	cbnz	r0, 8004178 <__ssputs_r+0x5c>
 8004162:	230c      	movs	r3, #12
 8004164:	f8ca 3000 	str.w	r3, [sl]
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416e:	81a3      	strh	r3, [r4, #12]
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004178:	463a      	mov	r2, r7
 800417a:	6921      	ldr	r1, [r4, #16]
 800417c:	f000 faa8 	bl	80046d0 <memcpy>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	6126      	str	r6, [r4, #16]
 800418e:	6165      	str	r5, [r4, #20]
 8004190:	443e      	add	r6, r7
 8004192:	1bed      	subs	r5, r5, r7
 8004194:	6026      	str	r6, [r4, #0]
 8004196:	60a5      	str	r5, [r4, #8]
 8004198:	464e      	mov	r6, r9
 800419a:	454e      	cmp	r6, r9
 800419c:	d900      	bls.n	80041a0 <__ssputs_r+0x84>
 800419e:	464e      	mov	r6, r9
 80041a0:	4632      	mov	r2, r6
 80041a2:	4641      	mov	r1, r8
 80041a4:	6820      	ldr	r0, [r4, #0]
 80041a6:	f000 fa9e 	bl	80046e6 <memmove>
 80041aa:	68a3      	ldr	r3, [r4, #8]
 80041ac:	1b9b      	subs	r3, r3, r6
 80041ae:	60a3      	str	r3, [r4, #8]
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	441e      	add	r6, r3
 80041b4:	6026      	str	r6, [r4, #0]
 80041b6:	2000      	movs	r0, #0
 80041b8:	e7dc      	b.n	8004174 <__ssputs_r+0x58>
 80041ba:	462a      	mov	r2, r5
 80041bc:	f000 faac 	bl	8004718 <_realloc_r>
 80041c0:	4606      	mov	r6, r0
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d1e2      	bne.n	800418c <__ssputs_r+0x70>
 80041c6:	6921      	ldr	r1, [r4, #16]
 80041c8:	4650      	mov	r0, sl
 80041ca:	f7ff fecd 	bl	8003f68 <_free_r>
 80041ce:	e7c8      	b.n	8004162 <__ssputs_r+0x46>

080041d0 <_svfiprintf_r>:
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	461d      	mov	r5, r3
 80041d6:	898b      	ldrh	r3, [r1, #12]
 80041d8:	061f      	lsls	r7, r3, #24
 80041da:	b09d      	sub	sp, #116	; 0x74
 80041dc:	4680      	mov	r8, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	4616      	mov	r6, r2
 80041e2:	d50f      	bpl.n	8004204 <_svfiprintf_r+0x34>
 80041e4:	690b      	ldr	r3, [r1, #16]
 80041e6:	b96b      	cbnz	r3, 8004204 <_svfiprintf_r+0x34>
 80041e8:	2140      	movs	r1, #64	; 0x40
 80041ea:	f7ff ff0b 	bl	8004004 <_malloc_r>
 80041ee:	6020      	str	r0, [r4, #0]
 80041f0:	6120      	str	r0, [r4, #16]
 80041f2:	b928      	cbnz	r0, 8004200 <_svfiprintf_r+0x30>
 80041f4:	230c      	movs	r3, #12
 80041f6:	f8c8 3000 	str.w	r3, [r8]
 80041fa:	f04f 30ff 	mov.w	r0, #4294967295
 80041fe:	e0c8      	b.n	8004392 <_svfiprintf_r+0x1c2>
 8004200:	2340      	movs	r3, #64	; 0x40
 8004202:	6163      	str	r3, [r4, #20]
 8004204:	2300      	movs	r3, #0
 8004206:	9309      	str	r3, [sp, #36]	; 0x24
 8004208:	2320      	movs	r3, #32
 800420a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800420e:	2330      	movs	r3, #48	; 0x30
 8004210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004214:	9503      	str	r5, [sp, #12]
 8004216:	f04f 0b01 	mov.w	fp, #1
 800421a:	4637      	mov	r7, r6
 800421c:	463d      	mov	r5, r7
 800421e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004222:	b10b      	cbz	r3, 8004228 <_svfiprintf_r+0x58>
 8004224:	2b25      	cmp	r3, #37	; 0x25
 8004226:	d13e      	bne.n	80042a6 <_svfiprintf_r+0xd6>
 8004228:	ebb7 0a06 	subs.w	sl, r7, r6
 800422c:	d00b      	beq.n	8004246 <_svfiprintf_r+0x76>
 800422e:	4653      	mov	r3, sl
 8004230:	4632      	mov	r2, r6
 8004232:	4621      	mov	r1, r4
 8004234:	4640      	mov	r0, r8
 8004236:	f7ff ff71 	bl	800411c <__ssputs_r>
 800423a:	3001      	adds	r0, #1
 800423c:	f000 80a4 	beq.w	8004388 <_svfiprintf_r+0x1b8>
 8004240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004242:	4453      	add	r3, sl
 8004244:	9309      	str	r3, [sp, #36]	; 0x24
 8004246:	783b      	ldrb	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 809d 	beq.w	8004388 <_svfiprintf_r+0x1b8>
 800424e:	2300      	movs	r3, #0
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	9307      	str	r3, [sp, #28]
 800425c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004260:	931a      	str	r3, [sp, #104]	; 0x68
 8004262:	462f      	mov	r7, r5
 8004264:	2205      	movs	r2, #5
 8004266:	f817 1b01 	ldrb.w	r1, [r7], #1
 800426a:	4850      	ldr	r0, [pc, #320]	; (80043ac <_svfiprintf_r+0x1dc>)
 800426c:	f7fb ffb8 	bl	80001e0 <memchr>
 8004270:	9b04      	ldr	r3, [sp, #16]
 8004272:	b9d0      	cbnz	r0, 80042aa <_svfiprintf_r+0xda>
 8004274:	06d9      	lsls	r1, r3, #27
 8004276:	bf44      	itt	mi
 8004278:	2220      	movmi	r2, #32
 800427a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800427e:	071a      	lsls	r2, r3, #28
 8004280:	bf44      	itt	mi
 8004282:	222b      	movmi	r2, #43	; 0x2b
 8004284:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004288:	782a      	ldrb	r2, [r5, #0]
 800428a:	2a2a      	cmp	r2, #42	; 0x2a
 800428c:	d015      	beq.n	80042ba <_svfiprintf_r+0xea>
 800428e:	9a07      	ldr	r2, [sp, #28]
 8004290:	462f      	mov	r7, r5
 8004292:	2000      	movs	r0, #0
 8004294:	250a      	movs	r5, #10
 8004296:	4639      	mov	r1, r7
 8004298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800429c:	3b30      	subs	r3, #48	; 0x30
 800429e:	2b09      	cmp	r3, #9
 80042a0:	d94d      	bls.n	800433e <_svfiprintf_r+0x16e>
 80042a2:	b1b8      	cbz	r0, 80042d4 <_svfiprintf_r+0x104>
 80042a4:	e00f      	b.n	80042c6 <_svfiprintf_r+0xf6>
 80042a6:	462f      	mov	r7, r5
 80042a8:	e7b8      	b.n	800421c <_svfiprintf_r+0x4c>
 80042aa:	4a40      	ldr	r2, [pc, #256]	; (80043ac <_svfiprintf_r+0x1dc>)
 80042ac:	1a80      	subs	r0, r0, r2
 80042ae:	fa0b f000 	lsl.w	r0, fp, r0
 80042b2:	4318      	orrs	r0, r3
 80042b4:	9004      	str	r0, [sp, #16]
 80042b6:	463d      	mov	r5, r7
 80042b8:	e7d3      	b.n	8004262 <_svfiprintf_r+0x92>
 80042ba:	9a03      	ldr	r2, [sp, #12]
 80042bc:	1d11      	adds	r1, r2, #4
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	9103      	str	r1, [sp, #12]
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	db01      	blt.n	80042ca <_svfiprintf_r+0xfa>
 80042c6:	9207      	str	r2, [sp, #28]
 80042c8:	e004      	b.n	80042d4 <_svfiprintf_r+0x104>
 80042ca:	4252      	negs	r2, r2
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	9207      	str	r2, [sp, #28]
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	783b      	ldrb	r3, [r7, #0]
 80042d6:	2b2e      	cmp	r3, #46	; 0x2e
 80042d8:	d10c      	bne.n	80042f4 <_svfiprintf_r+0x124>
 80042da:	787b      	ldrb	r3, [r7, #1]
 80042dc:	2b2a      	cmp	r3, #42	; 0x2a
 80042de:	d133      	bne.n	8004348 <_svfiprintf_r+0x178>
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	1d1a      	adds	r2, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	9203      	str	r2, [sp, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bfb8      	it	lt
 80042ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80042f0:	3702      	adds	r7, #2
 80042f2:	9305      	str	r3, [sp, #20]
 80042f4:	4d2e      	ldr	r5, [pc, #184]	; (80043b0 <_svfiprintf_r+0x1e0>)
 80042f6:	7839      	ldrb	r1, [r7, #0]
 80042f8:	2203      	movs	r2, #3
 80042fa:	4628      	mov	r0, r5
 80042fc:	f7fb ff70 	bl	80001e0 <memchr>
 8004300:	b138      	cbz	r0, 8004312 <_svfiprintf_r+0x142>
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	1b40      	subs	r0, r0, r5
 8004306:	fa03 f000 	lsl.w	r0, r3, r0
 800430a:	9b04      	ldr	r3, [sp, #16]
 800430c:	4303      	orrs	r3, r0
 800430e:	3701      	adds	r7, #1
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	7839      	ldrb	r1, [r7, #0]
 8004314:	4827      	ldr	r0, [pc, #156]	; (80043b4 <_svfiprintf_r+0x1e4>)
 8004316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800431a:	2206      	movs	r2, #6
 800431c:	1c7e      	adds	r6, r7, #1
 800431e:	f7fb ff5f 	bl	80001e0 <memchr>
 8004322:	2800      	cmp	r0, #0
 8004324:	d038      	beq.n	8004398 <_svfiprintf_r+0x1c8>
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <_svfiprintf_r+0x1e8>)
 8004328:	bb13      	cbnz	r3, 8004370 <_svfiprintf_r+0x1a0>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	3307      	adds	r3, #7
 800432e:	f023 0307 	bic.w	r3, r3, #7
 8004332:	3308      	adds	r3, #8
 8004334:	9303      	str	r3, [sp, #12]
 8004336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004338:	444b      	add	r3, r9
 800433a:	9309      	str	r3, [sp, #36]	; 0x24
 800433c:	e76d      	b.n	800421a <_svfiprintf_r+0x4a>
 800433e:	fb05 3202 	mla	r2, r5, r2, r3
 8004342:	2001      	movs	r0, #1
 8004344:	460f      	mov	r7, r1
 8004346:	e7a6      	b.n	8004296 <_svfiprintf_r+0xc6>
 8004348:	2300      	movs	r3, #0
 800434a:	3701      	adds	r7, #1
 800434c:	9305      	str	r3, [sp, #20]
 800434e:	4619      	mov	r1, r3
 8004350:	250a      	movs	r5, #10
 8004352:	4638      	mov	r0, r7
 8004354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004358:	3a30      	subs	r2, #48	; 0x30
 800435a:	2a09      	cmp	r2, #9
 800435c:	d903      	bls.n	8004366 <_svfiprintf_r+0x196>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0c8      	beq.n	80042f4 <_svfiprintf_r+0x124>
 8004362:	9105      	str	r1, [sp, #20]
 8004364:	e7c6      	b.n	80042f4 <_svfiprintf_r+0x124>
 8004366:	fb05 2101 	mla	r1, r5, r1, r2
 800436a:	2301      	movs	r3, #1
 800436c:	4607      	mov	r7, r0
 800436e:	e7f0      	b.n	8004352 <_svfiprintf_r+0x182>
 8004370:	ab03      	add	r3, sp, #12
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	4622      	mov	r2, r4
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <_svfiprintf_r+0x1ec>)
 8004378:	a904      	add	r1, sp, #16
 800437a:	4640      	mov	r0, r8
 800437c:	f3af 8000 	nop.w
 8004380:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004384:	4681      	mov	r9, r0
 8004386:	d1d6      	bne.n	8004336 <_svfiprintf_r+0x166>
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	065b      	lsls	r3, r3, #25
 800438c:	f53f af35 	bmi.w	80041fa <_svfiprintf_r+0x2a>
 8004390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004392:	b01d      	add	sp, #116	; 0x74
 8004394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004398:	ab03      	add	r3, sp, #12
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	4622      	mov	r2, r4
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <_svfiprintf_r+0x1ec>)
 80043a0:	a904      	add	r1, sp, #16
 80043a2:	4640      	mov	r0, r8
 80043a4:	f000 f882 	bl	80044ac <_printf_i>
 80043a8:	e7ea      	b.n	8004380 <_svfiprintf_r+0x1b0>
 80043aa:	bf00      	nop
 80043ac:	08006324 	.word	0x08006324
 80043b0:	0800632a 	.word	0x0800632a
 80043b4:	0800632e 	.word	0x0800632e
 80043b8:	00000000 	.word	0x00000000
 80043bc:	0800411d 	.word	0x0800411d

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4691      	mov	r9, r2
 80043c6:	461f      	mov	r7, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	f8c9 3000 	str.w	r3, [r9]
 80043da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043de:	4606      	mov	r6, r0
 80043e0:	460c      	mov	r4, r1
 80043e2:	b112      	cbz	r2, 80043ea <_printf_common+0x2a>
 80043e4:	3301      	adds	r3, #1
 80043e6:	f8c9 3000 	str.w	r3, [r9]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	0699      	lsls	r1, r3, #26
 80043ee:	bf42      	ittt	mi
 80043f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043f4:	3302      	addmi	r3, #2
 80043f6:	f8c9 3000 	strmi.w	r3, [r9]
 80043fa:	6825      	ldr	r5, [r4, #0]
 80043fc:	f015 0506 	ands.w	r5, r5, #6
 8004400:	d107      	bne.n	8004412 <_printf_common+0x52>
 8004402:	f104 0a19 	add.w	sl, r4, #25
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	f8d9 2000 	ldr.w	r2, [r9]
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	42ab      	cmp	r3, r5
 8004410:	dc28      	bgt.n	8004464 <_printf_common+0xa4>
 8004412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004416:	6822      	ldr	r2, [r4, #0]
 8004418:	3300      	adds	r3, #0
 800441a:	bf18      	it	ne
 800441c:	2301      	movne	r3, #1
 800441e:	0692      	lsls	r2, r2, #26
 8004420:	d42d      	bmi.n	800447e <_printf_common+0xbe>
 8004422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004426:	4639      	mov	r1, r7
 8004428:	4630      	mov	r0, r6
 800442a:	47c0      	blx	r8
 800442c:	3001      	adds	r0, #1
 800442e:	d020      	beq.n	8004472 <_printf_common+0xb2>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	68e5      	ldr	r5, [r4, #12]
 8004434:	f8d9 2000 	ldr.w	r2, [r9]
 8004438:	f003 0306 	and.w	r3, r3, #6
 800443c:	2b04      	cmp	r3, #4
 800443e:	bf08      	it	eq
 8004440:	1aad      	subeq	r5, r5, r2
 8004442:	68a3      	ldr	r3, [r4, #8]
 8004444:	6922      	ldr	r2, [r4, #16]
 8004446:	bf0c      	ite	eq
 8004448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800444c:	2500      	movne	r5, #0
 800444e:	4293      	cmp	r3, r2
 8004450:	bfc4      	itt	gt
 8004452:	1a9b      	subgt	r3, r3, r2
 8004454:	18ed      	addgt	r5, r5, r3
 8004456:	f04f 0900 	mov.w	r9, #0
 800445a:	341a      	adds	r4, #26
 800445c:	454d      	cmp	r5, r9
 800445e:	d11a      	bne.n	8004496 <_printf_common+0xd6>
 8004460:	2000      	movs	r0, #0
 8004462:	e008      	b.n	8004476 <_printf_common+0xb6>
 8004464:	2301      	movs	r3, #1
 8004466:	4652      	mov	r2, sl
 8004468:	4639      	mov	r1, r7
 800446a:	4630      	mov	r0, r6
 800446c:	47c0      	blx	r8
 800446e:	3001      	adds	r0, #1
 8004470:	d103      	bne.n	800447a <_printf_common+0xba>
 8004472:	f04f 30ff 	mov.w	r0, #4294967295
 8004476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447a:	3501      	adds	r5, #1
 800447c:	e7c3      	b.n	8004406 <_printf_common+0x46>
 800447e:	18e1      	adds	r1, r4, r3
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	2030      	movs	r0, #48	; 0x30
 8004484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004488:	4422      	add	r2, r4
 800448a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800448e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004492:	3302      	adds	r3, #2
 8004494:	e7c5      	b.n	8004422 <_printf_common+0x62>
 8004496:	2301      	movs	r3, #1
 8004498:	4622      	mov	r2, r4
 800449a:	4639      	mov	r1, r7
 800449c:	4630      	mov	r0, r6
 800449e:	47c0      	blx	r8
 80044a0:	3001      	adds	r0, #1
 80044a2:	d0e6      	beq.n	8004472 <_printf_common+0xb2>
 80044a4:	f109 0901 	add.w	r9, r9, #1
 80044a8:	e7d8      	b.n	800445c <_printf_common+0x9c>
	...

080044ac <_printf_i>:
 80044ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044b4:	460c      	mov	r4, r1
 80044b6:	7e09      	ldrb	r1, [r1, #24]
 80044b8:	b085      	sub	sp, #20
 80044ba:	296e      	cmp	r1, #110	; 0x6e
 80044bc:	4617      	mov	r7, r2
 80044be:	4606      	mov	r6, r0
 80044c0:	4698      	mov	r8, r3
 80044c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044c4:	f000 80b3 	beq.w	800462e <_printf_i+0x182>
 80044c8:	d822      	bhi.n	8004510 <_printf_i+0x64>
 80044ca:	2963      	cmp	r1, #99	; 0x63
 80044cc:	d036      	beq.n	800453c <_printf_i+0x90>
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x3a>
 80044d0:	2900      	cmp	r1, #0
 80044d2:	f000 80b9 	beq.w	8004648 <_printf_i+0x19c>
 80044d6:	2958      	cmp	r1, #88	; 0x58
 80044d8:	f000 8083 	beq.w	80045e2 <_printf_i+0x136>
 80044dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044e4:	e032      	b.n	800454c <_printf_i+0xa0>
 80044e6:	2964      	cmp	r1, #100	; 0x64
 80044e8:	d001      	beq.n	80044ee <_printf_i+0x42>
 80044ea:	2969      	cmp	r1, #105	; 0x69
 80044ec:	d1f6      	bne.n	80044dc <_printf_i+0x30>
 80044ee:	6820      	ldr	r0, [r4, #0]
 80044f0:	6813      	ldr	r3, [r2, #0]
 80044f2:	0605      	lsls	r5, r0, #24
 80044f4:	f103 0104 	add.w	r1, r3, #4
 80044f8:	d52a      	bpl.n	8004550 <_printf_i+0xa4>
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da03      	bge.n	800450a <_printf_i+0x5e>
 8004502:	222d      	movs	r2, #45	; 0x2d
 8004504:	425b      	negs	r3, r3
 8004506:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800450a:	486f      	ldr	r0, [pc, #444]	; (80046c8 <_printf_i+0x21c>)
 800450c:	220a      	movs	r2, #10
 800450e:	e039      	b.n	8004584 <_printf_i+0xd8>
 8004510:	2973      	cmp	r1, #115	; 0x73
 8004512:	f000 809d 	beq.w	8004650 <_printf_i+0x1a4>
 8004516:	d808      	bhi.n	800452a <_printf_i+0x7e>
 8004518:	296f      	cmp	r1, #111	; 0x6f
 800451a:	d020      	beq.n	800455e <_printf_i+0xb2>
 800451c:	2970      	cmp	r1, #112	; 0x70
 800451e:	d1dd      	bne.n	80044dc <_printf_i+0x30>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	f043 0320 	orr.w	r3, r3, #32
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	e003      	b.n	8004532 <_printf_i+0x86>
 800452a:	2975      	cmp	r1, #117	; 0x75
 800452c:	d017      	beq.n	800455e <_printf_i+0xb2>
 800452e:	2978      	cmp	r1, #120	; 0x78
 8004530:	d1d4      	bne.n	80044dc <_printf_i+0x30>
 8004532:	2378      	movs	r3, #120	; 0x78
 8004534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004538:	4864      	ldr	r0, [pc, #400]	; (80046cc <_printf_i+0x220>)
 800453a:	e055      	b.n	80045e8 <_printf_i+0x13c>
 800453c:	6813      	ldr	r3, [r2, #0]
 800453e:	1d19      	adds	r1, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6011      	str	r1, [r2, #0]
 8004544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e08c      	b.n	800466a <_printf_i+0x1be>
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6011      	str	r1, [r2, #0]
 8004554:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004558:	bf18      	it	ne
 800455a:	b21b      	sxthne	r3, r3
 800455c:	e7cf      	b.n	80044fe <_printf_i+0x52>
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	1d18      	adds	r0, r3, #4
 8004564:	6010      	str	r0, [r2, #0]
 8004566:	0628      	lsls	r0, r5, #24
 8004568:	d501      	bpl.n	800456e <_printf_i+0xc2>
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	e002      	b.n	8004574 <_printf_i+0xc8>
 800456e:	0668      	lsls	r0, r5, #25
 8004570:	d5fb      	bpl.n	800456a <_printf_i+0xbe>
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	4854      	ldr	r0, [pc, #336]	; (80046c8 <_printf_i+0x21c>)
 8004576:	296f      	cmp	r1, #111	; 0x6f
 8004578:	bf14      	ite	ne
 800457a:	220a      	movne	r2, #10
 800457c:	2208      	moveq	r2, #8
 800457e:	2100      	movs	r1, #0
 8004580:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004584:	6865      	ldr	r5, [r4, #4]
 8004586:	60a5      	str	r5, [r4, #8]
 8004588:	2d00      	cmp	r5, #0
 800458a:	f2c0 8095 	blt.w	80046b8 <_printf_i+0x20c>
 800458e:	6821      	ldr	r1, [r4, #0]
 8004590:	f021 0104 	bic.w	r1, r1, #4
 8004594:	6021      	str	r1, [r4, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d13d      	bne.n	8004616 <_printf_i+0x16a>
 800459a:	2d00      	cmp	r5, #0
 800459c:	f040 808e 	bne.w	80046bc <_printf_i+0x210>
 80045a0:	4665      	mov	r5, ip
 80045a2:	2a08      	cmp	r2, #8
 80045a4:	d10b      	bne.n	80045be <_printf_i+0x112>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	07db      	lsls	r3, r3, #31
 80045aa:	d508      	bpl.n	80045be <_printf_i+0x112>
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bfde      	ittt	le
 80045b4:	2330      	movle	r3, #48	; 0x30
 80045b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045be:	ebac 0305 	sub.w	r3, ip, r5
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	f8cd 8000 	str.w	r8, [sp]
 80045c8:	463b      	mov	r3, r7
 80045ca:	aa03      	add	r2, sp, #12
 80045cc:	4621      	mov	r1, r4
 80045ce:	4630      	mov	r0, r6
 80045d0:	f7ff fef6 	bl	80043c0 <_printf_common>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d14d      	bne.n	8004674 <_printf_i+0x1c8>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	b005      	add	sp, #20
 80045de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045e2:	4839      	ldr	r0, [pc, #228]	; (80046c8 <_printf_i+0x21c>)
 80045e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045e8:	6813      	ldr	r3, [r2, #0]
 80045ea:	6821      	ldr	r1, [r4, #0]
 80045ec:	1d1d      	adds	r5, r3, #4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6015      	str	r5, [r2, #0]
 80045f2:	060a      	lsls	r2, r1, #24
 80045f4:	d50b      	bpl.n	800460e <_printf_i+0x162>
 80045f6:	07ca      	lsls	r2, r1, #31
 80045f8:	bf44      	itt	mi
 80045fa:	f041 0120 	orrmi.w	r1, r1, #32
 80045fe:	6021      	strmi	r1, [r4, #0]
 8004600:	b91b      	cbnz	r3, 800460a <_printf_i+0x15e>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	f022 0220 	bic.w	r2, r2, #32
 8004608:	6022      	str	r2, [r4, #0]
 800460a:	2210      	movs	r2, #16
 800460c:	e7b7      	b.n	800457e <_printf_i+0xd2>
 800460e:	064d      	lsls	r5, r1, #25
 8004610:	bf48      	it	mi
 8004612:	b29b      	uxthmi	r3, r3
 8004614:	e7ef      	b.n	80045f6 <_printf_i+0x14a>
 8004616:	4665      	mov	r5, ip
 8004618:	fbb3 f1f2 	udiv	r1, r3, r2
 800461c:	fb02 3311 	mls	r3, r2, r1, r3
 8004620:	5cc3      	ldrb	r3, [r0, r3]
 8004622:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004626:	460b      	mov	r3, r1
 8004628:	2900      	cmp	r1, #0
 800462a:	d1f5      	bne.n	8004618 <_printf_i+0x16c>
 800462c:	e7b9      	b.n	80045a2 <_printf_i+0xf6>
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	6825      	ldr	r5, [r4, #0]
 8004632:	6961      	ldr	r1, [r4, #20]
 8004634:	1d18      	adds	r0, r3, #4
 8004636:	6010      	str	r0, [r2, #0]
 8004638:	0628      	lsls	r0, r5, #24
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	d501      	bpl.n	8004642 <_printf_i+0x196>
 800463e:	6019      	str	r1, [r3, #0]
 8004640:	e002      	b.n	8004648 <_printf_i+0x19c>
 8004642:	066a      	lsls	r2, r5, #25
 8004644:	d5fb      	bpl.n	800463e <_printf_i+0x192>
 8004646:	8019      	strh	r1, [r3, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	6123      	str	r3, [r4, #16]
 800464c:	4665      	mov	r5, ip
 800464e:	e7b9      	b.n	80045c4 <_printf_i+0x118>
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	1d19      	adds	r1, r3, #4
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	681d      	ldr	r5, [r3, #0]
 8004658:	6862      	ldr	r2, [r4, #4]
 800465a:	2100      	movs	r1, #0
 800465c:	4628      	mov	r0, r5
 800465e:	f7fb fdbf 	bl	80001e0 <memchr>
 8004662:	b108      	cbz	r0, 8004668 <_printf_i+0x1bc>
 8004664:	1b40      	subs	r0, r0, r5
 8004666:	6060      	str	r0, [r4, #4]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	2300      	movs	r3, #0
 800466e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004672:	e7a7      	b.n	80045c4 <_printf_i+0x118>
 8004674:	6923      	ldr	r3, [r4, #16]
 8004676:	462a      	mov	r2, r5
 8004678:	4639      	mov	r1, r7
 800467a:	4630      	mov	r0, r6
 800467c:	47c0      	blx	r8
 800467e:	3001      	adds	r0, #1
 8004680:	d0aa      	beq.n	80045d8 <_printf_i+0x12c>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d413      	bmi.n	80046b0 <_printf_i+0x204>
 8004688:	68e0      	ldr	r0, [r4, #12]
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	4298      	cmp	r0, r3
 800468e:	bfb8      	it	lt
 8004690:	4618      	movlt	r0, r3
 8004692:	e7a3      	b.n	80045dc <_printf_i+0x130>
 8004694:	2301      	movs	r3, #1
 8004696:	464a      	mov	r2, r9
 8004698:	4639      	mov	r1, r7
 800469a:	4630      	mov	r0, r6
 800469c:	47c0      	blx	r8
 800469e:	3001      	adds	r0, #1
 80046a0:	d09a      	beq.n	80045d8 <_printf_i+0x12c>
 80046a2:	3501      	adds	r5, #1
 80046a4:	68e3      	ldr	r3, [r4, #12]
 80046a6:	9a03      	ldr	r2, [sp, #12]
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	dcf2      	bgt.n	8004694 <_printf_i+0x1e8>
 80046ae:	e7eb      	b.n	8004688 <_printf_i+0x1dc>
 80046b0:	2500      	movs	r5, #0
 80046b2:	f104 0919 	add.w	r9, r4, #25
 80046b6:	e7f5      	b.n	80046a4 <_printf_i+0x1f8>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ac      	bne.n	8004616 <_printf_i+0x16a>
 80046bc:	7803      	ldrb	r3, [r0, #0]
 80046be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046c6:	e76c      	b.n	80045a2 <_printf_i+0xf6>
 80046c8:	08006335 	.word	0x08006335
 80046cc:	08006346 	.word	0x08006346

080046d0 <memcpy>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	1e43      	subs	r3, r0, #1
 80046d4:	440a      	add	r2, r1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	d100      	bne.n	80046dc <memcpy+0xc>
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e4:	e7f7      	b.n	80046d6 <memcpy+0x6>

080046e6 <memmove>:
 80046e6:	4288      	cmp	r0, r1
 80046e8:	b510      	push	{r4, lr}
 80046ea:	eb01 0302 	add.w	r3, r1, r2
 80046ee:	d807      	bhi.n	8004700 <memmove+0x1a>
 80046f0:	1e42      	subs	r2, r0, #1
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d00a      	beq.n	800470c <memmove+0x26>
 80046f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046fe:	e7f8      	b.n	80046f2 <memmove+0xc>
 8004700:	4283      	cmp	r3, r0
 8004702:	d9f5      	bls.n	80046f0 <memmove+0xa>
 8004704:	1881      	adds	r1, r0, r2
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	42d3      	cmn	r3, r2
 800470a:	d100      	bne.n	800470e <memmove+0x28>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004712:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004716:	e7f7      	b.n	8004708 <memmove+0x22>

08004718 <_realloc_r>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	4607      	mov	r7, r0
 800471c:	4614      	mov	r4, r2
 800471e:	460e      	mov	r6, r1
 8004720:	b921      	cbnz	r1, 800472c <_realloc_r+0x14>
 8004722:	4611      	mov	r1, r2
 8004724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004728:	f7ff bc6c 	b.w	8004004 <_malloc_r>
 800472c:	b922      	cbnz	r2, 8004738 <_realloc_r+0x20>
 800472e:	f7ff fc1b 	bl	8003f68 <_free_r>
 8004732:	4625      	mov	r5, r4
 8004734:	4628      	mov	r0, r5
 8004736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004738:	f000 f814 	bl	8004764 <_malloc_usable_size_r>
 800473c:	42a0      	cmp	r0, r4
 800473e:	d20f      	bcs.n	8004760 <_realloc_r+0x48>
 8004740:	4621      	mov	r1, r4
 8004742:	4638      	mov	r0, r7
 8004744:	f7ff fc5e 	bl	8004004 <_malloc_r>
 8004748:	4605      	mov	r5, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	d0f2      	beq.n	8004734 <_realloc_r+0x1c>
 800474e:	4631      	mov	r1, r6
 8004750:	4622      	mov	r2, r4
 8004752:	f7ff ffbd 	bl	80046d0 <memcpy>
 8004756:	4631      	mov	r1, r6
 8004758:	4638      	mov	r0, r7
 800475a:	f7ff fc05 	bl	8003f68 <_free_r>
 800475e:	e7e9      	b.n	8004734 <_realloc_r+0x1c>
 8004760:	4635      	mov	r5, r6
 8004762:	e7e7      	b.n	8004734 <_realloc_r+0x1c>

08004764 <_malloc_usable_size_r>:
 8004764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004768:	1f18      	subs	r0, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	bfbc      	itt	lt
 800476e:	580b      	ldrlt	r3, [r1, r0]
 8004770:	18c0      	addlt	r0, r0, r3
 8004772:	4770      	bx	lr
 8004774:	0000      	movs	r0, r0
	...

08004778 <floor>:
 8004778:	ec51 0b10 	vmov	r0, r1, d0
 800477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004788:	2e13      	cmp	r6, #19
 800478a:	460c      	mov	r4, r1
 800478c:	ee10 5a10 	vmov	r5, s0
 8004790:	4680      	mov	r8, r0
 8004792:	dc34      	bgt.n	80047fe <floor+0x86>
 8004794:	2e00      	cmp	r6, #0
 8004796:	da16      	bge.n	80047c6 <floor+0x4e>
 8004798:	a335      	add	r3, pc, #212	; (adr r3, 8004870 <floor+0xf8>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb fd75 	bl	800028c <__adddf3>
 80047a2:	2200      	movs	r2, #0
 80047a4:	2300      	movs	r3, #0
 80047a6:	f7fc f9b7 	bl	8000b18 <__aeabi_dcmpgt>
 80047aa:	b148      	cbz	r0, 80047c0 <floor+0x48>
 80047ac:	2c00      	cmp	r4, #0
 80047ae:	da59      	bge.n	8004864 <floor+0xec>
 80047b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80047b4:	4a30      	ldr	r2, [pc, #192]	; (8004878 <floor+0x100>)
 80047b6:	432b      	orrs	r3, r5
 80047b8:	2500      	movs	r5, #0
 80047ba:	42ab      	cmp	r3, r5
 80047bc:	bf18      	it	ne
 80047be:	4614      	movne	r4, r2
 80047c0:	4621      	mov	r1, r4
 80047c2:	4628      	mov	r0, r5
 80047c4:	e025      	b.n	8004812 <floor+0x9a>
 80047c6:	4f2d      	ldr	r7, [pc, #180]	; (800487c <floor+0x104>)
 80047c8:	4137      	asrs	r7, r6
 80047ca:	ea01 0307 	and.w	r3, r1, r7
 80047ce:	4303      	orrs	r3, r0
 80047d0:	d01f      	beq.n	8004812 <floor+0x9a>
 80047d2:	a327      	add	r3, pc, #156	; (adr r3, 8004870 <floor+0xf8>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb fd58 	bl	800028c <__adddf3>
 80047dc:	2200      	movs	r2, #0
 80047de:	2300      	movs	r3, #0
 80047e0:	f7fc f99a 	bl	8000b18 <__aeabi_dcmpgt>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d0eb      	beq.n	80047c0 <floor+0x48>
 80047e8:	2c00      	cmp	r4, #0
 80047ea:	bfbe      	ittt	lt
 80047ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80047f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80047f4:	19a4      	addlt	r4, r4, r6
 80047f6:	ea24 0407 	bic.w	r4, r4, r7
 80047fa:	2500      	movs	r5, #0
 80047fc:	e7e0      	b.n	80047c0 <floor+0x48>
 80047fe:	2e33      	cmp	r6, #51	; 0x33
 8004800:	dd0b      	ble.n	800481a <floor+0xa2>
 8004802:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004806:	d104      	bne.n	8004812 <floor+0x9a>
 8004808:	ee10 2a10 	vmov	r2, s0
 800480c:	460b      	mov	r3, r1
 800480e:	f7fb fd3d 	bl	800028c <__adddf3>
 8004812:	ec41 0b10 	vmov	d0, r0, r1
 8004816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	fa23 f707 	lsr.w	r7, r3, r7
 8004826:	4207      	tst	r7, r0
 8004828:	d0f3      	beq.n	8004812 <floor+0x9a>
 800482a:	a311      	add	r3, pc, #68	; (adr r3, 8004870 <floor+0xf8>)
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f7fb fd2c 	bl	800028c <__adddf3>
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	f7fc f96e 	bl	8000b18 <__aeabi_dcmpgt>
 800483c:	2800      	cmp	r0, #0
 800483e:	d0bf      	beq.n	80047c0 <floor+0x48>
 8004840:	2c00      	cmp	r4, #0
 8004842:	da02      	bge.n	800484a <floor+0xd2>
 8004844:	2e14      	cmp	r6, #20
 8004846:	d103      	bne.n	8004850 <floor+0xd8>
 8004848:	3401      	adds	r4, #1
 800484a:	ea25 0507 	bic.w	r5, r5, r7
 800484e:	e7b7      	b.n	80047c0 <floor+0x48>
 8004850:	2301      	movs	r3, #1
 8004852:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004856:	fa03 f606 	lsl.w	r6, r3, r6
 800485a:	4435      	add	r5, r6
 800485c:	4545      	cmp	r5, r8
 800485e:	bf38      	it	cc
 8004860:	18e4      	addcc	r4, r4, r3
 8004862:	e7f2      	b.n	800484a <floor+0xd2>
 8004864:	2500      	movs	r5, #0
 8004866:	462c      	mov	r4, r5
 8004868:	e7aa      	b.n	80047c0 <floor+0x48>
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w
 8004870:	8800759c 	.word	0x8800759c
 8004874:	7e37e43c 	.word	0x7e37e43c
 8004878:	bff00000 	.word	0xbff00000
 800487c:	000fffff 	.word	0x000fffff

08004880 <log10>:
 8004880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004882:	ed2d 8b02 	vpush	{d8}
 8004886:	b08b      	sub	sp, #44	; 0x2c
 8004888:	ec55 4b10 	vmov	r4, r5, d0
 800488c:	f000 f878 	bl	8004980 <__ieee754_log10>
 8004890:	4b36      	ldr	r3, [pc, #216]	; (800496c <log10+0xec>)
 8004892:	eeb0 8a40 	vmov.f32	s16, s0
 8004896:	eef0 8a60 	vmov.f32	s17, s1
 800489a:	f993 6000 	ldrsb.w	r6, [r3]
 800489e:	1c73      	adds	r3, r6, #1
 80048a0:	d05c      	beq.n	800495c <log10+0xdc>
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fc f93f 	bl	8000b2c <__aeabi_dcmpun>
 80048ae:	4607      	mov	r7, r0
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d153      	bne.n	800495c <log10+0xdc>
 80048b4:	2200      	movs	r2, #0
 80048b6:	2300      	movs	r3, #0
 80048b8:	4620      	mov	r0, r4
 80048ba:	4629      	mov	r1, r5
 80048bc:	f7fc f918 	bl	8000af0 <__aeabi_dcmple>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d04b      	beq.n	800495c <log10+0xdc>
 80048c4:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <log10+0xf0>)
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	9708      	str	r7, [sp, #32]
 80048ca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80048ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80048d2:	b9a6      	cbnz	r6, 80048fe <log10+0x7e>
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <log10+0xf4>)
 80048d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80048da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048de:	4620      	mov	r0, r4
 80048e0:	2200      	movs	r2, #0
 80048e2:	2300      	movs	r3, #0
 80048e4:	4629      	mov	r1, r5
 80048e6:	f7fc f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80048ea:	bb40      	cbnz	r0, 800493e <log10+0xbe>
 80048ec:	2301      	movs	r3, #1
 80048ee:	2e02      	cmp	r6, #2
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	d119      	bne.n	8004928 <log10+0xa8>
 80048f4:	f7ff fafe 	bl	8003ef4 <__errno>
 80048f8:	2321      	movs	r3, #33	; 0x21
 80048fa:	6003      	str	r3, [r0, #0]
 80048fc:	e019      	b.n	8004932 <log10+0xb2>
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <log10+0xf8>)
 8004900:	2200      	movs	r2, #0
 8004902:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004906:	4620      	mov	r0, r4
 8004908:	2200      	movs	r2, #0
 800490a:	2300      	movs	r3, #0
 800490c:	4629      	mov	r1, r5
 800490e:	f7fc f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8004912:	2800      	cmp	r0, #0
 8004914:	d0ea      	beq.n	80048ec <log10+0x6c>
 8004916:	2302      	movs	r3, #2
 8004918:	429e      	cmp	r6, r3
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	d111      	bne.n	8004942 <log10+0xc2>
 800491e:	f7ff fae9 	bl	8003ef4 <__errno>
 8004922:	2322      	movs	r3, #34	; 0x22
 8004924:	6003      	str	r3, [r0, #0]
 8004926:	e011      	b.n	800494c <log10+0xcc>
 8004928:	4668      	mov	r0, sp
 800492a:	f000 f8b3 	bl	8004a94 <matherr>
 800492e:	2800      	cmp	r0, #0
 8004930:	d0e0      	beq.n	80048f4 <log10+0x74>
 8004932:	4812      	ldr	r0, [pc, #72]	; (800497c <log10+0xfc>)
 8004934:	f000 f8b0 	bl	8004a98 <nan>
 8004938:	ed8d 0b06 	vstr	d0, [sp, #24]
 800493c:	e006      	b.n	800494c <log10+0xcc>
 800493e:	2302      	movs	r3, #2
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4668      	mov	r0, sp
 8004944:	f000 f8a6 	bl	8004a94 <matherr>
 8004948:	2800      	cmp	r0, #0
 800494a:	d0e8      	beq.n	800491e <log10+0x9e>
 800494c:	9b08      	ldr	r3, [sp, #32]
 800494e:	b11b      	cbz	r3, 8004958 <log10+0xd8>
 8004950:	f7ff fad0 	bl	8003ef4 <__errno>
 8004954:	9b08      	ldr	r3, [sp, #32]
 8004956:	6003      	str	r3, [r0, #0]
 8004958:	ed9d 8b06 	vldr	d8, [sp, #24]
 800495c:	eeb0 0a48 	vmov.f32	s0, s16
 8004960:	eef0 0a68 	vmov.f32	s1, s17
 8004964:	b00b      	add	sp, #44	; 0x2c
 8004966:	ecbd 8b02 	vpop	{d8}
 800496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496c:	20000088 	.word	0x20000088
 8004970:	08006357 	.word	0x08006357
 8004974:	c7efffff 	.word	0xc7efffff
 8004978:	fff00000 	.word	0xfff00000
 800497c:	08006329 	.word	0x08006329

08004980 <__ieee754_log10>:
 8004980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004984:	ec55 4b10 	vmov	r4, r5, d0
 8004988:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800498c:	462b      	mov	r3, r5
 800498e:	da2f      	bge.n	80049f0 <__ieee754_log10+0x70>
 8004990:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8004994:	4322      	orrs	r2, r4
 8004996:	d10a      	bne.n	80049ae <__ieee754_log10+0x2e>
 8004998:	493b      	ldr	r1, [pc, #236]	; (8004a88 <__ieee754_log10+0x108>)
 800499a:	2200      	movs	r2, #0
 800499c:	2300      	movs	r3, #0
 800499e:	2000      	movs	r0, #0
 80049a0:	f7fb ff54 	bl	800084c <__aeabi_ddiv>
 80049a4:	ec41 0b10 	vmov	d0, r0, r1
 80049a8:	b003      	add	sp, #12
 80049aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	da08      	bge.n	80049c4 <__ieee754_log10+0x44>
 80049b2:	ee10 2a10 	vmov	r2, s0
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fb fc65 	bl	8000288 <__aeabi_dsub>
 80049be:	2200      	movs	r2, #0
 80049c0:	2300      	movs	r3, #0
 80049c2:	e7ed      	b.n	80049a0 <__ieee754_log10+0x20>
 80049c4:	2200      	movs	r2, #0
 80049c6:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <__ieee754_log10+0x10c>)
 80049c8:	4629      	mov	r1, r5
 80049ca:	ee10 0a10 	vmov	r0, s0
 80049ce:	f7fb fe13 	bl	80005f8 <__aeabi_dmul>
 80049d2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80049d6:	4604      	mov	r4, r0
 80049d8:	460d      	mov	r5, r1
 80049da:	460b      	mov	r3, r1
 80049dc:	492c      	ldr	r1, [pc, #176]	; (8004a90 <__ieee754_log10+0x110>)
 80049de:	428b      	cmp	r3, r1
 80049e0:	dd08      	ble.n	80049f4 <__ieee754_log10+0x74>
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fb fc4f 	bl	800028c <__adddf3>
 80049ee:	e7d9      	b.n	80049a4 <__ieee754_log10+0x24>
 80049f0:	2200      	movs	r2, #0
 80049f2:	e7f3      	b.n	80049dc <__ieee754_log10+0x5c>
 80049f4:	1518      	asrs	r0, r3, #20
 80049f6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80049fa:	4410      	add	r0, r2
 80049fc:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8004a00:	4448      	add	r0, r9
 8004a02:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8004a06:	f7fb fd8d 	bl	8000524 <__aeabi_i2d>
 8004a0a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8004a0e:	3303      	adds	r3, #3
 8004a10:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8004a14:	ec45 4b10 	vmov	d0, r4, r5
 8004a18:	4606      	mov	r6, r0
 8004a1a:	460f      	mov	r7, r1
 8004a1c:	f000 f844 	bl	8004aa8 <__ieee754_log>
 8004a20:	a313      	add	r3, pc, #76	; (adr r3, 8004a70 <__ieee754_log10+0xf0>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	4630      	mov	r0, r6
 8004a28:	4639      	mov	r1, r7
 8004a2a:	ed8d 0b00 	vstr	d0, [sp]
 8004a2e:	f7fb fde3 	bl	80005f8 <__aeabi_dmul>
 8004a32:	ed9d 0b00 	vldr	d0, [sp]
 8004a36:	4604      	mov	r4, r0
 8004a38:	460d      	mov	r5, r1
 8004a3a:	a30f      	add	r3, pc, #60	; (adr r3, 8004a78 <__ieee754_log10+0xf8>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	ec51 0b10 	vmov	r0, r1, d0
 8004a44:	f7fb fdd8 	bl	80005f8 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	f7fb fc1c 	bl	800028c <__adddf3>
 8004a54:	a30a      	add	r3, pc, #40	; (adr r3, 8004a80 <__ieee754_log10+0x100>)
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fb fdc9 	bl	80005f8 <__aeabi_dmul>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	e7bc      	b.n	80049ea <__ieee754_log10+0x6a>
 8004a70:	11f12b36 	.word	0x11f12b36
 8004a74:	3d59fef3 	.word	0x3d59fef3
 8004a78:	1526e50e 	.word	0x1526e50e
 8004a7c:	3fdbcb7b 	.word	0x3fdbcb7b
 8004a80:	509f6000 	.word	0x509f6000
 8004a84:	3fd34413 	.word	0x3fd34413
 8004a88:	c3500000 	.word	0xc3500000
 8004a8c:	43500000 	.word	0x43500000
 8004a90:	7fefffff 	.word	0x7fefffff

08004a94 <matherr>:
 8004a94:	2000      	movs	r0, #0
 8004a96:	4770      	bx	lr

08004a98 <nan>:
 8004a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004aa0 <nan+0x8>
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	00000000 	.word	0x00000000
 8004aa4:	7ff80000 	.word	0x7ff80000

08004aa8 <__ieee754_log>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	ec51 0b10 	vmov	r0, r1, d0
 8004ab0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004ab4:	b087      	sub	sp, #28
 8004ab6:	460d      	mov	r5, r1
 8004ab8:	da27      	bge.n	8004b0a <__ieee754_log+0x62>
 8004aba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004abe:	4303      	orrs	r3, r0
 8004ac0:	ee10 2a10 	vmov	r2, s0
 8004ac4:	d10a      	bne.n	8004adc <__ieee754_log+0x34>
 8004ac6:	49cc      	ldr	r1, [pc, #816]	; (8004df8 <__ieee754_log+0x350>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2300      	movs	r3, #0
 8004acc:	2000      	movs	r0, #0
 8004ace:	f7fb febd 	bl	800084c <__aeabi_ddiv>
 8004ad2:	ec41 0b10 	vmov	d0, r0, r1
 8004ad6:	b007      	add	sp, #28
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	2900      	cmp	r1, #0
 8004ade:	da05      	bge.n	8004aec <__ieee754_log+0x44>
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	f7fb fbd1 	bl	8000288 <__aeabi_dsub>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e7f0      	b.n	8004ace <__ieee754_log+0x26>
 8004aec:	4bc3      	ldr	r3, [pc, #780]	; (8004dfc <__ieee754_log+0x354>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	f7fb fd82 	bl	80005f8 <__aeabi_dmul>
 8004af4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004af8:	460d      	mov	r5, r1
 8004afa:	4ac1      	ldr	r2, [pc, #772]	; (8004e00 <__ieee754_log+0x358>)
 8004afc:	4295      	cmp	r5, r2
 8004afe:	dd06      	ble.n	8004b0e <__ieee754_log+0x66>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	f7fb fbc2 	bl	800028c <__adddf3>
 8004b08:	e7e3      	b.n	8004ad2 <__ieee754_log+0x2a>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e7f5      	b.n	8004afa <__ieee754_log+0x52>
 8004b0e:	152c      	asrs	r4, r5, #20
 8004b10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b14:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004b18:	441c      	add	r4, r3
 8004b1a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004b1e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b26:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004b2a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004b2e:	ea42 0105 	orr.w	r1, r2, r5
 8004b32:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004b36:	2200      	movs	r2, #0
 8004b38:	4bb2      	ldr	r3, [pc, #712]	; (8004e04 <__ieee754_log+0x35c>)
 8004b3a:	f7fb fba5 	bl	8000288 <__aeabi_dsub>
 8004b3e:	1cab      	adds	r3, r5, #2
 8004b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	4682      	mov	sl, r0
 8004b48:	468b      	mov	fp, r1
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	dc53      	bgt.n	8004bf8 <__ieee754_log+0x150>
 8004b50:	2300      	movs	r3, #0
 8004b52:	f7fb ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b56:	b1d0      	cbz	r0, 8004b8e <__ieee754_log+0xe6>
 8004b58:	2c00      	cmp	r4, #0
 8004b5a:	f000 8120 	beq.w	8004d9e <__ieee754_log+0x2f6>
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f7fb fce0 	bl	8000524 <__aeabi_i2d>
 8004b64:	a390      	add	r3, pc, #576	; (adr r3, 8004da8 <__ieee754_log+0x300>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	f7fb fd43 	bl	80005f8 <__aeabi_dmul>
 8004b72:	a38f      	add	r3, pc, #572	; (adr r3, 8004db0 <__ieee754_log+0x308>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	4604      	mov	r4, r0
 8004b7a:	460d      	mov	r5, r1
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	4639      	mov	r1, r7
 8004b80:	f7fb fd3a 	bl	80005f8 <__aeabi_dmul>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	e7ba      	b.n	8004b04 <__ieee754_log+0x5c>
 8004b8e:	a38a      	add	r3, pc, #552	; (adr r3, 8004db8 <__ieee754_log+0x310>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	4650      	mov	r0, sl
 8004b96:	4659      	mov	r1, fp
 8004b98:	f7fb fd2e 	bl	80005f8 <__aeabi_dmul>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	4999      	ldr	r1, [pc, #612]	; (8004e08 <__ieee754_log+0x360>)
 8004ba4:	f7fb fb70 	bl	8000288 <__aeabi_dsub>
 8004ba8:	4652      	mov	r2, sl
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	465b      	mov	r3, fp
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb fd1a 	bl	80005f8 <__aeabi_dmul>
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	460f      	mov	r7, r1
 8004bc8:	b914      	cbnz	r4, 8004bd0 <__ieee754_log+0x128>
 8004bca:	4632      	mov	r2, r6
 8004bcc:	463b      	mov	r3, r7
 8004bce:	e0a0      	b.n	8004d12 <__ieee754_log+0x26a>
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7fb fca7 	bl	8000524 <__aeabi_i2d>
 8004bd6:	a374      	add	r3, pc, #464	; (adr r3, 8004da8 <__ieee754_log+0x300>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	4680      	mov	r8, r0
 8004bde:	4689      	mov	r9, r1
 8004be0:	f7fb fd0a 	bl	80005f8 <__aeabi_dmul>
 8004be4:	a372      	add	r3, pc, #456	; (adr r3, 8004db0 <__ieee754_log+0x308>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	4604      	mov	r4, r0
 8004bec:	460d      	mov	r5, r1
 8004bee:	4640      	mov	r0, r8
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	f7fb fd01 	bl	80005f8 <__aeabi_dmul>
 8004bf6:	e0a5      	b.n	8004d44 <__ieee754_log+0x29c>
 8004bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bfc:	f7fb fb46 	bl	800028c <__adddf3>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4650      	mov	r0, sl
 8004c06:	4659      	mov	r1, fp
 8004c08:	f7fb fe20 	bl	800084c <__aeabi_ddiv>
 8004c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7fb fc87 	bl	8000524 <__aeabi_i2d>
 8004c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	f7fb fce9 	bl	80005f8 <__aeabi_dmul>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c2e:	f7fb fce3 	bl	80005f8 <__aeabi_dmul>
 8004c32:	a363      	add	r3, pc, #396	; (adr r3, 8004dc0 <__ieee754_log+0x318>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	4680      	mov	r8, r0
 8004c3a:	4689      	mov	r9, r1
 8004c3c:	f7fb fcdc 	bl	80005f8 <__aeabi_dmul>
 8004c40:	a361      	add	r3, pc, #388	; (adr r3, 8004dc8 <__ieee754_log+0x320>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f7fb fb21 	bl	800028c <__adddf3>
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	f7fb fcd3 	bl	80005f8 <__aeabi_dmul>
 8004c52:	a35f      	add	r3, pc, #380	; (adr r3, 8004dd0 <__ieee754_log+0x328>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	f7fb fb18 	bl	800028c <__adddf3>
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	f7fb fcca 	bl	80005f8 <__aeabi_dmul>
 8004c64:	a35c      	add	r3, pc, #368	; (adr r3, 8004dd8 <__ieee754_log+0x330>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fb0f 	bl	800028c <__adddf3>
 8004c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c72:	f7fb fcc1 	bl	80005f8 <__aeabi_dmul>
 8004c76:	a35a      	add	r3, pc, #360	; (adr r3, 8004de0 <__ieee754_log+0x338>)
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c80:	4640      	mov	r0, r8
 8004c82:	4649      	mov	r1, r9
 8004c84:	f7fb fcb8 	bl	80005f8 <__aeabi_dmul>
 8004c88:	a357      	add	r3, pc, #348	; (adr r3, 8004de8 <__ieee754_log+0x340>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f7fb fafd 	bl	800028c <__adddf3>
 8004c92:	4642      	mov	r2, r8
 8004c94:	464b      	mov	r3, r9
 8004c96:	f7fb fcaf 	bl	80005f8 <__aeabi_dmul>
 8004c9a:	a355      	add	r3, pc, #340	; (adr r3, 8004df0 <__ieee754_log+0x348>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f7fb faf4 	bl	800028c <__adddf3>
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f7fb fca6 	bl	80005f8 <__aeabi_dmul>
 8004cac:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004cb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cbc:	f7fb fae6 	bl	800028c <__adddf3>
 8004cc0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8004cc4:	3551      	adds	r5, #81	; 0x51
 8004cc6:	4335      	orrs	r5, r6
 8004cc8:	2d00      	cmp	r5, #0
 8004cca:	4680      	mov	r8, r0
 8004ccc:	4689      	mov	r9, r1
 8004cce:	dd48      	ble.n	8004d62 <__ieee754_log+0x2ba>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4b4d      	ldr	r3, [pc, #308]	; (8004e08 <__ieee754_log+0x360>)
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fc8e 	bl	80005f8 <__aeabi_dmul>
 8004cdc:	4652      	mov	r2, sl
 8004cde:	465b      	mov	r3, fp
 8004ce0:	f7fb fc8a 	bl	80005f8 <__aeabi_dmul>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4606      	mov	r6, r0
 8004cea:	460f      	mov	r7, r1
 8004cec:	4640      	mov	r0, r8
 8004cee:	4649      	mov	r1, r9
 8004cf0:	f7fb facc 	bl	800028c <__adddf3>
 8004cf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cf8:	f7fb fc7e 	bl	80005f8 <__aeabi_dmul>
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	4689      	mov	r9, r1
 8004d00:	b964      	cbnz	r4, 8004d1c <__ieee754_log+0x274>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	f7fb fabd 	bl	8000288 <__aeabi_dsub>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4650      	mov	r0, sl
 8004d14:	4659      	mov	r1, fp
 8004d16:	f7fb fab7 	bl	8000288 <__aeabi_dsub>
 8004d1a:	e6da      	b.n	8004ad2 <__ieee754_log+0x2a>
 8004d1c:	a322      	add	r3, pc, #136	; (adr r3, 8004da8 <__ieee754_log+0x300>)
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d26:	f7fb fc67 	bl	80005f8 <__aeabi_dmul>
 8004d2a:	a321      	add	r3, pc, #132	; (adr r3, 8004db0 <__ieee754_log+0x308>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d38:	f7fb fc5e 	bl	80005f8 <__aeabi_dmul>
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	f7fb faa4 	bl	800028c <__adddf3>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4630      	mov	r0, r6
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	f7fb fa9c 	bl	8000288 <__aeabi_dsub>
 8004d50:	4652      	mov	r2, sl
 8004d52:	465b      	mov	r3, fp
 8004d54:	f7fb fa98 	bl	8000288 <__aeabi_dsub>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	4629      	mov	r1, r5
 8004d60:	e7d9      	b.n	8004d16 <__ieee754_log+0x26e>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4650      	mov	r0, sl
 8004d68:	4659      	mov	r1, fp
 8004d6a:	f7fb fa8d 	bl	8000288 <__aeabi_dsub>
 8004d6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d72:	f7fb fc41 	bl	80005f8 <__aeabi_dmul>
 8004d76:	4606      	mov	r6, r0
 8004d78:	460f      	mov	r7, r1
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	f43f af25 	beq.w	8004bca <__ieee754_log+0x122>
 8004d80:	a309      	add	r3, pc, #36	; (adr r3, 8004da8 <__ieee754_log+0x300>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d8a:	f7fb fc35 	bl	80005f8 <__aeabi_dmul>
 8004d8e:	a308      	add	r3, pc, #32	; (adr r3, 8004db0 <__ieee754_log+0x308>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	4604      	mov	r4, r0
 8004d96:	460d      	mov	r5, r1
 8004d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d9c:	e729      	b.n	8004bf2 <__ieee754_log+0x14a>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	2100      	movs	r1, #0
 8004da2:	e696      	b.n	8004ad2 <__ieee754_log+0x2a>
 8004da4:	f3af 8000 	nop.w
 8004da8:	fee00000 	.word	0xfee00000
 8004dac:	3fe62e42 	.word	0x3fe62e42
 8004db0:	35793c76 	.word	0x35793c76
 8004db4:	3dea39ef 	.word	0x3dea39ef
 8004db8:	55555555 	.word	0x55555555
 8004dbc:	3fd55555 	.word	0x3fd55555
 8004dc0:	df3e5244 	.word	0xdf3e5244
 8004dc4:	3fc2f112 	.word	0x3fc2f112
 8004dc8:	96cb03de 	.word	0x96cb03de
 8004dcc:	3fc74664 	.word	0x3fc74664
 8004dd0:	94229359 	.word	0x94229359
 8004dd4:	3fd24924 	.word	0x3fd24924
 8004dd8:	55555593 	.word	0x55555593
 8004ddc:	3fe55555 	.word	0x3fe55555
 8004de0:	d078c69f 	.word	0xd078c69f
 8004de4:	3fc39a09 	.word	0x3fc39a09
 8004de8:	1d8e78af 	.word	0x1d8e78af
 8004dec:	3fcc71c5 	.word	0x3fcc71c5
 8004df0:	9997fa04 	.word	0x9997fa04
 8004df4:	3fd99999 	.word	0x3fd99999
 8004df8:	c3500000 	.word	0xc3500000
 8004dfc:	43500000 	.word	0x43500000
 8004e00:	7fefffff 	.word	0x7fefffff
 8004e04:	3ff00000 	.word	0x3ff00000
 8004e08:	3fe00000 	.word	0x3fe00000

08004e0c <_init>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr

08004e18 <_fini>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr
