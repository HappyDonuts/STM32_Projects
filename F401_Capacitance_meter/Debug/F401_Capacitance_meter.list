
F401_Capacitance_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000658c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  08006730  08006730  00016730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc0  08007cc0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc8  08007cc8  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08007cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200000c0  08007d8c  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08007d8c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed5d  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f51  00000000  00000000  0002ee49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00030da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c10  00000000  00000000  00031a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016df6  00000000  00000000  00032698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a52a  00000000  00000000  0004948e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cb32  00000000  00000000  000539b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e04ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  000e0568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006714 	.word	0x08006714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08006714 	.word	0x08006714

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	/* MAIN CODE */
	display = ssd1306_new(i2c, 0x78); // 0x79
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <main_s+0xb8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2178      	movs	r1, #120	; 0x78
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fc41 	bl	800177a <ssd1306_new>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <main_s+0xbc>)
 8000efc:	601a      	str	r2, [r3, #0]

	channels[0] = channel_new(1, PORT_Q1, PIN_Q1);
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <main_s+0xc0>)
 8000f00:	6819      	ldr	r1, [r3, #0]
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <main_s+0xc4>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f000 f865 	bl	8000fd8 <channel_new>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <main_s+0xc8>)
 8000f12:	601a      	str	r2, [r3, #0]
	channels[1] = channel_new(2, PORT_Q2, PIN_Q2);
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <main_s+0xcc>)
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <main_s+0xd0>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f000 f85a 	bl	8000fd8 <channel_new>
 8000f24:	4602      	mov	r2, r0
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <main_s+0xc8>)
 8000f28:	605a      	str	r2, [r3, #4]
	channels[2] = channel_new(3, PORT_Q3, PIN_Q3);
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <main_s+0xd4>)
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <main_s+0xd8>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f84f 	bl	8000fd8 <channel_new>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <main_s+0xc8>)
 8000f3e:	609a      	str	r2, [r3, #8]
	channels[3] = channel_new(4, PORT_Q4, PIN_Q4);
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <main_s+0xdc>)
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <main_s+0xe0>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2004      	movs	r0, #4
 8000f4c:	f000 f844 	bl	8000fd8 <channel_new>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <main_s+0xc8>)
 8000f54:	60da      	str	r2, [r3, #12]
	channels[4] = channel_new(5, PORT_Q5, PIN_Q5);
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <main_s+0xe4>)
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <main_s+0xe8>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2005      	movs	r0, #5
 8000f62:	f000 f839 	bl	8000fd8 <channel_new>
 8000f66:	4602      	mov	r2, r0
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <main_s+0xc8>)
 8000f6a:	611a      	str	r2, [r3, #16]

	discharge_cap(1000);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f70:	f000 f8d8 	bl	8001124 <discharge_cap>
//	ch_sel = select_ch();
	ch_sel = 2;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <main_s+0xec>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	601a      	str	r2, [r3, #0]
	charge_cap(channels[ch_sel]);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <main_s+0xec>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <main_s+0xc8>)
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f83f 	bl	8001008 <charge_cap>
	charge_cap(channels[ch_sel]);
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <main_s+0xec>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <main_s+0xc8>)
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f837 	bl	8001008 <charge_cap>
	display_cap();
 8000f9a:	f000 f921 	bl	80011e0 <display_cap>

	while(1){
 8000f9e:	e7fe      	b.n	8000f9e <main_s+0xb6>
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000114 	.word	0x20000114
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000118 	.word	0x20000118
 8000fb4:	20000010 	.word	0x20000010
 8000fb8:	20000014 	.word	0x20000014
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	2000001c 	.word	0x2000001c
 8000fc4:	20000020 	.word	0x20000020
 8000fc8:	20000024 	.word	0x20000024
 8000fcc:	20000028 	.word	0x20000028
 8000fd0:	2000002c 	.word	0x2000002c
 8000fd4:	20000110 	.word	0x20000110

08000fd8 <channel_new>:
	else {
		return 1;
	}
}

channel_t* channel_new(uint8_t num, GPIO_TypeDef* port, uint16_t pin){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	80bb      	strh	r3, [r7, #4]
	channel_t* ch = malloc(sizeof(*ch));
 8000fe8:	2008      	movs	r0, #8
 8000fea:	f003 fb97 	bl	800471c <malloc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60fb      	str	r3, [r7, #12]
	ch->port = port;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	601a      	str	r2, [r3, #0]
	ch->pin = pin;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	88ba      	ldrh	r2, [r7, #4]
 8000ffc:	809a      	strh	r2, [r3, #4]
	return ch;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <charge_cap>:

uint32_t charge_cap(channel_t* ch){
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PORT_Q6, PIN_Q6, 0);
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <charge_cap+0x100>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <charge_cap+0x104>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	4619      	mov	r1, r3
 800101c:	f001 fd8e 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f001 fad5 	bl	80025d0 <HAL_Delay>
	HAL_GPIO_WritePin(ch->port, ch->pin, 0);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	889b      	ldrh	r3, [r3, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	f001 fd83 	bl	8002b3c <HAL_GPIO_WritePin>
	tim_charge->Instance->CNT = 0;
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <charge_cap+0x108>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
	cycles = 0;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <charge_cap+0x10c>)
 8001042:	2200      	movs	r2, #0
 8001044:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim_charge);
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <charge_cap+0x108>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f002 ff69 	bl	8003f22 <HAL_TIM_Base_Start_IT>

	while(status != CHARGED){
 8001050:	e002      	b.n	8001058 <charge_cap+0x50>
		HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f001 fabc 	bl	80025d0 <HAL_Delay>
	while(status != CHARGED){
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <charge_cap+0x110>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d1f8      	bne.n	8001052 <charge_cap+0x4a>
	}
	counter = (tim_charge->Instance->CNT + cycles*65000);
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <charge_cap+0x108>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <charge_cap+0x10c>)
 800106a:	8812      	ldrh	r2, [r2, #0]
 800106c:	4611      	mov	r1, r2
 800106e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001072:	fb02 f201 	mul.w	r2, r2, r1
 8001076:	4413      	add	r3, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa43 	bl	8000504 <__aeabi_ui2d>
 800107e:	4603      	mov	r3, r0
 8001080:	460c      	mov	r4, r1
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <charge_cap+0x114>)
 8001084:	e9c2 3400 	strd	r3, r4, [r2]
	double time_constant = counter/F_CLK;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <charge_cap+0x114>)
 800108a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108e:	a31a      	add	r3, pc, #104	; (adr r3, 80010f8 <charge_cap+0xf0>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fbda 	bl	800084c <__aeabi_ddiv>
 8001098:	4603      	mov	r3, r0
 800109a:	460c      	mov	r4, r1
 800109c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double delay_ms = 1+5*1000*time_constant;
 80010a0:	a317      	add	r3, pc, #92	; (adr r3, 8001100 <charge_cap+0xf8>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010aa:	f7ff faa5 	bl	80005f8 <__aeabi_dmul>
 80010ae:	4603      	mov	r3, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	4618      	mov	r0, r3
 80010b4:	4621      	mov	r1, r4
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <charge_cap+0x118>)
 80010bc:	f7ff f8e6 	bl	800028c <__adddf3>
 80010c0:	4603      	mov	r3, r0
 80010c2:	460c      	mov	r4, r1
 80010c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	discharge_cap(delay_ms);
 80010c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010cc:	f7ff fd6c 	bl	8000ba8 <__aeabi_d2uiz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f825 	bl	8001124 <discharge_cap>
	return counter;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <charge_cap+0x114>)
 80010dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010e0:	4618      	mov	r0, r3
 80010e2:	4621      	mov	r1, r4
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	00000000 	.word	0x00000000
 80010fc:	419406f4 	.word	0x419406f4
 8001100:	00000000 	.word	0x00000000
 8001104:	40b38800 	.word	0x40b38800
 8001108:	20000030 	.word	0x20000030
 800110c:	20000034 	.word	0x20000034
 8001110:	20000004 	.word	0x20000004
 8001114:	200000dc 	.word	0x200000dc
 8001118:	2000012c 	.word	0x2000012c
 800111c:	200000e0 	.word	0x200000e0
 8001120:	3ff00000 	.word	0x3ff00000

08001124 <discharge_cap>:

void discharge_cap(uint16_t delay){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(PORT_Q1, PIN_Q1, 1);
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <discharge_cap+0x88>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <discharge_cap+0x8c>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f001 fcff 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_Q2, PIN_Q2, 1);
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <discharge_cap+0x90>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <discharge_cap+0x94>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	4619      	mov	r1, r3
 800114a:	f001 fcf7 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_Q3, PIN_Q3, 1);
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <discharge_cap+0x98>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <discharge_cap+0x9c>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2201      	movs	r2, #1
 8001158:	4619      	mov	r1, r3
 800115a:	f001 fcef 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_Q4, PIN_Q4, 1);
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <discharge_cap+0xa0>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <discharge_cap+0xa4>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f001 fce7 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_Q5, PIN_Q5, 1);
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <discharge_cap+0xa8>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <discharge_cap+0xac>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	f001 fcdf 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f001 fa26 	bl	80025d0 <HAL_Delay>
	HAL_GPIO_WritePin(PORT_Q6, PIN_Q6, 1);
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <discharge_cap+0xb0>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <discharge_cap+0xb4>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	f001 fcd4 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_Delay(delay);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fa1a 	bl	80025d0 <HAL_Delay>
	status = DISCHARGED;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <discharge_cap+0xb8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	20000010 	.word	0x20000010
 80011b8:	20000014 	.word	0x20000014
 80011bc:	20000018 	.word	0x20000018
 80011c0:	2000001c 	.word	0x2000001c
 80011c4:	20000020 	.word	0x20000020
 80011c8:	20000024 	.word	0x20000024
 80011cc:	20000028 	.word	0x20000028
 80011d0:	2000002c 	.word	0x2000002c
 80011d4:	20000030 	.word	0x20000030
 80011d8:	20000034 	.word	0x20000034
 80011dc:	2000012c 	.word	0x2000012c

080011e0 <display_cap>:

void display_cap(void){
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
	double value;
	switch (ch_sel){
 80011e6:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <display_cap+0x1b0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	f200 80b9 	bhi.w	8001362 <display_cap+0x182>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <display_cap+0x18>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	0800120d 	.word	0x0800120d
 80011fc:	08001277 	.word	0x08001277
 8001200:	080012a3 	.word	0x080012a3
 8001204:	080012cf 	.word	0x080012cf
 8001208:	08001339 	.word	0x08001339
		case 0:
			value = counter/84;
 800120c:	4b61      	ldr	r3, [pc, #388]	; (8001394 <display_cap+0x1b4>)
 800120e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b60      	ldr	r3, [pc, #384]	; (8001398 <display_cap+0x1b8>)
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4603      	mov	r3, r0
 800121e:	460c      	mov	r4, r1
 8001220:	e9c7 3400 	strd	r3, r4, [r7]
			if (value > 1000){
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b5c      	ldr	r3, [pc, #368]	; (800139c <display_cap+0x1bc>)
 800122a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800122e:	f7ff fc73 	bl	8000b18 <__aeabi_dcmpgt>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d014      	beq.n	8001262 <display_cap+0x82>
				value = value/1000;
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b57      	ldr	r3, [pc, #348]	; (800139c <display_cap+0x1bc>)
 800123e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001242:	f7ff fb03 	bl	800084c <__aeabi_ddiv>
 8001246:	4603      	mov	r3, r0
 8001248:	460c      	mov	r4, r1
 800124a:	e9c7 3400 	strd	r3, r4, [r7]
				SSD1306_Putdouble(display, value, 2, "nF", 1);
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <display_cap+0x1c0>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	4a53      	ldr	r2, [pc, #332]	; (80013a4 <display_cap+0x1c4>)
 8001256:	2102      	movs	r1, #2
 8001258:	ed97 0b00 	vldr	d0, [r7]
 800125c:	f000 feaa 	bl	8001fb4 <SSD1306_Putdouble>
			} else {
				SSD1306_Putdouble(display, value, 2, "pF", 1);
			}
			break;
 8001260:	e07f      	b.n	8001362 <display_cap+0x182>
				SSD1306_Putdouble(display, value, 2, "pF", 1);
 8001262:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <display_cap+0x1c0>)
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <display_cap+0x1c8>)
 800126a:	2102      	movs	r1, #2
 800126c:	ed97 0b00 	vldr	d0, [r7]
 8001270:	f000 fea0 	bl	8001fb4 <SSD1306_Putdouble>
			break;
 8001274:	e075      	b.n	8001362 <display_cap+0x182>
		case 1:
			value = counter/(84*100);
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <display_cap+0x1b4>)
 8001278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127c:	a342      	add	r3, pc, #264	; (adr r3, 8001388 <display_cap+0x1a8>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff fae3 	bl	800084c <__aeabi_ddiv>
 8001286:	4603      	mov	r3, r0
 8001288:	460c      	mov	r4, r1
 800128a:	e9c7 3400 	strd	r3, r4, [r7]
			SSD1306_Putdouble(display, value, 2, "nF", 1);
 800128e:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <display_cap+0x1c0>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <display_cap+0x1c4>)
 8001296:	2102      	movs	r1, #2
 8001298:	ed97 0b00 	vldr	d0, [r7]
 800129c:	f000 fe8a 	bl	8001fb4 <SSD1306_Putdouble>
			break;
 80012a0:	e05f      	b.n	8001362 <display_cap+0x182>
		case 2:
			value = counter/(84*10);
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <display_cap+0x1b4>)
 80012a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <display_cap+0x1cc>)
 80012ae:	f7ff facd 	bl	800084c <__aeabi_ddiv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	e9c7 3400 	strd	r3, r4, [r7]
			SSD1306_Putdouble(display, value, 2, "nF", 1);
 80012ba:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <display_cap+0x1c0>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <display_cap+0x1c4>)
 80012c2:	2102      	movs	r1, #2
 80012c4:	ed97 0b00 	vldr	d0, [r7]
 80012c8:	f000 fe74 	bl	8001fb4 <SSD1306_Putdouble>
			break;
 80012cc:	e049      	b.n	8001362 <display_cap+0x182>
		case 3:
			value = counter/84;
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <display_cap+0x1b4>)
 80012d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <display_cap+0x1b8>)
 80012da:	f7ff fab7 	bl	800084c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	e9c7 3400 	strd	r3, r4, [r7]
			if (value > 1000){
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <display_cap+0x1bc>)
 80012ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012f0:	f7ff fc12 	bl	8000b18 <__aeabi_dcmpgt>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d014      	beq.n	8001324 <display_cap+0x144>
				value = value/1000;
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <display_cap+0x1bc>)
 8001300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001304:	f7ff faa2 	bl	800084c <__aeabi_ddiv>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	e9c7 3400 	strd	r3, r4, [r7]
				SSD1306_Putdouble(display, value, 2, "uF", 1);
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <display_cap+0x1c0>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <display_cap+0x1d0>)
 8001318:	2102      	movs	r1, #2
 800131a:	ed97 0b00 	vldr	d0, [r7]
 800131e:	f000 fe49 	bl	8001fb4 <SSD1306_Putdouble>
			} else {
				SSD1306_Putdouble(display, value, 2, "nF", 1);
			}
			break;
 8001322:	e01e      	b.n	8001362 <display_cap+0x182>
				SSD1306_Putdouble(display, value, 2, "nF", 1);
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <display_cap+0x1c0>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <display_cap+0x1c4>)
 800132c:	2102      	movs	r1, #2
 800132e:	ed97 0b00 	vldr	d0, [r7]
 8001332:	f000 fe3f 	bl	8001fb4 <SSD1306_Putdouble>
			break;
 8001336:	e014      	b.n	8001362 <display_cap+0x182>
		case 4:
			value = counter/(84*100);
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <display_cap+0x1b4>)
 800133a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133e:	a312      	add	r3, pc, #72	; (adr r3, 8001388 <display_cap+0x1a8>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff fa82 	bl	800084c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	e9c7 3400 	strd	r3, r4, [r7]
			SSD1306_Putdouble(display, value, 2, "uF", 1);
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <display_cap+0x1c0>)
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <display_cap+0x1d0>)
 8001358:	2102      	movs	r1, #2
 800135a:	ed97 0b00 	vldr	d0, [r7]
 800135e:	f000 fe29 	bl	8001fb4 <SSD1306_Putdouble>
	}

	SSD1306_Putint(display, ch_sel, "ch", 2);
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <display_cap+0x1c0>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <display_cap+0x1b0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	2302      	movs	r3, #2
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <display_cap+0x1d4>)
 8001370:	f000 fcae 	bl	8001cd0 <SSD1306_Putint>
	SSD1306_UpdateScreen(display);
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <display_cap+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fada 	bl	8001932 <SSD1306_UpdateScreen>
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	00000000 	.word	0x00000000
 800138c:	40c06800 	.word	0x40c06800
 8001390:	20000110 	.word	0x20000110
 8001394:	200000e0 	.word	0x200000e0
 8001398:	40550000 	.word	0x40550000
 800139c:	408f4000 	.word	0x408f4000
 80013a0:	20000114 	.word	0x20000114
 80013a4:	08006730 	.word	0x08006730
 80013a8:	08006734 	.word	0x08006734
 80013ac:	408a4000 	.word	0x408a4000
 80013b0:	08006738 	.word	0x08006738
 80013b4:	0800673c 	.word	0x0800673c

080013b8 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback.
  * @retval none
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	/* TIM CALLBACK CODE */
	if (htim == tim_charge){
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d10c      	bne.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		static uint8_t ready = 0;
		if (ready == 1){
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d105      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x26>
			cycles++;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013dc:	801a      	strh	r2, [r3, #0]
		}
		ready = 1;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	}
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20000004 	.word	0x20000004
 80013f4:	200000e8 	.word	0x200000e8
 80013f8:	200000dc 	.word	0x200000dc

080013fc <HAL_GPIO_EXTI_Callback>:

/**
  * @brief  EXTI line detection callbacks.
  * @retval none
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	/* GPIO CALLBACK CODE */
	if (GPIO_Pin == GPIO_PIN_14){
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800140c:	d10d      	bne.n	800142a <HAL_GPIO_EXTI_Callback+0x2e>
		HAL_TIM_Base_Stop_IT(tim_charge);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_GPIO_EXTI_Callback+0x38>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fda9 	bl	8003f6a <HAL_TIM_Base_Stop_IT>
		status = CHARGED;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_GPIO_EXTI_Callback+0x3c>)
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_GPIO_EXTI_Callback+0x40>)
 8001426:	f001 fb89 	bl	8002b3c <HAL_GPIO_WritePin>
	}
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000004 	.word	0x20000004
 8001438:	2000012c 	.word	0x2000012c
 800143c:	40020800 	.word	0x40020800

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f001 f852 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f80a 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 f8ec 	bl	8001628 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001450:	f000 f870 	bl	8001534 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001454:	f000 f89c 	bl	8001590 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 8001458:	f7ff fd46 	bl	8000ee8 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800145c:	e7fe      	b.n	800145c <main+0x1c>
	...

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2230      	movs	r2, #48	; 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f95c 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <SystemClock_Config+0xcc>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <SystemClock_Config+0xcc>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <SystemClock_Config+0xcc>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <SystemClock_Config+0xd0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014ac:	4a20      	ldr	r2, [pc, #128]	; (8001530 <SystemClock_Config+0xd0>)
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <SystemClock_Config+0xd0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	2310      	movs	r3, #16
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80014d8:	2354      	movs	r3, #84	; 0x54
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 f8c7 	bl	800367c <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014f4:	f000 f93a 	bl	800176c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fb21 	bl	8003b5c <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001520:	f000 f924 	bl	800176c <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_I2C2_Init+0x50>)
 800153a:	4a13      	ldr	r2, [pc, #76]	; (8001588 <MX_I2C2_Init+0x54>)
 800153c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_I2C2_Init+0x50>)
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_I2C2_Init+0x58>)
 8001542:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_I2C2_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_I2C2_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_I2C2_Init+0x50>)
 8001552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001556:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_I2C2_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_I2C2_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <MX_I2C2_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_I2C2_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <MX_I2C2_Init+0x50>)
 8001572:	f001 fb15 	bl	8002ba0 <HAL_I2C_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800157c:	f000 f8f6 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000130 	.word	0x20000130
 8001588:	40005800 	.word	0x40005800
 800158c:	00061a80 	.word	0x00061a80

08001590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	463b      	mov	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_TIM2_Init+0x94>)
 80015ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_TIM2_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_TIM2_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64999;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_TIM2_Init+0x94>)
 80015c2:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80015c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_TIM2_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <MX_TIM2_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d4:	4813      	ldr	r0, [pc, #76]	; (8001624 <MX_TIM2_Init+0x94>)
 80015d6:	f002 fc79 	bl	8003ecc <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015e0:	f000 f8c4 	bl	800176c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_TIM2_Init+0x94>)
 80015f2:	f002 fded 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015fc:	f000 f8b6 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_TIM2_Init+0x94>)
 800160e:	f002 ffd9 	bl	80045c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001618:	f000 f8a8 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000184 	.word	0x20000184

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b45      	ldr	r3, [pc, #276]	; (8001758 <MX_GPIO_Init+0x130>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a44      	ldr	r2, [pc, #272]	; (8001758 <MX_GPIO_Init+0x130>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b42      	ldr	r3, [pc, #264]	; (8001758 <MX_GPIO_Init+0x130>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <MX_GPIO_Init+0x130>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a3d      	ldr	r2, [pc, #244]	; (8001758 <MX_GPIO_Init+0x130>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <MX_GPIO_Init+0x130>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <MX_GPIO_Init+0x130>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a36      	ldr	r2, [pc, #216]	; (8001758 <MX_GPIO_Init+0x130>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_GPIO_Init+0x130>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <MX_GPIO_Init+0x130>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <MX_GPIO_Init+0x130>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <MX_GPIO_Init+0x130>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b4:	4829      	ldr	r0, [pc, #164]	; (800175c <MX_GPIO_Init+0x134>)
 80016b6:	f001 fa41 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2110      	movs	r1, #16
 80016be:	4828      	ldr	r0, [pc, #160]	; (8001760 <MX_GPIO_Init+0x138>)
 80016c0:	f001 fa3c 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80016ca:	4825      	ldr	r0, [pc, #148]	; (8001760 <MX_GPIO_Init+0x138>)
 80016cc:	f001 fa36 	bl	8002b3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	481c      	ldr	r0, [pc, #112]	; (800175c <MX_GPIO_Init+0x134>)
 80016ea:	f001 f8a5 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80016ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_GPIO_Init+0x13c>)
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4817      	ldr	r0, [pc, #92]	; (8001760 <MX_GPIO_Init+0x138>)
 8001704:	f001 f898 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_GPIO_Init+0x13c>)
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4812      	ldr	r0, [pc, #72]	; (8001768 <MX_GPIO_Init+0x140>)
 800171e:	f001 f88b 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8001722:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001726:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <MX_GPIO_Init+0x138>)
 800173c:	f001 f87c 	bl	8002838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2028      	movs	r0, #40	; 0x28
 8001746:	f001 f840 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800174a:	2028      	movs	r0, #40	; 0x28
 800174c:	f001 f859 	bl	8002802 <HAL_NVIC_EnableIRQ>

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020800 	.word	0x40020800
 8001760:	40020400 	.word	0x40020400
 8001764:	10110000 	.word	0x10110000
 8001768:	40020000 	.word	0x40020000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <ssd1306_new>:
#include "ssd1306_basic.h"

/* SSD1306 data buffer */
//static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

ssd1306_t* ssd1306_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	70fb      	strb	r3, [r7, #3]
	ssd1306_t* ssd1306 = malloc(sizeof(*ssd1306));
 8001786:	f44f 6086 	mov.w	r0, #1072	; 0x430
 800178a:	f002 ffc7 	bl	800471c <malloc>
 800178e:	4603      	mov	r3, r0
 8001790:	60fb      	str	r3, [r7, #12]
	SSD1306_Init(ssd1306, hi2c, addr);
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	461a      	mov	r2, r3
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 f805 	bl	80017a8 <SSD1306_Init>
	return ssd1306;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <SSD1306_Init>:

uint8_t SSD1306_Init(ssd1306_t* ssd1306, I2C_HandleTypeDef *hi2c, uint8_t addr) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	4613      	mov	r3, r2
 80017b4:	71fb      	strb	r3, [r7, #7]

	ssd1306->hi2c = hi2c;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	605a      	str	r2, [r3, #4]
	ssd1306->addr = addr;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	701a      	strb	r2, [r3, #0]
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306->hi2c, ssd1306->addr, 1, 20000) != HAL_OK) {
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6858      	ldr	r0, [r3, #4]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b299      	uxth	r1, r3
 80017cc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017d0:	2201      	movs	r2, #1
 80017d2:	f001 fc1b 	bl	800300c <HAL_I2C_IsDeviceReady>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SSD1306_Init+0x38>
		/* Return false */
		return 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	e0a4      	b.n	800192a <SSD1306_Init+0x182>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;
	
	/* Init LCD */
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE);
 80017e0:	22ae      	movs	r2, #174	; 0xae
 80017e2:	2100      	movs	r1, #0
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fd0a 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE); //display off
 80017ea:	22ae      	movs	r2, #174	; 0xae
 80017ec:	2100      	movs	r1, #0
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fd05 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //Set Memory Addressing Mode
 80017f4:	2220      	movs	r2, #32
 80017f6:	2100      	movs	r1, #0
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 fd00 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017fe:	2210      	movs	r2, #16
 8001800:	2100      	movs	r1, #0
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 fcfb 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001808:	22b0      	movs	r2, #176	; 0xb0
 800180a:	2100      	movs	r1, #0
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fcf6 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xC8); //Set COM Output Scan Direction
 8001812:	22c8      	movs	r2, #200	; 0xc8
 8001814:	2100      	movs	r1, #0
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fcf1 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //---set low column address
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 fcec 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //---set high column address
 8001826:	2210      	movs	r2, #16
 8001828:	2100      	movs	r1, #0
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 fce7 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x40); //--set start line address
 8001830:	2240      	movs	r2, #64	; 0x40
 8001832:	2100      	movs	r1, #0
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 fce2 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x81); //--set contrast control register
 800183a:	2281      	movs	r2, #129	; 0x81
 800183c:	2100      	movs	r1, #0
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 fcdd 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xFF);
 8001844:	22ff      	movs	r2, #255	; 0xff
 8001846:	2100      	movs	r1, #0
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 fcd8 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA1); //--set segment re-map 0 to 127
 800184e:	22a1      	movs	r2, #161	; 0xa1
 8001850:	2100      	movs	r1, #0
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fcd3 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA6); //--set normal display
 8001858:	22a6      	movs	r2, #166	; 0xa6
 800185a:	2100      	movs	r1, #0
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 fcce 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 8001862:	22a8      	movs	r2, #168	; 0xa8
 8001864:	2100      	movs	r1, #0
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fcc9 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x3F); //
 800186c:	223f      	movs	r2, #63	; 0x3f
 800186e:	2100      	movs	r1, #0
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 fcc4 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001876:	22a4      	movs	r2, #164	; 0xa4
 8001878:	2100      	movs	r1, #0
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 fcbf 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD3); //-set display offset
 8001880:	22d3      	movs	r2, #211	; 0xd3
 8001882:	2100      	movs	r1, #0
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 fcba 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //-not offset
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fcb5 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 8001894:	22d5      	movs	r2, #213	; 0xd5
 8001896:	2100      	movs	r1, #0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fcb0 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xF0); //--set divide ratio
 800189e:	22f0      	movs	r2, #240	; 0xf0
 80018a0:	2100      	movs	r1, #0
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fcab 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD9); //--set pre-charge period
 80018a8:	22d9      	movs	r2, #217	; 0xd9
 80018aa:	2100      	movs	r1, #0
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fca6 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x22); //
 80018b2:	2222      	movs	r2, #34	; 0x22
 80018b4:	2100      	movs	r1, #0
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fca1 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDA); //--set com pins hardware configuration
 80018bc:	22da      	movs	r2, #218	; 0xda
 80018be:	2100      	movs	r1, #0
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fc9c 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x12);
 80018c6:	2212      	movs	r2, #18
 80018c8:	2100      	movs	r1, #0
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fc97 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDB); //--set vcomh
 80018d0:	22db      	movs	r2, #219	; 0xdb
 80018d2:	2100      	movs	r1, #0
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fc92 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //0x20,0.77xVcc
 80018da:	2220      	movs	r2, #32
 80018dc:	2100      	movs	r1, #0
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 fc8d 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x8D); //--set DC-DC enable
 80018e4:	228d      	movs	r2, #141	; 0x8d
 80018e6:	2100      	movs	r1, #0
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fc88 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x14); //
 80018ee:	2214      	movs	r2, #20
 80018f0:	2100      	movs	r1, #0
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fc83 	bl	80021fe <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAF); //--turn on SSD1306 panel
 80018f8:	22af      	movs	r2, #175	; 0xaf
 80018fa:	2100      	movs	r1, #0
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fc7e 	bl	80021fe <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(ssd1306, SSD1306_COLOR_BLACK);
 8001902:	2100      	movs	r1, #0
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f845 	bl	8001994 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(ssd1306);
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f811 	bl	8001932 <SSD1306_UpdateScreen>
	
	/* Set default values */
	ssd1306->CurrentX = 0;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = 0;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	815a      	strh	r2, [r3, #10]
	
	/* Initialized OK */
	ssd1306->Initialized = 1;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	735a      	strb	r2, [r3, #13]
	ssd1306->Inverted= 0;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	731a      	strb	r2, [r3, #12]
	
	/* Return OK */
	return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(ssd1306_t* ssd1306) {
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e022      	b.n	8001986 <SSD1306_UpdateScreen+0x54>
		ssd1306_I2C_Write(ssd1306, 0x00, 0xB0 + m);
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	3b50      	subs	r3, #80	; 0x50
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	2100      	movs	r1, #0
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fc57 	bl	80021fe <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x00);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fc52 	bl	80021fe <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x10);
 800195a:	2210      	movs	r2, #16
 800195c:	2100      	movs	r1, #0
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fc4d 	bl	80021fe <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(ssd1306, 0x40, &ssd1306->SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	4613      	mov	r3, r2
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	3308      	adds	r3, #8
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	1d9a      	adds	r2, r3, #6
 8001976:	2384      	movs	r3, #132	; 0x84
 8001978:	2140      	movs	r1, #64	; 0x40
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fbe7 	bl	800214e <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3301      	adds	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	2b07      	cmp	r3, #7
 800198a:	d9d9      	bls.n	8001940 <SSD1306_UpdateScreen+0xe>
	}
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <SSD1306_Fill>:

void SSD1306_Fill(ssd1306_t* ssd1306, SSD1306_COLOR_t color) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(ssd1306->SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(ssd1306->SSD1306_Buffer));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 000e 	add.w	r0, r3, #14
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <SSD1306_Fill+0x1c>
 80019ac:	2300      	movs	r3, #0
 80019ae:	e000      	b.n	80019b2 <SSD1306_Fill+0x1e>
 80019b0:	23ff      	movs	r3, #255	; 0xff
 80019b2:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80019b6:	4619      	mov	r1, r3
 80019b8:	f002 feb8 	bl	800472c <memset>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(ssd1306_t* ssd1306, uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80019c4:	b490      	push	{r4, r7}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	4608      	mov	r0, r1
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	817b      	strh	r3, [r7, #10]
 80019d6:	460b      	mov	r3, r1
 80019d8:	813b      	strh	r3, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	71fb      	strb	r3, [r7, #7]
	if (
 80019de:	897b      	ldrh	r3, [r7, #10]
 80019e0:	2b83      	cmp	r3, #131	; 0x83
 80019e2:	d85a      	bhi.n	8001a9a <SSD1306_DrawPixel+0xd6>
		x >= SSD1306_WIDTH ||
 80019e4:	893b      	ldrh	r3, [r7, #8]
 80019e6:	2b3f      	cmp	r3, #63	; 0x3f
 80019e8:	d857      	bhi.n	8001a9a <SSD1306_DrawPixel+0xd6>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (ssd1306->Inverted) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	7b1b      	ldrb	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <SSD1306_DrawPixel+0x3c>
		color = (SSD1306_COLOR_t)!color;
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	71fb      	strb	r3, [r7, #7]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d123      	bne.n	8001a4e <SSD1306_DrawPixel+0x8a>
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a06:	897a      	ldrh	r2, [r7, #10]
 8001a08:	893b      	ldrh	r3, [r7, #8]
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	b298      	uxth	r0, r3
 8001a0e:	4601      	mov	r1, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	015b      	lsls	r3, r3, #5
 8001a14:	440b      	add	r3, r1
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	7b9b      	ldrb	r3, [r3, #14]
 8001a20:	b25a      	sxtb	r2, r3
 8001a22:	893b      	ldrh	r3, [r7, #8]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b25c      	sxtb	r4, r3
 8001a34:	897a      	ldrh	r2, [r7, #10]
 8001a36:	4601      	mov	r1, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	440b      	add	r3, r1
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	b2e1      	uxtb	r1, r4
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	460a      	mov	r2, r1
 8001a4a:	739a      	strb	r2, [r3, #14]
 8001a4c:	e026      	b.n	8001a9c <SSD1306_DrawPixel+0xd8>
	} else {
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a4e:	897a      	ldrh	r2, [r7, #10]
 8001a50:	893b      	ldrh	r3, [r7, #8]
 8001a52:	08db      	lsrs	r3, r3, #3
 8001a54:	b298      	uxth	r0, r3
 8001a56:	4601      	mov	r1, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	440b      	add	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	7b9b      	ldrb	r3, [r3, #14]
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b25c      	sxtb	r4, r3
 8001a80:	897a      	ldrh	r2, [r7, #10]
 8001a82:	4601      	mov	r1, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	440b      	add	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2e1      	uxtb	r1, r4
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	460a      	mov	r2, r1
 8001a96:	739a      	strb	r2, [r3, #14]
 8001a98:	e000      	b.n	8001a9c <SSD1306_DrawPixel+0xd8>
		return;
 8001a9a:	bf00      	nop
	}
}
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc90      	pop	{r4, r7}
 8001aa2:	4770      	bx	lr

08001aa4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(ssd1306_t* ssd1306, uint16_t x, uint16_t y) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	ssd1306->CurrentX = x;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = y;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	883a      	ldrh	r2, [r7, #0]
 8001abe:	815a      	strh	r2, [r3, #10]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SSD1306_Putc>:

char SSD1306_Putc(ssd1306_t* ssd1306, uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	460b      	mov	r3, r1
 8001ada:	72fb      	strb	r3, [r7, #11]
 8001adc:	4613      	mov	r3, r2
 8001ade:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	891b      	ldrh	r3, [r3, #8]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
	if (
 8001aec:	2b83      	cmp	r3, #131	; 0x83
 8001aee:	dc07      	bgt.n	8001b00 <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (ssd1306->CurrentY + Font->FontHeight)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	895b      	ldrh	r3, [r3, #10]
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	785b      	ldrb	r3, [r3, #1]
 8001afa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8001afc:	2b3f      	cmp	r3, #63	; 0x3f
 8001afe:	dd01      	ble.n	8001b04 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e05e      	b.n	8001bc2 <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	e04b      	b.n	8001ba2 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	3b20      	subs	r3, #32
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	7849      	ldrb	r1, [r1, #1]
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	440b      	add	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	e030      	b.n	8001b90 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d010      	beq.n	8001b60 <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t) color);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	891a      	ldrh	r2, [r3, #8]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	895a      	ldrh	r2, [r3, #10]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	7abb      	ldrb	r3, [r7, #10]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff ff33 	bl	80019c4 <SSD1306_DrawPixel>
 8001b5e:	e014      	b.n	8001b8a <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	891a      	ldrh	r2, [r3, #8]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	895a      	ldrh	r2, [r3, #10]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	7abb      	ldrb	r3, [r7, #10]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff ff1d 	bl	80019c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d3c8      	bcc.n	8001b2e <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	785b      	ldrb	r3, [r3, #1]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d3ad      	bcc.n	8001b0a <SSD1306_Putc+0x3e>
			}
		}
	}
	
	/* Increase pointer */
	ssd1306->CurrentX += Font->FontWidth;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	891a      	ldrh	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	811a      	strh	r2, [r3, #8]
	
	/* Return character written */
	return ch;
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <int_str>:
 * @brief  Represents an integer number with a char array
 * @param  integer: int to be represented
 * @param  unit: unit of the value, 2 char array ("mV", " A", etc.)
 * @retval Char array containing a char for each digit
 */
char* int_str(int integer,  char* unit){
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	466b      	mov	r3, sp
 8001bd8:	461d      	mov	r5, r3
	char negative = ' ';
 8001bda:	2320      	movs	r3, #32
 8001bdc:	76fb      	strb	r3, [r7, #27]
	if (integer < 0) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da04      	bge.n	8001bee <int_str+0x22>
		integer = -integer;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	425b      	negs	r3, r3
 8001be8:	607b      	str	r3, [r7, #4]
		negative = '-';
 8001bea:	232d      	movs	r3, #45	; 0x2d
 8001bec:	76fb      	strb	r3, [r7, #27]
	}

	int size = SSD1306_digits(integer);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fa54 	bl	800209c <SSD1306_digits>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	617b      	str	r3, [r7, #20]
	if (size > 7){
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	dd01      	ble.n	8001c02 <int_str+0x36>
			return "OVERLOAD";
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <int_str+0xf8>)
 8001c00:	e05b      	b.n	8001cba <int_str+0xee>
	}
	char data_char[size];
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	1e43      	subs	r3, r0, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f04f 0400 	mov.w	r4, #0
 8001c18:	00d4      	lsls	r4, r2, #3
 8001c1a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c1e:	00cb      	lsls	r3, r1, #3
 8001c20:	4603      	mov	r3, r0
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f04f 0400 	mov.w	r4, #0
 8001c30:	00d4      	lsls	r4, r2, #3
 8001c32:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c36:	00cb      	lsls	r3, r1, #3
 8001c38:	4603      	mov	r3, r0
 8001c3a:	3307      	adds	r3, #7
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	ebad 0d03 	sub.w	sp, sp, r3
 8001c44:	466b      	mov	r3, sp
 8001c46:	3300      	adds	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
	sprintf(data_char,"%d", integer);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	491e      	ldr	r1, [pc, #120]	; (8001cc8 <int_str+0xfc>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fe2b 	bl	80048ac <siprintf>

	static char int_str[11];
	for(int i=1; i<11; i++){
 8001c56:	2301      	movs	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e024      	b.n	8001ca6 <int_str+0xda>
		if (i<size+1){
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	da09      	bge.n	8001c7a <int_str+0xae>
			int_str[i] = data_char[i-1];
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	5cd1      	ldrb	r1, [r2, r3]
 8001c6e:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <int_str+0x100>)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4413      	add	r3, r2
 8001c74:	460a      	mov	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e012      	b.n	8001ca0 <int_str+0xd4>
		} else if (i < 9){
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	dc05      	bgt.n	8001c8c <int_str+0xc0>
			int_str[i] = ' ';
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <int_str+0x100>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	2220      	movs	r2, #32
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e009      	b.n	8001ca0 <int_str+0xd4>
		} else {
			int_str[i] = unit[i-9];
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3b09      	subs	r3, #9
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	7819      	ldrb	r1, [r3, #0]
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <int_str+0x100>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<11; i++){
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b0a      	cmp	r3, #10
 8001caa:	ddd7      	ble.n	8001c5c <int_str+0x90>
		}
	}
	int_str[0] = negative;
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <int_str+0x100>)
 8001cae:	7efb      	ldrb	r3, [r7, #27]
 8001cb0:	7013      	strb	r3, [r2, #0]
	int_str[8] = ' ';
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <int_str+0x100>)
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	721a      	strb	r2, [r3, #8]
	return int_str;
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <int_str+0x100>)
 8001cba:	46ad      	mov	sp, r5
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	08006740 	.word	0x08006740
 8001cc8:	0800674c 	.word	0x0800674c
 8001ccc:	200000ec 	.word	0x200000ec

08001cd0 <SSD1306_Putint>:
 * @note   @ref If the number has mora than 6 digits, displays OVERLOAD
 * @param  data: integer to be written
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @param  slot: slot to be used. 1, 2, and 3 are large slots. 4 and 5 are small slots
 */
void SSD1306_Putint(ssd1306_t* ssd1306, int data, char* unit, uint8_t slot) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	70fb      	strb	r3, [r7, #3]

	char* integer_str = int_str(data, unit);
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	68b8      	ldr	r0, [r7, #8]
 8001ce2:	f7ff ff73 	bl	8001bcc <int_str>
 8001ce6:	61b8      	str	r0, [r7, #24]
	uint16_t x_slot = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	83fb      	strh	r3, [r7, #30]
	uint16_t y_slot = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	83bb      	strh	r3, [r7, #28]
	FontDef_t font = Font_11x18;
 8001cf0:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <SSD1306_Putint+0xcc>)
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfa:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (slot) {
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d82b      	bhi.n	8001d5e <SSD1306_Putint+0x8e>
 8001d06:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <SSD1306_Putint+0x3c>)
 8001d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0c:	08001d21 	.word	0x08001d21
 8001d10:	08001d27 	.word	0x08001d27
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d33 	.word	0x08001d33
 8001d1c:	08001d47 	.word	0x08001d47
	case 1:
		y_slot = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	83bb      	strh	r3, [r7, #28]
		break;
 8001d24:	e01b      	b.n	8001d5e <SSD1306_Putint+0x8e>
	case 2:
		y_slot = 17;
 8001d26:	2311      	movs	r3, #17
 8001d28:	83bb      	strh	r3, [r7, #28]
		break;
 8001d2a:	e018      	b.n	8001d5e <SSD1306_Putint+0x8e>
	case 3:
		y_slot = 34;
 8001d2c:	2322      	movs	r3, #34	; 0x22
 8001d2e:	83bb      	strh	r3, [r7, #28]
		break;
 8001d30:	e015      	b.n	8001d5e <SSD1306_Putint+0x8e>
	case 4:
		y_slot = 53;
 8001d32:	2335      	movs	r3, #53	; 0x35
 8001d34:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 8001d36:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <SSD1306_Putint+0xd0>)
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d40:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8001d44:	e00b      	b.n	8001d5e <SSD1306_Putint+0x8e>
	case 5:
		x_slot = 65;
 8001d46:	2341      	movs	r3, #65	; 0x41
 8001d48:	83fb      	strh	r3, [r7, #30]
		y_slot = 53;
 8001d4a:	2335      	movs	r3, #53	; 0x35
 8001d4c:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <SSD1306_Putint+0xd0>)
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d58:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8001d5c:	bf00      	nop
	}
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 8001d5e:	8bba      	ldrh	r2, [r7, #28]
 8001d60:	8bfb      	ldrh	r3, [r7, #30]
 8001d62:	4619      	mov	r1, r3
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fe9d 	bl	8001aa4 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &font, 1);
 8001d6a:	f107 0210 	add.w	r2, r7, #16
 8001d6e:	2301      	movs	r3, #1
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <SSD1306_Putint+0xd4>)
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f9c6 	bl	8002104 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 8001d78:	8bba      	ldrh	r2, [r7, #28]
 8001d7a:	8bfb      	ldrh	r3, [r7, #30]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff fe90 	bl	8001aa4 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, integer_str, &font, 1);
 8001d84:	f107 0210 	add.w	r2, r7, #16
 8001d88:	2301      	movs	r3, #1
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f9b9 	bl	8002104 <SSD1306_Puts>
}
 8001d92:	bf00      	nop
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000040 	.word	0x20000040
 8001da0:	20000038 	.word	0x20000038
 8001da4:	08006750 	.word	0x08006750

08001da8 <double_str>:
 * @param  number: double to be represented
 * @param  decimals: number of decimals to be represented
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @retval Char array containing a char for each digit
 */
char* double_str(double number, uint8_t decimals, char* unit){
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0b02 	vstr	d0, [r7, #8]
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	466b      	mov	r3, sp
 8001dba:	461d      	mov	r5, r3

	uint8_t negative = ' ';
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	773b      	strb	r3, [r7, #28]
	if (number < 0) {
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dcc:	f7fe fe86 	bl	8000adc <__aeabi_dcmplt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <double_str+0x3e>
		number = -number;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001de0:	60fb      	str	r3, [r7, #12]
		negative = '-';
 8001de2:	232d      	movs	r3, #45	; 0x2d
 8001de4:	773b      	strb	r3, [r7, #28]
	}

	number = round(number*pow(10, decimals));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb8b 	bl	8000504 <__aeabi_ui2d>
 8001dee:	4603      	mov	r3, r0
 8001df0:	460c      	mov	r4, r1
 8001df2:	ec44 3b11 	vmov	d1, r3, r4
 8001df6:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8001fa0 <double_str+0x1f8>
 8001dfa:	f003 f9f3 	bl	80051e4 <pow>
 8001dfe:	ec51 0b10 	vmov	r0, r1, d0
 8001e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e06:	f7fe fbf7 	bl	80005f8 <__aeabi_dmul>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	ec44 3b17 	vmov	d7, r3, r4
 8001e12:	eeb0 0a47 	vmov.f32	s0, s14
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	f003 f919 	bl	8005050 <round>
 8001e1e:	ed87 0b02 	vstr	d0, [r7, #8]
	uint8_t size;
	if (number == 0){
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e2e:	f7fe fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <double_str+0x98>
		size = decimals+1;
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	777b      	strb	r3, [r7, #29]
 8001e3e:	e009      	b.n	8001e54 <double_str+0xac>
	} else {
		size = SSD1306_digits(number);
 8001e40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e44:	f7fe fe88 	bl	8000b58 <__aeabi_d2iz>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f926 	bl	800209c <SSD1306_digits>
 8001e50:	4603      	mov	r3, r0
 8001e52:	777b      	strb	r3, [r7, #29]
	}
	if (size > 6) {
 8001e54:	7f7b      	ldrb	r3, [r7, #29]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d901      	bls.n	8001e5e <double_str+0xb6>
		return "OVERLOAD";
 8001e5a:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <double_str+0x200>)
 8001e5c:	e098      	b.n	8001f90 <double_str+0x1e8>
	}

	char data_char[size];
 8001e5e:	7f78      	ldrb	r0, [r7, #29]
 8001e60:	4603      	mov	r3, r0
 8001e62:	3b01      	subs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	b2c1      	uxtb	r1, r0
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f04f 0400 	mov.w	r4, #0
 8001e74:	00d4      	lsls	r4, r2, #3
 8001e76:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e7a:	00cb      	lsls	r3, r1, #3
 8001e7c:	b2c1      	uxtb	r1, r0
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f04f 0400 	mov.w	r4, #0
 8001e8a:	00d4      	lsls	r4, r2, #3
 8001e8c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e90:	00cb      	lsls	r3, r1, #3
 8001e92:	4603      	mov	r3, r0
 8001e94:	3307      	adds	r3, #7
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	ebad 0d03 	sub.w	sp, sp, r3
 8001e9e:	466b      	mov	r3, sp
 8001ea0:	3300      	adds	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
	if (number == 0){
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eb0:	f7fe fe0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00e      	beq.n	8001ed8 <double_str+0x130>
		for(uint8_t i=0;i<size;i++){
 8001eba:	2300      	movs	r3, #0
 8001ebc:	77bb      	strb	r3, [r7, #30]
 8001ebe:	e006      	b.n	8001ece <double_str+0x126>
			data_char[i]='0';
 8001ec0:	7fbb      	ldrb	r3, [r7, #30]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	2130      	movs	r1, #48	; 0x30
 8001ec6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<size;i++){
 8001ec8:	7fbb      	ldrb	r3, [r7, #30]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	77bb      	strb	r3, [r7, #30]
 8001ece:	7fba      	ldrb	r2, [r7, #30]
 8001ed0:	7f7b      	ldrb	r3, [r7, #29]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d3f4      	bcc.n	8001ec0 <double_str+0x118>
 8001ed6:	e00a      	b.n	8001eee <double_str+0x146>
		}
	} else {
		sprintf(data_char,"%d", (int)number);
 8001ed8:	697c      	ldr	r4, [r7, #20]
 8001eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ede:	f7fe fe3b 	bl	8000b58 <__aeabi_d2iz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4931      	ldr	r1, [pc, #196]	; (8001fac <double_str+0x204>)
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f002 fcdf 	bl	80048ac <siprintf>
	}

	static char double_str[11];
	for(int8_t i=1; i<11; i++){
 8001eee:	2301      	movs	r3, #1
 8001ef0:	77fb      	strb	r3, [r7, #31]
 8001ef2:	e03b      	b.n	8001f6c <double_str+0x1c4>
		if (i < (size-decimals+1)){
 8001ef4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001ef8:	7f79      	ldrb	r1, [r7, #29]
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	1acb      	subs	r3, r1, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	429a      	cmp	r2, r3
 8001f02:	da09      	bge.n	8001f18 <double_str+0x170>
			double_str[i] = data_char[i-1];
 8001f04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f0e:	6979      	ldr	r1, [r7, #20]
 8001f10:	5c89      	ldrb	r1, [r1, r2]
 8001f12:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <double_str+0x208>)
 8001f14:	54d1      	strb	r1, [r2, r3]
 8001f16:	e023      	b.n	8001f60 <double_str+0x1b8>
		} else if (i < size+2){
 8001f18:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001f1c:	7f7b      	ldrb	r3, [r7, #29]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	da09      	bge.n	8001f38 <double_str+0x190>
			double_str[i] = data_char[i-2];
 8001f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f28:	1e9a      	subs	r2, r3, #2
 8001f2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	5c89      	ldrb	r1, [r1, r2]
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <double_str+0x208>)
 8001f34:	54d1      	strb	r1, [r2, r3]
 8001f36:	e013      	b.n	8001f60 <double_str+0x1b8>
		} else if (i < 11-2){
 8001f38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	dc05      	bgt.n	8001f4c <double_str+0x1a4>
			double_str[i] = ' ';
 8001f40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <double_str+0x208>)
 8001f46:	2120      	movs	r1, #32
 8001f48:	54d1      	strb	r1, [r2, r3]
 8001f4a:	e009      	b.n	8001f60 <double_str+0x1b8>
		} else {
			double_str[i] = unit[i-9];
 8001f4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f50:	3b09      	subs	r3, #9
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	441a      	add	r2, r3
 8001f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <double_str+0x208>)
 8001f5e:	54d1      	strb	r1, [r2, r3]
	for(int8_t i=1; i<11; i++){
 8001f60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	77fb      	strb	r3, [r7, #31]
 8001f6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f70:	2b0a      	cmp	r3, #10
 8001f72:	ddbf      	ble.n	8001ef4 <double_str+0x14c>
		}
	}
	double_str[0] = negative;
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <double_str+0x208>)
 8001f76:	7f3b      	ldrb	r3, [r7, #28]
 8001f78:	7013      	strb	r3, [r2, #0]
	double_str[size-decimals+1] = '.';
 8001f7a:	7f7a      	ldrb	r2, [r7, #29]
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <double_str+0x208>)
 8001f84:	212e      	movs	r1, #46	; 0x2e
 8001f86:	54d1      	strb	r1, [r2, r3]
	double_str[8] = ' ';
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <double_str+0x208>)
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	721a      	strb	r2, [r3, #8]
	return double_str;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <double_str+0x208>)
 8001f90:	46ad      	mov	sp, r5
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	40240000 	.word	0x40240000
 8001fa8:	08006740 	.word	0x08006740
 8001fac:	0800674c 	.word	0x0800674c
 8001fb0:	200000f8 	.word	0x200000f8

08001fb4 <SSD1306_Putdouble>:
 * @param  data: double to be written
 * @param  decimals: number of decimals to be represented
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @param  slot: slot to be used. 1, 2, and 3 are large slots. 4 and 5 are small slots
 */
void SSD1306_Putdouble(ssd1306_t* ssd1306, double data, uint8_t decimals, char* unit, uint8_t slot) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6178      	str	r0, [r7, #20]
 8001fbc:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	74fb      	strb	r3, [r7, #19]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	74bb      	strb	r3, [r7, #18]
	char* float_str = double_str(data, decimals, unit);
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	ed97 0b02 	vldr	d0, [r7, #8]
 8001fd6:	f7ff fee7 	bl	8001da8 <double_str>
 8001fda:	6238      	str	r0, [r7, #32]

	uint16_t x_slot = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t y_slot = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	84bb      	strh	r3, [r7, #36]	; 0x24
	FontDef_t font = Font_11x18;
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <SSD1306_Putdouble+0xdc>)
 8001fe6:	f107 0318 	add.w	r3, r7, #24
 8001fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fee:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (slot) {
 8001ff2:	7cbb      	ldrb	r3, [r7, #18]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d82b      	bhi.n	8002052 <SSD1306_Putdouble+0x9e>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <SSD1306_Putdouble+0x4c>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002015 	.word	0x08002015
 8002004:	0800201b 	.word	0x0800201b
 8002008:	08002021 	.word	0x08002021
 800200c:	08002027 	.word	0x08002027
 8002010:	0800203b 	.word	0x0800203b
	case 1:
		y_slot = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 8002018:	e01b      	b.n	8002052 <SSD1306_Putdouble+0x9e>
	case 2:
		y_slot = 17;
 800201a:	2311      	movs	r3, #17
 800201c:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 800201e:	e018      	b.n	8002052 <SSD1306_Putdouble+0x9e>
	case 3:
		y_slot = 34;
 8002020:	2322      	movs	r3, #34	; 0x22
 8002022:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 8002024:	e015      	b.n	8002052 <SSD1306_Putdouble+0x9e>
	case 4:
		y_slot = 53;
 8002026:	2335      	movs	r3, #53	; 0x35
 8002028:	84bb      	strh	r3, [r7, #36]	; 0x24
		font = Font_7x10;
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <SSD1306_Putdouble+0xe0>)
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002034:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002038:	e00b      	b.n	8002052 <SSD1306_Putdouble+0x9e>
	case 5:
		x_slot = 65;
 800203a:	2341      	movs	r3, #65	; 0x41
 800203c:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_slot = 53;
 800203e:	2335      	movs	r3, #53	; 0x35
 8002040:	84bb      	strh	r3, [r7, #36]	; 0x24
		font = Font_7x10;
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <SSD1306_Putdouble+0xe0>)
 8002044:	f107 0318 	add.w	r3, r7, #24
 8002048:	e892 0003 	ldmia.w	r2, {r0, r1}
 800204c:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002050:	bf00      	nop
	}

	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 8002052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002056:	4619      	mov	r1, r3
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff fd23 	bl	8001aa4 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &font, 1);
 800205e:	f107 0218 	add.w	r2, r7, #24
 8002062:	2301      	movs	r3, #1
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <SSD1306_Putdouble+0xe4>)
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f000 f84c 	bl	8002104 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 800206c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800206e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002070:	4619      	mov	r1, r3
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff fd16 	bl	8001aa4 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, float_str, &font, 1);
 8002078:	f107 0218 	add.w	r2, r7, #24
 800207c:	2301      	movs	r3, #1
 800207e:	6a39      	ldr	r1, [r7, #32]
 8002080:	6978      	ldr	r0, [r7, #20]
 8002082:	f000 f83f 	bl	8002104 <SSD1306_Puts>
}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000040 	.word	0x20000040
 8002094:	20000038 	.word	0x20000038
 8002098:	08006750 	.word	0x08006750

0800209c <SSD1306_digits>:
/**
 * @brief  Calculates the number of digits needed to represent an integer
 * @param  int: integer to be processed
 * @retval Number of digits in an integer
 */
uint8_t SSD1306_digits(int integer){
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	uint8_t digits;
	if (integer==0){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <SSD1306_digits+0x14>
		digits = 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	e021      	b.n	80020f4 <SSD1306_digits+0x58>
	}
	else {
		digits = floor(log10(integer))+1;
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe fa37 	bl	8000524 <__aeabi_i2d>
 80020b6:	4603      	mov	r3, r0
 80020b8:	460c      	mov	r4, r1
 80020ba:	ec44 3b10 	vmov	d0, r3, r4
 80020be:	f003 f811 	bl	80050e4 <log10>
 80020c2:	eeb0 7a40 	vmov.f32	s14, s0
 80020c6:	eef0 7a60 	vmov.f32	s15, s1
 80020ca:	eeb0 0a47 	vmov.f32	s0, s14
 80020ce:	eef0 0a67 	vmov.f32	s1, s15
 80020d2:	f002 ff39 	bl	8004f48 <floor>
 80020d6:	ec51 0b10 	vmov	r0, r1, d0
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <SSD1306_digits+0x64>)
 80020e0:	f7fe f8d4 	bl	800028c <__adddf3>
 80020e4:	4603      	mov	r3, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	4618      	mov	r0, r3
 80020ea:	4621      	mov	r1, r4
 80020ec:	f7fe fd5c 	bl	8000ba8 <__aeabi_d2uiz>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
	}
	return digits;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	3ff00000 	.word	0x3ff00000

08002104 <SSD1306_Puts>:

char SSD1306_Puts(ssd1306_t* ssd1306, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str) {
 8002112:	e012      	b.n	800213a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(ssd1306, *str, Font, color) != *str) {
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	7819      	ldrb	r1, [r3, #0]
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fcd5 	bl	8001acc <SSD1306_Putc>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d002      	beq.n	8002134 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	e008      	b.n	8002146 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3301      	adds	r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
	while (*str) {
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e8      	bne.n	8002114 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <ssd1306_I2C_WriteMulti>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(ssd1306_t* ssd1306, uint8_t reg, uint8_t* data, uint16_t count) {
 800214e:	b5b0      	push	{r4, r5, r7, lr}
 8002150:	b08a      	sub	sp, #40	; 0x28
 8002152:	af02      	add	r7, sp, #8
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	461a      	mov	r2, r3
 800215a:	460b      	mov	r3, r1
 800215c:	72fb      	strb	r3, [r7, #11]
 800215e:	4613      	mov	r3, r2
 8002160:	813b      	strh	r3, [r7, #8]
 8002162:	466b      	mov	r3, sp
 8002164:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8002166:	893b      	ldrh	r3, [r7, #8]
 8002168:	1c58      	adds	r0, r3, #1
 800216a:	1e43      	subs	r3, r0, #1
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	4603      	mov	r3, r0
 8002170:	4619      	mov	r1, r3
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f04f 0400 	mov.w	r4, #0
 800217e:	00d4      	lsls	r4, r2, #3
 8002180:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002184:	00cb      	lsls	r3, r1, #3
 8002186:	4603      	mov	r3, r0
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	f04f 0400 	mov.w	r4, #0
 8002196:	00d4      	lsls	r4, r2, #3
 8002198:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800219c:	00cb      	lsls	r3, r1, #3
 800219e:	4603      	mov	r3, r0
 80021a0:	3307      	adds	r3, #7
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	ebad 0d03 	sub.w	sp, sp, r3
 80021aa:	ab02      	add	r3, sp, #8
 80021ac:	3300      	adds	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
	dt[0] = reg;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	7afa      	ldrb	r2, [r7, #11]
 80021b4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80021b6:	2301      	movs	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]
 80021ba:	e00a      	b.n	80021d2 <ssd1306_I2C_WriteMulti+0x84>
		dt[i] = data[i-1];
 80021bc:	7ffb      	ldrb	r3, [r7, #31]
 80021be:	3b01      	subs	r3, #1
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	441a      	add	r2, r3
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
 80021c6:	7811      	ldrb	r1, [r2, #0]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80021cc:	7ffb      	ldrb	r3, [r7, #31]
 80021ce:	3301      	adds	r3, #1
 80021d0:	77fb      	strb	r3, [r7, #31]
 80021d2:	7ffb      	ldrb	r3, [r7, #31]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	893a      	ldrh	r2, [r7, #8]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d2ef      	bcs.n	80021bc <ssd1306_I2C_WriteMulti+0x6e>
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, count, 10);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6858      	ldr	r0, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b299      	uxth	r1, r3
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	893c      	ldrh	r4, [r7, #8]
 80021ea:	230a      	movs	r3, #10
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	4623      	mov	r3, r4
 80021f0:	f000 fe0e 	bl	8002e10 <HAL_I2C_Master_Transmit>
 80021f4:	46ad      	mov	sp, r5
}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}

080021fe <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(ssd1306_t* ssd1306, uint8_t reg, uint8_t data) {
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af02      	add	r7, sp, #8
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
 800220a:	4613      	mov	r3, r2
 800220c:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2];
	dt[0] = reg;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002212:	78bb      	ldrb	r3, [r7, #2]
 8002214:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, 2, 10);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6858      	ldr	r0, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b299      	uxth	r1, r3
 8002220:	f107 020c 	add.w	r2, r7, #12
 8002224:	230a      	movs	r3, #10
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2302      	movs	r3, #2
 800222a:	f000 fdf1 	bl	8002e10 <HAL_I2C_Master_Transmit>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_MspInit+0x4c>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <HAL_MspInit+0x4c>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_MspInit+0x4c>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_MspInit+0x4c>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800

08002288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_I2C_MspInit+0xa4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d13c      	bne.n	8002324 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_I2C_MspInit+0xa8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_I2C_MspInit+0xa8>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_I2C_MspInit+0xa8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022cc:	2312      	movs	r3, #18
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022d8:	2304      	movs	r3, #4
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4814      	ldr	r0, [pc, #80]	; (8002334 <HAL_I2C_MspInit+0xac>)
 80022e4:	f000 faa8 	bl	8002838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022e8:	2308      	movs	r3, #8
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ec:	2312      	movs	r3, #18
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80022f8:	2309      	movs	r3, #9
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	480c      	ldr	r0, [pc, #48]	; (8002334 <HAL_I2C_MspInit+0xac>)
 8002304:	f000 fa98 	bl	8002838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_I2C_MspInit+0xa8>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_I2C_MspInit+0xa8>)
 8002312:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_I2C_MspInit+0xa8>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40005800 	.word	0x40005800
 8002330:	40023800 	.word	0x40023800
 8002334:	40020400 	.word	0x40020400

08002338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d115      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_TIM_Base_MspInit+0x48>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_TIM_Base_MspInit+0x48>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_TIM_Base_MspInit+0x48>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	201c      	movs	r0, #28
 800236c:	f000 fa2d 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002370:	201c      	movs	r0, #28
 8002372:	f000 fa46 	bl	8002802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d8:	f000 f8da 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM2_IRQHandler+0x10>)
 80023e6:	f001 fdeb 	bl	8003fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000184 	.word	0x20000184

080023f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80023f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023fc:	f000 fbb8 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002400:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002404:	f000 fbb4 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002408:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800240c:	f000 fbb0 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x50>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x16>
		heap_end = &end;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <_sbrk+0x50>)
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <_sbrk+0x54>)
 8002428:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <_sbrk+0x50>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <_sbrk+0x50>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	466a      	mov	r2, sp
 800243a:	4293      	cmp	r3, r2
 800243c:	d907      	bls.n	800244e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800243e:	f002 f943 	bl	80046c8 <__errno>
 8002442:	4602      	mov	r2, r0
 8002444:	230c      	movs	r3, #12
 8002446:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	e006      	b.n	800245c <_sbrk+0x48>
	}

	heap_end += incr;
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <_sbrk+0x50>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a03      	ldr	r2, [pc, #12]	; (8002464 <_sbrk+0x50>)
 8002458:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000104 	.word	0x20000104
 8002468:	200001d0 	.word	0x200001d0

0800246c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <SystemInit+0x28>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <SystemInit+0x28>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SystemInit+0x28>)
 8002482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002486:	609a      	str	r2, [r3, #8]
#endif
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800249c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800249e:	e003      	b.n	80024a8 <LoopCopyDataInit>

080024a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024a6:	3104      	adds	r1, #4

080024a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024a8:	480b      	ldr	r0, [pc, #44]	; (80024d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024b0:	d3f6      	bcc.n	80024a0 <CopyDataInit>
  ldr  r2, =_sbss
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024b4:	e002      	b.n	80024bc <LoopFillZerobss>

080024b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024b8:	f842 3b04 	str.w	r3, [r2], #4

080024bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024c0:	d3f9      	bcc.n	80024b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024c2:	f7ff ffd3 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c6:	f002 f905 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7fe ffb9 	bl	8001440 <main>
  bx  lr    
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80024d4:	08007cd0 	.word	0x08007cd0
  ldr  r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024dc:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 80024e0:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 80024e4:	200001cc 	.word	0x200001cc

080024e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_Init+0x40>)
 80024f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_Init+0x40>)
 8002502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_Init+0x40>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 f94d 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251a:	2000      	movs	r0, #0
 800251c:	f000 f808 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002520:	f7ff fe8a 	bl	8002238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f965 	bl	800281e <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 f92d 	bl	80027ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000048 	.word	0x20000048
 8002588:	20000050 	.word	0x20000050
 800258c:	2000004c 	.word	0x2000004c

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000050 	.word	0x20000050
 80025b4:	200001c4 	.word	0x200001c4

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	200001c4 	.word	0x200001c4

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff ffee 	bl	80025b8 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_Delay+0x40>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000050 	.word	0x20000050

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	; (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	; (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f7ff ff8e 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff29 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff3e 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff8e 	bl	8002708 <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5d 	bl	80026b4 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff31 	bl	8002678 <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa2 	bl	8002770 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e159      	b.n	8002b08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8148 	bne.w	8002b02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d00b      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d007      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002886:	2b11      	cmp	r3, #17
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b12      	cmp	r3, #18
 8002890:	d130      	bne.n	80028f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0201 	and.w	r2, r3, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0xfc>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b12      	cmp	r3, #18
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a2 	beq.w	8002b02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b56      	ldr	r3, [pc, #344]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a48      	ldr	r2, [pc, #288]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x202>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <HAL_GPIO_Init+0x2f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x1fe>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a46      	ldr	r2, [pc, #280]	; (8002b2c <HAL_GPIO_Init+0x2f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x1fa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a45      	ldr	r2, [pc, #276]	; (8002b30 <HAL_GPIO_Init+0x2f8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x1f6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <HAL_GPIO_Init+0x2fc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x1f2>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7e:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f aea2 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3724      	adds	r7, #36	; 0x24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d006      	beq.n	8002b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fc34 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e11f      	b.n	8002df2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fb5e 	bl	8002288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c04:	f001 f94e 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a7b      	ldr	r2, [pc, #492]	; (8002dfc <HAL_I2C_Init+0x25c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d807      	bhi.n	8002c24 <HAL_I2C_Init+0x84>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a7a      	ldr	r2, [pc, #488]	; (8002e00 <HAL_I2C_Init+0x260>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	bf94      	ite	ls
 8002c1c:	2301      	movls	r3, #1
 8002c1e:	2300      	movhi	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e006      	b.n	8002c32 <HAL_I2C_Init+0x92>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_I2C_Init+0x264>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0db      	b.n	8002df2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a72      	ldr	r2, [pc, #456]	; (8002e08 <HAL_I2C_Init+0x268>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a64      	ldr	r2, [pc, #400]	; (8002dfc <HAL_I2C_Init+0x25c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d802      	bhi.n	8002c74 <HAL_I2C_Init+0xd4>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e009      	b.n	8002c88 <HAL_I2C_Init+0xe8>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	4a63      	ldr	r2, [pc, #396]	; (8002e0c <HAL_I2C_Init+0x26c>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	3301      	adds	r3, #1
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4956      	ldr	r1, [pc, #344]	; (8002dfc <HAL_I2C_Init+0x25c>)
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	d80d      	bhi.n	8002cc4 <HAL_I2C_Init+0x124>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e59      	subs	r1, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	bf38      	it	cc
 8002cc0:	2304      	movcc	r3, #4
 8002cc2:	e04f      	b.n	8002d64 <HAL_I2C_Init+0x1c4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_I2C_Init+0x150>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e012      	b.n	8002d16 <HAL_I2C_Init+0x176>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Init+0x17e>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_I2C_Init+0x1c4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10e      	bne.n	8002d44 <HAL_I2C_Init+0x1a4>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e58      	subs	r0, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	440b      	add	r3, r1
 8002d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d42:	e00f      	b.n	8002d64 <HAL_I2C_Init+0x1c4>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6809      	ldr	r1, [r1, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6911      	ldr	r1, [r2, #16]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	000186a0 	.word	0x000186a0
 8002e00:	001e847f 	.word	0x001e847f
 8002e04:	003d08ff 	.word	0x003d08ff
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	10624dd3 	.word	0x10624dd3

08002e10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
 8002e20:	4613      	mov	r3, r2
 8002e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff fbc8 	bl	80025b8 <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 80e0 	bne.w	8002ff8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2319      	movs	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4970      	ldr	r1, [pc, #448]	; (8003004 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa92 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0d3      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Transmit+0x50>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0cc      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d007      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2221      	movs	r2, #33	; 0x21
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a50      	ldr	r2, [pc, #320]	; (8003008 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f9ca 	bl	8003268 <I2C_MasterRequestWrite>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e08d      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ef4:	e066      	b.n	8002fc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fb0c 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d107      	bne.n	8002f1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06b      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d11b      	bne.n	8002f98 <HAL_I2C_Master_Transmit+0x188>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d017      	beq.n	8002f98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6a39      	ldr	r1, [r7, #32]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fafc 	bl	800359a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d107      	bne.n	8002fc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e01a      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d194      	bne.n	8002ef6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	00100002 	.word	0x00100002
 8003008:	ffff0000 	.word	0xffff0000

0800300c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	460b      	mov	r3, r1
 800301a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff facc 	bl	80025b8 <HAL_GetTick>
 8003020:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003022:	2301      	movs	r3, #1
 8003024:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b20      	cmp	r3, #32
 8003030:	f040 8110 	bne.w	8003254 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2319      	movs	r3, #25
 800303a:	2201      	movs	r2, #1
 800303c:	4988      	ldr	r1, [pc, #544]	; (8003260 <HAL_I2C_IsDeviceReady+0x254>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f994 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	e103      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2C_IsDeviceReady+0x50>
 8003058:	2302      	movs	r3, #2
 800305a:	e0fc      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x24a>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d007      	beq.n	8003082 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2224      	movs	r2, #36	; 0x24
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a70      	ldr	r2, [pc, #448]	; (8003264 <HAL_I2C_IsDeviceReady+0x258>)
 80030a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f952 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0b6      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030e8:	897b      	ldrh	r3, [r7, #10]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030f6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030f8:	f7ff fa5e 	bl	80025b8 <HAL_GetTick>
 80030fc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800312c:	e025      	b.n	800317a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7ff fa43 	bl	80025b8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <HAL_I2C_IsDeviceReady+0x138>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	22a0      	movs	r2, #160	; 0xa0
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2ba0      	cmp	r3, #160	; 0xa0
 8003184:	d005      	beq.n	8003192 <HAL_I2C_IsDeviceReady+0x186>
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <HAL_I2C_IsDeviceReady+0x186>
 800318c:	7dbb      	ldrb	r3, [r7, #22]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0cd      	beq.n	800312e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d129      	bne.n	80031fc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2319      	movs	r3, #25
 80031d4:	2201      	movs	r2, #1
 80031d6:	4922      	ldr	r1, [pc, #136]	; (8003260 <HAL_I2C_IsDeviceReady+0x254>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f8c7 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e036      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e02c      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003214:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2319      	movs	r3, #25
 800321c:	2201      	movs	r2, #1
 800321e:	4910      	ldr	r1, [pc, #64]	; (8003260 <HAL_I2C_IsDeviceReady+0x254>)
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f8a3 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e012      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	3301      	adds	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	f4ff af33 	bcc.w	80030a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	00100002 	.word	0x00100002
 8003264:	ffff0000 	.word	0xffff0000

08003268 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	460b      	mov	r3, r1
 8003276:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d006      	beq.n	8003292 <I2C_MasterRequestWrite+0x2a>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d003      	beq.n	8003292 <I2C_MasterRequestWrite+0x2a>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003290:	d108      	bne.n	80032a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e00b      	b.n	80032bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	2b12      	cmp	r3, #18
 80032aa:	d107      	bne.n	80032bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f84f 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e035      	b.n	800335a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f6:	d108      	bne.n	800330a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f8:	897b      	ldrh	r3, [r7, #10]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	e01b      	b.n	8003342 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	11db      	asrs	r3, r3, #7
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0306 	and.w	r3, r3, #6
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f063 030f 	orn	r3, r3, #15
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	490f      	ldr	r1, [pc, #60]	; (8003364 <I2C_MasterRequestWrite+0xfc>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f876 	bl	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e010      	b.n	800335a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003338:	897b      	ldrh	r3, [r7, #10]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <I2C_MasterRequestWrite+0x100>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f866 	bl	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	00010008 	.word	0x00010008
 8003368:	00010002 	.word	0x00010002

0800336c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800337c:	e025      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d021      	beq.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7ff f917 	bl	80025b8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d116      	bne.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e023      	b.n	8003412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10d      	bne.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	e00c      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4013      	ands	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf0c      	ite	eq
 8003402:	2301      	moveq	r3, #1
 8003404:	2300      	movne	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	429a      	cmp	r2, r3
 800340e:	d0b6      	beq.n	800337e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003428:	e051      	b.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d123      	bne.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0204 	orr.w	r2, r3, #4
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e046      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d021      	beq.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7ff f895 	bl	80025b8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d116      	bne.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e020      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10c      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e00b      	b.n	800350a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	43da      	mvns	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d18d      	bne.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003524:	e02d      	b.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f878 	bl	800361c <I2C_IsAcknowledgeFailed>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e02d      	b.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d021      	beq.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7ff f83b 	bl	80025b8 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d116      	bne.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e007      	b.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d1ca      	bne.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035a6:	e02d      	b.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f837 	bl	800361c <I2C_IsAcknowledgeFailed>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e02d      	b.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d021      	beq.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe fffa 	bl	80025b8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e007      	b.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b04      	cmp	r3, #4
 8003610:	d1ca      	bne.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003632:	d11b      	bne.n	800366c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800363c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0204 	orr.w	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e25b      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369a:	4ba3      	ldr	r3, [pc, #652]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4ba0      	ldr	r3, [pc, #640]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b9d      	ldr	r3, [pc, #628]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b99      	ldr	r3, [pc, #612]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e236      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b91      	ldr	r3, [pc, #580]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a90      	ldr	r2, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a8a      	ldr	r2, [pc, #552]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a87      	ldr	r2, [pc, #540]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a83      	ldr	r2, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b81      	ldr	r3, [pc, #516]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a80      	ldr	r2, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe ff40 	bl	80025b8 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe ff3c 	bl	80025b8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1fb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe ff2c 	bl	80025b8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe ff28 	bl	80025b8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1e7      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1bb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4952      	ldr	r1, [pc, #328]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b4f      	ldr	r3, [pc, #316]	; (800392c <HAL_RCC_OscConfig+0x2b0>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe fee1 	bl	80025b8 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe fedd 	bl	80025b8 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e19c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b46      	ldr	r3, [pc, #280]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b43      	ldr	r3, [pc, #268]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4940      	ldr	r1, [pc, #256]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCC_OscConfig+0x2b0>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe fec0 	bl	80025b8 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe febc 	bl	80025b8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e17b      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d030      	beq.n	80038c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCC_OscConfig+0x2b4>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe fea0 	bl	80025b8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe fe9c 	bl	80025b8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e15b      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 800389a:	e015      	b.n	80038c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_OscConfig+0x2b4>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe fe89 	bl	80025b8 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe fe85 	bl	80025b8 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e144      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a0 	beq.w	8003a16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_OscConfig+0x2b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d121      	bne.n	8003956 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_RCC_OscConfig+0x2b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_RCC_OscConfig+0x2b8>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe fe4b 	bl	80025b8 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e011      	b.n	800394a <HAL_RCC_OscConfig+0x2ce>
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	42470000 	.word	0x42470000
 8003930:	42470e80 	.word	0x42470e80
 8003934:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fe fe3e 	bl	80025b8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e0fd      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <HAL_RCC_OscConfig+0x4d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x2f0>
 800395e:	4b7d      	ldr	r3, [pc, #500]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a7c      	ldr	r2, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	e01c      	b.n	80039a6 <HAL_RCC_OscConfig+0x32a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d10c      	bne.n	800398e <HAL_RCC_OscConfig+0x312>
 8003974:	4b77      	ldr	r3, [pc, #476]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a76      	ldr	r2, [pc, #472]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	4b74      	ldr	r3, [pc, #464]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a73      	ldr	r2, [pc, #460]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	e00b      	b.n	80039a6 <HAL_RCC_OscConfig+0x32a>
 800398e:	4b71      	ldr	r3, [pc, #452]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a70      	ldr	r2, [pc, #448]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	4b6e      	ldr	r3, [pc, #440]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a6d      	ldr	r2, [pc, #436]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	f023 0304 	bic.w	r3, r3, #4
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d015      	beq.n	80039da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fe fe03 	bl	80025b8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe fdff 	bl	80025b8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0bc      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ee      	beq.n	80039b6 <HAL_RCC_OscConfig+0x33a>
 80039d8:	e014      	b.n	8003a04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039da:	f7fe fded 	bl	80025b8 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe fde9 	bl	80025b8 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0a6      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f8:	4b56      	ldr	r3, [pc, #344]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ee      	bne.n	80039e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0a:	4b52      	ldr	r3, [pc, #328]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a51      	ldr	r2, [pc, #324]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8092 	beq.w	8003b44 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a20:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d05c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d141      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a34:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <HAL_RCC_OscConfig+0x4dc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7fe fdbd 	bl	80025b8 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fe fdb9 	bl	80025b8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e078      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a54:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	019b      	lsls	r3, r3, #6
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	061b      	lsls	r3, r3, #24
 8003a84:	4933      	ldr	r1, [pc, #204]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8a:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCC_OscConfig+0x4dc>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fe fd92 	bl	80025b8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe fd8e 	bl	80025b8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04d      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x41c>
 8003ab6:	e045      	b.n	8003b44 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x4dc>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fe fd7b 	bl	80025b8 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fe fd77 	bl	80025b8 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f0      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x44a>
 8003ae4:	e02e      	b.n	8003b44 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e029      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af2:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d115      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40007000 	.word	0x40007000
 8003b54:	40023800 	.word	0x40023800
 8003b58:	42470060 	.word	0x42470060

08003b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0cc      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b68      	ldr	r3, [pc, #416]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d90c      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d044      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e067      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4934      	ldr	r1, [pc, #208]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7fe fcb4 	bl	80025b8 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7fe fcb0 	bl	80025b8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d20c      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f821 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	5cd3      	ldrb	r3, [r2, r3]
 8003cf6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fc14 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08007c24 	.word	0x08007c24
 8003d20:	20000048 	.word	0x20000048
 8003d24:	2000004c 	.word	0x2000004c

08003d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	2300      	movs	r3, #0
 8003d38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d3e:	4b50      	ldr	r3, [pc, #320]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d007      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x32>
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d008      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x38>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 808d 	bne.w	8003e6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b4b      	ldr	r3, [pc, #300]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d56:	60bb      	str	r3, [r7, #8]
       break;
 8003d58:	e08c      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5a:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d5c:	60bb      	str	r3, [r7, #8]
      break;
 8003d5e:	e089      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6a:	4b45      	ldr	r3, [pc, #276]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d023      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	ea03 0501 	and.w	r5, r3, r1
 8003d8c:	ea04 0602 	and.w	r6, r4, r2
 8003d90:	4a3d      	ldr	r2, [pc, #244]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d92:	fb02 f106 	mul.w	r1, r2, r6
 8003d96:	2200      	movs	r2, #0
 8003d98:	fb02 f205 	mul.w	r2, r2, r5
 8003d9c:	440a      	add	r2, r1
 8003d9e:	493a      	ldr	r1, [pc, #232]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003da0:	fba5 0101 	umull	r0, r1, r5, r1
 8003da4:	1853      	adds	r3, r2, r1
 8003da6:	4619      	mov	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f04f 0400 	mov.w	r4, #0
 8003dae:	461a      	mov	r2, r3
 8003db0:	4623      	mov	r3, r4
 8003db2:	f7fc ff19 	bl	8000be8 <__aeabi_uldivmod>
 8003db6:	4603      	mov	r3, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e049      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	099b      	lsrs	r3, r3, #6
 8003dc4:	f04f 0400 	mov.w	r4, #0
 8003dc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	ea03 0501 	and.w	r5, r3, r1
 8003dd4:	ea04 0602 	and.w	r6, r4, r2
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4632      	mov	r2, r6
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	f04f 0400 	mov.w	r4, #0
 8003de4:	0154      	lsls	r4, r2, #5
 8003de6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dea:	014b      	lsls	r3, r1, #5
 8003dec:	4619      	mov	r1, r3
 8003dee:	4622      	mov	r2, r4
 8003df0:	1b49      	subs	r1, r1, r5
 8003df2:	eb62 0206 	sbc.w	r2, r2, r6
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	f04f 0400 	mov.w	r4, #0
 8003dfe:	0194      	lsls	r4, r2, #6
 8003e00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e04:	018b      	lsls	r3, r1, #6
 8003e06:	1a5b      	subs	r3, r3, r1
 8003e08:	eb64 0402 	sbc.w	r4, r4, r2
 8003e0c:	f04f 0100 	mov.w	r1, #0
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	00e2      	lsls	r2, r4, #3
 8003e16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e1a:	00d9      	lsls	r1, r3, #3
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4614      	mov	r4, r2
 8003e20:	195b      	adds	r3, r3, r5
 8003e22:	eb44 0406 	adc.w	r4, r4, r6
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	02a2      	lsls	r2, r4, #10
 8003e30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e34:	0299      	lsls	r1, r3, #10
 8003e36:	460b      	mov	r3, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f04f 0400 	mov.w	r4, #0
 8003e44:	461a      	mov	r2, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	f7fc fece 	bl	8000be8 <__aeabi_uldivmod>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	60bb      	str	r3, [r7, #8]
      break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e70:	60bb      	str	r3, [r7, #8]
      break;
 8003e72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e74:	68bb      	ldr	r3, [r7, #8]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	00f42400 	.word	0x00f42400
 8003e88:	017d7840 	.word	0x017d7840

08003e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000048 	.word	0x20000048

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ea8:	f7ff fff0 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003eac:	4601      	mov	r1, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0a9b      	lsrs	r3, r3, #10
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	08007c34 	.word	0x08007c34

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e01d      	b.n	8003f1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fa20 	bl	8002338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 fa40 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b06      	cmp	r3, #6
 8003f4a:	d007      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_TIM_Base_Stop_IT+0x48>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	f240 4344 	movw	r3, #1092	; 0x444
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <HAL_TIM_Base_Stop_IT+0x48>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0202 	mvn.w	r2, #2
 8003fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f9a5 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f997 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f9a8 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0204 	mvn.w	r2, #4
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f97b 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f96d 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f97e 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b08      	cmp	r3, #8
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b08      	cmp	r3, #8
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0208 	mvn.w	r2, #8
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2204      	movs	r2, #4
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f951 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f943 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f954 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0210 	mvn.w	r2, #16
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2208      	movs	r2, #8
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f927 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f919 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f92a 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0201 	mvn.w	r2, #1
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd f93a 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d107      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 faa2 	bl	80046b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8ef 	bl	800437a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0220 	mvn.w	r2, #32
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fa6c 	bl	80046a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_ConfigClockSource+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0a6      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x166>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004206:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d067      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x120>
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d80b      	bhi.n	800423c <HAL_TIM_ConfigClockSource+0x6c>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d073      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d802      	bhi.n	8004232 <HAL_TIM_ConfigClockSource+0x62>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d06f      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004230:	e078      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004232:	2b20      	cmp	r3, #32
 8004234:	d06c      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
 8004236:	2b30      	cmp	r3, #48	; 0x30
 8004238:	d06a      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800423a:	e073      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d00d      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x8c>
 8004240:	2b70      	cmp	r3, #112	; 0x70
 8004242:	d804      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x7e>
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d033      	beq.n	80042b0 <HAL_TIM_ConfigClockSource+0xe0>
 8004248:	2b60      	cmp	r3, #96	; 0x60
 800424a:	d041      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800424c:	e06a      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	d066      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x152>
 8004254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004258:	d017      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800425a:	e063      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f000 f98a 	bl	8004584 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800427e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]
      break;
 8004288:	e04c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6899      	ldr	r1, [r3, #8]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f000 f973 	bl	8004584 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ac:	609a      	str	r2, [r3, #8]
      break;
 80042ae:	e039      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	f000 f8e7 	bl	8004490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2150      	movs	r1, #80	; 0x50
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f940 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 80042ce:	e029      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	461a      	mov	r2, r3
 80042de:	f000 f906 	bl	80044ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2160      	movs	r1, #96	; 0x60
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f930 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 80042ee:	e019      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	461a      	mov	r2, r3
 80042fe:	f000 f8c7 	bl	8004490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2140      	movs	r1, #64	; 0x40
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f920 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 800430e:	e009      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 f917 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8004320:	e000      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a34      	ldr	r2, [pc, #208]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00f      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d00b      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a31      	ldr	r2, [pc, #196]	; (8004478 <TIM_Base_SetConfig+0xe8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a30      	ldr	r2, [pc, #192]	; (800447c <TIM_Base_SetConfig+0xec>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_Base_SetConfig+0x38>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a2f      	ldr	r2, [pc, #188]	; (8004480 <TIM_Base_SetConfig+0xf0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d108      	bne.n	80043da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a25      	ldr	r2, [pc, #148]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01b      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d017      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <TIM_Base_SetConfig+0xe8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a21      	ldr	r2, [pc, #132]	; (800447c <TIM_Base_SetConfig+0xec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a20      	ldr	r2, [pc, #128]	; (8004480 <TIM_Base_SetConfig+0xf0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <TIM_Base_SetConfig+0xf4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <TIM_Base_SetConfig+0xf8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a1d      	ldr	r2, [pc, #116]	; (800448c <TIM_Base_SetConfig+0xfc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d103      	bne.n	8004460 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	615a      	str	r2, [r3, #20]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40010000 	.word	0x40010000
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800
 8004480:	40000c00 	.word	0x40000c00
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 030a 	bic.w	r3, r3, #10
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0210 	bic.w	r2, r3, #16
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	031b      	lsls	r3, r3, #12
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800452a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	f043 0307 	orr.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d8:	2302      	movs	r3, #2
 80045da:	e050      	b.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d013      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a13      	ldr	r2, [pc, #76]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10c      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40014000 	.word	0x40014000

080046a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <__errno>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <__errno+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000054 	.word	0x20000054

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4e0d      	ldr	r6, [pc, #52]	; (800470c <__libc_init_array+0x38>)
 80046d8:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046da:	1ba4      	subs	r4, r4, r6
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	2500      	movs	r5, #0
 80046e0:	42a5      	cmp	r5, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	4e0b      	ldr	r6, [pc, #44]	; (8004714 <__libc_init_array+0x40>)
 80046e6:	4c0c      	ldr	r4, [pc, #48]	; (8004718 <__libc_init_array+0x44>)
 80046e8:	f002 f814 	bl	8006714 <_init>
 80046ec:	1ba4      	subs	r4, r4, r6
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	2500      	movs	r5, #0
 80046f2:	42a5      	cmp	r5, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046fc:	4798      	blx	r3
 80046fe:	3501      	adds	r5, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004706:	4798      	blx	r3
 8004708:	3501      	adds	r5, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	08007cc8 	.word	0x08007cc8
 8004710:	08007cc8 	.word	0x08007cc8
 8004714:	08007cc8 	.word	0x08007cc8
 8004718:	08007ccc 	.word	0x08007ccc

0800471c <malloc>:
 800471c:	4b02      	ldr	r3, [pc, #8]	; (8004728 <malloc+0xc>)
 800471e:	4601      	mov	r1, r0
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	f000 b859 	b.w	80047d8 <_malloc_r>
 8004726:	bf00      	nop
 8004728:	20000054 	.word	0x20000054

0800472c <memset>:
 800472c:	4402      	add	r2, r0
 800472e:	4603      	mov	r3, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <_free_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4605      	mov	r5, r0
 8004740:	2900      	cmp	r1, #0
 8004742:	d045      	beq.n	80047d0 <_free_r+0x94>
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f0c      	subs	r4, r1, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfb8      	it	lt
 800474e:	18e4      	addlt	r4, r4, r3
 8004750:	f000 f8cc 	bl	80048ec <__malloc_lock>
 8004754:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <_free_r+0x98>)
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	4610      	mov	r0, r2
 800475a:	b933      	cbnz	r3, 800476a <_free_r+0x2e>
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	6014      	str	r4, [r2, #0]
 8004760:	4628      	mov	r0, r5
 8004762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004766:	f000 b8c2 	b.w	80048ee <__malloc_unlock>
 800476a:	42a3      	cmp	r3, r4
 800476c:	d90c      	bls.n	8004788 <_free_r+0x4c>
 800476e:	6821      	ldr	r1, [r4, #0]
 8004770:	1862      	adds	r2, r4, r1
 8004772:	4293      	cmp	r3, r2
 8004774:	bf04      	itt	eq
 8004776:	681a      	ldreq	r2, [r3, #0]
 8004778:	685b      	ldreq	r3, [r3, #4]
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	bf04      	itt	eq
 800477e:	1852      	addeq	r2, r2, r1
 8004780:	6022      	streq	r2, [r4, #0]
 8004782:	6004      	str	r4, [r0, #0]
 8004784:	e7ec      	b.n	8004760 <_free_r+0x24>
 8004786:	4613      	mov	r3, r2
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	b10a      	cbz	r2, 8004790 <_free_r+0x54>
 800478c:	42a2      	cmp	r2, r4
 800478e:	d9fa      	bls.n	8004786 <_free_r+0x4a>
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	1858      	adds	r0, r3, r1
 8004794:	42a0      	cmp	r0, r4
 8004796:	d10b      	bne.n	80047b0 <_free_r+0x74>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	4401      	add	r1, r0
 800479c:	1858      	adds	r0, r3, r1
 800479e:	4282      	cmp	r2, r0
 80047a0:	6019      	str	r1, [r3, #0]
 80047a2:	d1dd      	bne.n	8004760 <_free_r+0x24>
 80047a4:	6810      	ldr	r0, [r2, #0]
 80047a6:	6852      	ldr	r2, [r2, #4]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	4401      	add	r1, r0
 80047ac:	6019      	str	r1, [r3, #0]
 80047ae:	e7d7      	b.n	8004760 <_free_r+0x24>
 80047b0:	d902      	bls.n	80047b8 <_free_r+0x7c>
 80047b2:	230c      	movs	r3, #12
 80047b4:	602b      	str	r3, [r5, #0]
 80047b6:	e7d3      	b.n	8004760 <_free_r+0x24>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	1821      	adds	r1, r4, r0
 80047bc:	428a      	cmp	r2, r1
 80047be:	bf04      	itt	eq
 80047c0:	6811      	ldreq	r1, [r2, #0]
 80047c2:	6852      	ldreq	r2, [r2, #4]
 80047c4:	6062      	str	r2, [r4, #4]
 80047c6:	bf04      	itt	eq
 80047c8:	1809      	addeq	r1, r1, r0
 80047ca:	6021      	streq	r1, [r4, #0]
 80047cc:	605c      	str	r4, [r3, #4]
 80047ce:	e7c7      	b.n	8004760 <_free_r+0x24>
 80047d0:	bd38      	pop	{r3, r4, r5, pc}
 80047d2:	bf00      	nop
 80047d4:	20000108 	.word	0x20000108

080047d8 <_malloc_r>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	1ccd      	adds	r5, r1, #3
 80047dc:	f025 0503 	bic.w	r5, r5, #3
 80047e0:	3508      	adds	r5, #8
 80047e2:	2d0c      	cmp	r5, #12
 80047e4:	bf38      	it	cc
 80047e6:	250c      	movcc	r5, #12
 80047e8:	2d00      	cmp	r5, #0
 80047ea:	4606      	mov	r6, r0
 80047ec:	db01      	blt.n	80047f2 <_malloc_r+0x1a>
 80047ee:	42a9      	cmp	r1, r5
 80047f0:	d903      	bls.n	80047fa <_malloc_r+0x22>
 80047f2:	230c      	movs	r3, #12
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	2000      	movs	r0, #0
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	f000 f877 	bl	80048ec <__malloc_lock>
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <_malloc_r+0xac>)
 8004800:	6814      	ldr	r4, [r2, #0]
 8004802:	4621      	mov	r1, r4
 8004804:	b991      	cbnz	r1, 800482c <_malloc_r+0x54>
 8004806:	4c20      	ldr	r4, [pc, #128]	; (8004888 <_malloc_r+0xb0>)
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	b91b      	cbnz	r3, 8004814 <_malloc_r+0x3c>
 800480c:	4630      	mov	r0, r6
 800480e:	f000 f83d 	bl	800488c <_sbrk_r>
 8004812:	6020      	str	r0, [r4, #0]
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f000 f838 	bl	800488c <_sbrk_r>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d124      	bne.n	800486a <_malloc_r+0x92>
 8004820:	230c      	movs	r3, #12
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	4630      	mov	r0, r6
 8004826:	f000 f862 	bl	80048ee <__malloc_unlock>
 800482a:	e7e4      	b.n	80047f6 <_malloc_r+0x1e>
 800482c:	680b      	ldr	r3, [r1, #0]
 800482e:	1b5b      	subs	r3, r3, r5
 8004830:	d418      	bmi.n	8004864 <_malloc_r+0x8c>
 8004832:	2b0b      	cmp	r3, #11
 8004834:	d90f      	bls.n	8004856 <_malloc_r+0x7e>
 8004836:	600b      	str	r3, [r1, #0]
 8004838:	50cd      	str	r5, [r1, r3]
 800483a:	18cc      	adds	r4, r1, r3
 800483c:	4630      	mov	r0, r6
 800483e:	f000 f856 	bl	80048ee <__malloc_unlock>
 8004842:	f104 000b 	add.w	r0, r4, #11
 8004846:	1d23      	adds	r3, r4, #4
 8004848:	f020 0007 	bic.w	r0, r0, #7
 800484c:	1ac3      	subs	r3, r0, r3
 800484e:	d0d3      	beq.n	80047f8 <_malloc_r+0x20>
 8004850:	425a      	negs	r2, r3
 8004852:	50e2      	str	r2, [r4, r3]
 8004854:	e7d0      	b.n	80047f8 <_malloc_r+0x20>
 8004856:	428c      	cmp	r4, r1
 8004858:	684b      	ldr	r3, [r1, #4]
 800485a:	bf16      	itet	ne
 800485c:	6063      	strne	r3, [r4, #4]
 800485e:	6013      	streq	r3, [r2, #0]
 8004860:	460c      	movne	r4, r1
 8004862:	e7eb      	b.n	800483c <_malloc_r+0x64>
 8004864:	460c      	mov	r4, r1
 8004866:	6849      	ldr	r1, [r1, #4]
 8004868:	e7cc      	b.n	8004804 <_malloc_r+0x2c>
 800486a:	1cc4      	adds	r4, r0, #3
 800486c:	f024 0403 	bic.w	r4, r4, #3
 8004870:	42a0      	cmp	r0, r4
 8004872:	d005      	beq.n	8004880 <_malloc_r+0xa8>
 8004874:	1a21      	subs	r1, r4, r0
 8004876:	4630      	mov	r0, r6
 8004878:	f000 f808 	bl	800488c <_sbrk_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d0cf      	beq.n	8004820 <_malloc_r+0x48>
 8004880:	6025      	str	r5, [r4, #0]
 8004882:	e7db      	b.n	800483c <_malloc_r+0x64>
 8004884:	20000108 	.word	0x20000108
 8004888:	2000010c 	.word	0x2000010c

0800488c <_sbrk_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4c06      	ldr	r4, [pc, #24]	; (80048a8 <_sbrk_r+0x1c>)
 8004890:	2300      	movs	r3, #0
 8004892:	4605      	mov	r5, r0
 8004894:	4608      	mov	r0, r1
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	f7fd fdbc 	bl	8002414 <_sbrk>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_sbrk_r+0x1a>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_sbrk_r+0x1a>
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	200001c8 	.word	0x200001c8

080048ac <siprintf>:
 80048ac:	b40e      	push	{r1, r2, r3}
 80048ae:	b500      	push	{lr}
 80048b0:	b09c      	sub	sp, #112	; 0x70
 80048b2:	ab1d      	add	r3, sp, #116	; 0x74
 80048b4:	9002      	str	r0, [sp, #8]
 80048b6:	9006      	str	r0, [sp, #24]
 80048b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048bc:	4809      	ldr	r0, [pc, #36]	; (80048e4 <siprintf+0x38>)
 80048be:	9107      	str	r1, [sp, #28]
 80048c0:	9104      	str	r1, [sp, #16]
 80048c2:	4909      	ldr	r1, [pc, #36]	; (80048e8 <siprintf+0x3c>)
 80048c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c8:	9105      	str	r1, [sp, #20]
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	a902      	add	r1, sp, #8
 80048d0:	f000 f868 	bl	80049a4 <_svfiprintf_r>
 80048d4:	9b02      	ldr	r3, [sp, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	b01c      	add	sp, #112	; 0x70
 80048dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e0:	b003      	add	sp, #12
 80048e2:	4770      	bx	lr
 80048e4:	20000054 	.word	0x20000054
 80048e8:	ffff0208 	.word	0xffff0208

080048ec <__malloc_lock>:
 80048ec:	4770      	bx	lr

080048ee <__malloc_unlock>:
 80048ee:	4770      	bx	lr

080048f0 <__ssputs_r>:
 80048f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	688e      	ldr	r6, [r1, #8]
 80048f6:	429e      	cmp	r6, r3
 80048f8:	4682      	mov	sl, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	4690      	mov	r8, r2
 80048fe:	4699      	mov	r9, r3
 8004900:	d837      	bhi.n	8004972 <__ssputs_r+0x82>
 8004902:	898a      	ldrh	r2, [r1, #12]
 8004904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004908:	d031      	beq.n	800496e <__ssputs_r+0x7e>
 800490a:	6825      	ldr	r5, [r4, #0]
 800490c:	6909      	ldr	r1, [r1, #16]
 800490e:	1a6f      	subs	r7, r5, r1
 8004910:	6965      	ldr	r5, [r4, #20]
 8004912:	2302      	movs	r3, #2
 8004914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004918:	fb95 f5f3 	sdiv	r5, r5, r3
 800491c:	f109 0301 	add.w	r3, r9, #1
 8004920:	443b      	add	r3, r7
 8004922:	429d      	cmp	r5, r3
 8004924:	bf38      	it	cc
 8004926:	461d      	movcc	r5, r3
 8004928:	0553      	lsls	r3, r2, #21
 800492a:	d530      	bpl.n	800498e <__ssputs_r+0x9e>
 800492c:	4629      	mov	r1, r5
 800492e:	f7ff ff53 	bl	80047d8 <_malloc_r>
 8004932:	4606      	mov	r6, r0
 8004934:	b950      	cbnz	r0, 800494c <__ssputs_r+0x5c>
 8004936:	230c      	movs	r3, #12
 8004938:	f8ca 3000 	str.w	r3, [sl]
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	463a      	mov	r2, r7
 800494e:	6921      	ldr	r1, [r4, #16]
 8004950:	f000 faa8 	bl	8004ea4 <memcpy>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	6126      	str	r6, [r4, #16]
 8004962:	6165      	str	r5, [r4, #20]
 8004964:	443e      	add	r6, r7
 8004966:	1bed      	subs	r5, r5, r7
 8004968:	6026      	str	r6, [r4, #0]
 800496a:	60a5      	str	r5, [r4, #8]
 800496c:	464e      	mov	r6, r9
 800496e:	454e      	cmp	r6, r9
 8004970:	d900      	bls.n	8004974 <__ssputs_r+0x84>
 8004972:	464e      	mov	r6, r9
 8004974:	4632      	mov	r2, r6
 8004976:	4641      	mov	r1, r8
 8004978:	6820      	ldr	r0, [r4, #0]
 800497a:	f000 fa9e 	bl	8004eba <memmove>
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	1b9b      	subs	r3, r3, r6
 8004982:	60a3      	str	r3, [r4, #8]
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	441e      	add	r6, r3
 8004988:	6026      	str	r6, [r4, #0]
 800498a:	2000      	movs	r0, #0
 800498c:	e7dc      	b.n	8004948 <__ssputs_r+0x58>
 800498e:	462a      	mov	r2, r5
 8004990:	f000 faac 	bl	8004eec <_realloc_r>
 8004994:	4606      	mov	r6, r0
 8004996:	2800      	cmp	r0, #0
 8004998:	d1e2      	bne.n	8004960 <__ssputs_r+0x70>
 800499a:	6921      	ldr	r1, [r4, #16]
 800499c:	4650      	mov	r0, sl
 800499e:	f7ff fecd 	bl	800473c <_free_r>
 80049a2:	e7c8      	b.n	8004936 <__ssputs_r+0x46>

080049a4 <_svfiprintf_r>:
 80049a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a8:	461d      	mov	r5, r3
 80049aa:	898b      	ldrh	r3, [r1, #12]
 80049ac:	061f      	lsls	r7, r3, #24
 80049ae:	b09d      	sub	sp, #116	; 0x74
 80049b0:	4680      	mov	r8, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	4616      	mov	r6, r2
 80049b6:	d50f      	bpl.n	80049d8 <_svfiprintf_r+0x34>
 80049b8:	690b      	ldr	r3, [r1, #16]
 80049ba:	b96b      	cbnz	r3, 80049d8 <_svfiprintf_r+0x34>
 80049bc:	2140      	movs	r1, #64	; 0x40
 80049be:	f7ff ff0b 	bl	80047d8 <_malloc_r>
 80049c2:	6020      	str	r0, [r4, #0]
 80049c4:	6120      	str	r0, [r4, #16]
 80049c6:	b928      	cbnz	r0, 80049d4 <_svfiprintf_r+0x30>
 80049c8:	230c      	movs	r3, #12
 80049ca:	f8c8 3000 	str.w	r3, [r8]
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	e0c8      	b.n	8004b66 <_svfiprintf_r+0x1c2>
 80049d4:	2340      	movs	r3, #64	; 0x40
 80049d6:	6163      	str	r3, [r4, #20]
 80049d8:	2300      	movs	r3, #0
 80049da:	9309      	str	r3, [sp, #36]	; 0x24
 80049dc:	2320      	movs	r3, #32
 80049de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049e2:	2330      	movs	r3, #48	; 0x30
 80049e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049e8:	9503      	str	r5, [sp, #12]
 80049ea:	f04f 0b01 	mov.w	fp, #1
 80049ee:	4637      	mov	r7, r6
 80049f0:	463d      	mov	r5, r7
 80049f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049f6:	b10b      	cbz	r3, 80049fc <_svfiprintf_r+0x58>
 80049f8:	2b25      	cmp	r3, #37	; 0x25
 80049fa:	d13e      	bne.n	8004a7a <_svfiprintf_r+0xd6>
 80049fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a00:	d00b      	beq.n	8004a1a <_svfiprintf_r+0x76>
 8004a02:	4653      	mov	r3, sl
 8004a04:	4632      	mov	r2, r6
 8004a06:	4621      	mov	r1, r4
 8004a08:	4640      	mov	r0, r8
 8004a0a:	f7ff ff71 	bl	80048f0 <__ssputs_r>
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f000 80a4 	beq.w	8004b5c <_svfiprintf_r+0x1b8>
 8004a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a16:	4453      	add	r3, sl
 8004a18:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1a:	783b      	ldrb	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 809d 	beq.w	8004b5c <_svfiprintf_r+0x1b8>
 8004a22:	2300      	movs	r3, #0
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	9307      	str	r3, [sp, #28]
 8004a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a34:	931a      	str	r3, [sp, #104]	; 0x68
 8004a36:	462f      	mov	r7, r5
 8004a38:	2205      	movs	r2, #5
 8004a3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a3e:	4850      	ldr	r0, [pc, #320]	; (8004b80 <_svfiprintf_r+0x1dc>)
 8004a40:	f7fb fbce 	bl	80001e0 <memchr>
 8004a44:	9b04      	ldr	r3, [sp, #16]
 8004a46:	b9d0      	cbnz	r0, 8004a7e <_svfiprintf_r+0xda>
 8004a48:	06d9      	lsls	r1, r3, #27
 8004a4a:	bf44      	itt	mi
 8004a4c:	2220      	movmi	r2, #32
 8004a4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a52:	071a      	lsls	r2, r3, #28
 8004a54:	bf44      	itt	mi
 8004a56:	222b      	movmi	r2, #43	; 0x2b
 8004a58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a5c:	782a      	ldrb	r2, [r5, #0]
 8004a5e:	2a2a      	cmp	r2, #42	; 0x2a
 8004a60:	d015      	beq.n	8004a8e <_svfiprintf_r+0xea>
 8004a62:	9a07      	ldr	r2, [sp, #28]
 8004a64:	462f      	mov	r7, r5
 8004a66:	2000      	movs	r0, #0
 8004a68:	250a      	movs	r5, #10
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a70:	3b30      	subs	r3, #48	; 0x30
 8004a72:	2b09      	cmp	r3, #9
 8004a74:	d94d      	bls.n	8004b12 <_svfiprintf_r+0x16e>
 8004a76:	b1b8      	cbz	r0, 8004aa8 <_svfiprintf_r+0x104>
 8004a78:	e00f      	b.n	8004a9a <_svfiprintf_r+0xf6>
 8004a7a:	462f      	mov	r7, r5
 8004a7c:	e7b8      	b.n	80049f0 <_svfiprintf_r+0x4c>
 8004a7e:	4a40      	ldr	r2, [pc, #256]	; (8004b80 <_svfiprintf_r+0x1dc>)
 8004a80:	1a80      	subs	r0, r0, r2
 8004a82:	fa0b f000 	lsl.w	r0, fp, r0
 8004a86:	4318      	orrs	r0, r3
 8004a88:	9004      	str	r0, [sp, #16]
 8004a8a:	463d      	mov	r5, r7
 8004a8c:	e7d3      	b.n	8004a36 <_svfiprintf_r+0x92>
 8004a8e:	9a03      	ldr	r2, [sp, #12]
 8004a90:	1d11      	adds	r1, r2, #4
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	9103      	str	r1, [sp, #12]
 8004a96:	2a00      	cmp	r2, #0
 8004a98:	db01      	blt.n	8004a9e <_svfiprintf_r+0xfa>
 8004a9a:	9207      	str	r2, [sp, #28]
 8004a9c:	e004      	b.n	8004aa8 <_svfiprintf_r+0x104>
 8004a9e:	4252      	negs	r2, r2
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	9207      	str	r2, [sp, #28]
 8004aa6:	9304      	str	r3, [sp, #16]
 8004aa8:	783b      	ldrb	r3, [r7, #0]
 8004aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8004aac:	d10c      	bne.n	8004ac8 <_svfiprintf_r+0x124>
 8004aae:	787b      	ldrb	r3, [r7, #1]
 8004ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab2:	d133      	bne.n	8004b1c <_svfiprintf_r+0x178>
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	9203      	str	r2, [sp, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bfb8      	it	lt
 8004ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ac4:	3702      	adds	r7, #2
 8004ac6:	9305      	str	r3, [sp, #20]
 8004ac8:	4d2e      	ldr	r5, [pc, #184]	; (8004b84 <_svfiprintf_r+0x1e0>)
 8004aca:	7839      	ldrb	r1, [r7, #0]
 8004acc:	2203      	movs	r2, #3
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f7fb fb86 	bl	80001e0 <memchr>
 8004ad4:	b138      	cbz	r0, 8004ae6 <_svfiprintf_r+0x142>
 8004ad6:	2340      	movs	r3, #64	; 0x40
 8004ad8:	1b40      	subs	r0, r0, r5
 8004ada:	fa03 f000 	lsl.w	r0, r3, r0
 8004ade:	9b04      	ldr	r3, [sp, #16]
 8004ae0:	4303      	orrs	r3, r0
 8004ae2:	3701      	adds	r7, #1
 8004ae4:	9304      	str	r3, [sp, #16]
 8004ae6:	7839      	ldrb	r1, [r7, #0]
 8004ae8:	4827      	ldr	r0, [pc, #156]	; (8004b88 <_svfiprintf_r+0x1e4>)
 8004aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aee:	2206      	movs	r2, #6
 8004af0:	1c7e      	adds	r6, r7, #1
 8004af2:	f7fb fb75 	bl	80001e0 <memchr>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d038      	beq.n	8004b6c <_svfiprintf_r+0x1c8>
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <_svfiprintf_r+0x1e8>)
 8004afc:	bb13      	cbnz	r3, 8004b44 <_svfiprintf_r+0x1a0>
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	3307      	adds	r3, #7
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	3308      	adds	r3, #8
 8004b08:	9303      	str	r3, [sp, #12]
 8004b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0c:	444b      	add	r3, r9
 8004b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b10:	e76d      	b.n	80049ee <_svfiprintf_r+0x4a>
 8004b12:	fb05 3202 	mla	r2, r5, r2, r3
 8004b16:	2001      	movs	r0, #1
 8004b18:	460f      	mov	r7, r1
 8004b1a:	e7a6      	b.n	8004a6a <_svfiprintf_r+0xc6>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	3701      	adds	r7, #1
 8004b20:	9305      	str	r3, [sp, #20]
 8004b22:	4619      	mov	r1, r3
 8004b24:	250a      	movs	r5, #10
 8004b26:	4638      	mov	r0, r7
 8004b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b2c:	3a30      	subs	r2, #48	; 0x30
 8004b2e:	2a09      	cmp	r2, #9
 8004b30:	d903      	bls.n	8004b3a <_svfiprintf_r+0x196>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0c8      	beq.n	8004ac8 <_svfiprintf_r+0x124>
 8004b36:	9105      	str	r1, [sp, #20]
 8004b38:	e7c6      	b.n	8004ac8 <_svfiprintf_r+0x124>
 8004b3a:	fb05 2101 	mla	r1, r5, r1, r2
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4607      	mov	r7, r0
 8004b42:	e7f0      	b.n	8004b26 <_svfiprintf_r+0x182>
 8004b44:	ab03      	add	r3, sp, #12
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4622      	mov	r2, r4
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <_svfiprintf_r+0x1ec>)
 8004b4c:	a904      	add	r1, sp, #16
 8004b4e:	4640      	mov	r0, r8
 8004b50:	f3af 8000 	nop.w
 8004b54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b58:	4681      	mov	r9, r0
 8004b5a:	d1d6      	bne.n	8004b0a <_svfiprintf_r+0x166>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	065b      	lsls	r3, r3, #25
 8004b60:	f53f af35 	bmi.w	80049ce <_svfiprintf_r+0x2a>
 8004b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b66:	b01d      	add	sp, #116	; 0x74
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	ab03      	add	r3, sp, #12
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4622      	mov	r2, r4
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <_svfiprintf_r+0x1ec>)
 8004b74:	a904      	add	r1, sp, #16
 8004b76:	4640      	mov	r0, r8
 8004b78:	f000 f882 	bl	8004c80 <_printf_i>
 8004b7c:	e7ea      	b.n	8004b54 <_svfiprintf_r+0x1b0>
 8004b7e:	bf00      	nop
 8004b80:	08007c3c 	.word	0x08007c3c
 8004b84:	08007c42 	.word	0x08007c42
 8004b88:	08007c46 	.word	0x08007c46
 8004b8c:	00000000 	.word	0x00000000
 8004b90:	080048f1 	.word	0x080048f1

08004b94 <_printf_common>:
 8004b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b98:	4691      	mov	r9, r2
 8004b9a:	461f      	mov	r7, r3
 8004b9c:	688a      	ldr	r2, [r1, #8]
 8004b9e:	690b      	ldr	r3, [r1, #16]
 8004ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	bfb8      	it	lt
 8004ba8:	4613      	movlt	r3, r2
 8004baa:	f8c9 3000 	str.w	r3, [r9]
 8004bae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	b112      	cbz	r2, 8004bbe <_printf_common+0x2a>
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f8c9 3000 	str.w	r3, [r9]
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	0699      	lsls	r1, r3, #26
 8004bc2:	bf42      	ittt	mi
 8004bc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bc8:	3302      	addmi	r3, #2
 8004bca:	f8c9 3000 	strmi.w	r3, [r9]
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	f015 0506 	ands.w	r5, r5, #6
 8004bd4:	d107      	bne.n	8004be6 <_printf_common+0x52>
 8004bd6:	f104 0a19 	add.w	sl, r4, #25
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	f8d9 2000 	ldr.w	r2, [r9]
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	42ab      	cmp	r3, r5
 8004be4:	dc28      	bgt.n	8004c38 <_printf_common+0xa4>
 8004be6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	3300      	adds	r3, #0
 8004bee:	bf18      	it	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	0692      	lsls	r2, r2, #26
 8004bf4:	d42d      	bmi.n	8004c52 <_printf_common+0xbe>
 8004bf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	47c0      	blx	r8
 8004c00:	3001      	adds	r0, #1
 8004c02:	d020      	beq.n	8004c46 <_printf_common+0xb2>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	68e5      	ldr	r5, [r4, #12]
 8004c08:	f8d9 2000 	ldr.w	r2, [r9]
 8004c0c:	f003 0306 	and.w	r3, r3, #6
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	bf08      	it	eq
 8004c14:	1aad      	subeq	r5, r5, r2
 8004c16:	68a3      	ldr	r3, [r4, #8]
 8004c18:	6922      	ldr	r2, [r4, #16]
 8004c1a:	bf0c      	ite	eq
 8004c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c20:	2500      	movne	r5, #0
 8004c22:	4293      	cmp	r3, r2
 8004c24:	bfc4      	itt	gt
 8004c26:	1a9b      	subgt	r3, r3, r2
 8004c28:	18ed      	addgt	r5, r5, r3
 8004c2a:	f04f 0900 	mov.w	r9, #0
 8004c2e:	341a      	adds	r4, #26
 8004c30:	454d      	cmp	r5, r9
 8004c32:	d11a      	bne.n	8004c6a <_printf_common+0xd6>
 8004c34:	2000      	movs	r0, #0
 8004c36:	e008      	b.n	8004c4a <_printf_common+0xb6>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4652      	mov	r2, sl
 8004c3c:	4639      	mov	r1, r7
 8004c3e:	4630      	mov	r0, r6
 8004c40:	47c0      	blx	r8
 8004c42:	3001      	adds	r0, #1
 8004c44:	d103      	bne.n	8004c4e <_printf_common+0xba>
 8004c46:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4e:	3501      	adds	r5, #1
 8004c50:	e7c3      	b.n	8004bda <_printf_common+0x46>
 8004c52:	18e1      	adds	r1, r4, r3
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	2030      	movs	r0, #48	; 0x30
 8004c58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c5c:	4422      	add	r2, r4
 8004c5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c66:	3302      	adds	r3, #2
 8004c68:	e7c5      	b.n	8004bf6 <_printf_common+0x62>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	4639      	mov	r1, r7
 8004c70:	4630      	mov	r0, r6
 8004c72:	47c0      	blx	r8
 8004c74:	3001      	adds	r0, #1
 8004c76:	d0e6      	beq.n	8004c46 <_printf_common+0xb2>
 8004c78:	f109 0901 	add.w	r9, r9, #1
 8004c7c:	e7d8      	b.n	8004c30 <_printf_common+0x9c>
	...

08004c80 <_printf_i>:
 8004c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c88:	460c      	mov	r4, r1
 8004c8a:	7e09      	ldrb	r1, [r1, #24]
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	296e      	cmp	r1, #110	; 0x6e
 8004c90:	4617      	mov	r7, r2
 8004c92:	4606      	mov	r6, r0
 8004c94:	4698      	mov	r8, r3
 8004c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c98:	f000 80b3 	beq.w	8004e02 <_printf_i+0x182>
 8004c9c:	d822      	bhi.n	8004ce4 <_printf_i+0x64>
 8004c9e:	2963      	cmp	r1, #99	; 0x63
 8004ca0:	d036      	beq.n	8004d10 <_printf_i+0x90>
 8004ca2:	d80a      	bhi.n	8004cba <_printf_i+0x3a>
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	f000 80b9 	beq.w	8004e1c <_printf_i+0x19c>
 8004caa:	2958      	cmp	r1, #88	; 0x58
 8004cac:	f000 8083 	beq.w	8004db6 <_printf_i+0x136>
 8004cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004cb8:	e032      	b.n	8004d20 <_printf_i+0xa0>
 8004cba:	2964      	cmp	r1, #100	; 0x64
 8004cbc:	d001      	beq.n	8004cc2 <_printf_i+0x42>
 8004cbe:	2969      	cmp	r1, #105	; 0x69
 8004cc0:	d1f6      	bne.n	8004cb0 <_printf_i+0x30>
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	6813      	ldr	r3, [r2, #0]
 8004cc6:	0605      	lsls	r5, r0, #24
 8004cc8:	f103 0104 	add.w	r1, r3, #4
 8004ccc:	d52a      	bpl.n	8004d24 <_printf_i+0xa4>
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6011      	str	r1, [r2, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	da03      	bge.n	8004cde <_printf_i+0x5e>
 8004cd6:	222d      	movs	r2, #45	; 0x2d
 8004cd8:	425b      	negs	r3, r3
 8004cda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004cde:	486f      	ldr	r0, [pc, #444]	; (8004e9c <_printf_i+0x21c>)
 8004ce0:	220a      	movs	r2, #10
 8004ce2:	e039      	b.n	8004d58 <_printf_i+0xd8>
 8004ce4:	2973      	cmp	r1, #115	; 0x73
 8004ce6:	f000 809d 	beq.w	8004e24 <_printf_i+0x1a4>
 8004cea:	d808      	bhi.n	8004cfe <_printf_i+0x7e>
 8004cec:	296f      	cmp	r1, #111	; 0x6f
 8004cee:	d020      	beq.n	8004d32 <_printf_i+0xb2>
 8004cf0:	2970      	cmp	r1, #112	; 0x70
 8004cf2:	d1dd      	bne.n	8004cb0 <_printf_i+0x30>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	f043 0320 	orr.w	r3, r3, #32
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	e003      	b.n	8004d06 <_printf_i+0x86>
 8004cfe:	2975      	cmp	r1, #117	; 0x75
 8004d00:	d017      	beq.n	8004d32 <_printf_i+0xb2>
 8004d02:	2978      	cmp	r1, #120	; 0x78
 8004d04:	d1d4      	bne.n	8004cb0 <_printf_i+0x30>
 8004d06:	2378      	movs	r3, #120	; 0x78
 8004d08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d0c:	4864      	ldr	r0, [pc, #400]	; (8004ea0 <_printf_i+0x220>)
 8004d0e:	e055      	b.n	8004dbc <_printf_i+0x13c>
 8004d10:	6813      	ldr	r3, [r2, #0]
 8004d12:	1d19      	adds	r1, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6011      	str	r1, [r2, #0]
 8004d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d20:	2301      	movs	r3, #1
 8004d22:	e08c      	b.n	8004e3e <_printf_i+0x1be>
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6011      	str	r1, [r2, #0]
 8004d28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d2c:	bf18      	it	ne
 8004d2e:	b21b      	sxthne	r3, r3
 8004d30:	e7cf      	b.n	8004cd2 <_printf_i+0x52>
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	6825      	ldr	r5, [r4, #0]
 8004d36:	1d18      	adds	r0, r3, #4
 8004d38:	6010      	str	r0, [r2, #0]
 8004d3a:	0628      	lsls	r0, r5, #24
 8004d3c:	d501      	bpl.n	8004d42 <_printf_i+0xc2>
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	e002      	b.n	8004d48 <_printf_i+0xc8>
 8004d42:	0668      	lsls	r0, r5, #25
 8004d44:	d5fb      	bpl.n	8004d3e <_printf_i+0xbe>
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	4854      	ldr	r0, [pc, #336]	; (8004e9c <_printf_i+0x21c>)
 8004d4a:	296f      	cmp	r1, #111	; 0x6f
 8004d4c:	bf14      	ite	ne
 8004d4e:	220a      	movne	r2, #10
 8004d50:	2208      	moveq	r2, #8
 8004d52:	2100      	movs	r1, #0
 8004d54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d58:	6865      	ldr	r5, [r4, #4]
 8004d5a:	60a5      	str	r5, [r4, #8]
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	f2c0 8095 	blt.w	8004e8c <_printf_i+0x20c>
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	f021 0104 	bic.w	r1, r1, #4
 8004d68:	6021      	str	r1, [r4, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d13d      	bne.n	8004dea <_printf_i+0x16a>
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	f040 808e 	bne.w	8004e90 <_printf_i+0x210>
 8004d74:	4665      	mov	r5, ip
 8004d76:	2a08      	cmp	r2, #8
 8004d78:	d10b      	bne.n	8004d92 <_printf_i+0x112>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	07db      	lsls	r3, r3, #31
 8004d7e:	d508      	bpl.n	8004d92 <_printf_i+0x112>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	bfde      	ittt	le
 8004d88:	2330      	movle	r3, #48	; 0x30
 8004d8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d92:	ebac 0305 	sub.w	r3, ip, r5
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	f8cd 8000 	str.w	r8, [sp]
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	aa03      	add	r2, sp, #12
 8004da0:	4621      	mov	r1, r4
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7ff fef6 	bl	8004b94 <_printf_common>
 8004da8:	3001      	adds	r0, #1
 8004daa:	d14d      	bne.n	8004e48 <_printf_i+0x1c8>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	b005      	add	sp, #20
 8004db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004db6:	4839      	ldr	r0, [pc, #228]	; (8004e9c <_printf_i+0x21c>)
 8004db8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004dbc:	6813      	ldr	r3, [r2, #0]
 8004dbe:	6821      	ldr	r1, [r4, #0]
 8004dc0:	1d1d      	adds	r5, r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6015      	str	r5, [r2, #0]
 8004dc6:	060a      	lsls	r2, r1, #24
 8004dc8:	d50b      	bpl.n	8004de2 <_printf_i+0x162>
 8004dca:	07ca      	lsls	r2, r1, #31
 8004dcc:	bf44      	itt	mi
 8004dce:	f041 0120 	orrmi.w	r1, r1, #32
 8004dd2:	6021      	strmi	r1, [r4, #0]
 8004dd4:	b91b      	cbnz	r3, 8004dde <_printf_i+0x15e>
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	f022 0220 	bic.w	r2, r2, #32
 8004ddc:	6022      	str	r2, [r4, #0]
 8004dde:	2210      	movs	r2, #16
 8004de0:	e7b7      	b.n	8004d52 <_printf_i+0xd2>
 8004de2:	064d      	lsls	r5, r1, #25
 8004de4:	bf48      	it	mi
 8004de6:	b29b      	uxthmi	r3, r3
 8004de8:	e7ef      	b.n	8004dca <_printf_i+0x14a>
 8004dea:	4665      	mov	r5, ip
 8004dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df0:	fb02 3311 	mls	r3, r2, r1, r3
 8004df4:	5cc3      	ldrb	r3, [r0, r3]
 8004df6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d1f5      	bne.n	8004dec <_printf_i+0x16c>
 8004e00:	e7b9      	b.n	8004d76 <_printf_i+0xf6>
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	6825      	ldr	r5, [r4, #0]
 8004e06:	6961      	ldr	r1, [r4, #20]
 8004e08:	1d18      	adds	r0, r3, #4
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	0628      	lsls	r0, r5, #24
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	d501      	bpl.n	8004e16 <_printf_i+0x196>
 8004e12:	6019      	str	r1, [r3, #0]
 8004e14:	e002      	b.n	8004e1c <_printf_i+0x19c>
 8004e16:	066a      	lsls	r2, r5, #25
 8004e18:	d5fb      	bpl.n	8004e12 <_printf_i+0x192>
 8004e1a:	8019      	strh	r1, [r3, #0]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	4665      	mov	r5, ip
 8004e22:	e7b9      	b.n	8004d98 <_printf_i+0x118>
 8004e24:	6813      	ldr	r3, [r2, #0]
 8004e26:	1d19      	adds	r1, r3, #4
 8004e28:	6011      	str	r1, [r2, #0]
 8004e2a:	681d      	ldr	r5, [r3, #0]
 8004e2c:	6862      	ldr	r2, [r4, #4]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4628      	mov	r0, r5
 8004e32:	f7fb f9d5 	bl	80001e0 <memchr>
 8004e36:	b108      	cbz	r0, 8004e3c <_printf_i+0x1bc>
 8004e38:	1b40      	subs	r0, r0, r5
 8004e3a:	6060      	str	r0, [r4, #4]
 8004e3c:	6863      	ldr	r3, [r4, #4]
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	2300      	movs	r3, #0
 8004e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e46:	e7a7      	b.n	8004d98 <_printf_i+0x118>
 8004e48:	6923      	ldr	r3, [r4, #16]
 8004e4a:	462a      	mov	r2, r5
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	4630      	mov	r0, r6
 8004e50:	47c0      	blx	r8
 8004e52:	3001      	adds	r0, #1
 8004e54:	d0aa      	beq.n	8004dac <_printf_i+0x12c>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	079b      	lsls	r3, r3, #30
 8004e5a:	d413      	bmi.n	8004e84 <_printf_i+0x204>
 8004e5c:	68e0      	ldr	r0, [r4, #12]
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	4298      	cmp	r0, r3
 8004e62:	bfb8      	it	lt
 8004e64:	4618      	movlt	r0, r3
 8004e66:	e7a3      	b.n	8004db0 <_printf_i+0x130>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	464a      	mov	r2, r9
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	4630      	mov	r0, r6
 8004e70:	47c0      	blx	r8
 8004e72:	3001      	adds	r0, #1
 8004e74:	d09a      	beq.n	8004dac <_printf_i+0x12c>
 8004e76:	3501      	adds	r5, #1
 8004e78:	68e3      	ldr	r3, [r4, #12]
 8004e7a:	9a03      	ldr	r2, [sp, #12]
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	42ab      	cmp	r3, r5
 8004e80:	dcf2      	bgt.n	8004e68 <_printf_i+0x1e8>
 8004e82:	e7eb      	b.n	8004e5c <_printf_i+0x1dc>
 8004e84:	2500      	movs	r5, #0
 8004e86:	f104 0919 	add.w	r9, r4, #25
 8004e8a:	e7f5      	b.n	8004e78 <_printf_i+0x1f8>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ac      	bne.n	8004dea <_printf_i+0x16a>
 8004e90:	7803      	ldrb	r3, [r0, #0]
 8004e92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e9a:	e76c      	b.n	8004d76 <_printf_i+0xf6>
 8004e9c:	08007c4d 	.word	0x08007c4d
 8004ea0:	08007c5e 	.word	0x08007c5e

08004ea4 <memcpy>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	1e43      	subs	r3, r0, #1
 8004ea8:	440a      	add	r2, r1
 8004eaa:	4291      	cmp	r1, r2
 8004eac:	d100      	bne.n	8004eb0 <memcpy+0xc>
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb8:	e7f7      	b.n	8004eaa <memcpy+0x6>

08004eba <memmove>:
 8004eba:	4288      	cmp	r0, r1
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	eb01 0302 	add.w	r3, r1, r2
 8004ec2:	d807      	bhi.n	8004ed4 <memmove+0x1a>
 8004ec4:	1e42      	subs	r2, r0, #1
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	d00a      	beq.n	8004ee0 <memmove+0x26>
 8004eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ece:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ed2:	e7f8      	b.n	8004ec6 <memmove+0xc>
 8004ed4:	4283      	cmp	r3, r0
 8004ed6:	d9f5      	bls.n	8004ec4 <memmove+0xa>
 8004ed8:	1881      	adds	r1, r0, r2
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	42d3      	cmn	r3, r2
 8004ede:	d100      	bne.n	8004ee2 <memmove+0x28>
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ee6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004eea:	e7f7      	b.n	8004edc <memmove+0x22>

08004eec <_realloc_r>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	4607      	mov	r7, r0
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	460e      	mov	r6, r1
 8004ef4:	b921      	cbnz	r1, 8004f00 <_realloc_r+0x14>
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004efc:	f7ff bc6c 	b.w	80047d8 <_malloc_r>
 8004f00:	b922      	cbnz	r2, 8004f0c <_realloc_r+0x20>
 8004f02:	f7ff fc1b 	bl	800473c <_free_r>
 8004f06:	4625      	mov	r5, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0c:	f000 f814 	bl	8004f38 <_malloc_usable_size_r>
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d20f      	bcs.n	8004f34 <_realloc_r+0x48>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4638      	mov	r0, r7
 8004f18:	f7ff fc5e 	bl	80047d8 <_malloc_r>
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0f2      	beq.n	8004f08 <_realloc_r+0x1c>
 8004f22:	4631      	mov	r1, r6
 8004f24:	4622      	mov	r2, r4
 8004f26:	f7ff ffbd 	bl	8004ea4 <memcpy>
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f7ff fc05 	bl	800473c <_free_r>
 8004f32:	e7e9      	b.n	8004f08 <_realloc_r+0x1c>
 8004f34:	4635      	mov	r5, r6
 8004f36:	e7e7      	b.n	8004f08 <_realloc_r+0x1c>

08004f38 <_malloc_usable_size_r>:
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f18      	subs	r0, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfbc      	itt	lt
 8004f42:	580b      	ldrlt	r3, [r1, r0]
 8004f44:	18c0      	addlt	r0, r0, r3
 8004f46:	4770      	bx	lr

08004f48 <floor>:
 8004f48:	ec51 0b10 	vmov	r0, r1, d0
 8004f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004f54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004f58:	2e13      	cmp	r6, #19
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	ee10 5a10 	vmov	r5, s0
 8004f60:	4680      	mov	r8, r0
 8004f62:	dc34      	bgt.n	8004fce <floor+0x86>
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	da16      	bge.n	8004f96 <floor+0x4e>
 8004f68:	a335      	add	r3, pc, #212	; (adr r3, 8005040 <floor+0xf8>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb f98d 	bl	800028c <__adddf3>
 8004f72:	2200      	movs	r2, #0
 8004f74:	2300      	movs	r3, #0
 8004f76:	f7fb fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8004f7a:	b148      	cbz	r0, 8004f90 <floor+0x48>
 8004f7c:	2c00      	cmp	r4, #0
 8004f7e:	da59      	bge.n	8005034 <floor+0xec>
 8004f80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004f84:	4a30      	ldr	r2, [pc, #192]	; (8005048 <floor+0x100>)
 8004f86:	432b      	orrs	r3, r5
 8004f88:	2500      	movs	r5, #0
 8004f8a:	42ab      	cmp	r3, r5
 8004f8c:	bf18      	it	ne
 8004f8e:	4614      	movne	r4, r2
 8004f90:	4621      	mov	r1, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	e025      	b.n	8004fe2 <floor+0x9a>
 8004f96:	4f2d      	ldr	r7, [pc, #180]	; (800504c <floor+0x104>)
 8004f98:	4137      	asrs	r7, r6
 8004f9a:	ea01 0307 	and.w	r3, r1, r7
 8004f9e:	4303      	orrs	r3, r0
 8004fa0:	d01f      	beq.n	8004fe2 <floor+0x9a>
 8004fa2:	a327      	add	r3, pc, #156	; (adr r3, 8005040 <floor+0xf8>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f7fb f970 	bl	800028c <__adddf3>
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f7fb fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d0eb      	beq.n	8004f90 <floor+0x48>
 8004fb8:	2c00      	cmp	r4, #0
 8004fba:	bfbe      	ittt	lt
 8004fbc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004fc0:	fa43 f606 	asrlt.w	r6, r3, r6
 8004fc4:	19a4      	addlt	r4, r4, r6
 8004fc6:	ea24 0407 	bic.w	r4, r4, r7
 8004fca:	2500      	movs	r5, #0
 8004fcc:	e7e0      	b.n	8004f90 <floor+0x48>
 8004fce:	2e33      	cmp	r6, #51	; 0x33
 8004fd0:	dd0b      	ble.n	8004fea <floor+0xa2>
 8004fd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004fd6:	d104      	bne.n	8004fe2 <floor+0x9a>
 8004fd8:	ee10 2a10 	vmov	r2, s0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	f7fb f955 	bl	800028c <__adddf3>
 8004fe2:	ec41 0b10 	vmov	d0, r0, r1
 8004fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	fa23 f707 	lsr.w	r7, r3, r7
 8004ff6:	4207      	tst	r7, r0
 8004ff8:	d0f3      	beq.n	8004fe2 <floor+0x9a>
 8004ffa:	a311      	add	r3, pc, #68	; (adr r3, 8005040 <floor+0xf8>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb f944 	bl	800028c <__adddf3>
 8005004:	2200      	movs	r2, #0
 8005006:	2300      	movs	r3, #0
 8005008:	f7fb fd86 	bl	8000b18 <__aeabi_dcmpgt>
 800500c:	2800      	cmp	r0, #0
 800500e:	d0bf      	beq.n	8004f90 <floor+0x48>
 8005010:	2c00      	cmp	r4, #0
 8005012:	da02      	bge.n	800501a <floor+0xd2>
 8005014:	2e14      	cmp	r6, #20
 8005016:	d103      	bne.n	8005020 <floor+0xd8>
 8005018:	3401      	adds	r4, #1
 800501a:	ea25 0507 	bic.w	r5, r5, r7
 800501e:	e7b7      	b.n	8004f90 <floor+0x48>
 8005020:	2301      	movs	r3, #1
 8005022:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005026:	fa03 f606 	lsl.w	r6, r3, r6
 800502a:	4435      	add	r5, r6
 800502c:	4545      	cmp	r5, r8
 800502e:	bf38      	it	cc
 8005030:	18e4      	addcc	r4, r4, r3
 8005032:	e7f2      	b.n	800501a <floor+0xd2>
 8005034:	2500      	movs	r5, #0
 8005036:	462c      	mov	r4, r5
 8005038:	e7aa      	b.n	8004f90 <floor+0x48>
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w
 8005040:	8800759c 	.word	0x8800759c
 8005044:	7e37e43c 	.word	0x7e37e43c
 8005048:	bff00000 	.word	0xbff00000
 800504c:	000fffff 	.word	0x000fffff

08005050 <round>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	ec57 6b10 	vmov	r6, r7, d0
 8005056:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800505a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800505e:	2c13      	cmp	r4, #19
 8005060:	463b      	mov	r3, r7
 8005062:	463d      	mov	r5, r7
 8005064:	dc17      	bgt.n	8005096 <round+0x46>
 8005066:	2c00      	cmp	r4, #0
 8005068:	da09      	bge.n	800507e <round+0x2e>
 800506a:	3401      	adds	r4, #1
 800506c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8005070:	d103      	bne.n	800507a <round+0x2a>
 8005072:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005076:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800507a:	2100      	movs	r1, #0
 800507c:	e02c      	b.n	80050d8 <round+0x88>
 800507e:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <round+0x90>)
 8005080:	4122      	asrs	r2, r4
 8005082:	4217      	tst	r7, r2
 8005084:	d100      	bne.n	8005088 <round+0x38>
 8005086:	b19e      	cbz	r6, 80050b0 <round+0x60>
 8005088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800508c:	4123      	asrs	r3, r4
 800508e:	442b      	add	r3, r5
 8005090:	ea23 0302 	bic.w	r3, r3, r2
 8005094:	e7f1      	b.n	800507a <round+0x2a>
 8005096:	2c33      	cmp	r4, #51	; 0x33
 8005098:	dd0d      	ble.n	80050b6 <round+0x66>
 800509a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800509e:	d107      	bne.n	80050b0 <round+0x60>
 80050a0:	4630      	mov	r0, r6
 80050a2:	4639      	mov	r1, r7
 80050a4:	ee10 2a10 	vmov	r2, s0
 80050a8:	f7fb f8f0 	bl	800028c <__adddf3>
 80050ac:	4606      	mov	r6, r0
 80050ae:	460f      	mov	r7, r1
 80050b0:	ec47 6b10 	vmov	d0, r6, r7
 80050b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	40d0      	lsrs	r0, r2
 80050c0:	4206      	tst	r6, r0
 80050c2:	d0f5      	beq.n	80050b0 <round+0x60>
 80050c4:	2201      	movs	r2, #1
 80050c6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80050ca:	fa02 f404 	lsl.w	r4, r2, r4
 80050ce:	1931      	adds	r1, r6, r4
 80050d0:	bf28      	it	cs
 80050d2:	189b      	addcs	r3, r3, r2
 80050d4:	ea21 0100 	bic.w	r1, r1, r0
 80050d8:	461f      	mov	r7, r3
 80050da:	460e      	mov	r6, r1
 80050dc:	e7e8      	b.n	80050b0 <round+0x60>
 80050de:	bf00      	nop
 80050e0:	000fffff 	.word	0x000fffff

080050e4 <log10>:
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	ed2d 8b02 	vpush	{d8}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	ec55 4b10 	vmov	r4, r5, d0
 80050f0:	f000 f9ea 	bl	80054c8 <__ieee754_log10>
 80050f4:	4b36      	ldr	r3, [pc, #216]	; (80051d0 <log10+0xec>)
 80050f6:	eeb0 8a40 	vmov.f32	s16, s0
 80050fa:	eef0 8a60 	vmov.f32	s17, s1
 80050fe:	f993 6000 	ldrsb.w	r6, [r3]
 8005102:	1c73      	adds	r3, r6, #1
 8005104:	d05c      	beq.n	80051c0 <log10+0xdc>
 8005106:	4622      	mov	r2, r4
 8005108:	462b      	mov	r3, r5
 800510a:	4620      	mov	r0, r4
 800510c:	4629      	mov	r1, r5
 800510e:	f7fb fd0d 	bl	8000b2c <__aeabi_dcmpun>
 8005112:	4607      	mov	r7, r0
 8005114:	2800      	cmp	r0, #0
 8005116:	d153      	bne.n	80051c0 <log10+0xdc>
 8005118:	2200      	movs	r2, #0
 800511a:	2300      	movs	r3, #0
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	f7fb fce6 	bl	8000af0 <__aeabi_dcmple>
 8005124:	2800      	cmp	r0, #0
 8005126:	d04b      	beq.n	80051c0 <log10+0xdc>
 8005128:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <log10+0xf0>)
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	9708      	str	r7, [sp, #32]
 800512e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005132:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005136:	b9a6      	cbnz	r6, 8005162 <log10+0x7e>
 8005138:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <log10+0xf4>)
 800513a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800513e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005142:	4620      	mov	r0, r4
 8005144:	2200      	movs	r2, #0
 8005146:	2300      	movs	r3, #0
 8005148:	4629      	mov	r1, r5
 800514a:	f7fb fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800514e:	bb40      	cbnz	r0, 80051a2 <log10+0xbe>
 8005150:	2301      	movs	r3, #1
 8005152:	2e02      	cmp	r6, #2
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	d119      	bne.n	800518c <log10+0xa8>
 8005158:	f7ff fab6 	bl	80046c8 <__errno>
 800515c:	2321      	movs	r3, #33	; 0x21
 800515e:	6003      	str	r3, [r0, #0]
 8005160:	e019      	b.n	8005196 <log10+0xb2>
 8005162:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <log10+0xf8>)
 8005164:	2200      	movs	r2, #0
 8005166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800516a:	4620      	mov	r0, r4
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	4629      	mov	r1, r5
 8005172:	f7fb fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005176:	2800      	cmp	r0, #0
 8005178:	d0ea      	beq.n	8005150 <log10+0x6c>
 800517a:	2302      	movs	r3, #2
 800517c:	429e      	cmp	r6, r3
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	d111      	bne.n	80051a6 <log10+0xc2>
 8005182:	f7ff faa1 	bl	80046c8 <__errno>
 8005186:	2322      	movs	r3, #34	; 0x22
 8005188:	6003      	str	r3, [r0, #0]
 800518a:	e011      	b.n	80051b0 <log10+0xcc>
 800518c:	4668      	mov	r0, sp
 800518e:	f000 fff6 	bl	800617e <matherr>
 8005192:	2800      	cmp	r0, #0
 8005194:	d0e0      	beq.n	8005158 <log10+0x74>
 8005196:	4812      	ldr	r0, [pc, #72]	; (80051e0 <log10+0xfc>)
 8005198:	f000 fff6 	bl	8006188 <nan>
 800519c:	ed8d 0b06 	vstr	d0, [sp, #24]
 80051a0:	e006      	b.n	80051b0 <log10+0xcc>
 80051a2:	2302      	movs	r3, #2
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	4668      	mov	r0, sp
 80051a8:	f000 ffe9 	bl	800617e <matherr>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d0e8      	beq.n	8005182 <log10+0x9e>
 80051b0:	9b08      	ldr	r3, [sp, #32]
 80051b2:	b11b      	cbz	r3, 80051bc <log10+0xd8>
 80051b4:	f7ff fa88 	bl	80046c8 <__errno>
 80051b8:	9b08      	ldr	r3, [sp, #32]
 80051ba:	6003      	str	r3, [r0, #0]
 80051bc:	ed9d 8b06 	vldr	d8, [sp, #24]
 80051c0:	eeb0 0a48 	vmov.f32	s0, s16
 80051c4:	eef0 0a68 	vmov.f32	s1, s17
 80051c8:	b00b      	add	sp, #44	; 0x2c
 80051ca:	ecbd 8b02 	vpop	{d8}
 80051ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d0:	200000b8 	.word	0x200000b8
 80051d4:	08007c6f 	.word	0x08007c6f
 80051d8:	c7efffff 	.word	0xc7efffff
 80051dc:	fff00000 	.word	0xfff00000
 80051e0:	08007c41 	.word	0x08007c41

080051e4 <pow>:
 80051e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	ed2d 8b04 	vpush	{d8-d9}
 80051ec:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80054c0 <pow+0x2dc>
 80051f0:	b08d      	sub	sp, #52	; 0x34
 80051f2:	ec57 6b10 	vmov	r6, r7, d0
 80051f6:	ec55 4b11 	vmov	r4, r5, d1
 80051fa:	f000 f9f1 	bl	80055e0 <__ieee754_pow>
 80051fe:	f999 3000 	ldrsb.w	r3, [r9]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	eeb0 8a40 	vmov.f32	s16, s0
 800520a:	eef0 8a60 	vmov.f32	s17, s1
 800520e:	46c8      	mov	r8, r9
 8005210:	d05f      	beq.n	80052d2 <pow+0xee>
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fb fc87 	bl	8000b2c <__aeabi_dcmpun>
 800521e:	4683      	mov	fp, r0
 8005220:	2800      	cmp	r0, #0
 8005222:	d156      	bne.n	80052d2 <pow+0xee>
 8005224:	4632      	mov	r2, r6
 8005226:	463b      	mov	r3, r7
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	f7fb fc7e 	bl	8000b2c <__aeabi_dcmpun>
 8005230:	9001      	str	r0, [sp, #4]
 8005232:	b1e8      	cbz	r0, 8005270 <pow+0x8c>
 8005234:	2200      	movs	r2, #0
 8005236:	2300      	movs	r3, #0
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8005240:	2800      	cmp	r0, #0
 8005242:	d046      	beq.n	80052d2 <pow+0xee>
 8005244:	2301      	movs	r3, #1
 8005246:	9302      	str	r3, [sp, #8]
 8005248:	4b96      	ldr	r3, [pc, #600]	; (80054a4 <pow+0x2c0>)
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	4b96      	ldr	r3, [pc, #600]	; (80054a8 <pow+0x2c4>)
 800524e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005252:	2200      	movs	r2, #0
 8005254:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005258:	9b00      	ldr	r3, [sp, #0]
 800525a:	2b02      	cmp	r3, #2
 800525c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005260:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005264:	d033      	beq.n	80052ce <pow+0xea>
 8005266:	a802      	add	r0, sp, #8
 8005268:	f000 ff89 	bl	800617e <matherr>
 800526c:	bb48      	cbnz	r0, 80052c2 <pow+0xde>
 800526e:	e05d      	b.n	800532c <pow+0x148>
 8005270:	f04f 0a00 	mov.w	sl, #0
 8005274:	f04f 0b00 	mov.w	fp, #0
 8005278:	4652      	mov	r2, sl
 800527a:	465b      	mov	r3, fp
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	f7fb fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8005284:	ec4b ab19 	vmov	d9, sl, fp
 8005288:	2800      	cmp	r0, #0
 800528a:	d054      	beq.n	8005336 <pow+0x152>
 800528c:	4652      	mov	r2, sl
 800528e:	465b      	mov	r3, fp
 8005290:	4620      	mov	r0, r4
 8005292:	4629      	mov	r1, r5
 8005294:	f7fb fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005298:	4680      	mov	r8, r0
 800529a:	b318      	cbz	r0, 80052e4 <pow+0x100>
 800529c:	2301      	movs	r3, #1
 800529e:	9302      	str	r3, [sp, #8]
 80052a0:	4b80      	ldr	r3, [pc, #512]	; (80054a4 <pow+0x2c0>)
 80052a2:	9303      	str	r3, [sp, #12]
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	930a      	str	r3, [sp, #40]	; 0x28
 80052a8:	9b00      	ldr	r3, [sp, #0]
 80052aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80052b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0d5      	beq.n	8005266 <pow+0x82>
 80052ba:	4b7b      	ldr	r3, [pc, #492]	; (80054a8 <pow+0x2c4>)
 80052bc:	2200      	movs	r2, #0
 80052be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c4:	b11b      	cbz	r3, 80052ce <pow+0xea>
 80052c6:	f7ff f9ff 	bl	80046c8 <__errno>
 80052ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052cc:	6003      	str	r3, [r0, #0]
 80052ce:	ed9d 8b08 	vldr	d8, [sp, #32]
 80052d2:	eeb0 0a48 	vmov.f32	s0, s16
 80052d6:	eef0 0a68 	vmov.f32	s1, s17
 80052da:	b00d      	add	sp, #52	; 0x34
 80052dc:	ecbd 8b04 	vpop	{d8-d9}
 80052e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e4:	ec45 4b10 	vmov	d0, r4, r5
 80052e8:	f000 ff41 	bl	800616e <finite>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d0f0      	beq.n	80052d2 <pow+0xee>
 80052f0:	4652      	mov	r2, sl
 80052f2:	465b      	mov	r3, fp
 80052f4:	4620      	mov	r0, r4
 80052f6:	4629      	mov	r1, r5
 80052f8:	f7fb fbf0 	bl	8000adc <__aeabi_dcmplt>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d0e8      	beq.n	80052d2 <pow+0xee>
 8005300:	2301      	movs	r3, #1
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	4b67      	ldr	r3, [pc, #412]	; (80054a4 <pow+0x2c0>)
 8005306:	9303      	str	r3, [sp, #12]
 8005308:	f999 3000 	ldrsb.w	r3, [r9]
 800530c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005310:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005314:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005318:	b913      	cbnz	r3, 8005320 <pow+0x13c>
 800531a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800531e:	e7a2      	b.n	8005266 <pow+0x82>
 8005320:	4962      	ldr	r1, [pc, #392]	; (80054ac <pow+0x2c8>)
 8005322:	2000      	movs	r0, #0
 8005324:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d19c      	bne.n	8005266 <pow+0x82>
 800532c:	f7ff f9cc 	bl	80046c8 <__errno>
 8005330:	2321      	movs	r3, #33	; 0x21
 8005332:	6003      	str	r3, [r0, #0]
 8005334:	e7c5      	b.n	80052c2 <pow+0xde>
 8005336:	eeb0 0a48 	vmov.f32	s0, s16
 800533a:	eef0 0a68 	vmov.f32	s1, s17
 800533e:	f000 ff16 	bl	800616e <finite>
 8005342:	9000      	str	r0, [sp, #0]
 8005344:	2800      	cmp	r0, #0
 8005346:	f040 8081 	bne.w	800544c <pow+0x268>
 800534a:	ec47 6b10 	vmov	d0, r6, r7
 800534e:	f000 ff0e 	bl	800616e <finite>
 8005352:	2800      	cmp	r0, #0
 8005354:	d07a      	beq.n	800544c <pow+0x268>
 8005356:	ec45 4b10 	vmov	d0, r4, r5
 800535a:	f000 ff08 	bl	800616e <finite>
 800535e:	2800      	cmp	r0, #0
 8005360:	d074      	beq.n	800544c <pow+0x268>
 8005362:	ec53 2b18 	vmov	r2, r3, d8
 8005366:	ee18 0a10 	vmov	r0, s16
 800536a:	4619      	mov	r1, r3
 800536c:	f7fb fbde 	bl	8000b2c <__aeabi_dcmpun>
 8005370:	f999 9000 	ldrsb.w	r9, [r9]
 8005374:	4b4b      	ldr	r3, [pc, #300]	; (80054a4 <pow+0x2c0>)
 8005376:	b1b0      	cbz	r0, 80053a6 <pow+0x1c2>
 8005378:	2201      	movs	r2, #1
 800537a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800537e:	9b00      	ldr	r3, [sp, #0]
 8005380:	930a      	str	r3, [sp, #40]	; 0x28
 8005382:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005386:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800538a:	f1b9 0f00 	cmp.w	r9, #0
 800538e:	d0c4      	beq.n	800531a <pow+0x136>
 8005390:	4652      	mov	r2, sl
 8005392:	465b      	mov	r3, fp
 8005394:	4650      	mov	r0, sl
 8005396:	4659      	mov	r1, fp
 8005398:	f7fb fa58 	bl	800084c <__aeabi_ddiv>
 800539c:	f1b9 0f02 	cmp.w	r9, #2
 80053a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053a4:	e7c1      	b.n	800532a <pow+0x146>
 80053a6:	2203      	movs	r2, #3
 80053a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053ac:	900a      	str	r0, [sp, #40]	; 0x28
 80053ae:	4629      	mov	r1, r5
 80053b0:	4620      	mov	r0, r4
 80053b2:	2200      	movs	r2, #0
 80053b4:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <pow+0x2cc>)
 80053b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80053ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80053be:	f7fb f91b 	bl	80005f8 <__aeabi_dmul>
 80053c2:	4604      	mov	r4, r0
 80053c4:	460d      	mov	r5, r1
 80053c6:	f1b9 0f00 	cmp.w	r9, #0
 80053ca:	d124      	bne.n	8005416 <pow+0x232>
 80053cc:	4b39      	ldr	r3, [pc, #228]	; (80054b4 <pow+0x2d0>)
 80053ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80053d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053d6:	4630      	mov	r0, r6
 80053d8:	4652      	mov	r2, sl
 80053da:	465b      	mov	r3, fp
 80053dc:	4639      	mov	r1, r7
 80053de:	f7fb fb7d 	bl	8000adc <__aeabi_dcmplt>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d056      	beq.n	8005494 <pow+0x2b0>
 80053e6:	ec45 4b10 	vmov	d0, r4, r5
 80053ea:	f000 fed5 	bl	8006198 <rint>
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	ec51 0b10 	vmov	r0, r1, d0
 80053f6:	f7fb fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80053fa:	b920      	cbnz	r0, 8005406 <pow+0x222>
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <pow+0x2d4>)
 80053fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005402:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005406:	f998 3000 	ldrsb.w	r3, [r8]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d142      	bne.n	8005494 <pow+0x2b0>
 800540e:	f7ff f95b 	bl	80046c8 <__errno>
 8005412:	2322      	movs	r3, #34	; 0x22
 8005414:	e78d      	b.n	8005332 <pow+0x14e>
 8005416:	4b29      	ldr	r3, [pc, #164]	; (80054bc <pow+0x2d8>)
 8005418:	2200      	movs	r2, #0
 800541a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800541e:	4630      	mov	r0, r6
 8005420:	4652      	mov	r2, sl
 8005422:	465b      	mov	r3, fp
 8005424:	4639      	mov	r1, r7
 8005426:	f7fb fb59 	bl	8000adc <__aeabi_dcmplt>
 800542a:	2800      	cmp	r0, #0
 800542c:	d0eb      	beq.n	8005406 <pow+0x222>
 800542e:	ec45 4b10 	vmov	d0, r4, r5
 8005432:	f000 feb1 	bl	8006198 <rint>
 8005436:	4622      	mov	r2, r4
 8005438:	462b      	mov	r3, r5
 800543a:	ec51 0b10 	vmov	r0, r1, d0
 800543e:	f7fb fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005442:	2800      	cmp	r0, #0
 8005444:	d1df      	bne.n	8005406 <pow+0x222>
 8005446:	2200      	movs	r2, #0
 8005448:	4b18      	ldr	r3, [pc, #96]	; (80054ac <pow+0x2c8>)
 800544a:	e7da      	b.n	8005402 <pow+0x21e>
 800544c:	2200      	movs	r2, #0
 800544e:	2300      	movs	r3, #0
 8005450:	ec51 0b18 	vmov	r0, r1, d8
 8005454:	f7fb fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005458:	2800      	cmp	r0, #0
 800545a:	f43f af3a 	beq.w	80052d2 <pow+0xee>
 800545e:	ec47 6b10 	vmov	d0, r6, r7
 8005462:	f000 fe84 	bl	800616e <finite>
 8005466:	2800      	cmp	r0, #0
 8005468:	f43f af33 	beq.w	80052d2 <pow+0xee>
 800546c:	ec45 4b10 	vmov	d0, r4, r5
 8005470:	f000 fe7d 	bl	800616e <finite>
 8005474:	2800      	cmp	r0, #0
 8005476:	f43f af2c 	beq.w	80052d2 <pow+0xee>
 800547a:	2304      	movs	r3, #4
 800547c:	9302      	str	r3, [sp, #8]
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <pow+0x2c0>)
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	2300      	movs	r3, #0
 8005484:	930a      	str	r3, [sp, #40]	; 0x28
 8005486:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800548a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800548e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8005492:	e7b8      	b.n	8005406 <pow+0x222>
 8005494:	a802      	add	r0, sp, #8
 8005496:	f000 fe72 	bl	800617e <matherr>
 800549a:	2800      	cmp	r0, #0
 800549c:	f47f af11 	bne.w	80052c2 <pow+0xde>
 80054a0:	e7b5      	b.n	800540e <pow+0x22a>
 80054a2:	bf00      	nop
 80054a4:	08007c75 	.word	0x08007c75
 80054a8:	3ff00000 	.word	0x3ff00000
 80054ac:	fff00000 	.word	0xfff00000
 80054b0:	3fe00000 	.word	0x3fe00000
 80054b4:	47efffff 	.word	0x47efffff
 80054b8:	c7efffff 	.word	0xc7efffff
 80054bc:	7ff00000 	.word	0x7ff00000
 80054c0:	200000b8 	.word	0x200000b8
 80054c4:	00000000 	.word	0x00000000

080054c8 <__ieee754_log10>:
 80054c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80054cc:	ec55 4b10 	vmov	r4, r5, d0
 80054d0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80054d4:	462b      	mov	r3, r5
 80054d6:	da2f      	bge.n	8005538 <__ieee754_log10+0x70>
 80054d8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80054dc:	4322      	orrs	r2, r4
 80054de:	d10a      	bne.n	80054f6 <__ieee754_log10+0x2e>
 80054e0:	493b      	ldr	r1, [pc, #236]	; (80055d0 <__ieee754_log10+0x108>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7fb f9b0 	bl	800084c <__aeabi_ddiv>
 80054ec:	ec41 0b10 	vmov	d0, r0, r1
 80054f0:	b003      	add	sp, #12
 80054f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054f6:	2d00      	cmp	r5, #0
 80054f8:	da08      	bge.n	800550c <__ieee754_log10+0x44>
 80054fa:	ee10 2a10 	vmov	r2, s0
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fa fec1 	bl	8000288 <__aeabi_dsub>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	e7ed      	b.n	80054e8 <__ieee754_log10+0x20>
 800550c:	2200      	movs	r2, #0
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <__ieee754_log10+0x10c>)
 8005510:	4629      	mov	r1, r5
 8005512:	ee10 0a10 	vmov	r0, s0
 8005516:	f7fb f86f 	bl	80005f8 <__aeabi_dmul>
 800551a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800551e:	4604      	mov	r4, r0
 8005520:	460d      	mov	r5, r1
 8005522:	460b      	mov	r3, r1
 8005524:	492c      	ldr	r1, [pc, #176]	; (80055d8 <__ieee754_log10+0x110>)
 8005526:	428b      	cmp	r3, r1
 8005528:	dd08      	ble.n	800553c <__ieee754_log10+0x74>
 800552a:	4622      	mov	r2, r4
 800552c:	462b      	mov	r3, r5
 800552e:	4620      	mov	r0, r4
 8005530:	4629      	mov	r1, r5
 8005532:	f7fa feab 	bl	800028c <__adddf3>
 8005536:	e7d9      	b.n	80054ec <__ieee754_log10+0x24>
 8005538:	2200      	movs	r2, #0
 800553a:	e7f3      	b.n	8005524 <__ieee754_log10+0x5c>
 800553c:	1518      	asrs	r0, r3, #20
 800553e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005542:	4410      	add	r0, r2
 8005544:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005548:	4448      	add	r0, r9
 800554a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800554e:	f7fa ffe9 	bl	8000524 <__aeabi_i2d>
 8005552:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005556:	3303      	adds	r3, #3
 8005558:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800555c:	ec45 4b10 	vmov	d0, r4, r5
 8005560:	4606      	mov	r6, r0
 8005562:	460f      	mov	r7, r1
 8005564:	f000 ff14 	bl	8006390 <__ieee754_log>
 8005568:	a313      	add	r3, pc, #76	; (adr r3, 80055b8 <__ieee754_log10+0xf0>)
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	ed8d 0b00 	vstr	d0, [sp]
 8005576:	f7fb f83f 	bl	80005f8 <__aeabi_dmul>
 800557a:	ed9d 0b00 	vldr	d0, [sp]
 800557e:	4604      	mov	r4, r0
 8005580:	460d      	mov	r5, r1
 8005582:	a30f      	add	r3, pc, #60	; (adr r3, 80055c0 <__ieee754_log10+0xf8>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	ec51 0b10 	vmov	r0, r1, d0
 800558c:	f7fb f834 	bl	80005f8 <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4620      	mov	r0, r4
 8005596:	4629      	mov	r1, r5
 8005598:	f7fa fe78 	bl	800028c <__adddf3>
 800559c:	a30a      	add	r3, pc, #40	; (adr r3, 80055c8 <__ieee754_log10+0x100>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	4604      	mov	r4, r0
 80055a4:	460d      	mov	r5, r1
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fb f825 	bl	80005f8 <__aeabi_dmul>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	e7bc      	b.n	8005532 <__ieee754_log10+0x6a>
 80055b8:	11f12b36 	.word	0x11f12b36
 80055bc:	3d59fef3 	.word	0x3d59fef3
 80055c0:	1526e50e 	.word	0x1526e50e
 80055c4:	3fdbcb7b 	.word	0x3fdbcb7b
 80055c8:	509f6000 	.word	0x509f6000
 80055cc:	3fd34413 	.word	0x3fd34413
 80055d0:	c3500000 	.word	0xc3500000
 80055d4:	43500000 	.word	0x43500000
 80055d8:	7fefffff 	.word	0x7fefffff
 80055dc:	00000000 	.word	0x00000000

080055e0 <__ieee754_pow>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	b091      	sub	sp, #68	; 0x44
 80055e6:	ed8d 1b00 	vstr	d1, [sp]
 80055ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 80055ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80055f2:	ea58 0302 	orrs.w	r3, r8, r2
 80055f6:	ec57 6b10 	vmov	r6, r7, d0
 80055fa:	f000 84be 	beq.w	8005f7a <__ieee754_pow+0x99a>
 80055fe:	4b7a      	ldr	r3, [pc, #488]	; (80057e8 <__ieee754_pow+0x208>)
 8005600:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005604:	429c      	cmp	r4, r3
 8005606:	463d      	mov	r5, r7
 8005608:	ee10 aa10 	vmov	sl, s0
 800560c:	dc09      	bgt.n	8005622 <__ieee754_pow+0x42>
 800560e:	d103      	bne.n	8005618 <__ieee754_pow+0x38>
 8005610:	b93e      	cbnz	r6, 8005622 <__ieee754_pow+0x42>
 8005612:	45a0      	cmp	r8, r4
 8005614:	dc0d      	bgt.n	8005632 <__ieee754_pow+0x52>
 8005616:	e001      	b.n	800561c <__ieee754_pow+0x3c>
 8005618:	4598      	cmp	r8, r3
 800561a:	dc02      	bgt.n	8005622 <__ieee754_pow+0x42>
 800561c:	4598      	cmp	r8, r3
 800561e:	d10e      	bne.n	800563e <__ieee754_pow+0x5e>
 8005620:	b16a      	cbz	r2, 800563e <__ieee754_pow+0x5e>
 8005622:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005626:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800562a:	ea54 030a 	orrs.w	r3, r4, sl
 800562e:	f000 84a4 	beq.w	8005f7a <__ieee754_pow+0x99a>
 8005632:	486e      	ldr	r0, [pc, #440]	; (80057ec <__ieee754_pow+0x20c>)
 8005634:	b011      	add	sp, #68	; 0x44
 8005636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	f000 bda5 	b.w	8006188 <nan>
 800563e:	2d00      	cmp	r5, #0
 8005640:	da53      	bge.n	80056ea <__ieee754_pow+0x10a>
 8005642:	4b6b      	ldr	r3, [pc, #428]	; (80057f0 <__ieee754_pow+0x210>)
 8005644:	4598      	cmp	r8, r3
 8005646:	dc4d      	bgt.n	80056e4 <__ieee754_pow+0x104>
 8005648:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800564c:	4598      	cmp	r8, r3
 800564e:	dd4c      	ble.n	80056ea <__ieee754_pow+0x10a>
 8005650:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005654:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005658:	2b14      	cmp	r3, #20
 800565a:	dd26      	ble.n	80056aa <__ieee754_pow+0xca>
 800565c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005660:	fa22 f103 	lsr.w	r1, r2, r3
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	4293      	cmp	r3, r2
 800566a:	d13e      	bne.n	80056ea <__ieee754_pow+0x10a>
 800566c:	f001 0101 	and.w	r1, r1, #1
 8005670:	f1c1 0b02 	rsb	fp, r1, #2
 8005674:	2a00      	cmp	r2, #0
 8005676:	d15b      	bne.n	8005730 <__ieee754_pow+0x150>
 8005678:	4b5b      	ldr	r3, [pc, #364]	; (80057e8 <__ieee754_pow+0x208>)
 800567a:	4598      	cmp	r8, r3
 800567c:	d124      	bne.n	80056c8 <__ieee754_pow+0xe8>
 800567e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005682:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005686:	ea53 030a 	orrs.w	r3, r3, sl
 800568a:	f000 8476 	beq.w	8005f7a <__ieee754_pow+0x99a>
 800568e:	4b59      	ldr	r3, [pc, #356]	; (80057f4 <__ieee754_pow+0x214>)
 8005690:	429c      	cmp	r4, r3
 8005692:	dd2d      	ble.n	80056f0 <__ieee754_pow+0x110>
 8005694:	f1b9 0f00 	cmp.w	r9, #0
 8005698:	f280 8473 	bge.w	8005f82 <__ieee754_pow+0x9a2>
 800569c:	2000      	movs	r0, #0
 800569e:	2100      	movs	r1, #0
 80056a0:	ec41 0b10 	vmov	d0, r0, r1
 80056a4:	b011      	add	sp, #68	; 0x44
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d13e      	bne.n	800572c <__ieee754_pow+0x14c>
 80056ae:	f1c3 0314 	rsb	r3, r3, #20
 80056b2:	fa48 f103 	asr.w	r1, r8, r3
 80056b6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ba:	4543      	cmp	r3, r8
 80056bc:	f040 8469 	bne.w	8005f92 <__ieee754_pow+0x9b2>
 80056c0:	f001 0101 	and.w	r1, r1, #1
 80056c4:	f1c1 0b02 	rsb	fp, r1, #2
 80056c8:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <__ieee754_pow+0x218>)
 80056ca:	4598      	cmp	r8, r3
 80056cc:	d118      	bne.n	8005700 <__ieee754_pow+0x120>
 80056ce:	f1b9 0f00 	cmp.w	r9, #0
 80056d2:	f280 845a 	bge.w	8005f8a <__ieee754_pow+0x9aa>
 80056d6:	4948      	ldr	r1, [pc, #288]	; (80057f8 <__ieee754_pow+0x218>)
 80056d8:	4632      	mov	r2, r6
 80056da:	463b      	mov	r3, r7
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fb f8b5 	bl	800084c <__aeabi_ddiv>
 80056e2:	e7dd      	b.n	80056a0 <__ieee754_pow+0xc0>
 80056e4:	f04f 0b02 	mov.w	fp, #2
 80056e8:	e7c4      	b.n	8005674 <__ieee754_pow+0x94>
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	e7c1      	b.n	8005674 <__ieee754_pow+0x94>
 80056f0:	f1b9 0f00 	cmp.w	r9, #0
 80056f4:	dad2      	bge.n	800569c <__ieee754_pow+0xbc>
 80056f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80056fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80056fe:	e7cf      	b.n	80056a0 <__ieee754_pow+0xc0>
 8005700:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005704:	d106      	bne.n	8005714 <__ieee754_pow+0x134>
 8005706:	4632      	mov	r2, r6
 8005708:	463b      	mov	r3, r7
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	f7fa ff73 	bl	80005f8 <__aeabi_dmul>
 8005712:	e7c5      	b.n	80056a0 <__ieee754_pow+0xc0>
 8005714:	4b39      	ldr	r3, [pc, #228]	; (80057fc <__ieee754_pow+0x21c>)
 8005716:	4599      	cmp	r9, r3
 8005718:	d10a      	bne.n	8005730 <__ieee754_pow+0x150>
 800571a:	2d00      	cmp	r5, #0
 800571c:	db08      	blt.n	8005730 <__ieee754_pow+0x150>
 800571e:	ec47 6b10 	vmov	d0, r6, r7
 8005722:	b011      	add	sp, #68	; 0x44
 8005724:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005728:	f000 bc68 	b.w	8005ffc <__ieee754_sqrt>
 800572c:	f04f 0b00 	mov.w	fp, #0
 8005730:	ec47 6b10 	vmov	d0, r6, r7
 8005734:	f000 fd12 	bl	800615c <fabs>
 8005738:	ec51 0b10 	vmov	r0, r1, d0
 800573c:	f1ba 0f00 	cmp.w	sl, #0
 8005740:	d127      	bne.n	8005792 <__ieee754_pow+0x1b2>
 8005742:	b124      	cbz	r4, 800574e <__ieee754_pow+0x16e>
 8005744:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <__ieee754_pow+0x218>)
 8005746:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800574a:	429a      	cmp	r2, r3
 800574c:	d121      	bne.n	8005792 <__ieee754_pow+0x1b2>
 800574e:	f1b9 0f00 	cmp.w	r9, #0
 8005752:	da05      	bge.n	8005760 <__ieee754_pow+0x180>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	2000      	movs	r0, #0
 800575a:	4927      	ldr	r1, [pc, #156]	; (80057f8 <__ieee754_pow+0x218>)
 800575c:	f7fb f876 	bl	800084c <__aeabi_ddiv>
 8005760:	2d00      	cmp	r5, #0
 8005762:	da9d      	bge.n	80056a0 <__ieee754_pow+0xc0>
 8005764:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005768:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800576c:	ea54 030b 	orrs.w	r3, r4, fp
 8005770:	d108      	bne.n	8005784 <__ieee754_pow+0x1a4>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	f7fa fd85 	bl	8000288 <__aeabi_dsub>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	e7ac      	b.n	80056de <__ieee754_pow+0xfe>
 8005784:	f1bb 0f01 	cmp.w	fp, #1
 8005788:	d18a      	bne.n	80056a0 <__ieee754_pow+0xc0>
 800578a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800578e:	4619      	mov	r1, r3
 8005790:	e786      	b.n	80056a0 <__ieee754_pow+0xc0>
 8005792:	0fed      	lsrs	r5, r5, #31
 8005794:	1e6b      	subs	r3, r5, #1
 8005796:	930d      	str	r3, [sp, #52]	; 0x34
 8005798:	ea5b 0303 	orrs.w	r3, fp, r3
 800579c:	d102      	bne.n	80057a4 <__ieee754_pow+0x1c4>
 800579e:	4632      	mov	r2, r6
 80057a0:	463b      	mov	r3, r7
 80057a2:	e7e8      	b.n	8005776 <__ieee754_pow+0x196>
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <__ieee754_pow+0x220>)
 80057a6:	4598      	cmp	r8, r3
 80057a8:	f340 80fe 	ble.w	80059a8 <__ieee754_pow+0x3c8>
 80057ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80057b0:	4598      	cmp	r8, r3
 80057b2:	dd0a      	ble.n	80057ca <__ieee754_pow+0x1ea>
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <__ieee754_pow+0x214>)
 80057b6:	429c      	cmp	r4, r3
 80057b8:	dc0d      	bgt.n	80057d6 <__ieee754_pow+0x1f6>
 80057ba:	f1b9 0f00 	cmp.w	r9, #0
 80057be:	f6bf af6d 	bge.w	800569c <__ieee754_pow+0xbc>
 80057c2:	a307      	add	r3, pc, #28	; (adr r3, 80057e0 <__ieee754_pow+0x200>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	e79f      	b.n	800570a <__ieee754_pow+0x12a>
 80057ca:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <__ieee754_pow+0x224>)
 80057cc:	429c      	cmp	r4, r3
 80057ce:	ddf4      	ble.n	80057ba <__ieee754_pow+0x1da>
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <__ieee754_pow+0x218>)
 80057d2:	429c      	cmp	r4, r3
 80057d4:	dd18      	ble.n	8005808 <__ieee754_pow+0x228>
 80057d6:	f1b9 0f00 	cmp.w	r9, #0
 80057da:	dcf2      	bgt.n	80057c2 <__ieee754_pow+0x1e2>
 80057dc:	e75e      	b.n	800569c <__ieee754_pow+0xbc>
 80057de:	bf00      	nop
 80057e0:	8800759c 	.word	0x8800759c
 80057e4:	7e37e43c 	.word	0x7e37e43c
 80057e8:	7ff00000 	.word	0x7ff00000
 80057ec:	08007c41 	.word	0x08007c41
 80057f0:	433fffff 	.word	0x433fffff
 80057f4:	3fefffff 	.word	0x3fefffff
 80057f8:	3ff00000 	.word	0x3ff00000
 80057fc:	3fe00000 	.word	0x3fe00000
 8005800:	41e00000 	.word	0x41e00000
 8005804:	3feffffe 	.word	0x3feffffe
 8005808:	2200      	movs	r2, #0
 800580a:	4b63      	ldr	r3, [pc, #396]	; (8005998 <__ieee754_pow+0x3b8>)
 800580c:	f7fa fd3c 	bl	8000288 <__aeabi_dsub>
 8005810:	a355      	add	r3, pc, #340	; (adr r3, 8005968 <__ieee754_pow+0x388>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	4604      	mov	r4, r0
 8005818:	460d      	mov	r5, r1
 800581a:	f7fa feed 	bl	80005f8 <__aeabi_dmul>
 800581e:	a354      	add	r3, pc, #336	; (adr r3, 8005970 <__ieee754_pow+0x390>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	4620      	mov	r0, r4
 800582a:	4629      	mov	r1, r5
 800582c:	f7fa fee4 	bl	80005f8 <__aeabi_dmul>
 8005830:	2200      	movs	r2, #0
 8005832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005836:	4b59      	ldr	r3, [pc, #356]	; (800599c <__ieee754_pow+0x3bc>)
 8005838:	4620      	mov	r0, r4
 800583a:	4629      	mov	r1, r5
 800583c:	f7fa fedc 	bl	80005f8 <__aeabi_dmul>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	a14c      	add	r1, pc, #304	; (adr r1, 8005978 <__ieee754_pow+0x398>)
 8005846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800584a:	f7fa fd1d 	bl	8000288 <__aeabi_dsub>
 800584e:	4622      	mov	r2, r4
 8005850:	462b      	mov	r3, r5
 8005852:	f7fa fed1 	bl	80005f8 <__aeabi_dmul>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	2000      	movs	r0, #0
 800585c:	4950      	ldr	r1, [pc, #320]	; (80059a0 <__ieee754_pow+0x3c0>)
 800585e:	f7fa fd13 	bl	8000288 <__aeabi_dsub>
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	4680      	mov	r8, r0
 8005868:	4689      	mov	r9, r1
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fa fec3 	bl	80005f8 <__aeabi_dmul>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4640      	mov	r0, r8
 8005878:	4649      	mov	r1, r9
 800587a:	f7fa febd 	bl	80005f8 <__aeabi_dmul>
 800587e:	a340      	add	r3, pc, #256	; (adr r3, 8005980 <__ieee754_pow+0x3a0>)
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f7fa feb8 	bl	80005f8 <__aeabi_dmul>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005890:	f7fa fcfa 	bl	8000288 <__aeabi_dsub>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4604      	mov	r4, r0
 800589a:	460d      	mov	r5, r1
 800589c:	4630      	mov	r0, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	f7fa fcf4 	bl	800028c <__adddf3>
 80058a4:	2000      	movs	r0, #0
 80058a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058aa:	4632      	mov	r2, r6
 80058ac:	463b      	mov	r3, r7
 80058ae:	f7fa fceb 	bl	8000288 <__aeabi_dsub>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fa fce5 	bl	8000288 <__aeabi_dsub>
 80058be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80058c4:	4313      	orrs	r3, r2
 80058c6:	4606      	mov	r6, r0
 80058c8:	460f      	mov	r7, r1
 80058ca:	f040 81eb 	bne.w	8005ca4 <__ieee754_pow+0x6c4>
 80058ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005988 <__ieee754_pow+0x3a8>
 80058d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80058d6:	2400      	movs	r4, #0
 80058d8:	4622      	mov	r2, r4
 80058da:	462b      	mov	r3, r5
 80058dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058e4:	f7fa fcd0 	bl	8000288 <__aeabi_dsub>
 80058e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ec:	f7fa fe84 	bl	80005f8 <__aeabi_dmul>
 80058f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058f4:	4680      	mov	r8, r0
 80058f6:	4689      	mov	r9, r1
 80058f8:	4630      	mov	r0, r6
 80058fa:	4639      	mov	r1, r7
 80058fc:	f7fa fe7c 	bl	80005f8 <__aeabi_dmul>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	f7fa fcc0 	bl	800028c <__adddf3>
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	4680      	mov	r8, r0
 8005912:	4689      	mov	r9, r1
 8005914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005918:	f7fa fe6e 	bl	80005f8 <__aeabi_dmul>
 800591c:	460b      	mov	r3, r1
 800591e:	4604      	mov	r4, r0
 8005920:	460d      	mov	r5, r1
 8005922:	4602      	mov	r2, r0
 8005924:	4649      	mov	r1, r9
 8005926:	4640      	mov	r0, r8
 8005928:	e9cd 4500 	strd	r4, r5, [sp]
 800592c:	f7fa fcae 	bl	800028c <__adddf3>
 8005930:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <__ieee754_pow+0x3c4>)
 8005932:	4299      	cmp	r1, r3
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	468b      	mov	fp, r1
 800593a:	f340 82f7 	ble.w	8005f2c <__ieee754_pow+0x94c>
 800593e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005942:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005946:	4303      	orrs	r3, r0
 8005948:	f000 81ea 	beq.w	8005d20 <__ieee754_pow+0x740>
 800594c:	a310      	add	r3, pc, #64	; (adr r3, 8005990 <__ieee754_pow+0x3b0>)
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005956:	f7fa fe4f 	bl	80005f8 <__aeabi_dmul>
 800595a:	a30d      	add	r3, pc, #52	; (adr r3, 8005990 <__ieee754_pow+0x3b0>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	e6d5      	b.n	800570e <__ieee754_pow+0x12e>
 8005962:	bf00      	nop
 8005964:	f3af 8000 	nop.w
 8005968:	60000000 	.word	0x60000000
 800596c:	3ff71547 	.word	0x3ff71547
 8005970:	f85ddf44 	.word	0xf85ddf44
 8005974:	3e54ae0b 	.word	0x3e54ae0b
 8005978:	55555555 	.word	0x55555555
 800597c:	3fd55555 	.word	0x3fd55555
 8005980:	652b82fe 	.word	0x652b82fe
 8005984:	3ff71547 	.word	0x3ff71547
 8005988:	00000000 	.word	0x00000000
 800598c:	bff00000 	.word	0xbff00000
 8005990:	8800759c 	.word	0x8800759c
 8005994:	7e37e43c 	.word	0x7e37e43c
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	3fd00000 	.word	0x3fd00000
 80059a0:	3fe00000 	.word	0x3fe00000
 80059a4:	408fffff 	.word	0x408fffff
 80059a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	da05      	bge.n	80059be <__ieee754_pow+0x3de>
 80059b2:	4bd3      	ldr	r3, [pc, #844]	; (8005d00 <__ieee754_pow+0x720>)
 80059b4:	f7fa fe20 	bl	80005f8 <__aeabi_dmul>
 80059b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80059bc:	460c      	mov	r4, r1
 80059be:	1523      	asrs	r3, r4, #20
 80059c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059c4:	4413      	add	r3, r2
 80059c6:	9309      	str	r3, [sp, #36]	; 0x24
 80059c8:	4bce      	ldr	r3, [pc, #824]	; (8005d04 <__ieee754_pow+0x724>)
 80059ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80059ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80059d2:	429c      	cmp	r4, r3
 80059d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059d8:	dd08      	ble.n	80059ec <__ieee754_pow+0x40c>
 80059da:	4bcb      	ldr	r3, [pc, #812]	; (8005d08 <__ieee754_pow+0x728>)
 80059dc:	429c      	cmp	r4, r3
 80059de:	f340 815e 	ble.w	8005c9e <__ieee754_pow+0x6be>
 80059e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e4:	3301      	adds	r3, #1
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80059ec:	f04f 0a00 	mov.w	sl, #0
 80059f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80059f4:	930c      	str	r3, [sp, #48]	; 0x30
 80059f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059f8:	4bc4      	ldr	r3, [pc, #784]	; (8005d0c <__ieee754_pow+0x72c>)
 80059fa:	4413      	add	r3, r2
 80059fc:	ed93 7b00 	vldr	d7, [r3]
 8005a00:	4629      	mov	r1, r5
 8005a02:	ec53 2b17 	vmov	r2, r3, d7
 8005a06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a0e:	f7fa fc3b 	bl	8000288 <__aeabi_dsub>
 8005a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a1e:	f7fa fc35 	bl	800028c <__adddf3>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	2000      	movs	r0, #0
 8005a28:	49b9      	ldr	r1, [pc, #740]	; (8005d10 <__ieee754_pow+0x730>)
 8005a2a:	f7fa ff0f 	bl	800084c <__aeabi_ddiv>
 8005a2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4630      	mov	r0, r6
 8005a38:	4639      	mov	r1, r7
 8005a3a:	f7fa fddd 	bl	80005f8 <__aeabi_dmul>
 8005a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9302      	str	r3, [sp, #8]
 8005a4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a52:	106d      	asrs	r5, r5, #1
 8005a54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005a58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005a62:	4640      	mov	r0, r8
 8005a64:	4649      	mov	r1, r9
 8005a66:	4614      	mov	r4, r2
 8005a68:	461d      	mov	r5, r3
 8005a6a:	f7fa fdc5 	bl	80005f8 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fa fc07 	bl	8000288 <__aeabi_dsub>
 8005a7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	4620      	mov	r0, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7fa fbff 	bl	8000288 <__aeabi_dsub>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a92:	f7fa fbf9 	bl	8000288 <__aeabi_dsub>
 8005a96:	4642      	mov	r2, r8
 8005a98:	464b      	mov	r3, r9
 8005a9a:	f7fa fdad 	bl	80005f8 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	f7fa fbef 	bl	8000288 <__aeabi_dsub>
 8005aaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005aae:	f7fa fda3 	bl	80005f8 <__aeabi_dmul>
 8005ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005aba:	4610      	mov	r0, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	a37b      	add	r3, pc, #492	; (adr r3, 8005cb0 <__ieee754_pow+0x6d0>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	4604      	mov	r4, r0
 8005aca:	460d      	mov	r5, r1
 8005acc:	f7fa fd94 	bl	80005f8 <__aeabi_dmul>
 8005ad0:	a379      	add	r3, pc, #484	; (adr r3, 8005cb8 <__ieee754_pow+0x6d8>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fbd9 	bl	800028c <__adddf3>
 8005ada:	4622      	mov	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	f7fa fd8b 	bl	80005f8 <__aeabi_dmul>
 8005ae2:	a377      	add	r3, pc, #476	; (adr r3, 8005cc0 <__ieee754_pow+0x6e0>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f7fa fbd0 	bl	800028c <__adddf3>
 8005aec:	4622      	mov	r2, r4
 8005aee:	462b      	mov	r3, r5
 8005af0:	f7fa fd82 	bl	80005f8 <__aeabi_dmul>
 8005af4:	a374      	add	r3, pc, #464	; (adr r3, 8005cc8 <__ieee754_pow+0x6e8>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f7fa fbc7 	bl	800028c <__adddf3>
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	f7fa fd79 	bl	80005f8 <__aeabi_dmul>
 8005b06:	a372      	add	r3, pc, #456	; (adr r3, 8005cd0 <__ieee754_pow+0x6f0>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fbbe 	bl	800028c <__adddf3>
 8005b10:	4622      	mov	r2, r4
 8005b12:	462b      	mov	r3, r5
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	a36f      	add	r3, pc, #444	; (adr r3, 8005cd8 <__ieee754_pow+0x6f8>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fbb5 	bl	800028c <__adddf3>
 8005b22:	4622      	mov	r2, r4
 8005b24:	4606      	mov	r6, r0
 8005b26:	460f      	mov	r7, r1
 8005b28:	462b      	mov	r3, r5
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	f7fa fd63 	bl	80005f8 <__aeabi_dmul>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4630      	mov	r0, r6
 8005b38:	4639      	mov	r1, r7
 8005b3a:	f7fa fd5d 	bl	80005f8 <__aeabi_dmul>
 8005b3e:	4642      	mov	r2, r8
 8005b40:	4604      	mov	r4, r0
 8005b42:	460d      	mov	r5, r1
 8005b44:	464b      	mov	r3, r9
 8005b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b4a:	f7fa fb9f 	bl	800028c <__adddf3>
 8005b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b52:	f7fa fd51 	bl	80005f8 <__aeabi_dmul>
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	f7fa fb97 	bl	800028c <__adddf3>
 8005b5e:	4642      	mov	r2, r8
 8005b60:	4606      	mov	r6, r0
 8005b62:	460f      	mov	r7, r1
 8005b64:	464b      	mov	r3, r9
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fd45 	bl	80005f8 <__aeabi_dmul>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <__ieee754_pow+0x734>)
 8005b72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b76:	f7fa fb89 	bl	800028c <__adddf3>
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	f7fa fb85 	bl	800028c <__adddf3>
 8005b82:	9802      	ldr	r0, [sp, #8]
 8005b84:	460d      	mov	r5, r1
 8005b86:	4604      	mov	r4, r0
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	4649      	mov	r1, r9
 8005b90:	f7fa fd32 	bl	80005f8 <__aeabi_dmul>
 8005b94:	2200      	movs	r2, #0
 8005b96:	4680      	mov	r8, r0
 8005b98:	4689      	mov	r9, r1
 8005b9a:	4b5e      	ldr	r3, [pc, #376]	; (8005d14 <__ieee754_pow+0x734>)
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	f7fa fb72 	bl	8000288 <__aeabi_dsub>
 8005ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ba8:	f7fa fb6e 	bl	8000288 <__aeabi_dsub>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fb68 	bl	8000288 <__aeabi_dsub>
 8005bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bbc:	f7fa fd1c 	bl	80005f8 <__aeabi_dmul>
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460f      	mov	r7, r1
 8005bc6:	462b      	mov	r3, r5
 8005bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bcc:	f7fa fd14 	bl	80005f8 <__aeabi_dmul>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f7fa fb58 	bl	800028c <__adddf3>
 8005bdc:	4606      	mov	r6, r0
 8005bde:	460f      	mov	r7, r1
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa fb50 	bl	800028c <__adddf3>
 8005bec:	9802      	ldr	r0, [sp, #8]
 8005bee:	a33c      	add	r3, pc, #240	; (adr r3, 8005ce0 <__ieee754_pow+0x700>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	460d      	mov	r5, r1
 8005bf8:	f7fa fcfe 	bl	80005f8 <__aeabi_dmul>
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c02:	464b      	mov	r3, r9
 8005c04:	4620      	mov	r0, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fa fb3e 	bl	8000288 <__aeabi_dsub>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4630      	mov	r0, r6
 8005c12:	4639      	mov	r1, r7
 8005c14:	f7fa fb38 	bl	8000288 <__aeabi_dsub>
 8005c18:	a333      	add	r3, pc, #204	; (adr r3, 8005ce8 <__ieee754_pow+0x708>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fceb 	bl	80005f8 <__aeabi_dmul>
 8005c22:	a333      	add	r3, pc, #204	; (adr r3, 8005cf0 <__ieee754_pow+0x710>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	4606      	mov	r6, r0
 8005c2a:	460f      	mov	r7, r1
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fce2 	bl	80005f8 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4630      	mov	r0, r6
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	f7fa fb26 	bl	800028c <__adddf3>
 8005c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c42:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <__ieee754_pow+0x738>)
 8005c44:	4413      	add	r3, r2
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fb1f 	bl	800028c <__adddf3>
 8005c4e:	4604      	mov	r4, r0
 8005c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c52:	460d      	mov	r5, r1
 8005c54:	f7fa fc66 	bl	8000524 <__aeabi_i2d>
 8005c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c5a:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <__ieee754_pow+0x73c>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c62:	4606      	mov	r6, r0
 8005c64:	460f      	mov	r7, r1
 8005c66:	4622      	mov	r2, r4
 8005c68:	462b      	mov	r3, r5
 8005c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c6e:	f7fa fb0d 	bl	800028c <__adddf3>
 8005c72:	4642      	mov	r2, r8
 8005c74:	464b      	mov	r3, r9
 8005c76:	f7fa fb09 	bl	800028c <__adddf3>
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	f7fa fb05 	bl	800028c <__adddf3>
 8005c82:	9802      	ldr	r0, [sp, #8]
 8005c84:	4632      	mov	r2, r6
 8005c86:	463b      	mov	r3, r7
 8005c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c8c:	f7fa fafc 	bl	8000288 <__aeabi_dsub>
 8005c90:	4642      	mov	r2, r8
 8005c92:	464b      	mov	r3, r9
 8005c94:	f7fa faf8 	bl	8000288 <__aeabi_dsub>
 8005c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c9c:	e607      	b.n	80058ae <__ieee754_pow+0x2ce>
 8005c9e:	f04f 0a01 	mov.w	sl, #1
 8005ca2:	e6a5      	b.n	80059f0 <__ieee754_pow+0x410>
 8005ca4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005cf8 <__ieee754_pow+0x718>
 8005ca8:	e613      	b.n	80058d2 <__ieee754_pow+0x2f2>
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w
 8005cb0:	4a454eef 	.word	0x4a454eef
 8005cb4:	3fca7e28 	.word	0x3fca7e28
 8005cb8:	93c9db65 	.word	0x93c9db65
 8005cbc:	3fcd864a 	.word	0x3fcd864a
 8005cc0:	a91d4101 	.word	0xa91d4101
 8005cc4:	3fd17460 	.word	0x3fd17460
 8005cc8:	518f264d 	.word	0x518f264d
 8005ccc:	3fd55555 	.word	0x3fd55555
 8005cd0:	db6fabff 	.word	0xdb6fabff
 8005cd4:	3fdb6db6 	.word	0x3fdb6db6
 8005cd8:	33333303 	.word	0x33333303
 8005cdc:	3fe33333 	.word	0x3fe33333
 8005ce0:	e0000000 	.word	0xe0000000
 8005ce4:	3feec709 	.word	0x3feec709
 8005ce8:	dc3a03fd 	.word	0xdc3a03fd
 8005cec:	3feec709 	.word	0x3feec709
 8005cf0:	145b01f5 	.word	0x145b01f5
 8005cf4:	be3e2fe0 	.word	0xbe3e2fe0
 8005cf8:	00000000 	.word	0x00000000
 8005cfc:	3ff00000 	.word	0x3ff00000
 8005d00:	43400000 	.word	0x43400000
 8005d04:	0003988e 	.word	0x0003988e
 8005d08:	000bb679 	.word	0x000bb679
 8005d0c:	08007c80 	.word	0x08007c80
 8005d10:	3ff00000 	.word	0x3ff00000
 8005d14:	40080000 	.word	0x40080000
 8005d18:	08007ca0 	.word	0x08007ca0
 8005d1c:	08007c90 	.word	0x08007c90
 8005d20:	a3b4      	add	r3, pc, #720	; (adr r3, 8005ff4 <__ieee754_pow+0xa14>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	4640      	mov	r0, r8
 8005d28:	4649      	mov	r1, r9
 8005d2a:	f7fa faaf 	bl	800028c <__adddf3>
 8005d2e:	4622      	mov	r2, r4
 8005d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d34:	462b      	mov	r3, r5
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	f7fa faa5 	bl	8000288 <__aeabi_dsub>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d46:	f7fa fee7 	bl	8000b18 <__aeabi_dcmpgt>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	f47f adfe 	bne.w	800594c <__ieee754_pow+0x36c>
 8005d50:	4aa3      	ldr	r2, [pc, #652]	; (8005fe0 <__ieee754_pow+0xa00>)
 8005d52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d56:	4293      	cmp	r3, r2
 8005d58:	f340 810a 	ble.w	8005f70 <__ieee754_pow+0x990>
 8005d5c:	151b      	asrs	r3, r3, #20
 8005d5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005d62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005d66:	fa4a f303 	asr.w	r3, sl, r3
 8005d6a:	445b      	add	r3, fp
 8005d6c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005d70:	4e9c      	ldr	r6, [pc, #624]	; (8005fe4 <__ieee754_pow+0xa04>)
 8005d72:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005d76:	4116      	asrs	r6, r2
 8005d78:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	ea23 0106 	bic.w	r1, r3, r6
 8005d82:	f1c2 0214 	rsb	r2, r2, #20
 8005d86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005d8a:	fa4a fa02 	asr.w	sl, sl, r2
 8005d8e:	f1bb 0f00 	cmp.w	fp, #0
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	bfb8      	it	lt
 8005d9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005da0:	f7fa fa72 	bl	8000288 <__aeabi_dsub>
 8005da4:	e9cd 0100 	strd	r0, r1, [sp]
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005db0:	f7fa fa6c 	bl	800028c <__adddf3>
 8005db4:	2000      	movs	r0, #0
 8005db6:	a378      	add	r3, pc, #480	; (adr r3, 8005f98 <__ieee754_pow+0x9b8>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	f7fa fc1a 	bl	80005f8 <__aeabi_dmul>
 8005dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dc8:	4606      	mov	r6, r0
 8005dca:	460f      	mov	r7, r1
 8005dcc:	4620      	mov	r0, r4
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f7fa fa5a 	bl	8000288 <__aeabi_dsub>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	f7fa fa54 	bl	8000288 <__aeabi_dsub>
 8005de0:	a36f      	add	r3, pc, #444	; (adr r3, 8005fa0 <__ieee754_pow+0x9c0>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fc07 	bl	80005f8 <__aeabi_dmul>
 8005dea:	a36f      	add	r3, pc, #444	; (adr r3, 8005fa8 <__ieee754_pow+0x9c8>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	4620      	mov	r0, r4
 8005df6:	4629      	mov	r1, r5
 8005df8:	f7fa fbfe 	bl	80005f8 <__aeabi_dmul>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fa42 	bl	800028c <__adddf3>
 8005e08:	4604      	mov	r4, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	f7fa fa3a 	bl	800028c <__adddf3>
 8005e18:	4632      	mov	r2, r6
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4689      	mov	r9, r1
 8005e20:	f7fa fa32 	bl	8000288 <__aeabi_dsub>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4620      	mov	r0, r4
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	f7fa fa2c 	bl	8000288 <__aeabi_dsub>
 8005e30:	4642      	mov	r2, r8
 8005e32:	4606      	mov	r6, r0
 8005e34:	460f      	mov	r7, r1
 8005e36:	464b      	mov	r3, r9
 8005e38:	4640      	mov	r0, r8
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	f7fa fbdc 	bl	80005f8 <__aeabi_dmul>
 8005e40:	a35b      	add	r3, pc, #364	; (adr r3, 8005fb0 <__ieee754_pow+0x9d0>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	4604      	mov	r4, r0
 8005e48:	460d      	mov	r5, r1
 8005e4a:	f7fa fbd5 	bl	80005f8 <__aeabi_dmul>
 8005e4e:	a35a      	add	r3, pc, #360	; (adr r3, 8005fb8 <__ieee754_pow+0x9d8>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f7fa fa18 	bl	8000288 <__aeabi_dsub>
 8005e58:	4622      	mov	r2, r4
 8005e5a:	462b      	mov	r3, r5
 8005e5c:	f7fa fbcc 	bl	80005f8 <__aeabi_dmul>
 8005e60:	a357      	add	r3, pc, #348	; (adr r3, 8005fc0 <__ieee754_pow+0x9e0>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa fa11 	bl	800028c <__adddf3>
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	f7fa fbc3 	bl	80005f8 <__aeabi_dmul>
 8005e72:	a355      	add	r3, pc, #340	; (adr r3, 8005fc8 <__ieee754_pow+0x9e8>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f7fa fa06 	bl	8000288 <__aeabi_dsub>
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	462b      	mov	r3, r5
 8005e80:	f7fa fbba 	bl	80005f8 <__aeabi_dmul>
 8005e84:	a352      	add	r3, pc, #328	; (adr r3, 8005fd0 <__ieee754_pow+0x9f0>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa f9ff 	bl	800028c <__adddf3>
 8005e8e:	4622      	mov	r2, r4
 8005e90:	462b      	mov	r3, r5
 8005e92:	f7fa fbb1 	bl	80005f8 <__aeabi_dmul>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	f7fa f9f3 	bl	8000288 <__aeabi_dsub>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	460d      	mov	r5, r1
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	f7fa fba3 	bl	80005f8 <__aeabi_dmul>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8005eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa f9e2 	bl	8000288 <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ecc:	f7fa fcbe 	bl	800084c <__aeabi_ddiv>
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa fb8c 	bl	80005f8 <__aeabi_dmul>
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	f7fa f9d2 	bl	800028c <__adddf3>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4620      	mov	r0, r4
 8005eee:	4629      	mov	r1, r5
 8005ef0:	f7fa f9ca 	bl	8000288 <__aeabi_dsub>
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	f7fa f9c6 	bl	8000288 <__aeabi_dsub>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	2000      	movs	r0, #0
 8005f02:	4939      	ldr	r1, [pc, #228]	; (8005fe8 <__ieee754_pow+0xa08>)
 8005f04:	f7fa f9c0 	bl	8000288 <__aeabi_dsub>
 8005f08:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005f0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	da2f      	bge.n	8005f76 <__ieee754_pow+0x996>
 8005f16:	4650      	mov	r0, sl
 8005f18:	ec43 2b10 	vmov	d0, r2, r3
 8005f1c:	f000 f9c0 	bl	80062a0 <scalbn>
 8005f20:	ec51 0b10 	vmov	r0, r1, d0
 8005f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f28:	f7ff bbf1 	b.w	800570e <__ieee754_pow+0x12e>
 8005f2c:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <__ieee754_pow+0xa0c>)
 8005f2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005f32:	429e      	cmp	r6, r3
 8005f34:	f77f af0c 	ble.w	8005d50 <__ieee754_pow+0x770>
 8005f38:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <__ieee754_pow+0xa10>)
 8005f3a:	440b      	add	r3, r1
 8005f3c:	4303      	orrs	r3, r0
 8005f3e:	d00b      	beq.n	8005f58 <__ieee754_pow+0x978>
 8005f40:	a325      	add	r3, pc, #148	; (adr r3, 8005fd8 <__ieee754_pow+0x9f8>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f4a:	f7fa fb55 	bl	80005f8 <__aeabi_dmul>
 8005f4e:	a322      	add	r3, pc, #136	; (adr r3, 8005fd8 <__ieee754_pow+0x9f8>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7ff bbdb 	b.w	800570e <__ieee754_pow+0x12e>
 8005f58:	4622      	mov	r2, r4
 8005f5a:	462b      	mov	r3, r5
 8005f5c:	f7fa f994 	bl	8000288 <__aeabi_dsub>
 8005f60:	4642      	mov	r2, r8
 8005f62:	464b      	mov	r3, r9
 8005f64:	f7fa fdce 	bl	8000b04 <__aeabi_dcmpge>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f aef1 	beq.w	8005d50 <__ieee754_pow+0x770>
 8005f6e:	e7e7      	b.n	8005f40 <__ieee754_pow+0x960>
 8005f70:	f04f 0a00 	mov.w	sl, #0
 8005f74:	e718      	b.n	8005da8 <__ieee754_pow+0x7c8>
 8005f76:	4621      	mov	r1, r4
 8005f78:	e7d4      	b.n	8005f24 <__ieee754_pow+0x944>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	491a      	ldr	r1, [pc, #104]	; (8005fe8 <__ieee754_pow+0xa08>)
 8005f7e:	f7ff bb8f 	b.w	80056a0 <__ieee754_pow+0xc0>
 8005f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f86:	f7ff bb8b 	b.w	80056a0 <__ieee754_pow+0xc0>
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	f7ff bb87 	b.w	80056a0 <__ieee754_pow+0xc0>
 8005f92:	4693      	mov	fp, r2
 8005f94:	f7ff bb98 	b.w	80056c8 <__ieee754_pow+0xe8>
 8005f98:	00000000 	.word	0x00000000
 8005f9c:	3fe62e43 	.word	0x3fe62e43
 8005fa0:	fefa39ef 	.word	0xfefa39ef
 8005fa4:	3fe62e42 	.word	0x3fe62e42
 8005fa8:	0ca86c39 	.word	0x0ca86c39
 8005fac:	be205c61 	.word	0xbe205c61
 8005fb0:	72bea4d0 	.word	0x72bea4d0
 8005fb4:	3e663769 	.word	0x3e663769
 8005fb8:	c5d26bf1 	.word	0xc5d26bf1
 8005fbc:	3ebbbd41 	.word	0x3ebbbd41
 8005fc0:	af25de2c 	.word	0xaf25de2c
 8005fc4:	3f11566a 	.word	0x3f11566a
 8005fc8:	16bebd93 	.word	0x16bebd93
 8005fcc:	3f66c16c 	.word	0x3f66c16c
 8005fd0:	5555553e 	.word	0x5555553e
 8005fd4:	3fc55555 	.word	0x3fc55555
 8005fd8:	c2f8f359 	.word	0xc2f8f359
 8005fdc:	01a56e1f 	.word	0x01a56e1f
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	000fffff 	.word	0x000fffff
 8005fe8:	3ff00000 	.word	0x3ff00000
 8005fec:	4090cbff 	.word	0x4090cbff
 8005ff0:	3f6f3400 	.word	0x3f6f3400
 8005ff4:	652b82fe 	.word	0x652b82fe
 8005ff8:	3c971547 	.word	0x3c971547

08005ffc <__ieee754_sqrt>:
 8005ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006000:	4955      	ldr	r1, [pc, #340]	; (8006158 <__ieee754_sqrt+0x15c>)
 8006002:	ec55 4b10 	vmov	r4, r5, d0
 8006006:	43a9      	bics	r1, r5
 8006008:	462b      	mov	r3, r5
 800600a:	462a      	mov	r2, r5
 800600c:	d112      	bne.n	8006034 <__ieee754_sqrt+0x38>
 800600e:	ee10 2a10 	vmov	r2, s0
 8006012:	ee10 0a10 	vmov	r0, s0
 8006016:	4629      	mov	r1, r5
 8006018:	f7fa faee 	bl	80005f8 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4620      	mov	r0, r4
 8006022:	4629      	mov	r1, r5
 8006024:	f7fa f932 	bl	800028c <__adddf3>
 8006028:	4604      	mov	r4, r0
 800602a:	460d      	mov	r5, r1
 800602c:	ec45 4b10 	vmov	d0, r4, r5
 8006030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006034:	2d00      	cmp	r5, #0
 8006036:	ee10 0a10 	vmov	r0, s0
 800603a:	4621      	mov	r1, r4
 800603c:	dc0f      	bgt.n	800605e <__ieee754_sqrt+0x62>
 800603e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006042:	4330      	orrs	r0, r6
 8006044:	d0f2      	beq.n	800602c <__ieee754_sqrt+0x30>
 8006046:	b155      	cbz	r5, 800605e <__ieee754_sqrt+0x62>
 8006048:	ee10 2a10 	vmov	r2, s0
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f7fa f91a 	bl	8000288 <__aeabi_dsub>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	f7fa fbf8 	bl	800084c <__aeabi_ddiv>
 800605c:	e7e4      	b.n	8006028 <__ieee754_sqrt+0x2c>
 800605e:	151b      	asrs	r3, r3, #20
 8006060:	d073      	beq.n	800614a <__ieee754_sqrt+0x14e>
 8006062:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006066:	07dd      	lsls	r5, r3, #31
 8006068:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800606c:	bf48      	it	mi
 800606e:	0fc8      	lsrmi	r0, r1, #31
 8006070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006074:	bf44      	itt	mi
 8006076:	0049      	lslmi	r1, r1, #1
 8006078:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800607c:	2500      	movs	r5, #0
 800607e:	1058      	asrs	r0, r3, #1
 8006080:	0fcb      	lsrs	r3, r1, #31
 8006082:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006086:	0049      	lsls	r1, r1, #1
 8006088:	2316      	movs	r3, #22
 800608a:	462c      	mov	r4, r5
 800608c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006090:	19a7      	adds	r7, r4, r6
 8006092:	4297      	cmp	r7, r2
 8006094:	bfde      	ittt	le
 8006096:	19bc      	addle	r4, r7, r6
 8006098:	1bd2      	suble	r2, r2, r7
 800609a:	19ad      	addle	r5, r5, r6
 800609c:	0fcf      	lsrs	r7, r1, #31
 800609e:	3b01      	subs	r3, #1
 80060a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80060a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80060a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060ac:	d1f0      	bne.n	8006090 <__ieee754_sqrt+0x94>
 80060ae:	f04f 0c20 	mov.w	ip, #32
 80060b2:	469e      	mov	lr, r3
 80060b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80060b8:	42a2      	cmp	r2, r4
 80060ba:	eb06 070e 	add.w	r7, r6, lr
 80060be:	dc02      	bgt.n	80060c6 <__ieee754_sqrt+0xca>
 80060c0:	d112      	bne.n	80060e8 <__ieee754_sqrt+0xec>
 80060c2:	428f      	cmp	r7, r1
 80060c4:	d810      	bhi.n	80060e8 <__ieee754_sqrt+0xec>
 80060c6:	2f00      	cmp	r7, #0
 80060c8:	eb07 0e06 	add.w	lr, r7, r6
 80060cc:	da42      	bge.n	8006154 <__ieee754_sqrt+0x158>
 80060ce:	f1be 0f00 	cmp.w	lr, #0
 80060d2:	db3f      	blt.n	8006154 <__ieee754_sqrt+0x158>
 80060d4:	f104 0801 	add.w	r8, r4, #1
 80060d8:	1b12      	subs	r2, r2, r4
 80060da:	428f      	cmp	r7, r1
 80060dc:	bf88      	it	hi
 80060de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80060e2:	1bc9      	subs	r1, r1, r7
 80060e4:	4433      	add	r3, r6
 80060e6:	4644      	mov	r4, r8
 80060e8:	0052      	lsls	r2, r2, #1
 80060ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80060ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80060f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80060fa:	d1dd      	bne.n	80060b8 <__ieee754_sqrt+0xbc>
 80060fc:	430a      	orrs	r2, r1
 80060fe:	d006      	beq.n	800610e <__ieee754_sqrt+0x112>
 8006100:	1c5c      	adds	r4, r3, #1
 8006102:	bf13      	iteet	ne
 8006104:	3301      	addne	r3, #1
 8006106:	3501      	addeq	r5, #1
 8006108:	4663      	moveq	r3, ip
 800610a:	f023 0301 	bicne.w	r3, r3, #1
 800610e:	106a      	asrs	r2, r5, #1
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	07e9      	lsls	r1, r5, #31
 8006114:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006118:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800611c:	bf48      	it	mi
 800611e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006122:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006126:	461c      	mov	r4, r3
 8006128:	e780      	b.n	800602c <__ieee754_sqrt+0x30>
 800612a:	0aca      	lsrs	r2, r1, #11
 800612c:	3815      	subs	r0, #21
 800612e:	0549      	lsls	r1, r1, #21
 8006130:	2a00      	cmp	r2, #0
 8006132:	d0fa      	beq.n	800612a <__ieee754_sqrt+0x12e>
 8006134:	02d6      	lsls	r6, r2, #11
 8006136:	d50a      	bpl.n	800614e <__ieee754_sqrt+0x152>
 8006138:	f1c3 0420 	rsb	r4, r3, #32
 800613c:	fa21 f404 	lsr.w	r4, r1, r4
 8006140:	1e5d      	subs	r5, r3, #1
 8006142:	4099      	lsls	r1, r3
 8006144:	4322      	orrs	r2, r4
 8006146:	1b43      	subs	r3, r0, r5
 8006148:	e78b      	b.n	8006062 <__ieee754_sqrt+0x66>
 800614a:	4618      	mov	r0, r3
 800614c:	e7f0      	b.n	8006130 <__ieee754_sqrt+0x134>
 800614e:	0052      	lsls	r2, r2, #1
 8006150:	3301      	adds	r3, #1
 8006152:	e7ef      	b.n	8006134 <__ieee754_sqrt+0x138>
 8006154:	46a0      	mov	r8, r4
 8006156:	e7bf      	b.n	80060d8 <__ieee754_sqrt+0xdc>
 8006158:	7ff00000 	.word	0x7ff00000

0800615c <fabs>:
 800615c:	ec51 0b10 	vmov	r0, r1, d0
 8006160:	ee10 2a10 	vmov	r2, s0
 8006164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006168:	ec43 2b10 	vmov	d0, r2, r3
 800616c:	4770      	bx	lr

0800616e <finite>:
 800616e:	ee10 3a90 	vmov	r3, s1
 8006172:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8006176:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800617a:	0fc0      	lsrs	r0, r0, #31
 800617c:	4770      	bx	lr

0800617e <matherr>:
 800617e:	2000      	movs	r0, #0
 8006180:	4770      	bx	lr
 8006182:	0000      	movs	r0, r0
 8006184:	0000      	movs	r0, r0
	...

08006188 <nan>:
 8006188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006190 <nan+0x8>
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	00000000 	.word	0x00000000
 8006194:	7ff80000 	.word	0x7ff80000

08006198 <rint>:
 8006198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800619a:	ec51 0b10 	vmov	r0, r1, d0
 800619e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80061a6:	2e13      	cmp	r6, #19
 80061a8:	460b      	mov	r3, r1
 80061aa:	ee10 4a10 	vmov	r4, s0
 80061ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80061b2:	dc56      	bgt.n	8006262 <rint+0xca>
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	da2b      	bge.n	8006210 <rint+0x78>
 80061b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80061bc:	4302      	orrs	r2, r0
 80061be:	d023      	beq.n	8006208 <rint+0x70>
 80061c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80061c4:	4302      	orrs	r2, r0
 80061c6:	4254      	negs	r4, r2
 80061c8:	4314      	orrs	r4, r2
 80061ca:	0c4b      	lsrs	r3, r1, #17
 80061cc:	0b24      	lsrs	r4, r4, #12
 80061ce:	045b      	lsls	r3, r3, #17
 80061d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80061d4:	ea44 0103 	orr.w	r1, r4, r3
 80061d8:	460b      	mov	r3, r1
 80061da:	492f      	ldr	r1, [pc, #188]	; (8006298 <rint+0x100>)
 80061dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80061e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80061e4:	4602      	mov	r2, r0
 80061e6:	4639      	mov	r1, r7
 80061e8:	4630      	mov	r0, r6
 80061ea:	f7fa f84f 	bl	800028c <__adddf3>
 80061ee:	e9cd 0100 	strd	r0, r1, [sp]
 80061f2:	463b      	mov	r3, r7
 80061f4:	4632      	mov	r2, r6
 80061f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061fa:	f7fa f845 	bl	8000288 <__aeabi_dsub>
 80061fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006202:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006206:	4639      	mov	r1, r7
 8006208:	ec41 0b10 	vmov	d0, r0, r1
 800620c:	b003      	add	sp, #12
 800620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006210:	4a22      	ldr	r2, [pc, #136]	; (800629c <rint+0x104>)
 8006212:	4132      	asrs	r2, r6
 8006214:	ea01 0702 	and.w	r7, r1, r2
 8006218:	4307      	orrs	r7, r0
 800621a:	d0f5      	beq.n	8006208 <rint+0x70>
 800621c:	0852      	lsrs	r2, r2, #1
 800621e:	4011      	ands	r1, r2
 8006220:	430c      	orrs	r4, r1
 8006222:	d00b      	beq.n	800623c <rint+0xa4>
 8006224:	ea23 0202 	bic.w	r2, r3, r2
 8006228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800622c:	2e13      	cmp	r6, #19
 800622e:	fa43 f306 	asr.w	r3, r3, r6
 8006232:	bf0c      	ite	eq
 8006234:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006238:	2400      	movne	r4, #0
 800623a:	4313      	orrs	r3, r2
 800623c:	4916      	ldr	r1, [pc, #88]	; (8006298 <rint+0x100>)
 800623e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006242:	4622      	mov	r2, r4
 8006244:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f7fa f81e 	bl	800028c <__adddf3>
 8006250:	e9cd 0100 	strd	r0, r1, [sp]
 8006254:	4622      	mov	r2, r4
 8006256:	462b      	mov	r3, r5
 8006258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800625c:	f7fa f814 	bl	8000288 <__aeabi_dsub>
 8006260:	e7d2      	b.n	8006208 <rint+0x70>
 8006262:	2e33      	cmp	r6, #51	; 0x33
 8006264:	dd07      	ble.n	8006276 <rint+0xde>
 8006266:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800626a:	d1cd      	bne.n	8006208 <rint+0x70>
 800626c:	ee10 2a10 	vmov	r2, s0
 8006270:	f7fa f80c 	bl	800028c <__adddf3>
 8006274:	e7c8      	b.n	8006208 <rint+0x70>
 8006276:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800627a:	f04f 32ff 	mov.w	r2, #4294967295
 800627e:	40f2      	lsrs	r2, r6
 8006280:	4210      	tst	r0, r2
 8006282:	d0c1      	beq.n	8006208 <rint+0x70>
 8006284:	0852      	lsrs	r2, r2, #1
 8006286:	4210      	tst	r0, r2
 8006288:	bf1f      	itttt	ne
 800628a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800628e:	ea20 0202 	bicne.w	r2, r0, r2
 8006292:	4134      	asrne	r4, r6
 8006294:	4314      	orrne	r4, r2
 8006296:	e7d1      	b.n	800623c <rint+0xa4>
 8006298:	08007cb0 	.word	0x08007cb0
 800629c:	000fffff 	.word	0x000fffff

080062a0 <scalbn>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	ec55 4b10 	vmov	r4, r5, d0
 80062a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80062aa:	4606      	mov	r6, r0
 80062ac:	462b      	mov	r3, r5
 80062ae:	b9aa      	cbnz	r2, 80062dc <scalbn+0x3c>
 80062b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062b4:	4323      	orrs	r3, r4
 80062b6:	d03b      	beq.n	8006330 <scalbn+0x90>
 80062b8:	4b31      	ldr	r3, [pc, #196]	; (8006380 <scalbn+0xe0>)
 80062ba:	4629      	mov	r1, r5
 80062bc:	2200      	movs	r2, #0
 80062be:	ee10 0a10 	vmov	r0, s0
 80062c2:	f7fa f999 	bl	80005f8 <__aeabi_dmul>
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <scalbn+0xe4>)
 80062c8:	429e      	cmp	r6, r3
 80062ca:	4604      	mov	r4, r0
 80062cc:	460d      	mov	r5, r1
 80062ce:	da12      	bge.n	80062f6 <scalbn+0x56>
 80062d0:	a327      	add	r3, pc, #156	; (adr r3, 8006370 <scalbn+0xd0>)
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f7fa f98f 	bl	80005f8 <__aeabi_dmul>
 80062da:	e009      	b.n	80062f0 <scalbn+0x50>
 80062dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80062e0:	428a      	cmp	r2, r1
 80062e2:	d10c      	bne.n	80062fe <scalbn+0x5e>
 80062e4:	ee10 2a10 	vmov	r2, s0
 80062e8:	4620      	mov	r0, r4
 80062ea:	4629      	mov	r1, r5
 80062ec:	f7f9 ffce 	bl	800028c <__adddf3>
 80062f0:	4604      	mov	r4, r0
 80062f2:	460d      	mov	r5, r1
 80062f4:	e01c      	b.n	8006330 <scalbn+0x90>
 80062f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80062fa:	460b      	mov	r3, r1
 80062fc:	3a36      	subs	r2, #54	; 0x36
 80062fe:	4432      	add	r2, r6
 8006300:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006304:	428a      	cmp	r2, r1
 8006306:	dd0b      	ble.n	8006320 <scalbn+0x80>
 8006308:	ec45 4b11 	vmov	d1, r4, r5
 800630c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006378 <scalbn+0xd8>
 8006310:	f000 f9f0 	bl	80066f4 <copysign>
 8006314:	a318      	add	r3, pc, #96	; (adr r3, 8006378 <scalbn+0xd8>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	ec51 0b10 	vmov	r0, r1, d0
 800631e:	e7da      	b.n	80062d6 <scalbn+0x36>
 8006320:	2a00      	cmp	r2, #0
 8006322:	dd08      	ble.n	8006336 <scalbn+0x96>
 8006324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800632c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006330:	ec45 4b10 	vmov	d0, r4, r5
 8006334:	bd70      	pop	{r4, r5, r6, pc}
 8006336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800633a:	da0d      	bge.n	8006358 <scalbn+0xb8>
 800633c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006340:	429e      	cmp	r6, r3
 8006342:	ec45 4b11 	vmov	d1, r4, r5
 8006346:	dce1      	bgt.n	800630c <scalbn+0x6c>
 8006348:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006370 <scalbn+0xd0>
 800634c:	f000 f9d2 	bl	80066f4 <copysign>
 8006350:	a307      	add	r3, pc, #28	; (adr r3, 8006370 <scalbn+0xd0>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	e7e0      	b.n	800631a <scalbn+0x7a>
 8006358:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800635c:	3236      	adds	r2, #54	; 0x36
 800635e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	2200      	movs	r2, #0
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <scalbn+0xe8>)
 800636e:	e7b2      	b.n	80062d6 <scalbn+0x36>
 8006370:	c2f8f359 	.word	0xc2f8f359
 8006374:	01a56e1f 	.word	0x01a56e1f
 8006378:	8800759c 	.word	0x8800759c
 800637c:	7e37e43c 	.word	0x7e37e43c
 8006380:	43500000 	.word	0x43500000
 8006384:	ffff3cb0 	.word	0xffff3cb0
 8006388:	3c900000 	.word	0x3c900000
 800638c:	00000000 	.word	0x00000000

08006390 <__ieee754_log>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	ec51 0b10 	vmov	r0, r1, d0
 8006398:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800639c:	b087      	sub	sp, #28
 800639e:	460d      	mov	r5, r1
 80063a0:	da27      	bge.n	80063f2 <__ieee754_log+0x62>
 80063a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063a6:	4303      	orrs	r3, r0
 80063a8:	ee10 2a10 	vmov	r2, s0
 80063ac:	d10a      	bne.n	80063c4 <__ieee754_log+0x34>
 80063ae:	49cc      	ldr	r1, [pc, #816]	; (80066e0 <__ieee754_log+0x350>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	2000      	movs	r0, #0
 80063b6:	f7fa fa49 	bl	800084c <__aeabi_ddiv>
 80063ba:	ec41 0b10 	vmov	d0, r0, r1
 80063be:	b007      	add	sp, #28
 80063c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	2900      	cmp	r1, #0
 80063c6:	da05      	bge.n	80063d4 <__ieee754_log+0x44>
 80063c8:	460b      	mov	r3, r1
 80063ca:	f7f9 ff5d 	bl	8000288 <__aeabi_dsub>
 80063ce:	2200      	movs	r2, #0
 80063d0:	2300      	movs	r3, #0
 80063d2:	e7f0      	b.n	80063b6 <__ieee754_log+0x26>
 80063d4:	4bc3      	ldr	r3, [pc, #780]	; (80066e4 <__ieee754_log+0x354>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	f7fa f90e 	bl	80005f8 <__aeabi_dmul>
 80063dc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80063e0:	460d      	mov	r5, r1
 80063e2:	4ac1      	ldr	r2, [pc, #772]	; (80066e8 <__ieee754_log+0x358>)
 80063e4:	4295      	cmp	r5, r2
 80063e6:	dd06      	ble.n	80063f6 <__ieee754_log+0x66>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	f7f9 ff4e 	bl	800028c <__adddf3>
 80063f0:	e7e3      	b.n	80063ba <__ieee754_log+0x2a>
 80063f2:	2300      	movs	r3, #0
 80063f4:	e7f5      	b.n	80063e2 <__ieee754_log+0x52>
 80063f6:	152c      	asrs	r4, r5, #20
 80063f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063fc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006400:	441c      	add	r4, r3
 8006402:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006406:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800640a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800640e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006412:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006416:	ea42 0105 	orr.w	r1, r2, r5
 800641a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800641e:	2200      	movs	r2, #0
 8006420:	4bb2      	ldr	r3, [pc, #712]	; (80066ec <__ieee754_log+0x35c>)
 8006422:	f7f9 ff31 	bl	8000288 <__aeabi_dsub>
 8006426:	1cab      	adds	r3, r5, #2
 8006428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800642c:	2b02      	cmp	r3, #2
 800642e:	4682      	mov	sl, r0
 8006430:	468b      	mov	fp, r1
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	dc53      	bgt.n	80064e0 <__ieee754_log+0x150>
 8006438:	2300      	movs	r3, #0
 800643a:	f7fa fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800643e:	b1d0      	cbz	r0, 8006476 <__ieee754_log+0xe6>
 8006440:	2c00      	cmp	r4, #0
 8006442:	f000 8120 	beq.w	8006686 <__ieee754_log+0x2f6>
 8006446:	4620      	mov	r0, r4
 8006448:	f7fa f86c 	bl	8000524 <__aeabi_i2d>
 800644c:	a390      	add	r3, pc, #576	; (adr r3, 8006690 <__ieee754_log+0x300>)
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	f7fa f8cf 	bl	80005f8 <__aeabi_dmul>
 800645a:	a38f      	add	r3, pc, #572	; (adr r3, 8006698 <__ieee754_log+0x308>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	4604      	mov	r4, r0
 8006462:	460d      	mov	r5, r1
 8006464:	4630      	mov	r0, r6
 8006466:	4639      	mov	r1, r7
 8006468:	f7fa f8c6 	bl	80005f8 <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4620      	mov	r0, r4
 8006472:	4629      	mov	r1, r5
 8006474:	e7ba      	b.n	80063ec <__ieee754_log+0x5c>
 8006476:	a38a      	add	r3, pc, #552	; (adr r3, 80066a0 <__ieee754_log+0x310>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	4650      	mov	r0, sl
 800647e:	4659      	mov	r1, fp
 8006480:	f7fa f8ba 	bl	80005f8 <__aeabi_dmul>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	2000      	movs	r0, #0
 800648a:	4999      	ldr	r1, [pc, #612]	; (80066f0 <__ieee754_log+0x360>)
 800648c:	f7f9 fefc 	bl	8000288 <__aeabi_dsub>
 8006490:	4652      	mov	r2, sl
 8006492:	4606      	mov	r6, r0
 8006494:	460f      	mov	r7, r1
 8006496:	465b      	mov	r3, fp
 8006498:	4650      	mov	r0, sl
 800649a:	4659      	mov	r1, fp
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7fa f8a6 	bl	80005f8 <__aeabi_dmul>
 80064ac:	4606      	mov	r6, r0
 80064ae:	460f      	mov	r7, r1
 80064b0:	b914      	cbnz	r4, 80064b8 <__ieee754_log+0x128>
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	e0a0      	b.n	80065fa <__ieee754_log+0x26a>
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7fa f833 	bl	8000524 <__aeabi_i2d>
 80064be:	a374      	add	r3, pc, #464	; (adr r3, 8006690 <__ieee754_log+0x300>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	4680      	mov	r8, r0
 80064c6:	4689      	mov	r9, r1
 80064c8:	f7fa f896 	bl	80005f8 <__aeabi_dmul>
 80064cc:	a372      	add	r3, pc, #456	; (adr r3, 8006698 <__ieee754_log+0x308>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	4604      	mov	r4, r0
 80064d4:	460d      	mov	r5, r1
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	f7fa f88d 	bl	80005f8 <__aeabi_dmul>
 80064de:	e0a5      	b.n	800662c <__ieee754_log+0x29c>
 80064e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064e4:	f7f9 fed2 	bl	800028c <__adddf3>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4650      	mov	r0, sl
 80064ee:	4659      	mov	r1, fp
 80064f0:	f7fa f9ac 	bl	800084c <__aeabi_ddiv>
 80064f4:	e9cd 0100 	strd	r0, r1, [sp]
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7fa f813 	bl	8000524 <__aeabi_i2d>
 80064fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006506:	4610      	mov	r0, r2
 8006508:	4619      	mov	r1, r3
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	a363      	add	r3, pc, #396	; (adr r3, 80066a8 <__ieee754_log+0x318>)
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	4680      	mov	r8, r0
 8006522:	4689      	mov	r9, r1
 8006524:	f7fa f868 	bl	80005f8 <__aeabi_dmul>
 8006528:	a361      	add	r3, pc, #388	; (adr r3, 80066b0 <__ieee754_log+0x320>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7f9 fead 	bl	800028c <__adddf3>
 8006532:	4642      	mov	r2, r8
 8006534:	464b      	mov	r3, r9
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	a35f      	add	r3, pc, #380	; (adr r3, 80066b8 <__ieee754_log+0x328>)
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f7f9 fea4 	bl	800028c <__adddf3>
 8006544:	4642      	mov	r2, r8
 8006546:	464b      	mov	r3, r9
 8006548:	f7fa f856 	bl	80005f8 <__aeabi_dmul>
 800654c:	a35c      	add	r3, pc, #368	; (adr r3, 80066c0 <__ieee754_log+0x330>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f7f9 fe9b 	bl	800028c <__adddf3>
 8006556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800655a:	f7fa f84d 	bl	80005f8 <__aeabi_dmul>
 800655e:	a35a      	add	r3, pc, #360	; (adr r3, 80066c8 <__ieee754_log+0x338>)
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006568:	4640      	mov	r0, r8
 800656a:	4649      	mov	r1, r9
 800656c:	f7fa f844 	bl	80005f8 <__aeabi_dmul>
 8006570:	a357      	add	r3, pc, #348	; (adr r3, 80066d0 <__ieee754_log+0x340>)
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f7f9 fe89 	bl	800028c <__adddf3>
 800657a:	4642      	mov	r2, r8
 800657c:	464b      	mov	r3, r9
 800657e:	f7fa f83b 	bl	80005f8 <__aeabi_dmul>
 8006582:	a355      	add	r3, pc, #340	; (adr r3, 80066d8 <__ieee754_log+0x348>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 fe80 	bl	800028c <__adddf3>
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	f7fa f832 	bl	80005f8 <__aeabi_dmul>
 8006594:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80065a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065a4:	f7f9 fe72 	bl	800028c <__adddf3>
 80065a8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80065ac:	3551      	adds	r5, #81	; 0x51
 80065ae:	4335      	orrs	r5, r6
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	4680      	mov	r8, r0
 80065b4:	4689      	mov	r9, r1
 80065b6:	dd48      	ble.n	800664a <__ieee754_log+0x2ba>
 80065b8:	2200      	movs	r2, #0
 80065ba:	4b4d      	ldr	r3, [pc, #308]	; (80066f0 <__ieee754_log+0x360>)
 80065bc:	4650      	mov	r0, sl
 80065be:	4659      	mov	r1, fp
 80065c0:	f7fa f81a 	bl	80005f8 <__aeabi_dmul>
 80065c4:	4652      	mov	r2, sl
 80065c6:	465b      	mov	r3, fp
 80065c8:	f7fa f816 	bl	80005f8 <__aeabi_dmul>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4606      	mov	r6, r0
 80065d2:	460f      	mov	r7, r1
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7f9 fe58 	bl	800028c <__adddf3>
 80065dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065e0:	f7fa f80a 	bl	80005f8 <__aeabi_dmul>
 80065e4:	4680      	mov	r8, r0
 80065e6:	4689      	mov	r9, r1
 80065e8:	b964      	cbnz	r4, 8006604 <__ieee754_log+0x274>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7f9 fe49 	bl	8000288 <__aeabi_dsub>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4650      	mov	r0, sl
 80065fc:	4659      	mov	r1, fp
 80065fe:	f7f9 fe43 	bl	8000288 <__aeabi_dsub>
 8006602:	e6da      	b.n	80063ba <__ieee754_log+0x2a>
 8006604:	a322      	add	r3, pc, #136	; (adr r3, 8006690 <__ieee754_log+0x300>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660e:	f7f9 fff3 	bl	80005f8 <__aeabi_dmul>
 8006612:	a321      	add	r3, pc, #132	; (adr r3, 8006698 <__ieee754_log+0x308>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	4604      	mov	r4, r0
 800661a:	460d      	mov	r5, r1
 800661c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006620:	f7f9 ffea 	bl	80005f8 <__aeabi_dmul>
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	f7f9 fe30 	bl	800028c <__adddf3>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	f7f9 fe28 	bl	8000288 <__aeabi_dsub>
 8006638:	4652      	mov	r2, sl
 800663a:	465b      	mov	r3, fp
 800663c:	f7f9 fe24 	bl	8000288 <__aeabi_dsub>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	e7d9      	b.n	80065fe <__ieee754_log+0x26e>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4650      	mov	r0, sl
 8006650:	4659      	mov	r1, fp
 8006652:	f7f9 fe19 	bl	8000288 <__aeabi_dsub>
 8006656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665a:	f7f9 ffcd 	bl	80005f8 <__aeabi_dmul>
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	2c00      	cmp	r4, #0
 8006664:	f43f af25 	beq.w	80064b2 <__ieee754_log+0x122>
 8006668:	a309      	add	r3, pc, #36	; (adr r3, 8006690 <__ieee754_log+0x300>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006672:	f7f9 ffc1 	bl	80005f8 <__aeabi_dmul>
 8006676:	a308      	add	r3, pc, #32	; (adr r3, 8006698 <__ieee754_log+0x308>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	4604      	mov	r4, r0
 800667e:	460d      	mov	r5, r1
 8006680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006684:	e729      	b.n	80064da <__ieee754_log+0x14a>
 8006686:	2000      	movs	r0, #0
 8006688:	2100      	movs	r1, #0
 800668a:	e696      	b.n	80063ba <__ieee754_log+0x2a>
 800668c:	f3af 8000 	nop.w
 8006690:	fee00000 	.word	0xfee00000
 8006694:	3fe62e42 	.word	0x3fe62e42
 8006698:	35793c76 	.word	0x35793c76
 800669c:	3dea39ef 	.word	0x3dea39ef
 80066a0:	55555555 	.word	0x55555555
 80066a4:	3fd55555 	.word	0x3fd55555
 80066a8:	df3e5244 	.word	0xdf3e5244
 80066ac:	3fc2f112 	.word	0x3fc2f112
 80066b0:	96cb03de 	.word	0x96cb03de
 80066b4:	3fc74664 	.word	0x3fc74664
 80066b8:	94229359 	.word	0x94229359
 80066bc:	3fd24924 	.word	0x3fd24924
 80066c0:	55555593 	.word	0x55555593
 80066c4:	3fe55555 	.word	0x3fe55555
 80066c8:	d078c69f 	.word	0xd078c69f
 80066cc:	3fc39a09 	.word	0x3fc39a09
 80066d0:	1d8e78af 	.word	0x1d8e78af
 80066d4:	3fcc71c5 	.word	0x3fcc71c5
 80066d8:	9997fa04 	.word	0x9997fa04
 80066dc:	3fd99999 	.word	0x3fd99999
 80066e0:	c3500000 	.word	0xc3500000
 80066e4:	43500000 	.word	0x43500000
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	3ff00000 	.word	0x3ff00000
 80066f0:	3fe00000 	.word	0x3fe00000

080066f4 <copysign>:
 80066f4:	ec51 0b10 	vmov	r0, r1, d0
 80066f8:	ee11 0a90 	vmov	r0, s3
 80066fc:	ee10 2a10 	vmov	r2, s0
 8006700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006704:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006708:	ea41 0300 	orr.w	r3, r1, r0
 800670c:	ec43 2b10 	vmov	d0, r2, r3
 8006710:	4770      	bx	lr
	...

08006714 <_init>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr

08006720 <_fini>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	bf00      	nop
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr
