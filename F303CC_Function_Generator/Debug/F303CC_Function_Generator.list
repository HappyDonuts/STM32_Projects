
F303CC_Function_Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a94  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004c20  08004c20  00014c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004e28  08004e28  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e28  08004e28  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000080  08004eb0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004eb0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6cd  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bbe  00000000  00000000  0002d77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0002f340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab0  00000000  00000000  0002fed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a5df  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009534  00000000  00000000  0004af67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ac5e  00000000  00000000  0005449b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef0f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003544  00000000  00000000  000ef174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c04 	.word	0x08004c04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08004c04 	.word	0x08004c04

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af02      	add	r7, sp, #8
	/* MAIN CODE */
	dac_1 = mcp4922_new(spi, PORT_CS, PIN_CS, 3300, 3300, 1);
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <main_s+0x3c>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <main_s+0x40>)
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <main_s+0x44>)
 8000bb4:	881a      	ldrh	r2, [r3, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000bc4:	f000 f9eb 	bl	8000f9e <mcp4922_new>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <main_s+0x48>)
 8000bcc:	601a      	str	r2, [r3, #0]
	setSignal();
 8000bce:	f000 f813 	bl	8000bf8 <setSignal>
	HAL_TIM_Base_Start_IT(tim_sample);
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <main_s+0x4c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fb20 	bl	800321c <HAL_TIM_Base_Start_IT>
	while(1){
 8000bdc:	e7fe      	b.n	8000bdc <main_s+0x38>
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000004 	.word	0x20000004
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200000ac 	.word	0x200000ac
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <setSignal>:
//		mcp4922_write(dac_1, 3300, 0);
//		HAL_Delay(2);
	}
}

void setSignal(void){
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	for (uint16_t i=0;i<SIZE;i++){
 8000bfe:	2300      	movs	r3, #0
 8000c00:	80fb      	strh	r3, [r7, #6]
 8000c02:	e04b      	b.n	8000c9c <setSignal+0xa4>
		float voltage = (sin(2*M_PI*i/SIZE)*3300/2)+3300/2;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fc30 	bl	800046c <__aeabi_i2d>
 8000c0c:	a32e      	add	r3, pc, #184	; (adr r3, 8000cc8 <setSignal+0xd0>)
 8000c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c12:	f7ff fc95 	bl	8000540 <__aeabi_dmul>
 8000c16:	4603      	mov	r3, r0
 8000c18:	460c      	mov	r4, r1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <setSignal+0xc8>)
 8000c24:	f7ff fdb6 	bl	8000794 <__aeabi_ddiv>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	ec44 3b17 	vmov	d7, r3, r4
 8000c30:	eeb0 0a47 	vmov.f32	s0, s14
 8000c34:	eef0 0a67 	vmov.f32	s1, s15
 8000c38:	f002 ffd2 	bl	8003be0 <sin>
 8000c3c:	ec51 0b10 	vmov	r0, r1, d0
 8000c40:	a31b      	add	r3, pc, #108	; (adr r3, 8000cb0 <setSignal+0xb8>)
 8000c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c46:	f7ff fc7b 	bl	8000540 <__aeabi_dmul>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460c      	mov	r4, r1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	4621      	mov	r1, r4
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5a:	f7ff fd9b 	bl	8000794 <__aeabi_ddiv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460c      	mov	r4, r1
 8000c62:	4618      	mov	r0, r3
 8000c64:	4621      	mov	r1, r4
 8000c66:	a314      	add	r3, pc, #80	; (adr r3, 8000cb8 <setSignal+0xc0>)
 8000c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6c:	f7ff fab2 	bl	80001d4 <__adddf3>
 8000c70:	4603      	mov	r3, r0
 8000c72:	460c      	mov	r4, r1
 8000c74:	4618      	mov	r0, r3
 8000c76:	4621      	mov	r1, r4
 8000c78:	f7ff ff44 	bl	8000b04 <__aeabi_d2f>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	603b      	str	r3, [r7, #0]
		signal[i] = voltage;
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	edd7 7a00 	vldr	s15, [r7]
 8000c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	b291      	uxth	r1, r2
 8000c90:	4a0c      	ldr	r2, [pc, #48]	; (8000cc4 <setSignal+0xcc>)
 8000c92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i=0;i<SIZE;i++){
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	80fb      	strh	r3, [r7, #6]
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	2b09      	cmp	r3, #9
 8000ca0:	d9b0      	bls.n	8000c04 <setSignal+0xc>
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	f3af 8000 	nop.w
 8000cb0:	00000000 	.word	0x00000000
 8000cb4:	40a9c800 	.word	0x40a9c800
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	4099c800 	.word	0x4099c800
 8000cc0:	40240000 	.word	0x40240000
 8000cc4:	200000b0 	.word	0x200000b0
 8000cc8:	54442d18 	.word	0x54442d18
 8000ccc:	401921fb 	.word	0x401921fb

08000cd0 <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief  Period elapsed callback.
  * @retval none
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	/* TIM CALLBACK CODE */
	if (htim == tim_sample){
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d11f      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x52>
		mcp4922_write(dac_1, signal[index_sample], 0);
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ce4:	681c      	ldr	r4, [r3, #0]
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000cee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fbaa 	bl	800044c <__aeabi_ui2d>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	ec43 2b10 	vmov	d0, r2, r3
 8000d02:	4620      	mov	r0, r4
 8000d04:	f000 f990 	bl	8001028 <mcp4922_write>
		index_sample++;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d12:	701a      	strb	r2, [r3, #0]
		if (index_sample == SIZE){
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b0a      	cmp	r3, #10
 8000d1a:	d102      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x52>
			index_sample = 0;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd90      	pop	{r4, r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	200000ac 	.word	0x200000ac
 8000d34:	2000009c 	.word	0x2000009c
 8000d38:	200000b0 	.word	0x200000b0

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f000 fb34 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 f809 	bl	8000d5a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f000 f8d8 	bl	8000efc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d4c:	f000 f84a 	bl	8000de4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000d50:	f000 f886 	bl	8000e60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 8000d54:	f7ff ff26 	bl	8000ba4 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <main+0x1c>

08000d5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b090      	sub	sp, #64	; 0x40
 8000d5e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d60:	f107 0318 	add.w	r3, r7, #24
 8000d64:	2228      	movs	r2, #40	; 0x28
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fe7b 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fe0c 	bl	80019c0 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dae:	f000 f8ef 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fcff 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dd8:	f000 f8da 	bl	8000f90 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3740      	adds	r7, #64	; 0x40
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_SPI1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000dfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e32:	2207      	movs	r2, #7
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e3e:	2208      	movs	r2, #8
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_SPI1_Init+0x74>)
 8000e44:	f001 feaa 	bl	8002b9c <HAL_SPI_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f89f 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000c4 	.word	0x200000c4
 8000e5c:	40013000 	.word	0x40013000

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 719;
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000e94:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea6:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000ea8:	f002 f98d 	bl	80031c6 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eb2:	f000 f86d 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000ec4:	f002 faf3 	bl	80034ae <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ece:	f000 f85f 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_TIM2_Init+0x98>)
 8000ee0:	f002 fcf0 	bl	80038c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eea:	f000 f851 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000128 	.word	0x20000128

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1c:	6153      	str	r3, [r2, #20]
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a16      	ldr	r2, [pc, #88]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_GPIO_Init+0x8c>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <MX_GPIO_Init+0x90>)
 8000f60:	f000 fd16 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GPIO_Init+0x90>)
 8000f7c:	f000 fb8e 	bl	800169c <HAL_GPIO_Init>

}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <mcp4922_new>:
 * @param  v_ref_A: Reference voltage channel A (mV)
 * @param  v_ref_B: Reference voltage channel B (mV)
 * @param  buffered: 1: Buffered output	0: Unbuffered output
 * @retval mcp4922_t variable corresponding to the mcp4299 module
 */
mcp4922_t* mcp4922_new(SPI_HandleTypeDef *hspi, GPIO_TypeDef* port_CS, uint16_t pin_CS, uint16_t v_ref_A, uint16_t v_ref_B, uint8_t buffered){
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b08a      	sub	sp, #40	; 0x28
 8000fa2:	af04      	add	r7, sp, #16
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	461a      	mov	r2, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80bb      	strh	r3, [r7, #4]
	mcp4922_t* mcp4922 = malloc(sizeof(*mcp4922));
 8000fb4:	2010      	movs	r0, #16
 8000fb6:	f002 fd4d 	bl	8003a54 <malloc>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	617b      	str	r3, [r7, #20]
	mcp4922_init(mcp4922, hspi, port_CS, pin_CS, v_ref_A, v_ref_B, buffered);
 8000fbe:	88fa      	ldrh	r2, [r7, #6]
 8000fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	8c3b      	ldrh	r3, [r7, #32]
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f000 f805 	bl	8000fe4 <mcp4922_init>
	return mcp4922;
 8000fda:	697b      	ldr	r3, [r7, #20]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <mcp4922_init>:
 * @param  v_ref_A: Reference voltage channel A (mV)
 * @param  v_ref_B: Reference voltage channel B (mV)
 * @param  buffered: 1: Buffered output	0: Unbuffered output
 * @retval None
 */
void mcp4922_init(mcp4922_t *mcp4922, SPI_HandleTypeDef *hspi, GPIO_TypeDef* port_CS, uint16_t pin_CS, uint16_t v_ref_A, uint16_t v_ref_B, uint8_t buffered){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	807b      	strh	r3, [r7, #2]
	mcp4922->hspi = hspi;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
	mcp4922->port_CS = port_CS;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	605a      	str	r2, [r3, #4]
	mcp4922->pin_CS = pin_CS;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	811a      	strh	r2, [r3, #8]
	mcp4922->v_ref[0] = v_ref_A;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	8b3a      	ldrh	r2, [r7, #24]
 8001008:	815a      	strh	r2, [r3, #10]
	mcp4922->v_ref[1] = v_ref_B;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8bba      	ldrh	r2, [r7, #28]
 800100e:	819a      	strh	r2, [r3, #12]
	mcp4922->buffered = buffered;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001016:	739a      	strb	r2, [r3, #14]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	0000      	movs	r0, r0
	...

08001028 <mcp4922_write>:
 * @brief  Writes a value on the mcp4922 DAC module
 * @param  voltage: Voltage to be output by the DAC (mV)
 * @param  channel: 0: Channel A	1: Channel B
 * @retval None
 */
void mcp4922_write(mcp4922_t *mcp4922, double voltage, uint8_t channel){
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	ed87 0b00 	vstr	d0, [r7]
 8001034:	460b      	mov	r3, r1
 8001036:	72fb      	strb	r3, [r7, #11]
	uint16_t data;
	if (voltage > mcp4922->v_ref[channel]){
 8001038:	7afb      	ldrb	r3, [r7, #11]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	3304      	adds	r3, #4
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	885b      	ldrh	r3, [r3, #2]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa11 	bl	800046c <__aeabi_i2d>
 800104a:	4603      	mov	r3, r0
 800104c:	460c      	mov	r4, r1
 800104e:	461a      	mov	r2, r3
 8001050:	4623      	mov	r3, r4
 8001052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001056:	f7ff fd03 	bl	8000a60 <__aeabi_dcmpgt>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <mcp4922_write+0x40>
		data = 4095;
 8001060:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001064:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001066:	e039      	b.n	80010dc <mcp4922_write+0xb4>
	} else if (voltage < 0){
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001074:	f7ff fcd6 	bl	8000a24 <__aeabi_dcmplt>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <mcp4922_write+0x5c>
		data = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001082:	e02b      	b.n	80010dc <mcp4922_write+0xb4>
	} else {
		double dac_value = round(voltage*4095/mcp4922->v_ref[channel]);
 8001084:	a330      	add	r3, pc, #192	; (adr r3, 8001148 <mcp4922_write+0x120>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800108e:	f7ff fa57 	bl	8000540 <__aeabi_dmul>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	4625      	mov	r5, r4
 8001098:	461c      	mov	r4, r3
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	3304      	adds	r3, #4
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	885b      	ldrh	r3, [r3, #2]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f9e0 	bl	800046c <__aeabi_i2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fb6e 	bl	8000794 <__aeabi_ddiv>
 80010b8:	4603      	mov	r3, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	ec44 3b17 	vmov	d7, r3, r4
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	f002 fd40 	bl	8003b4c <round>
 80010cc:	ed87 0b06 	vstr	d0, [r7, #24]
		data = dac_value;
 80010d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010d4:	f7ff fcf6 	bl	8000ac4 <__aeabi_d2uiz>
 80010d8:	4603      	mov	r3, r0
 80010da:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	uint8_t command[2];
	command[0] = 0b00110000 | (channel<<7) | ((mcp4922->buffered)<<6) | (data>>8);
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	01db      	lsls	r3, r3, #7
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80010e6:	b25a      	sxtb	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	7b9b      	ldrb	r3, [r3, #14]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	753b      	strb	r3, [r7, #20]
	command[1] = (uint8_t)data;
 8001104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001106:	b2db      	uxtb	r3, r3
 8001108:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_WritePin(mcp4922->port_CS, mcp4922->pin_CS, GPIO_PIN_RESET);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6858      	ldr	r0, [r3, #4]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	891b      	ldrh	r3, [r3, #8]
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	f000 fc3b 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(mcp4922->hspi, command, 2, 10);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f107 0114 	add.w	r1, r7, #20
 8001122:	230a      	movs	r3, #10
 8001124:	2202      	movs	r2, #2
 8001126:	f001 fdcb 	bl	8002cc0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(mcp4922->port_CS, mcp4922->pin_CS, GPIO_PIN_SET);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6858      	ldr	r0, [r3, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	891b      	ldrh	r3, [r3, #8]
 8001132:	2201      	movs	r2, #1
 8001134:	4619      	mov	r1, r3
 8001136:	f000 fc2b 	bl	8001990 <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	00000000 	.word	0x00000000
 800114c:	40affe00 	.word	0x40affe00

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x44>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_MspInit+0x44>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_MspInit+0x44>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_MspInit+0x44>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_MspInit+0x44>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MspInit+0x44>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_SPI_MspInit+0x7c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d128      	bne.n	800120c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_SPI_MspInit+0x80>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <HAL_SPI_MspInit+0x80>)
 80011c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_SPI_MspInit+0x80>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_SPI_MspInit+0x80>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_SPI_MspInit+0x80>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	6153      	str	r3, [r2, #20]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_SPI_MspInit+0x80>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011ea:	23e0      	movs	r3, #224	; 0xe0
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011fa:	2305      	movs	r3, #5
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f000 fa48 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40013000 	.word	0x40013000
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201c      	movs	r0, #28
 800124c:	f000 f9ef 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001250:	201c      	movs	r0, #28
 8001252:	f000 fa08 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f8be 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM2_IRQHandler+0x10>)
 80012c6:	f001 ffd3 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000128 	.word	0x20000128

080012d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x50>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x16>
		heap_end = &end;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <_sbrk+0x50>)
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <_sbrk+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <_sbrk+0x50>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <_sbrk+0x50>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	466a      	mov	r2, sp
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d907      	bls.n	800130e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012fe:	f002 fb7f 	bl	8003a00 <__errno>
 8001302:	4602      	mov	r2, r0
 8001304:	230c      	movs	r3, #12
 8001306:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	e006      	b.n	800131c <_sbrk+0x48>
	}

	heap_end += incr;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <_sbrk+0x50>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <_sbrk+0x50>)
 8001318:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000a0 	.word	0x200000a0
 8001328:	20000170 	.word	0x20000170

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <SystemInit+0x28>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <SystemInit+0x28>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SystemInit+0x28>)
 8001342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001346:	609a      	str	r2, [r3, #8]
#endif
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800135c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800135e:	e003      	b.n	8001368 <LoopCopyDataInit>

08001360 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001362:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001364:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001366:	3104      	adds	r1, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LoopForever+0xa>)
	ldr	r3, =_edata
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <LoopForever+0xe>)
	adds	r2, r0, r1
 800136c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800136e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001370:	d3f6      	bcc.n	8001360 <CopyDataInit>
	ldr	r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001374:	e002      	b.n	800137c <LoopFillZerobss>

08001376 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001376:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001378:	f842 3b04 	str.w	r3, [r2], #4

0800137c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <LoopForever+0x16>)
	cmp	r2, r3
 800137e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001380:	d3f9      	bcc.n	8001376 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001382:	f7ff ffd3 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f002 fb41 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800138a:	f7ff fcd7 	bl	8000d3c <main>

0800138e <LoopForever>:

LoopForever:
    b LoopForever
 800138e:	e7fe      	b.n	800138e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001390:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001394:	08004e30 	.word	0x08004e30
	ldr	r0, =_sdata
 8001398:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800139c:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80013a0:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80013a4:	20000170 	.word	0x20000170

080013a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_2_IRQHandler>
	...

080013ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x28>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x28>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f92b 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fec2 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000

080013d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f943 	bl	8001682 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f90b 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000010 	.word	0x20000010
 8001430:	20000018 	.word	0x20000018
 8001434:	20000014 	.word	0x20000014

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000018 	.word	0x20000018
 800145c:	20000168 	.word	0x20000168

08001460 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;  
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000168 	.word	0x20000168

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e154      	b.n	8001956 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8146 	beq.w	8001950 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x38>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b12      	cmp	r3, #18
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00b      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001764:	2b11      	cmp	r3, #17
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b12      	cmp	r3, #18
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80a0 	beq.w	8001950 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_GPIO_Init+0x2d8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a57      	ldr	r2, [pc, #348]	; (8001974 <HAL_GPIO_Init+0x2d8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b55      	ldr	r3, [pc, #340]	; (8001974 <HAL_GPIO_Init+0x2d8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001828:	4a53      	ldr	r2, [pc, #332]	; (8001978 <HAL_GPIO_Init+0x2dc>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001852:	d019      	beq.n	8001888 <HAL_GPIO_Init+0x1ec>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a49      	ldr	r2, [pc, #292]	; (800197c <HAL_GPIO_Init+0x2e0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_GPIO_Init+0x1e8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2e4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00d      	beq.n	8001880 <HAL_GPIO_Init+0x1e4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d007      	beq.n	800187c <HAL_GPIO_Init+0x1e0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a46      	ldr	r2, [pc, #280]	; (8001988 <HAL_GPIO_Init+0x2ec>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_GPIO_Init+0x1dc>
 8001874:	2304      	movs	r3, #4
 8001876:	e008      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001878:	2305      	movs	r3, #5
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 800187c:	2303      	movs	r3, #3
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001888:	2300      	movs	r3, #0
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_GPIO_Init+0x2dc>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018cc:	4a2f      	ldr	r2, [pc, #188]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_GPIO_Init+0x2f0>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f aea3 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 8001966:	bf00      	nop
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f000 bef4 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 816a 	beq.w	8001cbe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ea:	4bb3      	ldr	r3, [pc, #716]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d00c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f6:	4bb0      	ldr	r3, [pc, #704]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d159      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
 8001a02:	4bad      	ldr	r3, [pc, #692]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d152      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
 8001a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_OscConfig+0x82>
 8001a3c:	4b9e      	ldr	r3, [pc, #632]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0xae>
 8001a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a46:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a6a:	4b93      	ldr	r3, [pc, #588]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a72:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a76:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a7a:	fa92 f2a2 	rbit	r2, r2
 8001a7e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a82:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a86:	fab2 f282 	clz	r2, r2
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	f042 0220 	orr.w	r2, r2, #32
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	f002 021f 	and.w	r2, r2, #31
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 810c 	beq.w	8001cbc <HAL_RCC_OscConfig+0x2fc>
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 8106 	bne.w	8001cbc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f000 be86 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x110>
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e030      	b.n	8001b32 <HAL_RCC_OscConfig+0x172>
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x134>
 8001ada:	4b77      	ldr	r3, [pc, #476]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b74      	ldr	r3, [pc, #464]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a73      	ldr	r2, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01e      	b.n	8001b32 <HAL_RCC_OscConfig+0x172>
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afe:	d10c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x15a>
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e00b      	b.n	8001b32 <HAL_RCC_OscConfig+0x172>
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a63      	ldr	r2, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f023 020f 	bic.w	r2, r3, #15
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	495d      	ldr	r1, [pc, #372]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d059      	beq.n	8001c04 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fc86 	bl	8001460 <HAL_GetTick>
 8001b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fc81 	bl	8001460 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d902      	bls.n	8001b70 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f000 be29 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x1e2>
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x20e>
 8001ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bbe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bd6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bda:	fa92 f2a2 	rbit	r2, r2
 8001bde:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001be2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001be6:	fab2 f282 	clz	r2, r2
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f042 0220 	orr.w	r2, r2, #32
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f002 021f 	and.w	r2, r2, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0ab      	beq.n	8001b5a <HAL_RCC_OscConfig+0x19a>
 8001c02:	e05c      	b.n	8001cbe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fc2c 	bl	8001460 <HAL_GetTick>
 8001c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fc27 	bl	8001460 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d902      	bls.n	8001c24 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	f000 bdcf 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c38:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_OscConfig+0x296>
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x2c2>
 8001c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c72:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c86:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c8a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c8e:	fa92 f2a2 	rbit	r2, r2
 8001c92:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c96:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f042 0220 	orr.w	r2, r2, #32
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f002 021f 	and.w	r2, r2, #31
 8001caa:	2101      	movs	r1, #1
 8001cac:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ab      	bne.n	8001c0e <HAL_RCC_OscConfig+0x24e>
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_OscConfig+0x2fe>
 8001cb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 816f 	beq.w	8001fac <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cce:	4bd0      	ldr	r3, [pc, #832]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cda:	4bcd      	ldr	r3, [pc, #820]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d16c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x400>
 8001ce6:	4bca      	ldr	r3, [pc, #808]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d166      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x400>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_OscConfig+0x362>
 8001d1c:	4bbc      	ldr	r3, [pc, #752]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	e013      	b.n	8001d4a <HAL_RCC_OscConfig+0x38a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d46:	4bb2      	ldr	r3, [pc, #712]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d50:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d54:	fa92 f2a2 	rbit	r2, r2
 8001d58:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d5c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3cc>
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d002      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f000 bd1b 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4ba0      	ldr	r3, [pc, #640]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	21f8      	movs	r1, #248	; 0xf8
 8001d9c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001da4:	fa91 f1a1 	rbit	r1, r1
 8001da8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dac:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001db0:	fab1 f181 	clz	r1, r1
 8001db4:	b2c9      	uxtb	r1, r1
 8001db6:	408b      	lsls	r3, r1
 8001db8:	4995      	ldr	r1, [pc, #596]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e0f5      	b.n	8001fac <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8085 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x516>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001dde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	461a      	mov	r2, r3
 8001df4:	2301      	movs	r3, #1
 8001df6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fb32 	bl	8001460 <HAL_GetTick>
 8001dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff fb2d 	bl	8001460 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d902      	bls.n	8001e18 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	f000 bcd5 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_OscConfig+0x488>
 8001e42:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e013      	b.n	8001e70 <HAL_RCC_OscConfig+0x4b0>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	2202      	movs	r2, #2
 8001e72:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e76:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e7a:	fa92 f2a2 	rbit	r2, r2
 8001e7e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e82:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0af      	beq.n	8001e02 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	21f8      	movs	r1, #248	; 0xf8
 8001eb2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001eba:	fa91 f1a1 	rbit	r1, r1
 8001ebe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ec2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ec6:	fab1 f181 	clz	r1, r1
 8001eca:	b2c9      	uxtb	r1, r1
 8001ecc:	408b      	lsls	r3, r1
 8001ece:	4950      	ldr	r1, [pc, #320]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e06a      	b.n	8001fac <HAL_RCC_OscConfig+0x5ec>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ee8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	461a      	mov	r2, r3
 8001efe:	2300      	movs	r3, #0
 8001f00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff faad 	bl	8001460 <HAL_GetTick>
 8001f06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff faa8 	bl	8001460 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d902      	bls.n	8001f22 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f000 bc50 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001f22:	2302      	movs	r3, #2
 8001f24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_OscConfig+0x592>
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e013      	b.n	8001f7a <HAL_RCC_OscConfig+0x5ba>
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f64:	2302      	movs	r3, #2
 8001f66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f80:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f84:	fa92 f2a2 	rbit	r2, r2
 8001f88:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1af      	bne.n	8001f0c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80da 	beq.w	8002170 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d069      	beq.n	800209a <HAL_RCC_OscConfig+0x6da>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x654>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	461a      	mov	r2, r3
 8001fec:	2301      	movs	r3, #1
 8001fee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fa36 	bl	8001460 <HAL_GetTick>
 8001ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fa31 	bl	8001460 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d906      	bls.n	8002018 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e3d9      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	10908120 	.word	0x10908120
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800202a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800202e:	2202      	movs	r2, #2
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002058:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4ba5      	ldr	r3, [pc, #660]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800205c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002062:	2102      	movs	r1, #2
 8002064:	6019      	str	r1, [r3, #0]
 8002066:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f1a3 	rbit	r1, r3
 8002070:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002074:	6019      	str	r1, [r3, #0]
  return result;
 8002076:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0b0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x63a>
 8002098:	e06a      	b.n	8002170 <HAL_RCC_OscConfig+0x7b0>
 800209a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020b0:	601a      	str	r2, [r3, #0]
  return result;
 80020b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <HAL_RCC_OscConfig+0x934>)
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	461a      	mov	r2, r3
 80020c8:	2300      	movs	r3, #0
 80020ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7ff f9c8 	bl	8001460 <HAL_GetTick>
 80020d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e009      	b.n	80020ea <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f9c3 	bl	8001460 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e36b      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80020ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020ee:	2202      	movs	r2, #2
 80020f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002106:	2202      	movs	r2, #2
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002130:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002136:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800213a:	2102      	movs	r1, #2
 800213c:	6019      	str	r1, [r3, #0]
 800213e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f1a3 	rbit	r1, r3
 8002148:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800214c:	6019      	str	r1, [r3, #0]
  return result;
 800214e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1b2      	bne.n	80020d6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8158 	beq.w	8002430 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d112      	bne.n	80021b8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11a      	bne.n	80021fa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d0:	f7ff f946 	bl	8001460 <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e009      	b.n	80021ee <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7ff f941 	bl	8001460 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e2e9      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ef      	beq.n	80021da <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x852>
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a39      	ldr	r2, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	e02f      	b.n	8002272 <HAL_RCC_OscConfig+0x8b2>
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x876>
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e01d      	b.n	8002272 <HAL_RCC_OscConfig+0x8b2>
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x89a>
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e00b      	b.n	8002272 <HAL_RCC_OscConfig+0x8b2>
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d06b      	beq.n	8002354 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff f8f0 	bl	8001460 <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f8eb 	bl	8001460 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e291      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 800229e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022ba:	2202      	movs	r2, #2
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d109      	bne.n	80022fc <HAL_RCC_OscConfig+0x93c>
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	e014      	b.n	8002318 <HAL_RCC_OscConfig+0x958>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	10908120 	.word	0x10908120
 80022f8:	40007000 	.word	0x40007000
 80022fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	4bbb      	ldr	r3, [pc, #748]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800231c:	2102      	movs	r1, #2
 800231e:	6011      	str	r1, [r2, #0]
 8002320:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	fa92 f1a2 	rbit	r1, r2
 800232a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800232e:	6011      	str	r1, [r2, #0]
  return result;
 8002330:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d099      	beq.n	8002286 <HAL_RCC_OscConfig+0x8c6>
 8002352:	e063      	b.n	800241c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff f884 	bl	8001460 <HAL_GetTick>
 8002358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7ff f87f 	bl	8001460 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e225      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 8002376:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800237a:	2202      	movs	r2, #2
 800237c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002392:	2202      	movs	r2, #2
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023a4:	601a      	str	r2, [r3, #0]
  return result;
 80023a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0xa06>
 80023c0:	4b90      	ldr	r3, [pc, #576]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	e00d      	b.n	80023e2 <HAL_RCC_OscConfig+0xa22>
 80023c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023ca:	2202      	movs	r2, #2
 80023cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	4b89      	ldr	r3, [pc, #548]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023e6:	2102      	movs	r1, #2
 80023e8:	6011      	str	r1, [r2, #0]
 80023ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	fa92 f1a2 	rbit	r1, r2
 80023f4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023f8:	6011      	str	r1, [r2, #0]
  return result;
 80023fa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	fab2 f282 	clz	r2, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f002 021f 	and.w	r2, r2, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1a0      	bne.n	800235e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800241c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002424:	4b77      	ldr	r3, [pc, #476]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4a76      	ldr	r2, [pc, #472]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800242a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 81c2 	beq.w	80027c0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243c:	4b71      	ldr	r3, [pc, #452]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	f000 819c 	beq.w	8002782 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	f040 8114 	bne.w	800267e <HAL_RCC_OscConfig+0xcbe>
 8002456:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800245a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800245e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f2a3 	rbit	r2, r3
 800246a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800246e:	601a      	str	r2, [r3, #0]
  return result;
 8002470:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002474:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002480:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	461a      	mov	r2, r3
 8002488:	2300      	movs	r3, #0
 800248a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe ffe8 	bl	8001460 <HAL_GetTick>
 8002490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	e009      	b.n	80024aa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe ffe3 	bl	8001460 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e18b      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80024aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f2a3 	rbit	r2, r3
 80024be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024c2:	601a      	str	r2, [r3, #0]
  return result;
 80024c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_RCC_OscConfig+0xb24>
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e01b      	b.n	800251c <HAL_RCC_OscConfig+0xb5c>
 80024e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002520:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002524:	6011      	str	r1, [r2, #0]
 8002526:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fa92 f1a2 	rbit	r1, r2
 8002530:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002534:	6011      	str	r1, [r2, #0]
  return result;
 8002536:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f042 0220 	orr.w	r2, r2, #32
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f002 021f 	and.w	r2, r2, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d19e      	bne.n	8002496 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	430b      	orrs	r3, r1
 800256e:	4925      	ldr	r1, [pc, #148]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
 8002574:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800258c:	601a      	str	r2, [r3, #0]
  return result;
 800258e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002592:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800259e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	461a      	mov	r2, r3
 80025a6:	2301      	movs	r3, #1
 80025a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe ff59 	bl	8001460 <HAL_GetTick>
 80025ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b2:	e009      	b.n	80025c8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe ff54 	bl	8001460 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0fc      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80025c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f2a3 	rbit	r2, r3
 80025dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e0:	601a      	str	r2, [r3, #0]
  return result;
 80025e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0xc48>
 80025fc:	4b01      	ldr	r3, [pc, #4]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	e01e      	b.n	8002640 <HAL_RCC_OscConfig+0xc80>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800260c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002648:	6011      	str	r1, [r2, #0]
 800264a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	fa92 f1a2 	rbit	r1, r2
 8002654:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002658:	6011      	str	r1, [r2, #0]
  return result;
 800265a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d09b      	beq.n	80025b4 <HAL_RCC_OscConfig+0xbf4>
 800267c:	e0a0      	b.n	80027c0 <HAL_RCC_OscConfig+0xe00>
 800267e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002682:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002696:	601a      	str	r2, [r3, #0]
  return result;
 8002698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	461a      	mov	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fed4 	bl	8001460 <HAL_GetTick>
 80026b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fecf 	bl	8001460 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e077      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80026d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	601a      	str	r2, [r3, #0]
  return result;
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_RCC_OscConfig+0xd4c>
 8002706:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e01b      	b.n	8002744 <HAL_RCC_OscConfig+0xd84>
 800270c:	f107 0320 	add.w	r3, r7, #32
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f107 0320 	add.w	r3, r7, #32
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f107 0318 	add.w	r3, r7, #24
 800272a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f107 0318 	add.w	r3, r7, #24
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f107 0210 	add.w	r2, r7, #16
 8002748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	f107 0210 	add.w	r2, r7, #16
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	fa92 f1a2 	rbit	r1, r2
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	6011      	str	r1, [r2, #0]
  return result;
 800275e:	f107 020c 	add.w	r2, r7, #12
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d19e      	bne.n	80026be <HAL_RCC_OscConfig+0xcfe>
 8002780:	e01e      	b.n	80027c0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e018      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002798:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800279c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b09e      	sub	sp, #120	; 0x78
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e162      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b90      	ldr	r3, [pc, #576]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	498b      	ldr	r1, [pc, #556]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e14a      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	497f      	ldr	r1, [pc, #508]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80dc 	beq.w	80029fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d13c      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xf6>
 800284c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002850:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_RCC_ClockConfig+0xa6>
 8002870:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e00f      	b.n	8002896 <HAL_RCC_ClockConfig+0xc6>
 8002876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	667b      	str	r3, [r7, #100]	; 0x64
 8002884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002888:	663b      	str	r3, [r7, #96]	; 0x60
 800288a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002892:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289a:	65ba      	str	r2, [r7, #88]	; 0x58
 800289c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d17b      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0f3      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d13c      	bne.n	8002948 <HAL_RCC_ClockConfig+0x178>
 80028ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x128>
 80028f2:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	e00f      	b.n	8002918 <HAL_RCC_ClockConfig+0x148>
 80028f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	647b      	str	r3, [r7, #68]	; 0x44
 8002906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290a:	643b      	str	r3, [r7, #64]	; 0x40
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	63ba      	str	r2, [r7, #56]	; 0x38
 800291e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f042 0220 	orr.w	r2, r2, #32
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f002 021f 	and.w	r2, r2, #31
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d13a      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b2      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
 8002948:	2302      	movs	r3, #2
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1a0>
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e00d      	b.n	800298c <HAL_RCC_ClockConfig+0x1bc>
 8002970:	2302      	movs	r3, #2
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	2302      	movs	r3, #2
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	2202      	movs	r2, #2
 800298e:	61ba      	str	r2, [r7, #24]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	617a      	str	r2, [r7, #20]
  return result;
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f042 0220 	orr.w	r2, r2, #32
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e079      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	491a      	ldr	r1, [pc, #104]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fd48 	bl	8001460 <HAL_GetTick>
 80029d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fd44 	bl	8001460 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e061      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d214      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4906      	ldr	r1, [pc, #24]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e040      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	491a      	ldr	r1, [pc, #104]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4912      	ldr	r1, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a72:	f000 f829 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4601      	mov	r1, r0
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a80:	22f0      	movs	r2, #240	; 0xf0
 8002a82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	fa92 f2a2 	rbit	r2, r2
 8002a8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	40d3      	lsrs	r3, r2
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x2ec>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_RCC_ClockConfig+0x2f0>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_RCC_ClockConfig+0x2f4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fc96 	bl	80013d8 <HAL_InitTick>
  
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3778      	adds	r7, #120	; 0x78
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08004c20 	.word	0x08004c20
 8002ac0:	20000010 	.word	0x20000010
 8002ac4:	20000014 	.word	0x20000014

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x36>
 8002af6:	e03c      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afa:	623b      	str	r3, [r7, #32]
      break;
 8002afc:	e03c      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	fa92 f2a2 	rbit	r2, r2
 8002b10:	607a      	str	r2, [r7, #4]
  return result;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	fab2 f282 	clz	r2, r2
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	40d3      	lsrs	r3, r2
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	fa92 f2a2 	rbit	r2, r2
 8002b34:	60fa      	str	r2, [r7, #12]
  return result;
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	40d3      	lsrs	r3, r2
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b60:	e004      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	623b      	str	r3, [r7, #32]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b74:	623b      	str	r3, [r7, #32]
      break;
 8002b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	372c      	adds	r7, #44	; 0x2c
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	08004c30 	.word	0x08004c30
 8002b94:	08004c40 	.word	0x08004c40
 8002b98:	003d0900 	.word	0x003d0900

08002b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e084      	b.n	8002cb8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fe fae5 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bee:	d902      	bls.n	8002bf6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e002      	b.n	8002bfc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c04:	d007      	beq.n	8002c16 <HAL_SPI_Init+0x7a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c0e:	d002      	beq.n	8002c16 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c26:	d903      	bls.n	8002c30 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2e:	e002      	b.n	8002c36 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	ea42 0103 	orr.w	r1, r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0204 	and.w	r2, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	ea42 0103 	orr.w	r1, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_SPI_Transmit+0x22>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e150      	b.n	8002f84 <HAL_SPI_Transmit+0x2c4>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cea:	f7fe fbb9 	bl	8001460 <HAL_GetTick>
 8002cee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d002      	beq.n	8002d06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
 8002d02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d04:	e135      	b.n	8002f72 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_SPI_Transmit+0x52>
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d16:	e12c      	b.n	8002f72 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	88fa      	ldrh	r2, [r7, #6]
 8002d30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d62:	d107      	bne.n	8002d74 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b40      	cmp	r3, #64	; 0x40
 8002d80:	d007      	beq.n	8002d92 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d9a:	d94b      	bls.n	8002e34 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_SPI_Transmit+0xea>
 8002da4:	8afb      	ldrh	r3, [r7, #22]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d13e      	bne.n	8002e28 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	1c9a      	adds	r2, r3, #2
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dce:	e02b      	b.n	8002e28 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d112      	bne.n	8002e04 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	881a      	ldrh	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	1c9a      	adds	r2, r3, #2
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e02:	e011      	b.n	8002e28 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e04:	f7fe fb2c 	bl	8001460 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d803      	bhi.n	8002e1c <HAL_SPI_Transmit+0x15c>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d102      	bne.n	8002e22 <HAL_SPI_Transmit+0x162>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e26:	e0a4      	b.n	8002f72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ce      	bne.n	8002dd0 <HAL_SPI_Transmit+0x110>
 8002e32:	e07c      	b.n	8002f2e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_SPI_Transmit+0x182>
 8002e3c:	8afb      	ldrh	r3, [r7, #22]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d170      	bne.n	8002f24 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d912      	bls.n	8002e72 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b02      	subs	r3, #2
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e70:	e058      	b.n	8002f24 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e98:	e044      	b.n	8002f24 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d12b      	bne.n	8002f00 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d912      	bls.n	8002ed8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b02      	subs	r3, #2
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ed6:	e025      	b.n	8002f24 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002efe:	e011      	b.n	8002f24 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f00:	f7fe faae 	bl	8001460 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d803      	bhi.n	8002f18 <HAL_SPI_Transmit+0x258>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_Transmit+0x25e>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f22:	e026      	b.n	8002f72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1b5      	bne.n	8002e9a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f901 	bl	800313a <SPI_EndRxTxTransaction>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e000      	b.n	8002f72 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002f70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f9c:	e04c      	b.n	8003038 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d048      	beq.n	8003038 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fa5b 	bl	8001460 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d902      	bls.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x30>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13d      	bne.n	8003038 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fd4:	d111      	bne.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fde:	d004      	beq.n	8002fea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d107      	bne.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003002:	d10f      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e00f      	b.n	8003058 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	429a      	cmp	r2, r3
 8003054:	d1a3      	bne.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800306e:	e057      	b.n	8003120 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003076:	d106      	bne.n	8003086 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d048      	beq.n	8003120 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800308e:	f7fe f9e7 	bl	8001460 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d902      	bls.n	80030a4 <SPI_WaitFifoStateUntilTimeout+0x44>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d13d      	bne.n	8003120 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030bc:	d111      	bne.n	80030e2 <SPI_WaitFifoStateUntilTimeout+0x82>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c6:	d004      	beq.n	80030d2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d107      	bne.n	80030e2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ea:	d10f      	bne.n	800310c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e008      	b.n	8003132 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d19f      	bne.n	8003070 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af02      	add	r7, sp, #8
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff ff84 	bl	8003060 <SPI_WaitFifoStateUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e027      	b.n	80031be <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff ff07 	bl	8002f8c <SPI_WaitFlagStateUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e014      	b.n	80031be <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff ff5d 	bl	8003060 <SPI_WaitFifoStateUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e000      	b.n	80031be <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e01d      	b.n	8003214 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe f815 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f000 fa33 	bl	8003670 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_TIM_Base_Start_IT+0x50>)
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d00b      	beq.n	800325e <HAL_TIM_Base_Start_IT+0x42>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d007      	beq.n	800325e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	00010007 	.word	0x00010007

08003270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d122      	bne.n	80032cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d11b      	bne.n	80032cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0202 	mvn.w	r2, #2
 800329c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9be 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9b0 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f9c1 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d122      	bne.n	8003320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d11b      	bne.n	8003320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0204 	mvn.w	r2, #4
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f994 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f986 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f997 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b08      	cmp	r3, #8
 800332c:	d122      	bne.n	8003374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0208 	mvn.w	r2, #8
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2204      	movs	r2, #4
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f96a 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f95c 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f96d 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b10      	cmp	r3, #16
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0210 	mvn.w	r2, #16
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2208      	movs	r2, #8
 800339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f940 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f932 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f943 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d10e      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0201 	mvn.w	r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fc6e 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b80      	cmp	r3, #128	; 0x80
 8003400:	d10e      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d107      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fadc 	bl	80039d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342e:	d10e      	bne.n	800344e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b80      	cmp	r3, #128	; 0x80
 800343c:	d107      	bne.n	800344e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 facf 	bl	80039ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d10e      	bne.n	800347a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d107      	bne.n	800347a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8f1 	bl	800365c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b20      	cmp	r3, #32
 8003486:	d10e      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b20      	cmp	r3, #32
 8003494:	d107      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f06f 0220 	mvn.w	r2, #32
 800349e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa8f 	bl	80039c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_ConfigClockSource+0x18>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e0a8      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x16a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d067      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x124>
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d80b      	bhi.n	800351e <HAL_TIM_ConfigClockSource+0x70>
 8003506:	2b10      	cmp	r3, #16
 8003508:	d073      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x144>
 800350a:	2b10      	cmp	r3, #16
 800350c:	d802      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x66>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d06f      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003512:	e078      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003514:	2b20      	cmp	r3, #32
 8003516:	d06c      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x144>
 8003518:	2b30      	cmp	r3, #48	; 0x30
 800351a:	d06a      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800351c:	e073      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800351e:	2b70      	cmp	r3, #112	; 0x70
 8003520:	d00d      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x90>
 8003522:	2b70      	cmp	r3, #112	; 0x70
 8003524:	d804      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x82>
 8003526:	2b50      	cmp	r3, #80	; 0x50
 8003528:	d033      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0xe4>
 800352a:	2b60      	cmp	r3, #96	; 0x60
 800352c:	d041      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800352e:	e06a      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003534:	d066      	beq.n	8003604 <HAL_TIM_ConfigClockSource+0x156>
 8003536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353a:	d017      	beq.n	800356c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800353c:	e063      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f000 f999 	bl	8003884 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003560:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	609a      	str	r2, [r3, #8]
      break;
 800356a:	e04c      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f000 f982 	bl	8003884 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800358e:	609a      	str	r2, [r3, #8]
      break;
 8003590:	e039      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	461a      	mov	r2, r3
 80035a0:	f000 f8f6 	bl	8003790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2150      	movs	r1, #80	; 0x50
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f94f 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 80035b0:	e029      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	461a      	mov	r2, r3
 80035c0:	f000 f915 	bl	80037ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2160      	movs	r1, #96	; 0x60
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f93f 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 80035d0:	e019      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 f8d6 	bl	8003790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f92f 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 80035f0:	e009      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f000 f926 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003602:	e000      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003604:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3c      	ldr	r2, [pc, #240]	; (8003774 <TIM_Base_SetConfig+0x104>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a39      	ldr	r2, [pc, #228]	; (8003778 <TIM_Base_SetConfig+0x108>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a38      	ldr	r2, [pc, #224]	; (800377c <TIM_Base_SetConfig+0x10c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a37      	ldr	r2, [pc, #220]	; (8003780 <TIM_Base_SetConfig+0x110>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <TIM_Base_SetConfig+0x104>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01b      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d017      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <TIM_Base_SetConfig+0x108>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <TIM_Base_SetConfig+0x10c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a28      	ldr	r2, [pc, #160]	; (8003780 <TIM_Base_SetConfig+0x110>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a27      	ldr	r2, [pc, #156]	; (8003784 <TIM_Base_SetConfig+0x114>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <TIM_Base_SetConfig+0x118>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a25      	ldr	r2, [pc, #148]	; (800378c <TIM_Base_SetConfig+0x11c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <TIM_Base_SetConfig+0x104>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00f      	beq.n	8003758 <TIM_Base_SetConfig+0xe8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a11      	ldr	r2, [pc, #68]	; (8003780 <TIM_Base_SetConfig+0x110>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0xe8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <TIM_Base_SetConfig+0x114>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0xe8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <TIM_Base_SetConfig+0x118>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0xe8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0e      	ldr	r2, [pc, #56]	; (800378c <TIM_Base_SetConfig+0x11c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40013400 	.word	0x40013400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0201 	bic.w	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 030a 	bic.w	r3, r3, #10
 80037cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b087      	sub	sp, #28
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f023 0210 	bic.w	r2, r3, #16
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	031b      	lsls	r3, r3, #12
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800382a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	f043 0307 	orr.w	r3, r3, #7
 8003870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800389e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e063      	b.n	80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2b      	ldr	r2, [pc, #172]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2a      	ldr	r2, [pc, #168]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d108      	bne.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003916:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003928:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d018      	beq.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d013      	beq.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10c      	bne.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40013400 	.word	0x40013400
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40014000 	.word	0x40014000

080039c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <__errno>:
 8003a00:	4b01      	ldr	r3, [pc, #4]	; (8003a08 <__errno+0x8>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000001c 	.word	0x2000001c

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4e0d      	ldr	r6, [pc, #52]	; (8003a44 <__libc_init_array+0x38>)
 8003a10:	4c0d      	ldr	r4, [pc, #52]	; (8003a48 <__libc_init_array+0x3c>)
 8003a12:	1ba4      	subs	r4, r4, r6
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	2500      	movs	r5, #0
 8003a18:	42a5      	cmp	r5, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	4e0b      	ldr	r6, [pc, #44]	; (8003a4c <__libc_init_array+0x40>)
 8003a1e:	4c0c      	ldr	r4, [pc, #48]	; (8003a50 <__libc_init_array+0x44>)
 8003a20:	f001 f8f0 	bl	8004c04 <_init>
 8003a24:	1ba4      	subs	r4, r4, r6
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	2500      	movs	r5, #0
 8003a2a:	42a5      	cmp	r5, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a34:	4798      	blx	r3
 8003a36:	3501      	adds	r5, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a3e:	4798      	blx	r3
 8003a40:	3501      	adds	r5, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08004e28 	.word	0x08004e28
 8003a48:	08004e28 	.word	0x08004e28
 8003a4c:	08004e28 	.word	0x08004e28
 8003a50:	08004e2c 	.word	0x08004e2c

08003a54 <malloc>:
 8003a54:	4b02      	ldr	r3, [pc, #8]	; (8003a60 <malloc+0xc>)
 8003a56:	4601      	mov	r1, r0
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	f000 b80b 	b.w	8003a74 <_malloc_r>
 8003a5e:	bf00      	nop
 8003a60:	2000001c 	.word	0x2000001c

08003a64 <memset>:
 8003a64:	4402      	add	r2, r0
 8003a66:	4603      	mov	r3, r0
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <_malloc_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	1ccd      	adds	r5, r1, #3
 8003a78:	f025 0503 	bic.w	r5, r5, #3
 8003a7c:	3508      	adds	r5, #8
 8003a7e:	2d0c      	cmp	r5, #12
 8003a80:	bf38      	it	cc
 8003a82:	250c      	movcc	r5, #12
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	4606      	mov	r6, r0
 8003a88:	db01      	blt.n	8003a8e <_malloc_r+0x1a>
 8003a8a:	42a9      	cmp	r1, r5
 8003a8c:	d903      	bls.n	8003a96 <_malloc_r+0x22>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	2000      	movs	r0, #0
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	f000 f857 	bl	8003b48 <__malloc_lock>
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <_malloc_r+0xac>)
 8003a9c:	6814      	ldr	r4, [r2, #0]
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	b991      	cbnz	r1, 8003ac8 <_malloc_r+0x54>
 8003aa2:	4c20      	ldr	r4, [pc, #128]	; (8003b24 <_malloc_r+0xb0>)
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	b91b      	cbnz	r3, 8003ab0 <_malloc_r+0x3c>
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f83d 	bl	8003b28 <_sbrk_r>
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f000 f838 	bl	8003b28 <_sbrk_r>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d124      	bne.n	8003b06 <_malloc_r+0x92>
 8003abc:	230c      	movs	r3, #12
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f000 f842 	bl	8003b4a <__malloc_unlock>
 8003ac6:	e7e4      	b.n	8003a92 <_malloc_r+0x1e>
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	1b5b      	subs	r3, r3, r5
 8003acc:	d418      	bmi.n	8003b00 <_malloc_r+0x8c>
 8003ace:	2b0b      	cmp	r3, #11
 8003ad0:	d90f      	bls.n	8003af2 <_malloc_r+0x7e>
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	50cd      	str	r5, [r1, r3]
 8003ad6:	18cc      	adds	r4, r1, r3
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f000 f836 	bl	8003b4a <__malloc_unlock>
 8003ade:	f104 000b 	add.w	r0, r4, #11
 8003ae2:	1d23      	adds	r3, r4, #4
 8003ae4:	f020 0007 	bic.w	r0, r0, #7
 8003ae8:	1ac3      	subs	r3, r0, r3
 8003aea:	d0d3      	beq.n	8003a94 <_malloc_r+0x20>
 8003aec:	425a      	negs	r2, r3
 8003aee:	50e2      	str	r2, [r4, r3]
 8003af0:	e7d0      	b.n	8003a94 <_malloc_r+0x20>
 8003af2:	428c      	cmp	r4, r1
 8003af4:	684b      	ldr	r3, [r1, #4]
 8003af6:	bf16      	itet	ne
 8003af8:	6063      	strne	r3, [r4, #4]
 8003afa:	6013      	streq	r3, [r2, #0]
 8003afc:	460c      	movne	r4, r1
 8003afe:	e7eb      	b.n	8003ad8 <_malloc_r+0x64>
 8003b00:	460c      	mov	r4, r1
 8003b02:	6849      	ldr	r1, [r1, #4]
 8003b04:	e7cc      	b.n	8003aa0 <_malloc_r+0x2c>
 8003b06:	1cc4      	adds	r4, r0, #3
 8003b08:	f024 0403 	bic.w	r4, r4, #3
 8003b0c:	42a0      	cmp	r0, r4
 8003b0e:	d005      	beq.n	8003b1c <_malloc_r+0xa8>
 8003b10:	1a21      	subs	r1, r4, r0
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 f808 	bl	8003b28 <_sbrk_r>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d0cf      	beq.n	8003abc <_malloc_r+0x48>
 8003b1c:	6025      	str	r5, [r4, #0]
 8003b1e:	e7db      	b.n	8003ad8 <_malloc_r+0x64>
 8003b20:	200000a4 	.word	0x200000a4
 8003b24:	200000a8 	.word	0x200000a8

08003b28 <_sbrk_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4c06      	ldr	r4, [pc, #24]	; (8003b44 <_sbrk_r+0x1c>)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4605      	mov	r5, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	f7fd fbce 	bl	80012d4 <_sbrk>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_sbrk_r+0x1a>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_sbrk_r+0x1a>
 8003b40:	602b      	str	r3, [r5, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	2000016c 	.word	0x2000016c

08003b48 <__malloc_lock>:
 8003b48:	4770      	bx	lr

08003b4a <__malloc_unlock>:
 8003b4a:	4770      	bx	lr

08003b4c <round>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	ec57 6b10 	vmov	r6, r7, d0
 8003b52:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8003b56:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8003b5a:	2c13      	cmp	r4, #19
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	463d      	mov	r5, r7
 8003b60:	dc17      	bgt.n	8003b92 <round+0x46>
 8003b62:	2c00      	cmp	r4, #0
 8003b64:	da09      	bge.n	8003b7a <round+0x2e>
 8003b66:	3401      	adds	r4, #1
 8003b68:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8003b6c:	d103      	bne.n	8003b76 <round+0x2a>
 8003b6e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003b72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003b76:	2100      	movs	r1, #0
 8003b78:	e02c      	b.n	8003bd4 <round+0x88>
 8003b7a:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <round+0x90>)
 8003b7c:	4122      	asrs	r2, r4
 8003b7e:	4217      	tst	r7, r2
 8003b80:	d100      	bne.n	8003b84 <round+0x38>
 8003b82:	b19e      	cbz	r6, 8003bac <round+0x60>
 8003b84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b88:	4123      	asrs	r3, r4
 8003b8a:	442b      	add	r3, r5
 8003b8c:	ea23 0302 	bic.w	r3, r3, r2
 8003b90:	e7f1      	b.n	8003b76 <round+0x2a>
 8003b92:	2c33      	cmp	r4, #51	; 0x33
 8003b94:	dd0d      	ble.n	8003bb2 <round+0x66>
 8003b96:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003b9a:	d107      	bne.n	8003bac <round+0x60>
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	ee10 2a10 	vmov	r2, s0
 8003ba4:	f7fc fb16 	bl	80001d4 <__adddf3>
 8003ba8:	4606      	mov	r6, r0
 8003baa:	460f      	mov	r7, r1
 8003bac:	ec47 6b10 	vmov	d0, r6, r7
 8003bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8003bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bba:	40d0      	lsrs	r0, r2
 8003bbc:	4206      	tst	r6, r0
 8003bbe:	d0f5      	beq.n	8003bac <round+0x60>
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003bc6:	fa02 f404 	lsl.w	r4, r2, r4
 8003bca:	1931      	adds	r1, r6, r4
 8003bcc:	bf28      	it	cs
 8003bce:	189b      	addcs	r3, r3, r2
 8003bd0:	ea21 0100 	bic.w	r1, r1, r0
 8003bd4:	461f      	mov	r7, r3
 8003bd6:	460e      	mov	r6, r1
 8003bd8:	e7e8      	b.n	8003bac <round+0x60>
 8003bda:	bf00      	nop
 8003bdc:	000fffff 	.word	0x000fffff

08003be0 <sin>:
 8003be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003be2:	ec51 0b10 	vmov	r0, r1, d0
 8003be6:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <sin+0x88>)
 8003be8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bec:	4293      	cmp	r3, r2
 8003bee:	dc07      	bgt.n	8003c00 <sin+0x20>
 8003bf0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003c60 <sin+0x80>
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f000 fe37 	bl	8004868 <__kernel_sin>
 8003bfa:	ec51 0b10 	vmov	r0, r1, d0
 8003bfe:	e007      	b.n	8003c10 <sin+0x30>
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <sin+0x8c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	dd09      	ble.n	8003c1a <sin+0x3a>
 8003c06:	ee10 2a10 	vmov	r2, s0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	f7fc fae0 	bl	80001d0 <__aeabi_dsub>
 8003c10:	ec41 0b10 	vmov	d0, r0, r1
 8003c14:	b005      	add	sp, #20
 8003c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1a:	4668      	mov	r0, sp
 8003c1c:	f000 f828 	bl	8003c70 <__ieee754_rem_pio2>
 8003c20:	f000 0003 	and.w	r0, r0, #3
 8003c24:	2801      	cmp	r0, #1
 8003c26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c2a:	ed9d 0b00 	vldr	d0, [sp]
 8003c2e:	d004      	beq.n	8003c3a <sin+0x5a>
 8003c30:	2802      	cmp	r0, #2
 8003c32:	d005      	beq.n	8003c40 <sin+0x60>
 8003c34:	b970      	cbnz	r0, 8003c54 <sin+0x74>
 8003c36:	2001      	movs	r0, #1
 8003c38:	e7dd      	b.n	8003bf6 <sin+0x16>
 8003c3a:	f000 fa0d 	bl	8004058 <__kernel_cos>
 8003c3e:	e7dc      	b.n	8003bfa <sin+0x1a>
 8003c40:	2001      	movs	r0, #1
 8003c42:	f000 fe11 	bl	8004868 <__kernel_sin>
 8003c46:	ec53 2b10 	vmov	r2, r3, d0
 8003c4a:	ee10 0a10 	vmov	r0, s0
 8003c4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003c52:	e7dd      	b.n	8003c10 <sin+0x30>
 8003c54:	f000 fa00 	bl	8004058 <__kernel_cos>
 8003c58:	e7f5      	b.n	8003c46 <sin+0x66>
 8003c5a:	bf00      	nop
 8003c5c:	f3af 8000 	nop.w
	...
 8003c68:	3fe921fb 	.word	0x3fe921fb
 8003c6c:	7fefffff 	.word	0x7fefffff

08003c70 <__ieee754_rem_pio2>:
 8003c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c74:	ec57 6b10 	vmov	r6, r7, d0
 8003c78:	4bc3      	ldr	r3, [pc, #780]	; (8003f88 <__ieee754_rem_pio2+0x318>)
 8003c7a:	b08d      	sub	sp, #52	; 0x34
 8003c7c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003c80:	4598      	cmp	r8, r3
 8003c82:	4604      	mov	r4, r0
 8003c84:	9704      	str	r7, [sp, #16]
 8003c86:	dc07      	bgt.n	8003c98 <__ieee754_rem_pio2+0x28>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	ed84 0b00 	vstr	d0, [r4]
 8003c90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003c94:	2500      	movs	r5, #0
 8003c96:	e027      	b.n	8003ce8 <__ieee754_rem_pio2+0x78>
 8003c98:	4bbc      	ldr	r3, [pc, #752]	; (8003f8c <__ieee754_rem_pio2+0x31c>)
 8003c9a:	4598      	cmp	r8, r3
 8003c9c:	dc75      	bgt.n	8003d8a <__ieee754_rem_pio2+0x11a>
 8003c9e:	9b04      	ldr	r3, [sp, #16]
 8003ca0:	4dbb      	ldr	r5, [pc, #748]	; (8003f90 <__ieee754_rem_pio2+0x320>)
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	ee10 0a10 	vmov	r0, s0
 8003ca8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003f50 <__ieee754_rem_pio2+0x2e0>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	4639      	mov	r1, r7
 8003cb0:	dd36      	ble.n	8003d20 <__ieee754_rem_pio2+0xb0>
 8003cb2:	f7fc fa8d 	bl	80001d0 <__aeabi_dsub>
 8003cb6:	45a8      	cmp	r8, r5
 8003cb8:	4606      	mov	r6, r0
 8003cba:	460f      	mov	r7, r1
 8003cbc:	d018      	beq.n	8003cf0 <__ieee754_rem_pio2+0x80>
 8003cbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8003f58 <__ieee754_rem_pio2+0x2e8>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fa84 	bl	80001d0 <__aeabi_dsub>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	e9c4 2300 	strd	r2, r3, [r4]
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	f7fc fa7c 	bl	80001d0 <__aeabi_dsub>
 8003cd8:	a39f      	add	r3, pc, #636	; (adr r3, 8003f58 <__ieee754_rem_pio2+0x2e8>)
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f7fc fa77 	bl	80001d0 <__aeabi_dsub>
 8003ce2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ce6:	2501      	movs	r5, #1
 8003ce8:	4628      	mov	r0, r5
 8003cea:	b00d      	add	sp, #52	; 0x34
 8003cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf0:	a39b      	add	r3, pc, #620	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x2f0>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fa6b 	bl	80001d0 <__aeabi_dsub>
 8003cfa:	a39b      	add	r3, pc, #620	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x2f8>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	4606      	mov	r6, r0
 8003d02:	460f      	mov	r7, r1
 8003d04:	f7fc fa64 	bl	80001d0 <__aeabi_dsub>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	e9c4 2300 	strd	r2, r3, [r4]
 8003d10:	4630      	mov	r0, r6
 8003d12:	4639      	mov	r1, r7
 8003d14:	f7fc fa5c 	bl	80001d0 <__aeabi_dsub>
 8003d18:	a393      	add	r3, pc, #588	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x2f8>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	e7de      	b.n	8003cde <__ieee754_rem_pio2+0x6e>
 8003d20:	f7fc fa58 	bl	80001d4 <__adddf3>
 8003d24:	45a8      	cmp	r8, r5
 8003d26:	4606      	mov	r6, r0
 8003d28:	460f      	mov	r7, r1
 8003d2a:	d016      	beq.n	8003d5a <__ieee754_rem_pio2+0xea>
 8003d2c:	a38a      	add	r3, pc, #552	; (adr r3, 8003f58 <__ieee754_rem_pio2+0x2e8>)
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	f7fc fa4f 	bl	80001d4 <__adddf3>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	e9c4 2300 	strd	r2, r3, [r4]
 8003d3e:	4630      	mov	r0, r6
 8003d40:	4639      	mov	r1, r7
 8003d42:	f7fc fa45 	bl	80001d0 <__aeabi_dsub>
 8003d46:	a384      	add	r3, pc, #528	; (adr r3, 8003f58 <__ieee754_rem_pio2+0x2e8>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fa42 	bl	80001d4 <__adddf3>
 8003d50:	f04f 35ff 	mov.w	r5, #4294967295
 8003d54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d58:	e7c6      	b.n	8003ce8 <__ieee754_rem_pio2+0x78>
 8003d5a:	a381      	add	r3, pc, #516	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x2f0>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f7fc fa38 	bl	80001d4 <__adddf3>
 8003d64:	a380      	add	r3, pc, #512	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x2f8>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	460f      	mov	r7, r1
 8003d6e:	f7fc fa31 	bl	80001d4 <__adddf3>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	e9c4 2300 	strd	r2, r3, [r4]
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	f7fc fa27 	bl	80001d0 <__aeabi_dsub>
 8003d82:	a379      	add	r3, pc, #484	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x2f8>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	e7e0      	b.n	8003d4c <__ieee754_rem_pio2+0xdc>
 8003d8a:	4b82      	ldr	r3, [pc, #520]	; (8003f94 <__ieee754_rem_pio2+0x324>)
 8003d8c:	4598      	cmp	r8, r3
 8003d8e:	f300 80d0 	bgt.w	8003f32 <__ieee754_rem_pio2+0x2c2>
 8003d92:	f000 fe23 	bl	80049dc <fabs>
 8003d96:	ec57 6b10 	vmov	r6, r7, d0
 8003d9a:	ee10 0a10 	vmov	r0, s0
 8003d9e:	a374      	add	r3, pc, #464	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x300>)
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	4639      	mov	r1, r7
 8003da6:	f7fc fbcb 	bl	8000540 <__aeabi_dmul>
 8003daa:	2200      	movs	r2, #0
 8003dac:	4b7a      	ldr	r3, [pc, #488]	; (8003f98 <__ieee754_rem_pio2+0x328>)
 8003dae:	f7fc fa11 	bl	80001d4 <__adddf3>
 8003db2:	f7fc fe5f 	bl	8000a74 <__aeabi_d2iz>
 8003db6:	4605      	mov	r5, r0
 8003db8:	f7fc fb58 	bl	800046c <__aeabi_i2d>
 8003dbc:	a364      	add	r3, pc, #400	; (adr r3, 8003f50 <__ieee754_rem_pio2+0x2e0>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dc6:	f7fc fbbb 	bl	8000540 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4639      	mov	r1, r7
 8003dd2:	f7fc f9fd 	bl	80001d0 <__aeabi_dsub>
 8003dd6:	a360      	add	r3, pc, #384	; (adr r3, 8003f58 <__ieee754_rem_pio2+0x2e8>)
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	4682      	mov	sl, r0
 8003dde:	468b      	mov	fp, r1
 8003de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003de4:	f7fc fbac 	bl	8000540 <__aeabi_dmul>
 8003de8:	2d1f      	cmp	r5, #31
 8003dea:	4606      	mov	r6, r0
 8003dec:	460f      	mov	r7, r1
 8003dee:	dc0c      	bgt.n	8003e0a <__ieee754_rem_pio2+0x19a>
 8003df0:	1e6a      	subs	r2, r5, #1
 8003df2:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <__ieee754_rem_pio2+0x32c>)
 8003df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df8:	4543      	cmp	r3, r8
 8003dfa:	d006      	beq.n	8003e0a <__ieee754_rem_pio2+0x19a>
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4650      	mov	r0, sl
 8003e02:	4659      	mov	r1, fp
 8003e04:	f7fc f9e4 	bl	80001d0 <__aeabi_dsub>
 8003e08:	e00e      	b.n	8003e28 <__ieee754_rem_pio2+0x1b8>
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	4650      	mov	r0, sl
 8003e10:	4659      	mov	r1, fp
 8003e12:	f7fc f9dd 	bl	80001d0 <__aeabi_dsub>
 8003e16:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	9a05      	ldr	r2, [sp, #20]
 8003e1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	dc02      	bgt.n	8003e2e <__ieee754_rem_pio2+0x1be>
 8003e28:	e9c4 0100 	strd	r0, r1, [r4]
 8003e2c:	e039      	b.n	8003ea2 <__ieee754_rem_pio2+0x232>
 8003e2e:	a34c      	add	r3, pc, #304	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x2f0>)
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e38:	f7fc fb82 	bl	8000540 <__aeabi_dmul>
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	460f      	mov	r7, r1
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4650      	mov	r0, sl
 8003e46:	4659      	mov	r1, fp
 8003e48:	f7fc f9c2 	bl	80001d0 <__aeabi_dsub>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4680      	mov	r8, r0
 8003e52:	4689      	mov	r9, r1
 8003e54:	4650      	mov	r0, sl
 8003e56:	4659      	mov	r1, fp
 8003e58:	f7fc f9ba 	bl	80001d0 <__aeabi_dsub>
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	463b      	mov	r3, r7
 8003e60:	f7fc f9b6 	bl	80001d0 <__aeabi_dsub>
 8003e64:	a340      	add	r3, pc, #256	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x2f8>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	460f      	mov	r7, r1
 8003e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e72:	f7fc fb65 	bl	8000540 <__aeabi_dmul>
 8003e76:	4632      	mov	r2, r6
 8003e78:	463b      	mov	r3, r7
 8003e7a:	f7fc f9a9 	bl	80001d0 <__aeabi_dsub>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4606      	mov	r6, r0
 8003e84:	460f      	mov	r7, r1
 8003e86:	4640      	mov	r0, r8
 8003e88:	4649      	mov	r1, r9
 8003e8a:	f7fc f9a1 	bl	80001d0 <__aeabi_dsub>
 8003e8e:	9a05      	ldr	r2, [sp, #20]
 8003e90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b31      	cmp	r3, #49	; 0x31
 8003e98:	dc20      	bgt.n	8003edc <__ieee754_rem_pio2+0x26c>
 8003e9a:	e9c4 0100 	strd	r0, r1, [r4]
 8003e9e:	46c2      	mov	sl, r8
 8003ea0:	46cb      	mov	fp, r9
 8003ea2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	4659      	mov	r1, fp
 8003eae:	f7fc f98f 	bl	80001d0 <__aeabi_dsub>
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4632      	mov	r2, r6
 8003eb6:	f7fc f98b 	bl	80001d0 <__aeabi_dsub>
 8003eba:	9b04      	ldr	r3, [sp, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ec2:	f6bf af11 	bge.w	8003ce8 <__ieee754_rem_pio2+0x78>
 8003ec6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	f8c4 8000 	str.w	r8, [r4]
 8003ed0:	60a0      	str	r0, [r4, #8]
 8003ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ed6:	60e3      	str	r3, [r4, #12]
 8003ed8:	426d      	negs	r5, r5
 8003eda:	e705      	b.n	8003ce8 <__ieee754_rem_pio2+0x78>
 8003edc:	a326      	add	r3, pc, #152	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x308>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ee6:	f7fc fb2b 	bl	8000540 <__aeabi_dmul>
 8003eea:	4606      	mov	r6, r0
 8003eec:	460f      	mov	r7, r1
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	f7fc f96b 	bl	80001d0 <__aeabi_dsub>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4682      	mov	sl, r0
 8003f00:	468b      	mov	fp, r1
 8003f02:	4640      	mov	r0, r8
 8003f04:	4649      	mov	r1, r9
 8003f06:	f7fc f963 	bl	80001d0 <__aeabi_dsub>
 8003f0a:	4632      	mov	r2, r6
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	f7fc f95f 	bl	80001d0 <__aeabi_dsub>
 8003f12:	a31b      	add	r3, pc, #108	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x310>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	4606      	mov	r6, r0
 8003f1a:	460f      	mov	r7, r1
 8003f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f20:	f7fc fb0e 	bl	8000540 <__aeabi_dmul>
 8003f24:	4632      	mov	r2, r6
 8003f26:	463b      	mov	r3, r7
 8003f28:	f7fc f952 	bl	80001d0 <__aeabi_dsub>
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	e764      	b.n	8003dfc <__ieee754_rem_pio2+0x18c>
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <__ieee754_rem_pio2+0x330>)
 8003f34:	4598      	cmp	r8, r3
 8003f36:	dd35      	ble.n	8003fa4 <__ieee754_rem_pio2+0x334>
 8003f38:	ee10 2a10 	vmov	r2, s0
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	4630      	mov	r0, r6
 8003f40:	4639      	mov	r1, r7
 8003f42:	f7fc f945 	bl	80001d0 <__aeabi_dsub>
 8003f46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f4a:	e9c4 0100 	strd	r0, r1, [r4]
 8003f4e:	e6a1      	b.n	8003c94 <__ieee754_rem_pio2+0x24>
 8003f50:	54400000 	.word	0x54400000
 8003f54:	3ff921fb 	.word	0x3ff921fb
 8003f58:	1a626331 	.word	0x1a626331
 8003f5c:	3dd0b461 	.word	0x3dd0b461
 8003f60:	1a600000 	.word	0x1a600000
 8003f64:	3dd0b461 	.word	0x3dd0b461
 8003f68:	2e037073 	.word	0x2e037073
 8003f6c:	3ba3198a 	.word	0x3ba3198a
 8003f70:	6dc9c883 	.word	0x6dc9c883
 8003f74:	3fe45f30 	.word	0x3fe45f30
 8003f78:	2e000000 	.word	0x2e000000
 8003f7c:	3ba3198a 	.word	0x3ba3198a
 8003f80:	252049c1 	.word	0x252049c1
 8003f84:	397b839a 	.word	0x397b839a
 8003f88:	3fe921fb 	.word	0x3fe921fb
 8003f8c:	4002d97b 	.word	0x4002d97b
 8003f90:	3ff921fb 	.word	0x3ff921fb
 8003f94:	413921fb 	.word	0x413921fb
 8003f98:	3fe00000 	.word	0x3fe00000
 8003f9c:	08004c50 	.word	0x08004c50
 8003fa0:	7fefffff 	.word	0x7fefffff
 8003fa4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003fa8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003fac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	460f      	mov	r7, r1
 8003fb4:	f7fc fd5e 	bl	8000a74 <__aeabi_d2iz>
 8003fb8:	f7fc fa58 	bl	800046c <__aeabi_i2d>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003fc8:	f7fc f902 	bl	80001d0 <__aeabi_dsub>
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <__ieee754_rem_pio2+0x3dc>)
 8003fd0:	f7fc fab6 	bl	8000540 <__aeabi_dmul>
 8003fd4:	460f      	mov	r7, r1
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	f7fc fd4c 	bl	8000a74 <__aeabi_d2iz>
 8003fdc:	f7fc fa46 	bl	800046c <__aeabi_i2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	4639      	mov	r1, r7
 8003fe8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003fec:	f7fc f8f0 	bl	80001d0 <__aeabi_dsub>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <__ieee754_rem_pio2+0x3dc>)
 8003ff4:	f7fc faa4 	bl	8000540 <__aeabi_dmul>
 8003ff8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ffc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004000:	f04f 0803 	mov.w	r8, #3
 8004004:	2600      	movs	r6, #0
 8004006:	2700      	movs	r7, #0
 8004008:	4632      	mov	r2, r6
 800400a:	463b      	mov	r3, r7
 800400c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004010:	f108 3aff 	add.w	sl, r8, #4294967295
 8004014:	f7fc fcfc 	bl	8000a10 <__aeabi_dcmpeq>
 8004018:	b9b0      	cbnz	r0, 8004048 <__ieee754_rem_pio2+0x3d8>
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <__ieee754_rem_pio2+0x3e0>)
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	2302      	movs	r3, #2
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	462a      	mov	r2, r5
 8004024:	4643      	mov	r3, r8
 8004026:	4621      	mov	r1, r4
 8004028:	a806      	add	r0, sp, #24
 800402a:	f000 f8dd 	bl	80041e8 <__kernel_rem_pio2>
 800402e:	9b04      	ldr	r3, [sp, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	4605      	mov	r5, r0
 8004034:	f6bf ae58 	bge.w	8003ce8 <__ieee754_rem_pio2+0x78>
 8004038:	6863      	ldr	r3, [r4, #4]
 800403a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800403e:	6063      	str	r3, [r4, #4]
 8004040:	68e3      	ldr	r3, [r4, #12]
 8004042:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004046:	e746      	b.n	8003ed6 <__ieee754_rem_pio2+0x266>
 8004048:	46d0      	mov	r8, sl
 800404a:	e7dd      	b.n	8004008 <__ieee754_rem_pio2+0x398>
 800404c:	41700000 	.word	0x41700000
 8004050:	08004cd0 	.word	0x08004cd0
 8004054:	00000000 	.word	0x00000000

08004058 <__kernel_cos>:
 8004058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	ec59 8b10 	vmov	r8, r9, d0
 8004060:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004064:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004068:	ed2d 8b02 	vpush	{d8}
 800406c:	eeb0 8a41 	vmov.f32	s16, s2
 8004070:	eef0 8a61 	vmov.f32	s17, s3
 8004074:	da07      	bge.n	8004086 <__kernel_cos+0x2e>
 8004076:	ee10 0a10 	vmov	r0, s0
 800407a:	4649      	mov	r1, r9
 800407c:	f7fc fcfa 	bl	8000a74 <__aeabi_d2iz>
 8004080:	2800      	cmp	r0, #0
 8004082:	f000 8089 	beq.w	8004198 <__kernel_cos+0x140>
 8004086:	4642      	mov	r2, r8
 8004088:	464b      	mov	r3, r9
 800408a:	4640      	mov	r0, r8
 800408c:	4649      	mov	r1, r9
 800408e:	f7fc fa57 	bl	8000540 <__aeabi_dmul>
 8004092:	2200      	movs	r2, #0
 8004094:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <__kernel_cos+0x178>)
 8004096:	4604      	mov	r4, r0
 8004098:	460d      	mov	r5, r1
 800409a:	f7fc fa51 	bl	8000540 <__aeabi_dmul>
 800409e:	a340      	add	r3, pc, #256	; (adr r3, 80041a0 <__kernel_cos+0x148>)
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	4682      	mov	sl, r0
 80040a6:	468b      	mov	fp, r1
 80040a8:	4620      	mov	r0, r4
 80040aa:	4629      	mov	r1, r5
 80040ac:	f7fc fa48 	bl	8000540 <__aeabi_dmul>
 80040b0:	a33d      	add	r3, pc, #244	; (adr r3, 80041a8 <__kernel_cos+0x150>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc f88d 	bl	80001d4 <__adddf3>
 80040ba:	4622      	mov	r2, r4
 80040bc:	462b      	mov	r3, r5
 80040be:	f7fc fa3f 	bl	8000540 <__aeabi_dmul>
 80040c2:	a33b      	add	r3, pc, #236	; (adr r3, 80041b0 <__kernel_cos+0x158>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc f882 	bl	80001d0 <__aeabi_dsub>
 80040cc:	4622      	mov	r2, r4
 80040ce:	462b      	mov	r3, r5
 80040d0:	f7fc fa36 	bl	8000540 <__aeabi_dmul>
 80040d4:	a338      	add	r3, pc, #224	; (adr r3, 80041b8 <__kernel_cos+0x160>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f7fc f87b 	bl	80001d4 <__adddf3>
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	f7fc fa2d 	bl	8000540 <__aeabi_dmul>
 80040e6:	a336      	add	r3, pc, #216	; (adr r3, 80041c0 <__kernel_cos+0x168>)
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f7fc f870 	bl	80001d0 <__aeabi_dsub>
 80040f0:	4622      	mov	r2, r4
 80040f2:	462b      	mov	r3, r5
 80040f4:	f7fc fa24 	bl	8000540 <__aeabi_dmul>
 80040f8:	a333      	add	r3, pc, #204	; (adr r3, 80041c8 <__kernel_cos+0x170>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc f869 	bl	80001d4 <__adddf3>
 8004102:	4622      	mov	r2, r4
 8004104:	462b      	mov	r3, r5
 8004106:	f7fc fa1b 	bl	8000540 <__aeabi_dmul>
 800410a:	4622      	mov	r2, r4
 800410c:	462b      	mov	r3, r5
 800410e:	f7fc fa17 	bl	8000540 <__aeabi_dmul>
 8004112:	ec53 2b18 	vmov	r2, r3, d8
 8004116:	4604      	mov	r4, r0
 8004118:	460d      	mov	r5, r1
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc fa0f 	bl	8000540 <__aeabi_dmul>
 8004122:	460b      	mov	r3, r1
 8004124:	4602      	mov	r2, r0
 8004126:	4629      	mov	r1, r5
 8004128:	4620      	mov	r0, r4
 800412a:	f7fc f851 	bl	80001d0 <__aeabi_dsub>
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <__kernel_cos+0x17c>)
 8004130:	429e      	cmp	r6, r3
 8004132:	4680      	mov	r8, r0
 8004134:	4689      	mov	r9, r1
 8004136:	dc11      	bgt.n	800415c <__kernel_cos+0x104>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4650      	mov	r0, sl
 800413e:	4659      	mov	r1, fp
 8004140:	f7fc f846 	bl	80001d0 <__aeabi_dsub>
 8004144:	460b      	mov	r3, r1
 8004146:	4924      	ldr	r1, [pc, #144]	; (80041d8 <__kernel_cos+0x180>)
 8004148:	4602      	mov	r2, r0
 800414a:	2000      	movs	r0, #0
 800414c:	f7fc f840 	bl	80001d0 <__aeabi_dsub>
 8004150:	ecbd 8b02 	vpop	{d8}
 8004154:	ec41 0b10 	vmov	d0, r0, r1
 8004158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415c:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <__kernel_cos+0x184>)
 800415e:	491e      	ldr	r1, [pc, #120]	; (80041d8 <__kernel_cos+0x180>)
 8004160:	429e      	cmp	r6, r3
 8004162:	bfcc      	ite	gt
 8004164:	4d1e      	ldrgt	r5, [pc, #120]	; (80041e0 <__kernel_cos+0x188>)
 8004166:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800416a:	2400      	movs	r4, #0
 800416c:	4622      	mov	r2, r4
 800416e:	462b      	mov	r3, r5
 8004170:	2000      	movs	r0, #0
 8004172:	f7fc f82d 	bl	80001d0 <__aeabi_dsub>
 8004176:	4622      	mov	r2, r4
 8004178:	4606      	mov	r6, r0
 800417a:	460f      	mov	r7, r1
 800417c:	462b      	mov	r3, r5
 800417e:	4650      	mov	r0, sl
 8004180:	4659      	mov	r1, fp
 8004182:	f7fc f825 	bl	80001d0 <__aeabi_dsub>
 8004186:	4642      	mov	r2, r8
 8004188:	464b      	mov	r3, r9
 800418a:	f7fc f821 	bl	80001d0 <__aeabi_dsub>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4630      	mov	r0, r6
 8004194:	4639      	mov	r1, r7
 8004196:	e7d9      	b.n	800414c <__kernel_cos+0xf4>
 8004198:	2000      	movs	r0, #0
 800419a:	490f      	ldr	r1, [pc, #60]	; (80041d8 <__kernel_cos+0x180>)
 800419c:	e7d8      	b.n	8004150 <__kernel_cos+0xf8>
 800419e:	bf00      	nop
 80041a0:	be8838d4 	.word	0xbe8838d4
 80041a4:	bda8fae9 	.word	0xbda8fae9
 80041a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80041ac:	3e21ee9e 	.word	0x3e21ee9e
 80041b0:	809c52ad 	.word	0x809c52ad
 80041b4:	3e927e4f 	.word	0x3e927e4f
 80041b8:	19cb1590 	.word	0x19cb1590
 80041bc:	3efa01a0 	.word	0x3efa01a0
 80041c0:	16c15177 	.word	0x16c15177
 80041c4:	3f56c16c 	.word	0x3f56c16c
 80041c8:	5555554c 	.word	0x5555554c
 80041cc:	3fa55555 	.word	0x3fa55555
 80041d0:	3fe00000 	.word	0x3fe00000
 80041d4:	3fd33332 	.word	0x3fd33332
 80041d8:	3ff00000 	.word	0x3ff00000
 80041dc:	3fe90000 	.word	0x3fe90000
 80041e0:	3fd20000 	.word	0x3fd20000
 80041e4:	00000000 	.word	0x00000000

080041e8 <__kernel_rem_pio2>:
 80041e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ec:	ed2d 8b02 	vpush	{d8}
 80041f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80041f4:	1ed4      	subs	r4, r2, #3
 80041f6:	9308      	str	r3, [sp, #32]
 80041f8:	9101      	str	r1, [sp, #4]
 80041fa:	4bc5      	ldr	r3, [pc, #788]	; (8004510 <__kernel_rem_pio2+0x328>)
 80041fc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80041fe:	9009      	str	r0, [sp, #36]	; 0x24
 8004200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	9b08      	ldr	r3, [sp, #32]
 8004208:	3b01      	subs	r3, #1
 800420a:	9307      	str	r3, [sp, #28]
 800420c:	2318      	movs	r3, #24
 800420e:	fb94 f4f3 	sdiv	r4, r4, r3
 8004212:	f06f 0317 	mvn.w	r3, #23
 8004216:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800421a:	fb04 3303 	mla	r3, r4, r3, r3
 800421e:	eb03 0a02 	add.w	sl, r3, r2
 8004222:	9b04      	ldr	r3, [sp, #16]
 8004224:	9a07      	ldr	r2, [sp, #28]
 8004226:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004500 <__kernel_rem_pio2+0x318>
 800422a:	eb03 0802 	add.w	r8, r3, r2
 800422e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004230:	1aa7      	subs	r7, r4, r2
 8004232:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004236:	ae22      	add	r6, sp, #136	; 0x88
 8004238:	2500      	movs	r5, #0
 800423a:	4545      	cmp	r5, r8
 800423c:	dd13      	ble.n	8004266 <__kernel_rem_pio2+0x7e>
 800423e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004500 <__kernel_rem_pio2+0x318>
 8004242:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004246:	2600      	movs	r6, #0
 8004248:	9b04      	ldr	r3, [sp, #16]
 800424a:	429e      	cmp	r6, r3
 800424c:	dc32      	bgt.n	80042b4 <__kernel_rem_pio2+0xcc>
 800424e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004250:	9302      	str	r3, [sp, #8]
 8004252:	9b08      	ldr	r3, [sp, #32]
 8004254:	199d      	adds	r5, r3, r6
 8004256:	ab22      	add	r3, sp, #136	; 0x88
 8004258:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800425c:	9306      	str	r3, [sp, #24]
 800425e:	ec59 8b18 	vmov	r8, r9, d8
 8004262:	2700      	movs	r7, #0
 8004264:	e01f      	b.n	80042a6 <__kernel_rem_pio2+0xbe>
 8004266:	42ef      	cmn	r7, r5
 8004268:	d407      	bmi.n	800427a <__kernel_rem_pio2+0x92>
 800426a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800426e:	f7fc f8fd 	bl	800046c <__aeabi_i2d>
 8004272:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004276:	3501      	adds	r5, #1
 8004278:	e7df      	b.n	800423a <__kernel_rem_pio2+0x52>
 800427a:	ec51 0b18 	vmov	r0, r1, d8
 800427e:	e7f8      	b.n	8004272 <__kernel_rem_pio2+0x8a>
 8004280:	9906      	ldr	r1, [sp, #24]
 8004282:	9d02      	ldr	r5, [sp, #8]
 8004284:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004288:	9106      	str	r1, [sp, #24]
 800428a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800428e:	9502      	str	r5, [sp, #8]
 8004290:	f7fc f956 	bl	8000540 <__aeabi_dmul>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4640      	mov	r0, r8
 800429a:	4649      	mov	r1, r9
 800429c:	f7fb ff9a 	bl	80001d4 <__adddf3>
 80042a0:	3701      	adds	r7, #1
 80042a2:	4680      	mov	r8, r0
 80042a4:	4689      	mov	r9, r1
 80042a6:	9b07      	ldr	r3, [sp, #28]
 80042a8:	429f      	cmp	r7, r3
 80042aa:	dde9      	ble.n	8004280 <__kernel_rem_pio2+0x98>
 80042ac:	e8eb 8902 	strd	r8, r9, [fp], #8
 80042b0:	3601      	adds	r6, #1
 80042b2:	e7c9      	b.n	8004248 <__kernel_rem_pio2+0x60>
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	aa0e      	add	r2, sp, #56	; 0x38
 80042b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80042bc:	930c      	str	r3, [sp, #48]	; 0x30
 80042be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80042c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80042c4:	9c04      	ldr	r4, [sp, #16]
 80042c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042c8:	ab9a      	add	r3, sp, #616	; 0x268
 80042ca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80042ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80042d6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80042da:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80042de:	ab9a      	add	r3, sp, #616	; 0x268
 80042e0:	445b      	add	r3, fp
 80042e2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80042e6:	2500      	movs	r5, #0
 80042e8:	1b63      	subs	r3, r4, r5
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	dc78      	bgt.n	80043e0 <__kernel_rem_pio2+0x1f8>
 80042ee:	4650      	mov	r0, sl
 80042f0:	ec49 8b10 	vmov	d0, r8, r9
 80042f4:	f000 fc00 	bl	8004af8 <scalbn>
 80042f8:	ec57 6b10 	vmov	r6, r7, d0
 80042fc:	2200      	movs	r2, #0
 80042fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004302:	ee10 0a10 	vmov	r0, s0
 8004306:	4639      	mov	r1, r7
 8004308:	f7fc f91a 	bl	8000540 <__aeabi_dmul>
 800430c:	ec41 0b10 	vmov	d0, r0, r1
 8004310:	f000 fb6e 	bl	80049f0 <floor>
 8004314:	2200      	movs	r2, #0
 8004316:	ec51 0b10 	vmov	r0, r1, d0
 800431a:	4b7e      	ldr	r3, [pc, #504]	; (8004514 <__kernel_rem_pio2+0x32c>)
 800431c:	f7fc f910 	bl	8000540 <__aeabi_dmul>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4630      	mov	r0, r6
 8004326:	4639      	mov	r1, r7
 8004328:	f7fb ff52 	bl	80001d0 <__aeabi_dsub>
 800432c:	460f      	mov	r7, r1
 800432e:	4606      	mov	r6, r0
 8004330:	f7fc fba0 	bl	8000a74 <__aeabi_d2iz>
 8004334:	9006      	str	r0, [sp, #24]
 8004336:	f7fc f899 	bl	800046c <__aeabi_i2d>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4630      	mov	r0, r6
 8004340:	4639      	mov	r1, r7
 8004342:	f7fb ff45 	bl	80001d0 <__aeabi_dsub>
 8004346:	f1ba 0f00 	cmp.w	sl, #0
 800434a:	4606      	mov	r6, r0
 800434c:	460f      	mov	r7, r1
 800434e:	dd6c      	ble.n	800442a <__kernel_rem_pio2+0x242>
 8004350:	1e62      	subs	r2, r4, #1
 8004352:	ab0e      	add	r3, sp, #56	; 0x38
 8004354:	f1ca 0118 	rsb	r1, sl, #24
 8004358:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800435c:	9d06      	ldr	r5, [sp, #24]
 800435e:	fa40 f301 	asr.w	r3, r0, r1
 8004362:	441d      	add	r5, r3
 8004364:	408b      	lsls	r3, r1
 8004366:	1ac0      	subs	r0, r0, r3
 8004368:	ab0e      	add	r3, sp, #56	; 0x38
 800436a:	9506      	str	r5, [sp, #24]
 800436c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004370:	f1ca 0317 	rsb	r3, sl, #23
 8004374:	fa40 f303 	asr.w	r3, r0, r3
 8004378:	9302      	str	r3, [sp, #8]
 800437a:	9b02      	ldr	r3, [sp, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	dd62      	ble.n	8004446 <__kernel_rem_pio2+0x25e>
 8004380:	9b06      	ldr	r3, [sp, #24]
 8004382:	2200      	movs	r2, #0
 8004384:	3301      	adds	r3, #1
 8004386:	9306      	str	r3, [sp, #24]
 8004388:	4615      	mov	r5, r2
 800438a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800438e:	4294      	cmp	r4, r2
 8004390:	f300 8095 	bgt.w	80044be <__kernel_rem_pio2+0x2d6>
 8004394:	f1ba 0f00 	cmp.w	sl, #0
 8004398:	dd07      	ble.n	80043aa <__kernel_rem_pio2+0x1c2>
 800439a:	f1ba 0f01 	cmp.w	sl, #1
 800439e:	f000 80a2 	beq.w	80044e6 <__kernel_rem_pio2+0x2fe>
 80043a2:	f1ba 0f02 	cmp.w	sl, #2
 80043a6:	f000 80c1 	beq.w	800452c <__kernel_rem_pio2+0x344>
 80043aa:	9b02      	ldr	r3, [sp, #8]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d14a      	bne.n	8004446 <__kernel_rem_pio2+0x25e>
 80043b0:	4632      	mov	r2, r6
 80043b2:	463b      	mov	r3, r7
 80043b4:	2000      	movs	r0, #0
 80043b6:	4958      	ldr	r1, [pc, #352]	; (8004518 <__kernel_rem_pio2+0x330>)
 80043b8:	f7fb ff0a 	bl	80001d0 <__aeabi_dsub>
 80043bc:	4606      	mov	r6, r0
 80043be:	460f      	mov	r7, r1
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d040      	beq.n	8004446 <__kernel_rem_pio2+0x25e>
 80043c4:	4650      	mov	r0, sl
 80043c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004508 <__kernel_rem_pio2+0x320>
 80043ca:	f000 fb95 	bl	8004af8 <scalbn>
 80043ce:	4630      	mov	r0, r6
 80043d0:	4639      	mov	r1, r7
 80043d2:	ec53 2b10 	vmov	r2, r3, d0
 80043d6:	f7fb fefb 	bl	80001d0 <__aeabi_dsub>
 80043da:	4606      	mov	r6, r0
 80043dc:	460f      	mov	r7, r1
 80043de:	e032      	b.n	8004446 <__kernel_rem_pio2+0x25e>
 80043e0:	2200      	movs	r2, #0
 80043e2:	4b4e      	ldr	r3, [pc, #312]	; (800451c <__kernel_rem_pio2+0x334>)
 80043e4:	4640      	mov	r0, r8
 80043e6:	4649      	mov	r1, r9
 80043e8:	f7fc f8aa 	bl	8000540 <__aeabi_dmul>
 80043ec:	f7fc fb42 	bl	8000a74 <__aeabi_d2iz>
 80043f0:	f7fc f83c 	bl	800046c <__aeabi_i2d>
 80043f4:	2200      	movs	r2, #0
 80043f6:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <__kernel_rem_pio2+0x338>)
 80043f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043fc:	f7fc f8a0 	bl	8000540 <__aeabi_dmul>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	f7fb fee2 	bl	80001d0 <__aeabi_dsub>
 800440c:	f7fc fb32 	bl	8000a74 <__aeabi_d2iz>
 8004410:	ab0e      	add	r3, sp, #56	; 0x38
 8004412:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004416:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800441a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800441e:	f7fb fed9 	bl	80001d4 <__adddf3>
 8004422:	3501      	adds	r5, #1
 8004424:	4680      	mov	r8, r0
 8004426:	4689      	mov	r9, r1
 8004428:	e75e      	b.n	80042e8 <__kernel_rem_pio2+0x100>
 800442a:	d105      	bne.n	8004438 <__kernel_rem_pio2+0x250>
 800442c:	1e63      	subs	r3, r4, #1
 800442e:	aa0e      	add	r2, sp, #56	; 0x38
 8004430:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004434:	15c3      	asrs	r3, r0, #23
 8004436:	e79f      	b.n	8004378 <__kernel_rem_pio2+0x190>
 8004438:	2200      	movs	r2, #0
 800443a:	4b3a      	ldr	r3, [pc, #232]	; (8004524 <__kernel_rem_pio2+0x33c>)
 800443c:	f7fc fb06 	bl	8000a4c <__aeabi_dcmpge>
 8004440:	2800      	cmp	r0, #0
 8004442:	d139      	bne.n	80044b8 <__kernel_rem_pio2+0x2d0>
 8004444:	9002      	str	r0, [sp, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	2300      	movs	r3, #0
 800444a:	4630      	mov	r0, r6
 800444c:	4639      	mov	r1, r7
 800444e:	f7fc fadf 	bl	8000a10 <__aeabi_dcmpeq>
 8004452:	2800      	cmp	r0, #0
 8004454:	f000 80c7 	beq.w	80045e6 <__kernel_rem_pio2+0x3fe>
 8004458:	1e65      	subs	r5, r4, #1
 800445a:	462b      	mov	r3, r5
 800445c:	2200      	movs	r2, #0
 800445e:	9904      	ldr	r1, [sp, #16]
 8004460:	428b      	cmp	r3, r1
 8004462:	da6a      	bge.n	800453a <__kernel_rem_pio2+0x352>
 8004464:	2a00      	cmp	r2, #0
 8004466:	f000 8088 	beq.w	800457a <__kernel_rem_pio2+0x392>
 800446a:	ab0e      	add	r3, sp, #56	; 0x38
 800446c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004470:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80b4 	beq.w	80045e2 <__kernel_rem_pio2+0x3fa>
 800447a:	4650      	mov	r0, sl
 800447c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004508 <__kernel_rem_pio2+0x320>
 8004480:	f000 fb3a 	bl	8004af8 <scalbn>
 8004484:	00ec      	lsls	r4, r5, #3
 8004486:	ab72      	add	r3, sp, #456	; 0x1c8
 8004488:	191e      	adds	r6, r3, r4
 800448a:	ec59 8b10 	vmov	r8, r9, d0
 800448e:	f106 0a08 	add.w	sl, r6, #8
 8004492:	462f      	mov	r7, r5
 8004494:	2f00      	cmp	r7, #0
 8004496:	f280 80df 	bge.w	8004658 <__kernel_rem_pio2+0x470>
 800449a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004500 <__kernel_rem_pio2+0x318>
 800449e:	f04f 0a00 	mov.w	sl, #0
 80044a2:	eba5 030a 	sub.w	r3, r5, sl
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f2c0 810a 	blt.w	80046c0 <__kernel_rem_pio2+0x4d8>
 80044ac:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004528 <__kernel_rem_pio2+0x340>
 80044b0:	ec59 8b18 	vmov	r8, r9, d8
 80044b4:	2700      	movs	r7, #0
 80044b6:	e0f5      	b.n	80046a4 <__kernel_rem_pio2+0x4bc>
 80044b8:	2302      	movs	r3, #2
 80044ba:	9302      	str	r3, [sp, #8]
 80044bc:	e760      	b.n	8004380 <__kernel_rem_pio2+0x198>
 80044be:	ab0e      	add	r3, sp, #56	; 0x38
 80044c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c4:	b94d      	cbnz	r5, 80044da <__kernel_rem_pio2+0x2f2>
 80044c6:	b12b      	cbz	r3, 80044d4 <__kernel_rem_pio2+0x2ec>
 80044c8:	a80e      	add	r0, sp, #56	; 0x38
 80044ca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80044ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80044d2:	2301      	movs	r3, #1
 80044d4:	3201      	adds	r2, #1
 80044d6:	461d      	mov	r5, r3
 80044d8:	e759      	b.n	800438e <__kernel_rem_pio2+0x1a6>
 80044da:	a80e      	add	r0, sp, #56	; 0x38
 80044dc:	1acb      	subs	r3, r1, r3
 80044de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80044e2:	462b      	mov	r3, r5
 80044e4:	e7f6      	b.n	80044d4 <__kernel_rem_pio2+0x2ec>
 80044e6:	1e62      	subs	r2, r4, #1
 80044e8:	ab0e      	add	r3, sp, #56	; 0x38
 80044ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80044f2:	a90e      	add	r1, sp, #56	; 0x38
 80044f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80044f8:	e757      	b.n	80043aa <__kernel_rem_pio2+0x1c2>
 80044fa:	bf00      	nop
 80044fc:	f3af 8000 	nop.w
	...
 800450c:	3ff00000 	.word	0x3ff00000
 8004510:	08004e18 	.word	0x08004e18
 8004514:	40200000 	.word	0x40200000
 8004518:	3ff00000 	.word	0x3ff00000
 800451c:	3e700000 	.word	0x3e700000
 8004520:	41700000 	.word	0x41700000
 8004524:	3fe00000 	.word	0x3fe00000
 8004528:	08004dd8 	.word	0x08004dd8
 800452c:	1e62      	subs	r2, r4, #1
 800452e:	ab0e      	add	r3, sp, #56	; 0x38
 8004530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004534:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004538:	e7db      	b.n	80044f2 <__kernel_rem_pio2+0x30a>
 800453a:	a90e      	add	r1, sp, #56	; 0x38
 800453c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004540:	3b01      	subs	r3, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	e78b      	b.n	800445e <__kernel_rem_pio2+0x276>
 8004546:	3301      	adds	r3, #1
 8004548:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800454c:	2900      	cmp	r1, #0
 800454e:	d0fa      	beq.n	8004546 <__kernel_rem_pio2+0x35e>
 8004550:	9a08      	ldr	r2, [sp, #32]
 8004552:	4422      	add	r2, r4
 8004554:	00d2      	lsls	r2, r2, #3
 8004556:	a922      	add	r1, sp, #136	; 0x88
 8004558:	18e3      	adds	r3, r4, r3
 800455a:	9206      	str	r2, [sp, #24]
 800455c:	440a      	add	r2, r1
 800455e:	9302      	str	r3, [sp, #8]
 8004560:	f10b 0108 	add.w	r1, fp, #8
 8004564:	f102 0308 	add.w	r3, r2, #8
 8004568:	1c66      	adds	r6, r4, #1
 800456a:	910a      	str	r1, [sp, #40]	; 0x28
 800456c:	2500      	movs	r5, #0
 800456e:	930d      	str	r3, [sp, #52]	; 0x34
 8004570:	9b02      	ldr	r3, [sp, #8]
 8004572:	42b3      	cmp	r3, r6
 8004574:	da04      	bge.n	8004580 <__kernel_rem_pio2+0x398>
 8004576:	461c      	mov	r4, r3
 8004578:	e6a6      	b.n	80042c8 <__kernel_rem_pio2+0xe0>
 800457a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800457c:	2301      	movs	r3, #1
 800457e:	e7e3      	b.n	8004548 <__kernel_rem_pio2+0x360>
 8004580:	9b06      	ldr	r3, [sp, #24]
 8004582:	18ef      	adds	r7, r5, r3
 8004584:	ab22      	add	r3, sp, #136	; 0x88
 8004586:	441f      	add	r7, r3
 8004588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800458a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800458e:	f7fb ff6d 	bl	800046c <__aeabi_i2d>
 8004592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004594:	461c      	mov	r4, r3
 8004596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004598:	e9c7 0100 	strd	r0, r1, [r7]
 800459c:	eb03 0b05 	add.w	fp, r3, r5
 80045a0:	2700      	movs	r7, #0
 80045a2:	f04f 0800 	mov.w	r8, #0
 80045a6:	f04f 0900 	mov.w	r9, #0
 80045aa:	9b07      	ldr	r3, [sp, #28]
 80045ac:	429f      	cmp	r7, r3
 80045ae:	dd08      	ble.n	80045c2 <__kernel_rem_pio2+0x3da>
 80045b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b2:	aa72      	add	r2, sp, #456	; 0x1c8
 80045b4:	18eb      	adds	r3, r5, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80045bc:	3601      	adds	r6, #1
 80045be:	3508      	adds	r5, #8
 80045c0:	e7d6      	b.n	8004570 <__kernel_rem_pio2+0x388>
 80045c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80045c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80045ca:	f7fb ffb9 	bl	8000540 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4640      	mov	r0, r8
 80045d4:	4649      	mov	r1, r9
 80045d6:	f7fb fdfd 	bl	80001d4 <__adddf3>
 80045da:	3701      	adds	r7, #1
 80045dc:	4680      	mov	r8, r0
 80045de:	4689      	mov	r9, r1
 80045e0:	e7e3      	b.n	80045aa <__kernel_rem_pio2+0x3c2>
 80045e2:	3d01      	subs	r5, #1
 80045e4:	e741      	b.n	800446a <__kernel_rem_pio2+0x282>
 80045e6:	f1ca 0000 	rsb	r0, sl, #0
 80045ea:	ec47 6b10 	vmov	d0, r6, r7
 80045ee:	f000 fa83 	bl	8004af8 <scalbn>
 80045f2:	ec57 6b10 	vmov	r6, r7, d0
 80045f6:	2200      	movs	r2, #0
 80045f8:	4b99      	ldr	r3, [pc, #612]	; (8004860 <__kernel_rem_pio2+0x678>)
 80045fa:	ee10 0a10 	vmov	r0, s0
 80045fe:	4639      	mov	r1, r7
 8004600:	f7fc fa24 	bl	8000a4c <__aeabi_dcmpge>
 8004604:	b1f8      	cbz	r0, 8004646 <__kernel_rem_pio2+0x45e>
 8004606:	2200      	movs	r2, #0
 8004608:	4b96      	ldr	r3, [pc, #600]	; (8004864 <__kernel_rem_pio2+0x67c>)
 800460a:	4630      	mov	r0, r6
 800460c:	4639      	mov	r1, r7
 800460e:	f7fb ff97 	bl	8000540 <__aeabi_dmul>
 8004612:	f7fc fa2f 	bl	8000a74 <__aeabi_d2iz>
 8004616:	4680      	mov	r8, r0
 8004618:	f7fb ff28 	bl	800046c <__aeabi_i2d>
 800461c:	2200      	movs	r2, #0
 800461e:	4b90      	ldr	r3, [pc, #576]	; (8004860 <__kernel_rem_pio2+0x678>)
 8004620:	f7fb ff8e 	bl	8000540 <__aeabi_dmul>
 8004624:	460b      	mov	r3, r1
 8004626:	4602      	mov	r2, r0
 8004628:	4639      	mov	r1, r7
 800462a:	4630      	mov	r0, r6
 800462c:	f7fb fdd0 	bl	80001d0 <__aeabi_dsub>
 8004630:	f7fc fa20 	bl	8000a74 <__aeabi_d2iz>
 8004634:	1c65      	adds	r5, r4, #1
 8004636:	ab0e      	add	r3, sp, #56	; 0x38
 8004638:	f10a 0a18 	add.w	sl, sl, #24
 800463c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004640:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004644:	e719      	b.n	800447a <__kernel_rem_pio2+0x292>
 8004646:	4630      	mov	r0, r6
 8004648:	4639      	mov	r1, r7
 800464a:	f7fc fa13 	bl	8000a74 <__aeabi_d2iz>
 800464e:	ab0e      	add	r3, sp, #56	; 0x38
 8004650:	4625      	mov	r5, r4
 8004652:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004656:	e710      	b.n	800447a <__kernel_rem_pio2+0x292>
 8004658:	ab0e      	add	r3, sp, #56	; 0x38
 800465a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800465e:	f7fb ff05 	bl	800046c <__aeabi_i2d>
 8004662:	4642      	mov	r2, r8
 8004664:	464b      	mov	r3, r9
 8004666:	f7fb ff6b 	bl	8000540 <__aeabi_dmul>
 800466a:	2200      	movs	r2, #0
 800466c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004670:	4b7c      	ldr	r3, [pc, #496]	; (8004864 <__kernel_rem_pio2+0x67c>)
 8004672:	4640      	mov	r0, r8
 8004674:	4649      	mov	r1, r9
 8004676:	f7fb ff63 	bl	8000540 <__aeabi_dmul>
 800467a:	3f01      	subs	r7, #1
 800467c:	4680      	mov	r8, r0
 800467e:	4689      	mov	r9, r1
 8004680:	e708      	b.n	8004494 <__kernel_rem_pio2+0x2ac>
 8004682:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800468e:	f7fb ff57 	bl	8000540 <__aeabi_dmul>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4640      	mov	r0, r8
 8004698:	4649      	mov	r1, r9
 800469a:	f7fb fd9b 	bl	80001d4 <__adddf3>
 800469e:	3701      	adds	r7, #1
 80046a0:	4680      	mov	r8, r0
 80046a2:	4689      	mov	r9, r1
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	429f      	cmp	r7, r3
 80046a8:	dc01      	bgt.n	80046ae <__kernel_rem_pio2+0x4c6>
 80046aa:	45ba      	cmp	sl, r7
 80046ac:	dae9      	bge.n	8004682 <__kernel_rem_pio2+0x49a>
 80046ae:	ab4a      	add	r3, sp, #296	; 0x128
 80046b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80046b4:	e9c3 8900 	strd	r8, r9, [r3]
 80046b8:	f10a 0a01 	add.w	sl, sl, #1
 80046bc:	3e08      	subs	r6, #8
 80046be:	e6f0      	b.n	80044a2 <__kernel_rem_pio2+0x2ba>
 80046c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d85b      	bhi.n	800477e <__kernel_rem_pio2+0x596>
 80046c6:	e8df f003 	tbb	[pc, r3]
 80046ca:	264a      	.short	0x264a
 80046cc:	0226      	.short	0x0226
 80046ce:	ab9a      	add	r3, sp, #616	; 0x268
 80046d0:	441c      	add	r4, r3
 80046d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80046d6:	46a2      	mov	sl, r4
 80046d8:	46ab      	mov	fp, r5
 80046da:	f1bb 0f00 	cmp.w	fp, #0
 80046de:	dc6c      	bgt.n	80047ba <__kernel_rem_pio2+0x5d2>
 80046e0:	46a2      	mov	sl, r4
 80046e2:	46ab      	mov	fp, r5
 80046e4:	f1bb 0f01 	cmp.w	fp, #1
 80046e8:	f300 8086 	bgt.w	80047f8 <__kernel_rem_pio2+0x610>
 80046ec:	2000      	movs	r0, #0
 80046ee:	2100      	movs	r1, #0
 80046f0:	2d01      	cmp	r5, #1
 80046f2:	f300 80a0 	bgt.w	8004836 <__kernel_rem_pio2+0x64e>
 80046f6:	9b02      	ldr	r3, [sp, #8]
 80046f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80046fc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 809e 	bne.w	8004842 <__kernel_rem_pio2+0x65a>
 8004706:	9b01      	ldr	r3, [sp, #4]
 8004708:	e9c3 7800 	strd	r7, r8, [r3]
 800470c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004710:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004714:	e033      	b.n	800477e <__kernel_rem_pio2+0x596>
 8004716:	3408      	adds	r4, #8
 8004718:	ab4a      	add	r3, sp, #296	; 0x128
 800471a:	441c      	add	r4, r3
 800471c:	462e      	mov	r6, r5
 800471e:	2000      	movs	r0, #0
 8004720:	2100      	movs	r1, #0
 8004722:	2e00      	cmp	r6, #0
 8004724:	da3a      	bge.n	800479c <__kernel_rem_pio2+0x5b4>
 8004726:	9b02      	ldr	r3, [sp, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d03d      	beq.n	80047a8 <__kernel_rem_pio2+0x5c0>
 800472c:	4602      	mov	r2, r0
 800472e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004732:	9c01      	ldr	r4, [sp, #4]
 8004734:	e9c4 2300 	strd	r2, r3, [r4]
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004740:	f7fb fd46 	bl	80001d0 <__aeabi_dsub>
 8004744:	ae4c      	add	r6, sp, #304	; 0x130
 8004746:	2401      	movs	r4, #1
 8004748:	42a5      	cmp	r5, r4
 800474a:	da30      	bge.n	80047ae <__kernel_rem_pio2+0x5c6>
 800474c:	9b02      	ldr	r3, [sp, #8]
 800474e:	b113      	cbz	r3, 8004756 <__kernel_rem_pio2+0x56e>
 8004750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004754:	4619      	mov	r1, r3
 8004756:	9b01      	ldr	r3, [sp, #4]
 8004758:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800475c:	e00f      	b.n	800477e <__kernel_rem_pio2+0x596>
 800475e:	ab9a      	add	r3, sp, #616	; 0x268
 8004760:	441c      	add	r4, r3
 8004762:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004766:	2000      	movs	r0, #0
 8004768:	2100      	movs	r1, #0
 800476a:	2d00      	cmp	r5, #0
 800476c:	da10      	bge.n	8004790 <__kernel_rem_pio2+0x5a8>
 800476e:	9b02      	ldr	r3, [sp, #8]
 8004770:	b113      	cbz	r3, 8004778 <__kernel_rem_pio2+0x590>
 8004772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004776:	4619      	mov	r1, r3
 8004778:	9b01      	ldr	r3, [sp, #4]
 800477a:	e9c3 0100 	strd	r0, r1, [r3]
 800477e:	9b06      	ldr	r3, [sp, #24]
 8004780:	f003 0007 	and.w	r0, r3, #7
 8004784:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004788:	ecbd 8b02 	vpop	{d8}
 800478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004790:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004794:	f7fb fd1e 	bl	80001d4 <__adddf3>
 8004798:	3d01      	subs	r5, #1
 800479a:	e7e6      	b.n	800476a <__kernel_rem_pio2+0x582>
 800479c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80047a0:	f7fb fd18 	bl	80001d4 <__adddf3>
 80047a4:	3e01      	subs	r6, #1
 80047a6:	e7bc      	b.n	8004722 <__kernel_rem_pio2+0x53a>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	e7c1      	b.n	8004732 <__kernel_rem_pio2+0x54a>
 80047ae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80047b2:	f7fb fd0f 	bl	80001d4 <__adddf3>
 80047b6:	3401      	adds	r4, #1
 80047b8:	e7c6      	b.n	8004748 <__kernel_rem_pio2+0x560>
 80047ba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80047be:	ed3a 7b02 	vldmdb	sl!, {d7}
 80047c2:	4640      	mov	r0, r8
 80047c4:	ec53 2b17 	vmov	r2, r3, d7
 80047c8:	4649      	mov	r1, r9
 80047ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80047ce:	f7fb fd01 	bl	80001d4 <__adddf3>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4606      	mov	r6, r0
 80047d8:	460f      	mov	r7, r1
 80047da:	4640      	mov	r0, r8
 80047dc:	4649      	mov	r1, r9
 80047de:	f7fb fcf7 	bl	80001d0 <__aeabi_dsub>
 80047e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e6:	f7fb fcf5 	bl	80001d4 <__adddf3>
 80047ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047ee:	e9ca 0100 	strd	r0, r1, [sl]
 80047f2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80047f6:	e770      	b.n	80046da <__kernel_rem_pio2+0x4f2>
 80047f8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80047fc:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004800:	4630      	mov	r0, r6
 8004802:	ec53 2b17 	vmov	r2, r3, d7
 8004806:	4639      	mov	r1, r7
 8004808:	ed8d 7b04 	vstr	d7, [sp, #16]
 800480c:	f7fb fce2 	bl	80001d4 <__adddf3>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4680      	mov	r8, r0
 8004816:	4689      	mov	r9, r1
 8004818:	4630      	mov	r0, r6
 800481a:	4639      	mov	r1, r7
 800481c:	f7fb fcd8 	bl	80001d0 <__aeabi_dsub>
 8004820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004824:	f7fb fcd6 	bl	80001d4 <__adddf3>
 8004828:	f10b 3bff 	add.w	fp, fp, #4294967295
 800482c:	e9ca 0100 	strd	r0, r1, [sl]
 8004830:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8004834:	e756      	b.n	80046e4 <__kernel_rem_pio2+0x4fc>
 8004836:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800483a:	f7fb fccb 	bl	80001d4 <__adddf3>
 800483e:	3d01      	subs	r5, #1
 8004840:	e756      	b.n	80046f0 <__kernel_rem_pio2+0x508>
 8004842:	9b01      	ldr	r3, [sp, #4]
 8004844:	9a01      	ldr	r2, [sp, #4]
 8004846:	601f      	str	r7, [r3, #0]
 8004848:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800484c:	605c      	str	r4, [r3, #4]
 800484e:	609d      	str	r5, [r3, #8]
 8004850:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004854:	60d3      	str	r3, [r2, #12]
 8004856:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800485a:	6110      	str	r0, [r2, #16]
 800485c:	6153      	str	r3, [r2, #20]
 800485e:	e78e      	b.n	800477e <__kernel_rem_pio2+0x596>
 8004860:	41700000 	.word	0x41700000
 8004864:	3e700000 	.word	0x3e700000

08004868 <__kernel_sin>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	ec55 4b10 	vmov	r4, r5, d0
 8004870:	b085      	sub	sp, #20
 8004872:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004876:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800487a:	ed8d 1b00 	vstr	d1, [sp]
 800487e:	9002      	str	r0, [sp, #8]
 8004880:	da06      	bge.n	8004890 <__kernel_sin+0x28>
 8004882:	ee10 0a10 	vmov	r0, s0
 8004886:	4629      	mov	r1, r5
 8004888:	f7fc f8f4 	bl	8000a74 <__aeabi_d2iz>
 800488c:	2800      	cmp	r0, #0
 800488e:	d051      	beq.n	8004934 <__kernel_sin+0xcc>
 8004890:	4622      	mov	r2, r4
 8004892:	462b      	mov	r3, r5
 8004894:	4620      	mov	r0, r4
 8004896:	4629      	mov	r1, r5
 8004898:	f7fb fe52 	bl	8000540 <__aeabi_dmul>
 800489c:	4682      	mov	sl, r0
 800489e:	468b      	mov	fp, r1
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f7fb fe4a 	bl	8000540 <__aeabi_dmul>
 80048ac:	a341      	add	r3, pc, #260	; (adr r3, 80049b4 <__kernel_sin+0x14c>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	4680      	mov	r8, r0
 80048b4:	4689      	mov	r9, r1
 80048b6:	4650      	mov	r0, sl
 80048b8:	4659      	mov	r1, fp
 80048ba:	f7fb fe41 	bl	8000540 <__aeabi_dmul>
 80048be:	a33f      	add	r3, pc, #252	; (adr r3, 80049bc <__kernel_sin+0x154>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fc84 	bl	80001d0 <__aeabi_dsub>
 80048c8:	4652      	mov	r2, sl
 80048ca:	465b      	mov	r3, fp
 80048cc:	f7fb fe38 	bl	8000540 <__aeabi_dmul>
 80048d0:	a33c      	add	r3, pc, #240	; (adr r3, 80049c4 <__kernel_sin+0x15c>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb fc7d 	bl	80001d4 <__adddf3>
 80048da:	4652      	mov	r2, sl
 80048dc:	465b      	mov	r3, fp
 80048de:	f7fb fe2f 	bl	8000540 <__aeabi_dmul>
 80048e2:	a33a      	add	r3, pc, #232	; (adr r3, 80049cc <__kernel_sin+0x164>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fc72 	bl	80001d0 <__aeabi_dsub>
 80048ec:	4652      	mov	r2, sl
 80048ee:	465b      	mov	r3, fp
 80048f0:	f7fb fe26 	bl	8000540 <__aeabi_dmul>
 80048f4:	a337      	add	r3, pc, #220	; (adr r3, 80049d4 <__kernel_sin+0x16c>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fc6b 	bl	80001d4 <__adddf3>
 80048fe:	9b02      	ldr	r3, [sp, #8]
 8004900:	4606      	mov	r6, r0
 8004902:	460f      	mov	r7, r1
 8004904:	b9db      	cbnz	r3, 800493e <__kernel_sin+0xd6>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4650      	mov	r0, sl
 800490c:	4659      	mov	r1, fp
 800490e:	f7fb fe17 	bl	8000540 <__aeabi_dmul>
 8004912:	a325      	add	r3, pc, #148	; (adr r3, 80049a8 <__kernel_sin+0x140>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fc5a 	bl	80001d0 <__aeabi_dsub>
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	f7fb fe0e 	bl	8000540 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fb fc52 	bl	80001d4 <__adddf3>
 8004930:	4604      	mov	r4, r0
 8004932:	460d      	mov	r5, r1
 8004934:	ec45 4b10 	vmov	d0, r4, r5
 8004938:	b005      	add	sp, #20
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	2200      	movs	r2, #0
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <__kernel_sin+0x148>)
 8004942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004946:	f7fb fdfb 	bl	8000540 <__aeabi_dmul>
 800494a:	4632      	mov	r2, r6
 800494c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004950:	463b      	mov	r3, r7
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fb fdf3 	bl	8000540 <__aeabi_dmul>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004962:	f7fb fc35 	bl	80001d0 <__aeabi_dsub>
 8004966:	4652      	mov	r2, sl
 8004968:	465b      	mov	r3, fp
 800496a:	f7fb fde9 	bl	8000540 <__aeabi_dmul>
 800496e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004972:	f7fb fc2d 	bl	80001d0 <__aeabi_dsub>
 8004976:	a30c      	add	r3, pc, #48	; (adr r3, 80049a8 <__kernel_sin+0x140>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	4606      	mov	r6, r0
 800497e:	460f      	mov	r7, r1
 8004980:	4640      	mov	r0, r8
 8004982:	4649      	mov	r1, r9
 8004984:	f7fb fddc 	bl	8000540 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4630      	mov	r0, r6
 800498e:	4639      	mov	r1, r7
 8004990:	f7fb fc20 	bl	80001d4 <__adddf3>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4620      	mov	r0, r4
 800499a:	4629      	mov	r1, r5
 800499c:	f7fb fc18 	bl	80001d0 <__aeabi_dsub>
 80049a0:	e7c6      	b.n	8004930 <__kernel_sin+0xc8>
 80049a2:	bf00      	nop
 80049a4:	f3af 8000 	nop.w
 80049a8:	55555549 	.word	0x55555549
 80049ac:	3fc55555 	.word	0x3fc55555
 80049b0:	3fe00000 	.word	0x3fe00000
 80049b4:	5acfd57c 	.word	0x5acfd57c
 80049b8:	3de5d93a 	.word	0x3de5d93a
 80049bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80049c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80049c4:	57b1fe7d 	.word	0x57b1fe7d
 80049c8:	3ec71de3 	.word	0x3ec71de3
 80049cc:	19c161d5 	.word	0x19c161d5
 80049d0:	3f2a01a0 	.word	0x3f2a01a0
 80049d4:	1110f8a6 	.word	0x1110f8a6
 80049d8:	3f811111 	.word	0x3f811111

080049dc <fabs>:
 80049dc:	ec51 0b10 	vmov	r0, r1, d0
 80049e0:	ee10 2a10 	vmov	r2, s0
 80049e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049e8:	ec43 2b10 	vmov	d0, r2, r3
 80049ec:	4770      	bx	lr
	...

080049f0 <floor>:
 80049f0:	ec51 0b10 	vmov	r0, r1, d0
 80049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80049fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004a00:	2e13      	cmp	r6, #19
 8004a02:	460c      	mov	r4, r1
 8004a04:	ee10 5a10 	vmov	r5, s0
 8004a08:	4680      	mov	r8, r0
 8004a0a:	dc34      	bgt.n	8004a76 <floor+0x86>
 8004a0c:	2e00      	cmp	r6, #0
 8004a0e:	da16      	bge.n	8004a3e <floor+0x4e>
 8004a10:	a335      	add	r3, pc, #212	; (adr r3, 8004ae8 <floor+0xf8>)
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	f7fb fbdd 	bl	80001d4 <__adddf3>
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f7fc f81f 	bl	8000a60 <__aeabi_dcmpgt>
 8004a22:	b148      	cbz	r0, 8004a38 <floor+0x48>
 8004a24:	2c00      	cmp	r4, #0
 8004a26:	da59      	bge.n	8004adc <floor+0xec>
 8004a28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004a2c:	4a30      	ldr	r2, [pc, #192]	; (8004af0 <floor+0x100>)
 8004a2e:	432b      	orrs	r3, r5
 8004a30:	2500      	movs	r5, #0
 8004a32:	42ab      	cmp	r3, r5
 8004a34:	bf18      	it	ne
 8004a36:	4614      	movne	r4, r2
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	e025      	b.n	8004a8a <floor+0x9a>
 8004a3e:	4f2d      	ldr	r7, [pc, #180]	; (8004af4 <floor+0x104>)
 8004a40:	4137      	asrs	r7, r6
 8004a42:	ea01 0307 	and.w	r3, r1, r7
 8004a46:	4303      	orrs	r3, r0
 8004a48:	d01f      	beq.n	8004a8a <floor+0x9a>
 8004a4a:	a327      	add	r3, pc, #156	; (adr r3, 8004ae8 <floor+0xf8>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fbc0 	bl	80001d4 <__adddf3>
 8004a54:	2200      	movs	r2, #0
 8004a56:	2300      	movs	r3, #0
 8004a58:	f7fc f802 	bl	8000a60 <__aeabi_dcmpgt>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d0eb      	beq.n	8004a38 <floor+0x48>
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	bfbe      	ittt	lt
 8004a64:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004a68:	fa43 f606 	asrlt.w	r6, r3, r6
 8004a6c:	19a4      	addlt	r4, r4, r6
 8004a6e:	ea24 0407 	bic.w	r4, r4, r7
 8004a72:	2500      	movs	r5, #0
 8004a74:	e7e0      	b.n	8004a38 <floor+0x48>
 8004a76:	2e33      	cmp	r6, #51	; 0x33
 8004a78:	dd0b      	ble.n	8004a92 <floor+0xa2>
 8004a7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004a7e:	d104      	bne.n	8004a8a <floor+0x9a>
 8004a80:	ee10 2a10 	vmov	r2, s0
 8004a84:	460b      	mov	r3, r1
 8004a86:	f7fb fba5 	bl	80001d4 <__adddf3>
 8004a8a:	ec41 0b10 	vmov	d0, r0, r1
 8004a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a92:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004a96:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9a:	fa23 f707 	lsr.w	r7, r3, r7
 8004a9e:	4207      	tst	r7, r0
 8004aa0:	d0f3      	beq.n	8004a8a <floor+0x9a>
 8004aa2:	a311      	add	r3, pc, #68	; (adr r3, 8004ae8 <floor+0xf8>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f7fb fb94 	bl	80001d4 <__adddf3>
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f7fb ffd6 	bl	8000a60 <__aeabi_dcmpgt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d0bf      	beq.n	8004a38 <floor+0x48>
 8004ab8:	2c00      	cmp	r4, #0
 8004aba:	da02      	bge.n	8004ac2 <floor+0xd2>
 8004abc:	2e14      	cmp	r6, #20
 8004abe:	d103      	bne.n	8004ac8 <floor+0xd8>
 8004ac0:	3401      	adds	r4, #1
 8004ac2:	ea25 0507 	bic.w	r5, r5, r7
 8004ac6:	e7b7      	b.n	8004a38 <floor+0x48>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004ace:	fa03 f606 	lsl.w	r6, r3, r6
 8004ad2:	4435      	add	r5, r6
 8004ad4:	4545      	cmp	r5, r8
 8004ad6:	bf38      	it	cc
 8004ad8:	18e4      	addcc	r4, r4, r3
 8004ada:	e7f2      	b.n	8004ac2 <floor+0xd2>
 8004adc:	2500      	movs	r5, #0
 8004ade:	462c      	mov	r4, r5
 8004ae0:	e7aa      	b.n	8004a38 <floor+0x48>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	8800759c 	.word	0x8800759c
 8004aec:	7e37e43c 	.word	0x7e37e43c
 8004af0:	bff00000 	.word	0xbff00000
 8004af4:	000fffff 	.word	0x000fffff

08004af8 <scalbn>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	ec55 4b10 	vmov	r4, r5, d0
 8004afe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004b02:	4606      	mov	r6, r0
 8004b04:	462b      	mov	r3, r5
 8004b06:	b9aa      	cbnz	r2, 8004b34 <scalbn+0x3c>
 8004b08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b0c:	4323      	orrs	r3, r4
 8004b0e:	d03b      	beq.n	8004b88 <scalbn+0x90>
 8004b10:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <scalbn+0xe0>)
 8004b12:	4629      	mov	r1, r5
 8004b14:	2200      	movs	r2, #0
 8004b16:	ee10 0a10 	vmov	r0, s0
 8004b1a:	f7fb fd11 	bl	8000540 <__aeabi_dmul>
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <scalbn+0xe4>)
 8004b20:	429e      	cmp	r6, r3
 8004b22:	4604      	mov	r4, r0
 8004b24:	460d      	mov	r5, r1
 8004b26:	da12      	bge.n	8004b4e <scalbn+0x56>
 8004b28:	a327      	add	r3, pc, #156	; (adr r3, 8004bc8 <scalbn+0xd0>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fd07 	bl	8000540 <__aeabi_dmul>
 8004b32:	e009      	b.n	8004b48 <scalbn+0x50>
 8004b34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004b38:	428a      	cmp	r2, r1
 8004b3a:	d10c      	bne.n	8004b56 <scalbn+0x5e>
 8004b3c:	ee10 2a10 	vmov	r2, s0
 8004b40:	4620      	mov	r0, r4
 8004b42:	4629      	mov	r1, r5
 8004b44:	f7fb fb46 	bl	80001d4 <__adddf3>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	e01c      	b.n	8004b88 <scalbn+0x90>
 8004b4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004b52:	460b      	mov	r3, r1
 8004b54:	3a36      	subs	r2, #54	; 0x36
 8004b56:	4432      	add	r2, r6
 8004b58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004b5c:	428a      	cmp	r2, r1
 8004b5e:	dd0b      	ble.n	8004b78 <scalbn+0x80>
 8004b60:	ec45 4b11 	vmov	d1, r4, r5
 8004b64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004bd0 <scalbn+0xd8>
 8004b68:	f000 f83c 	bl	8004be4 <copysign>
 8004b6c:	a318      	add	r3, pc, #96	; (adr r3, 8004bd0 <scalbn+0xd8>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	ec51 0b10 	vmov	r0, r1, d0
 8004b76:	e7da      	b.n	8004b2e <scalbn+0x36>
 8004b78:	2a00      	cmp	r2, #0
 8004b7a:	dd08      	ble.n	8004b8e <scalbn+0x96>
 8004b7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b88:	ec45 4b10 	vmov	d0, r4, r5
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
 8004b8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004b92:	da0d      	bge.n	8004bb0 <scalbn+0xb8>
 8004b94:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004b98:	429e      	cmp	r6, r3
 8004b9a:	ec45 4b11 	vmov	d1, r4, r5
 8004b9e:	dce1      	bgt.n	8004b64 <scalbn+0x6c>
 8004ba0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004bc8 <scalbn+0xd0>
 8004ba4:	f000 f81e 	bl	8004be4 <copysign>
 8004ba8:	a307      	add	r3, pc, #28	; (adr r3, 8004bc8 <scalbn+0xd0>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	e7e0      	b.n	8004b72 <scalbn+0x7a>
 8004bb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004bb4:	3236      	adds	r2, #54	; 0x36
 8004bb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <scalbn+0xe8>)
 8004bc6:	e7b2      	b.n	8004b2e <scalbn+0x36>
 8004bc8:	c2f8f359 	.word	0xc2f8f359
 8004bcc:	01a56e1f 	.word	0x01a56e1f
 8004bd0:	8800759c 	.word	0x8800759c
 8004bd4:	7e37e43c 	.word	0x7e37e43c
 8004bd8:	43500000 	.word	0x43500000
 8004bdc:	ffff3cb0 	.word	0xffff3cb0
 8004be0:	3c900000 	.word	0x3c900000

08004be4 <copysign>:
 8004be4:	ec51 0b10 	vmov	r0, r1, d0
 8004be8:	ee11 0a90 	vmov	r0, s3
 8004bec:	ee10 2a10 	vmov	r2, s0
 8004bf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004bf8:	ea41 0300 	orr.w	r3, r1, r0
 8004bfc:	ec43 2b10 	vmov	d0, r2, r3
 8004c00:	4770      	bx	lr
	...

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
