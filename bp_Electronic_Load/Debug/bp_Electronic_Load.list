
bp_Electronic_Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005444  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a9c  08006a9c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006a9c  08006a9c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a9c  08006a9c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000088  08006b28  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08006b28  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3dc  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f29  00000000  00000000  0002e489  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  000303b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00031070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014ff0  00000000  00000000  00031c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c90  00000000  00000000  00046c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072de7  00000000  00000000  000508d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c36b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  000c3734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800553c 	.word	0x0800553c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800553c 	.word	0x0800553c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b74:	f1a2 0201 	sub.w	r2, r2, #1
 8000b78:	d1ed      	bne.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2uiz>:
 8000f74:	0042      	lsls	r2, r0, #1
 8000f76:	d20e      	bcs.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30b      	bcc.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d409      	bmi.n	8000f9c <__aeabi_f2uiz+0x28>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	fa23 f002 	lsr.w	r0, r3, r2
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2uiz+0x32>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d102      	bne.n	8000fac <__aeabi_f2uiz+0x38>
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	4770      	bx	lr
 8000fac:	f04f 0000 	mov.w	r0, #0
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f923 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f003 f9b4 	bl	800433c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f93b 	bl	800127a <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f903 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000018 	.word	0x20000018
 8001038:	20000004 	.word	0x20000004
 800103c:	20000000 	.word	0x20000000

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000004 	.word	0x20000004
 8001060:	200000c4 	.word	0x200000c4

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	200000c4 	.word	0x200000c4

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4906      	ldr	r1, [pc, #24]	; (8001110 <__NVIC_EnableIRQ+0x34>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff90 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff2d 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff42 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff35 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e127      	b.n	80014f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a8:	2201      	movs	r2, #1
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8116 	bne.w	80014f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d034      	beq.n	8001338 <HAL_GPIO_Init+0xa4>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d80d      	bhi.n	80012ee <HAL_GPIO_Init+0x5a>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d02b      	beq.n	800132e <HAL_GPIO_Init+0x9a>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d804      	bhi.n	80012e4 <HAL_GPIO_Init+0x50>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d031      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d01c      	beq.n	800131c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012e2:	e048      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d043      	beq.n	8001370 <HAL_GPIO_Init+0xdc>
 80012e8:	2b11      	cmp	r3, #17
 80012ea:	d01b      	beq.n	8001324 <HAL_GPIO_Init+0x90>
          break;
 80012ec:	e043      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d026      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012f4:	4a87      	ldr	r2, [pc, #540]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d806      	bhi.n	8001308 <HAL_GPIO_Init+0x74>
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_GPIO_Init+0x284>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d020      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001300:	4a86      	ldr	r2, [pc, #536]	; (800151c <HAL_GPIO_Init+0x288>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01d      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 8001306:	e036      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001308:	4a85      	ldr	r2, [pc, #532]	; (8001520 <HAL_GPIO_Init+0x28c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 800130e:	4a85      	ldr	r2, [pc, #532]	; (8001524 <HAL_GPIO_Init+0x290>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d016      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001314:	4a84      	ldr	r2, [pc, #528]	; (8001528 <HAL_GPIO_Init+0x294>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 800131a:	e02c      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e028      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	3304      	adds	r3, #4
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e023      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	3308      	adds	r3, #8
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e01e      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	330c      	adds	r3, #12
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e019      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134a:	2304      	movs	r3, #4
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e012      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	611a      	str	r2, [r3, #16]
          break;
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001364:	2308      	movs	r3, #8
 8001366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	615a      	str	r2, [r3, #20]
          break;
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d801      	bhi.n	8001380 <HAL_GPIO_Init+0xec>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	e001      	b.n	8001384 <HAL_GPIO_Init+0xf0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3304      	adds	r3, #4
 8001384:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d802      	bhi.n	8001392 <HAL_GPIO_Init+0xfe>
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x104>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3b08      	subs	r3, #8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	210f      	movs	r1, #15
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	6a39      	ldr	r1, [r7, #32]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8096 	beq.w	80014f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_GPIO_Init+0x298>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_GPIO_Init+0x298>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_GPIO_Init+0x298>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013de:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x29c>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x19e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x19a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x2a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x196>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a48      	ldr	r2, [pc, #288]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x192>
 8001422:	2303      	movs	r3, #3
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001426:	2304      	movs	r3, #4
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001432:	2300      	movs	r3, #0
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001444:	493a      	ldr	r1, [pc, #232]	; (8001530 <HAL_GPIO_Init+0x29c>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4938      	ldr	r1, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	4933      	ldr	r1, [pc, #204]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	492e      	ldr	r1, [pc, #184]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4929      	ldr	r1, [pc, #164]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800149e:	4013      	ands	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	4924      	ldr	r1, [pc, #144]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	491f      	ldr	r1, [pc, #124]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	491a      	ldr	r1, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
 80014e2:	e006      	b.n	80014f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4915      	ldr	r1, [pc, #84]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3301      	adds	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	f47f aed0 	bne.w	80012a8 <HAL_GPIO_Init+0x14>
  }
}
 8001508:	bf00      	nop
 800150a:	372c      	adds	r7, #44	; 0x2c
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	10210000 	.word	0x10210000
 8001518:	10110000 	.word	0x10110000
 800151c:	10120000 	.word	0x10120000
 8001520:	10310000 	.word	0x10310000
 8001524:	10320000 	.word	0x10320000
 8001528:	10220000 	.word	0x10220000
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40011000 	.word	0x40011000
 8001540:	40011400 	.word	0x40011400
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e10f      	b.n	80017aa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f002 fefe 	bl	80043a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015bc:	f001 fc30 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a7b      	ldr	r2, [pc, #492]	; (80017b4 <HAL_I2C_Init+0x23c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d807      	bhi.n	80015dc <HAL_I2C_Init+0x64>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4a7a      	ldr	r2, [pc, #488]	; (80017b8 <HAL_I2C_Init+0x240>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	bf94      	ite	ls
 80015d4:	2301      	movls	r3, #1
 80015d6:	2300      	movhi	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	e006      	b.n	80015ea <HAL_I2C_Init+0x72>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_I2C_Init+0x244>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	bf94      	ite	ls
 80015e4:	2301      	movls	r3, #1
 80015e6:	2300      	movhi	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0db      	b.n	80017aa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <HAL_I2C_Init+0x248>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9b      	lsrs	r3, r3, #18
 80015fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <HAL_I2C_Init+0x23c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d802      	bhi.n	800162c <HAL_I2C_Init+0xb4>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3301      	adds	r3, #1
 800162a:	e009      	b.n	8001640 <HAL_I2C_Init+0xc8>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a63      	ldr	r2, [pc, #396]	; (80017c4 <HAL_I2C_Init+0x24c>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	099b      	lsrs	r3, r3, #6
 800163e:	3301      	adds	r3, #1
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	430b      	orrs	r3, r1
 8001646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4956      	ldr	r1, [pc, #344]	; (80017b4 <HAL_I2C_Init+0x23c>)
 800165c:	428b      	cmp	r3, r1
 800165e:	d80d      	bhi.n	800167c <HAL_I2C_Init+0x104>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e59      	subs	r1, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fbb1 f3f3 	udiv	r3, r1, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	2b04      	cmp	r3, #4
 8001676:	bf38      	it	cc
 8001678:	2304      	movcc	r3, #4
 800167a:	e04f      	b.n	800171c <HAL_I2C_Init+0x1a4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d111      	bne.n	80016a8 <HAL_I2C_Init+0x130>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1e58      	subs	r0, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	440b      	add	r3, r1
 8001692:	fbb0 f3f3 	udiv	r3, r0, r3
 8001696:	3301      	adds	r3, #1
 8001698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e012      	b.n	80016ce <HAL_I2C_Init+0x156>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1e58      	subs	r0, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	0099      	lsls	r1, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Init+0x15e>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e022      	b.n	800171c <HAL_I2C_Init+0x1a4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10e      	bne.n	80016fc <HAL_I2C_Init+0x184>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1e58      	subs	r0, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6859      	ldr	r1, [r3, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	440b      	add	r3, r1
 80016ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fa:	e00f      	b.n	800171c <HAL_I2C_Init+0x1a4>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	0099      	lsls	r1, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001712:	3301      	adds	r3, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	6809      	ldr	r1, [r1, #0]
 8001720:	4313      	orrs	r3, r2
 8001722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69da      	ldr	r2, [r3, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800174a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6911      	ldr	r1, [r2, #16]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68d2      	ldr	r2, [r2, #12]
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	430b      	orrs	r3, r1
 800175e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2220      	movs	r2, #32
 8001796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	000186a0 	.word	0x000186a0
 80017b8:	001e847f 	.word	0x001e847f
 80017bc:	003d08ff 	.word	0x003d08ff
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	10624dd3 	.word	0x10624dd3

080017c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	461a      	mov	r2, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	817b      	strh	r3, [r7, #10]
 80017d8:	4613      	mov	r3, r2
 80017da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff fc42 	bl	8001064 <HAL_GetTick>
 80017e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	f040 80e0 	bne.w	80019b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2319      	movs	r3, #25
 80017f6:	2201      	movs	r2, #1
 80017f8:	4970      	ldr	r1, [pc, #448]	; (80019bc <HAL_I2C_Master_Transmit+0x1f4>)
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fd5e 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001806:	2302      	movs	r3, #2
 8001808:	e0d3      	b.n	80019b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_I2C_Master_Transmit+0x50>
 8001814:	2302      	movs	r3, #2
 8001816:	e0cc      	b.n	80019b2 <HAL_I2C_Master_Transmit+0x1ea>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d007      	beq.n	800183e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2221      	movs	r2, #33	; 0x21
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2210      	movs	r2, #16
 800185a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	893a      	ldrh	r2, [r7, #8]
 800186e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a50      	ldr	r2, [pc, #320]	; (80019c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	6a3a      	ldr	r2, [r7, #32]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fbec 	bl	8002064 <I2C_MasterRequestWrite>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e08d      	b.n	80019b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018ac:	e066      	b.n	800197c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	6a39      	ldr	r1, [r7, #32]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fdd8 	bl	8002468 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00d      	beq.n	80018da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d107      	bne.n	80018d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06b      	b.n	80019b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b04      	cmp	r3, #4
 8001916:	d11b      	bne.n	8001950 <HAL_I2C_Master_Transmit+0x188>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d017      	beq.n	8001950 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	6a39      	ldr	r1, [r7, #32]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 fdc8 	bl	80024ea <I2C_WaitOnBTFFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	2b04      	cmp	r3, #4
 8001966:	d107      	bne.n	8001978 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001976:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e01a      	b.n	80019b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	d194      	bne.n	80018ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e000      	b.n	80019b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019b0:	2302      	movs	r3, #2
  }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	00100002 	.word	0x00100002
 80019c0:	ffff0000 	.word	0xffff0000

080019c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	461a      	mov	r2, r3
 80019d0:	460b      	mov	r3, r1
 80019d2:	817b      	strh	r3, [r7, #10]
 80019d4:	4613      	mov	r3, r2
 80019d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff fb44 	bl	8001064 <HAL_GetTick>
 80019dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	f040 8213 	bne.w	8001e12 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2319      	movs	r3, #25
 80019f2:	2201      	movs	r2, #1
 80019f4:	497e      	ldr	r1, [pc, #504]	; (8001bf0 <HAL_I2C_Master_Receive+0x22c>)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fc60 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a02:	2302      	movs	r3, #2
 8001a04:	e206      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_I2C_Master_Receive+0x50>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e1ff      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d007      	beq.n	8001a3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2222      	movs	r2, #34	; 0x22
 8001a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2210      	movs	r2, #16
 8001a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	893a      	ldrh	r2, [r7, #8]
 8001a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <HAL_I2C_Master_Receive+0x230>)
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a7c:	8979      	ldrh	r1, [r7, #10]
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fb64 	bl	8002150 <I2C_MasterRequestRead>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e1c0      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d113      	bne.n	8001ac2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	623b      	str	r3, [r7, #32]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e194      	b.n	8001dec <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d11d      	bne.n	8001b06 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ada:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b02:	b662      	cpsie	i
 8001b04:	e172      	b.n	8001dec <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d11d      	bne.n	8001b4a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b46:	b662      	cpsie	i
 8001b48:	e150      	b.n	8001dec <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b70:	e13c      	b.n	8001dec <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	f200 80f5 	bhi.w	8001d66 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d123      	bne.n	8001bcc <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fcef 	bl	800256c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e13d      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bca:	e10f      	b.n	8001dec <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d150      	bne.n	8001c76 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4906      	ldr	r1, [pc, #24]	; (8001bf8 <HAL_I2C_Master_Receive+0x234>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fb6c 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e112      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
 8001bee:	bf00      	nop
 8001bf0:	00100002 	.word	0x00100002
 8001bf4:	ffff0000 	.word	0xffff0000
 8001bf8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c40:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c74:	e0ba      	b.n	8001dec <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4967      	ldr	r1, [pc, #412]	; (8001e1c <HAL_I2C_Master_Receive+0x458>)
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 fb1b 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0c1      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cda:	2200      	movs	r2, #0
 8001cdc:	494f      	ldr	r1, [pc, #316]	; (8001e1c <HAL_I2C_Master_Receive+0x458>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 faec 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e092      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d30:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d64:	e042      	b.n	8001dec <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fbfe 	bl	800256c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e04c      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d118      	bne.n	8001dec <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f aebe 	bne.w	8001b72 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	00010004 	.word	0x00010004

08001e20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff f918 	bl	8001064 <HAL_GetTick>
 8001e34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	f040 8105 	bne.w	8002052 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2319      	movs	r3, #25
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4982      	ldr	r1, [pc, #520]	; (800205c <HAL_I2C_IsDeviceReady+0x23c>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fa32 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0f8      	b.n	8002054 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2C_IsDeviceReady+0x50>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e0f1      	b.n	8002054 <HAL_I2C_IsDeviceReady+0x234>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d007      	beq.n	8001e96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2224      	movs	r2, #36	; 0x24
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_I2C_IsDeviceReady+0x240>)
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f9f0 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0b6      	b.n	8002054 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ef4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f8b5 	bl	8001064 <HAL_GetTick>
 8001efa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f2a:	e025      	b.n	8001f78 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f2c:	f7ff f89a 	bl	8001064 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d302      	bcc.n	8001f42 <HAL_I2C_IsDeviceReady+0x122>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	22a0      	movs	r2, #160	; 0xa0
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2ba0      	cmp	r3, #160	; 0xa0
 8001f82:	d005      	beq.n	8001f90 <HAL_I2C_IsDeviceReady+0x170>
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_I2C_IsDeviceReady+0x170>
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0cd      	beq.n	8001f2c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d129      	bne.n	8001ffa <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2319      	movs	r3, #25
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4921      	ldr	r1, [pc, #132]	; (800205c <HAL_I2C_IsDeviceReady+0x23c>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f970 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e036      	b.n	8002054 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e02c      	b.n	8002054 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002008:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002012:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2319      	movs	r3, #25
 800201a:	2201      	movs	r2, #1
 800201c:	490f      	ldr	r1, [pc, #60]	; (800205c <HAL_I2C_IsDeviceReady+0x23c>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f94c 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e012      	b.n	8002054 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	3301      	adds	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	f4ff af3e 	bcc.w	8001eba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	00100002 	.word	0x00100002
 8002060:	ffff0000 	.word	0xffff0000

08002064 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	460b      	mov	r3, r1
 8002072:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d006      	beq.n	800208e <I2C_MasterRequestWrite+0x2a>
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d003      	beq.n	800208e <I2C_MasterRequestWrite+0x2a>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800208c:	d108      	bne.n	80020a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e00b      	b.n	80020b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	2b12      	cmp	r3, #18
 80020a6:	d107      	bne.n	80020b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f8f9 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e035      	b.n	8002140 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020dc:	d108      	bne.n	80020f0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	e01b      	b.n	8002128 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020f0:	897b      	ldrh	r3, [r7, #10]
 80020f2:	11db      	asrs	r3, r3, #7
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f003 0306 	and.w	r3, r3, #6
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f063 030f 	orn	r3, r3, #15
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <I2C_MasterRequestWrite+0xe4>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f92b 	bl	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e010      	b.n	8002140 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800211e:	897b      	ldrh	r3, [r7, #10]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <I2C_MasterRequestWrite+0xe8>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f91b 	bl	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	00010008 	.word	0x00010008
 800214c:	00010002 	.word	0x00010002

08002150 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002174:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d006      	beq.n	800218a <I2C_MasterRequestRead+0x3a>
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d003      	beq.n	800218a <I2C_MasterRequestRead+0x3a>
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002188:	d108      	bne.n	800219c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e00b      	b.n	80021b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	2b11      	cmp	r3, #17
 80021a2:	d107      	bne.n	80021b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f87b 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e06d      	b.n	80022ac <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021d8:	d108      	bne.n	80021ec <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021da:	897b      	ldrh	r3, [r7, #10]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	611a      	str	r2, [r3, #16]
 80021ea:	e053      	b.n	8002294 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021ec:	897b      	ldrh	r3, [r7, #10]
 80021ee:	11db      	asrs	r3, r3, #7
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 0306 	and.w	r3, r3, #6
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f063 030f 	orn	r3, r3, #15
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	492a      	ldr	r1, [pc, #168]	; (80022b4 <I2C_MasterRequestRead+0x164>)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f8ad 	bl	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e048      	b.n	80022ac <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800221a:	897b      	ldrh	r3, [r7, #10]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4923      	ldr	r1, [pc, #140]	; (80022b8 <I2C_MasterRequestRead+0x168>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f89d 	bl	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e038      	b.n	80022ac <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f825 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e017      	b.n	80022ac <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800227c:	897b      	ldrh	r3, [r7, #10]
 800227e:	11db      	asrs	r3, r3, #7
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0306 	and.w	r3, r3, #6
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f063 030e 	orn	r3, r3, #14
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <I2C_MasterRequestRead+0x168>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f865 	bl	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	00010008 	.word	0x00010008
 80022b8:	00010002 	.word	0x00010002

080022bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022cc:	e025      	b.n	800231a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d021      	beq.n	800231a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7fe fec5 	bl	8001064 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d116      	bne.n	800231a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0220 	orr.w	r2, r3, #32
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e023      	b.n	8002362 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10d      	bne.n	8002340 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4013      	ands	r3, r2
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf0c      	ite	eq
 8002336:	2301      	moveq	r3, #1
 8002338:	2300      	movne	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	e00c      	b.n	800235a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	429a      	cmp	r2, r3
 800235e:	d0b6      	beq.n	80022ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002378:	e051      	b.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002388:	d123      	bne.n	80023d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002398:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f043 0204 	orr.w	r2, r3, #4
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e046      	b.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d021      	beq.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7fe fe43 	bl	8001064 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d116      	bne.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e020      	b.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10c      	bne.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e00b      	b.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf14      	ite	ne
 8002454:	2301      	movne	r3, #1
 8002456:	2300      	moveq	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d18d      	bne.n	800237a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002474:	e02d      	b.n	80024d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8ce 	bl	8002618 <I2C_IsAcknowledgeFailed>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e02d      	b.n	80024e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d021      	beq.n	80024d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe fde9 	bl	8001064 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d116      	bne.n	80024d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f043 0220 	orr.w	r2, r3, #32
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	2b80      	cmp	r3, #128	; 0x80
 80024de:	d1ca      	bne.n	8002476 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024f6:	e02d      	b.n	8002554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f88d 	bl	8002618 <I2C_IsAcknowledgeFailed>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e02d      	b.n	8002564 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d021      	beq.n	8002554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7fe fda8 	bl	8001064 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	d302      	bcc.n	8002526 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e007      	b.n	8002564 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	d1ca      	bne.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002578:	e042      	b.n	8002600 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b10      	cmp	r3, #16
 8002586:	d119      	bne.n	80025bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0210 	mvn.w	r2, #16
 8002590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e029      	b.n	8002610 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025bc:	f7fe fd52 	bl	8001064 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d302      	bcc.n	80025d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e007      	b.n	8002610 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d1b5      	bne.n	800257a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d11b      	bne.n	8002668 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002638:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e26c      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8087 	beq.w	80027a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002694:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b04      	cmp	r3, #4
 800269e:	d00c      	beq.n	80026ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a0:	4b8f      	ldr	r3, [pc, #572]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d112      	bne.n	80026d2 <HAL_RCC_OscConfig+0x5e>
 80026ac:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d10b      	bne.n	80026d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ba:	4b89      	ldr	r3, [pc, #548]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d06c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x12c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d168      	bne.n	80027a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e246      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x76>
 80026dc:	4b80      	ldr	r3, [pc, #512]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7f      	ldr	r2, [pc, #508]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e02e      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x98>
 80026f2:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b78      	ldr	r3, [pc, #480]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a77      	ldr	r2, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e01d      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0xbc>
 8002716:	4b72      	ldr	r3, [pc, #456]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a71      	ldr	r2, [pc, #452]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800271c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b6f      	ldr	r3, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 8002730:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6a      	ldr	r2, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe fc88 	bl	8001064 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fc84 	bl	8001064 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1fa      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0xe4>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc74 	bl	8001064 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002780:	f7fe fc70 	bl	8001064 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1e6      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x10c>
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d063      	beq.n	8002876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ae:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d11c      	bne.n	8002800 <HAL_RCC_OscConfig+0x18c>
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_RCC_OscConfig+0x176>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e1ba      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4939      	ldr	r1, [pc, #228]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	e03a      	b.n	8002876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002808:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <HAL_RCC_OscConfig+0x270>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fc29 	bl	8001064 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002816:	f7fe fc25 	bl	8001064 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e19b      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4927      	ldr	r1, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
 8002848:	e015      	b.n	8002876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_RCC_OscConfig+0x270>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fc08 	bl	8001064 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002858:	f7fe fc04 	bl	8001064 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e17a      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03a      	beq.n	80028f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d019      	beq.n	80028be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe fbe8 	bl	8001064 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002898:	f7fe fbe4 	bl	8001064 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e15a      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f000 fac6 	bl	8002e48 <RCC_Delay>
 80028bc:	e01c      	b.n	80028f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fbce 	bl	8001064 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ca:	e00f      	b.n	80028ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe fbca 	bl	8001064 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d908      	bls.n	80028ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e140      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	42420000 	.word	0x42420000
 80028e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	4b9e      	ldr	r3, [pc, #632]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e9      	bne.n	80028cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a6 	beq.w	8002a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290a:	4b97      	ldr	r3, [pc, #604]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a93      	ldr	r2, [pc, #588]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	61d3      	str	r3, [r2, #28]
 8002922:	4b91      	ldr	r3, [pc, #580]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b8e      	ldr	r3, [pc, #568]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d118      	bne.n	8002970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293e:	4b8b      	ldr	r3, [pc, #556]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a8a      	ldr	r2, [pc, #552]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294a:	f7fe fb8b 	bl	8001064 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe fb87 	bl	8001064 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	; 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0fd      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x312>
 8002978:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a7a      	ldr	r2, [pc, #488]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	e02d      	b.n	80029e2 <HAL_RCC_OscConfig+0x36e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x334>
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6213      	str	r3, [r2, #32]
 80029a6:	e01c      	b.n	80029e2 <HAL_RCC_OscConfig+0x36e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_OscConfig+0x356>
 80029b0:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4a6c      	ldr	r2, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6213      	str	r3, [r2, #32]
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4a69      	ldr	r2, [pc, #420]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6213      	str	r3, [r2, #32]
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x36e>
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4a66      	ldr	r2, [pc, #408]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6213      	str	r3, [r2, #32]
 80029d6:	4b64      	ldr	r3, [pc, #400]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a63      	ldr	r2, [pc, #396]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fb3b 	bl	8001064 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe fb37 	bl	8001064 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0ab      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCC_OscConfig+0x37e>
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fb25 	bl	8001064 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fb21 	bl	8001064 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e095      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8081 	beq.w	8002b5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d061      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d146      	bne.n	8002afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a70:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_RCC_OscConfig+0x4fc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe faf5 	bl	8001064 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe faf1 	bl	8001064 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e067      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a90:	4b35      	ldr	r3, [pc, #212]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa6:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	492d      	ldr	r1, [pc, #180]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a19      	ldr	r1, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	4927      	ldr	r1, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_OscConfig+0x4fc>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fac5 	bl	8001064 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fac1 	bl	8001064 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e037      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x46a>
 8002afc:	e02f      	b.n	8002b5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_RCC_OscConfig+0x4fc>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe faae 	bl	8001064 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe faaa 	bl	8001064 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e020      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x498>
 8002b2a:	e018      	b.n	8002b5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e013      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40007000 	.word	0x40007000
 8002b70:	42420060 	.word	0x42420060

08002b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0d0      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0207 	bic.w	r2, r3, #7
 8002b9e:	4965      	ldr	r1, [pc, #404]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d040      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d115      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e073      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e06b      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4936      	ldr	r1, [pc, #216]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f7fe f9fe 	bl	8001064 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fe f9fa 	bl	8001064 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e053      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d210      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	4922      	ldr	r1, [pc, #136]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4601      	mov	r1, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	fa21 f303 	lsr.w	r3, r1, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1cc>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1d0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f95c 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08006a48 	.word	0x08006a48
 8002d40:	20000018 	.word	0x20000018
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	b490      	push	{r4, r7}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d50:	1d3c      	adds	r4, r7, #4
 8002d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d58:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d002      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x40>
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0x46>
 8002d86:	e02d      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d8a:	623b      	str	r3, [r7, #32]
      break;
 8002d8c:	e02d      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	0c9b      	lsrs	r3, r3, #18
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002da0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c5b      	lsrs	r3, r3, #17
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dba:	4413      	add	r3, r2
 8002dbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dc6:	fb02 f203 	mul.w	r2, r2, r3
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e004      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	623b      	str	r3, [r7, #32]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de6:	623b      	str	r3, [r7, #32]
      break;
 8002de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dea:	6a3b      	ldr	r3, [r7, #32]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3728      	adds	r7, #40	; 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc90      	pop	{r4, r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	08005554 	.word	0x08005554
 8002dfc:	08005564 	.word	0x08005564
 8002e00:	40021000 	.word	0x40021000
 8002e04:	007a1200 	.word	0x007a1200
 8002e08:	003d0900 	.word	0x003d0900

08002e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	20000018 	.word	0x20000018

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e24:	f7ff fff2 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e28:	4601      	mov	r1, r0
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08006a58 	.word	0x08006a58

08002e48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <RCC_Delay+0x34>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <RCC_Delay+0x38>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0a5b      	lsrs	r3, r3, #9
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e64:	bf00      	nop
  }
  while (Delay --);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	60fa      	str	r2, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f9      	bne.n	8002e64 <RCC_Delay+0x1c>
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000018 	.word	0x20000018
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e01d      	b.n	8002ed2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f001 fab6 	bl	800441c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f000 fa10 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b06      	cmp	r3, #6
 8002f02:	d007      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0202 	mvn.w	r2, #2
 8002f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9a4 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f997 	bl	800329e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f9a6 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0204 	mvn.w	r2, #4
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f97a 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f96d 	bl	800329e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f97c 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0208 	mvn.w	r2, #8
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f950 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f943 	bl	800329e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f952 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b10      	cmp	r3, #16
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0210 	mvn.w	r2, #16
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2208      	movs	r2, #8
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f926 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f919 	bl	800329e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f928 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0201 	mvn.w	r2, #1
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fd32 	bl	8003b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa51 	bl	8003572 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8ec 	bl	80032d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b20      	cmp	r3, #32
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0220 	mvn.w	r2, #32
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa1c 	bl	8003560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0x18>
 8003144:	2302      	movs	r3, #2
 8003146:	e0a6      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x166>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d067      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0x120>
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d80b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x6c>
 8003184:	2b10      	cmp	r3, #16
 8003186:	d073      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
 8003188:	2b10      	cmp	r3, #16
 800318a:	d802      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x62>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d06f      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003190:	e078      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003192:	2b20      	cmp	r3, #32
 8003194:	d06c      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
 8003196:	2b30      	cmp	r3, #48	; 0x30
 8003198:	d06a      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800319a:	e073      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800319c:	2b70      	cmp	r3, #112	; 0x70
 800319e:	d00d      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x8c>
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d804      	bhi.n	80031ae <HAL_TIM_ConfigClockSource+0x7e>
 80031a4:	2b50      	cmp	r3, #80	; 0x50
 80031a6:	d033      	beq.n	8003210 <HAL_TIM_ConfigClockSource+0xe0>
 80031a8:	2b60      	cmp	r3, #96	; 0x60
 80031aa:	d041      	beq.n	8003230 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031ac:	e06a      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d066      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x152>
 80031b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b8:	d017      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031ba:	e063      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f000 f965 	bl	800349a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]
      break;
 80031e8:	e04c      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6899      	ldr	r1, [r3, #8]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f000 f94e 	bl	800349a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320c:	609a      	str	r2, [r3, #8]
      break;
 800320e:	e039      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	461a      	mov	r2, r3
 800321e:	f000 f8c5 	bl	80033ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2150      	movs	r1, #80	; 0x50
 8003228:	4618      	mov	r0, r3
 800322a:	f000 f91c 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 800322e:	e029      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	461a      	mov	r2, r3
 800323e:	f000 f8e3 	bl	8003408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2160      	movs	r1, #96	; 0x60
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f90c 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 800324e:	e019      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	461a      	mov	r2, r3
 800325e:	f000 f8a5 	bl	80033ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2140      	movs	r1, #64	; 0x40
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f8fc 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 800326e:	e009      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f000 f8f3 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8003280:	e000      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
	...

080032e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <TIM_Base_SetConfig+0xb8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00b      	beq.n	8003318 <TIM_Base_SetConfig+0x30>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003306:	d007      	beq.n	8003318 <TIM_Base_SetConfig+0x30>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <TIM_Base_SetConfig+0xbc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0x30>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <TIM_Base_SetConfig+0xc0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d108      	bne.n	800332a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <TIM_Base_SetConfig+0xb8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0x62>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <TIM_Base_SetConfig+0xbc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <TIM_Base_SetConfig+0xc0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <TIM_Base_SetConfig+0xb8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800

080033ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0201 	bic.w	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 030a 	bic.w	r3, r3, #10
 80033e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f023 0210 	bic.w	r2, r3, #16
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	031b      	lsls	r3, r3, #12
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 0307 	orr.w	r3, r3, #7
 8003488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800349a:	b480      	push	{r7}
 800349c:	b087      	sub	sp, #28
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	609a      	str	r2, [r3, #8]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e032      	b.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003528:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4313      	orrs	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <ads_new>:
 * @brief  Creates new ads_t variable corresponding to a ads module
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval ads_t variable corresponding to the ads module
 */
ads_t* ads_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
	ads_t* ads = malloc(sizeof(*ads));
 8003590:	200c      	movs	r0, #12
 8003592:	f001 f871 	bl	8004678 <malloc>
 8003596:	4603      	mov	r3, r0
 8003598:	60fb      	str	r3, [r7, #12]
	ads_init(ads, hi2c, addr);
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	461a      	mov	r2, r3
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f805 	bl	80035b0 <ads_init>
	return ads;
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <ads_init>:
 * @param  *ads: ads variable corresponding to the module targeted
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval None
 */
void ads_init(ads_t *ads, I2C_HandleTypeDef *hi2c, uint8_t addr){
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	71fb      	strb	r3, [r7, #7]
	ads->hi2c = hi2c;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	605a      	str	r2, [r3, #4]
	ads->addr = addr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	79fa      	ldrb	r2, [r7, #7]
 80035c8:	701a      	strb	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <ads_write>:
 * @brief  Configures the ads module register before reading (mux and gain)
 * 		   sending 3 bytes using I2C
 * @param  *ads: variable corresponding to the module targeted
 * @retval None
 */
void ads_write(ads_t *ads){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af02      	add	r7, sp, #8
 80035da:	6078      	str	r0, [r7, #4]
	uint8_t adsWrite[3];
	adsWrite[0] = 0x01;
 80035dc:	2301      	movs	r3, #1
 80035de:	733b      	strb	r3, [r7, #12]
	adsWrite[1] = 0x80 + (ads->mux<<4) + (ads->gain<<1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7a5b      	ldrb	r3, [r3, #9]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7a1b      	ldrb	r3, [r3, #8]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3b80      	subs	r3, #128	; 0x80
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	737b      	strb	r3, [r7, #13]
	adsWrite[2] = 0x83;
 80035fa:	2383      	movs	r3, #131	; 0x83
 80035fc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, adsWrite, 3, 100);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6858      	ldr	r0, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	b299      	uxth	r1, r3
 800360c:	f107 020c 	add.w	r2, r7, #12
 8003610:	2364      	movs	r3, #100	; 0x64
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2303      	movs	r3, #3
 8003616:	f7fe f8d7 	bl	80017c8 <HAL_I2C_Master_Transmit>
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <ads_voltageConv>:
 * @brief  Auxiliary function. Converts a raw ADC reading to a voltage reading in mV
 * @param  reading: raw ADC reading
 * @param  gain: gain of the internal amplifier chosen
 * @retval Voltage reading in mV
 */
uint16_t ads_voltageConv(uint16_t reading, uint8_t gain){
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	460a      	mov	r2, r1
 800362e:	80fb      	strh	r3, [r7, #6]
 8003630:	4613      	mov	r3, r2
 8003632:	717b      	strb	r3, [r7, #5]
	float factor;
	switch (gain){
 8003634:	797b      	ldrb	r3, [r7, #5]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d81f      	bhi.n	800367a <ads_voltageConv+0x56>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <ads_voltageConv+0x1c>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003655 	.word	0x08003655
 8003644:	0800365b 	.word	0x0800365b
 8003648:	08003663 	.word	0x08003663
 800364c:	0800366b 	.word	0x0800366b
 8003650:	08003673 	.word	0x08003673
		case 0: factor = 6144; break;
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <ads_voltageConv+0x94>)
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e013      	b.n	8003682 <ads_voltageConv+0x5e>
		case 1: factor = 4096; break;
 800365a:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e00f      	b.n	8003682 <ads_voltageConv+0x5e>
		case 2: factor = 2048; break;
 8003662:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e00b      	b.n	8003682 <ads_voltageConv+0x5e>
		case 3: factor = 1024; break;
 800366a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e007      	b.n	8003682 <ads_voltageConv+0x5e>
		case 4: factor = 512; break;
 8003672:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e003      	b.n	8003682 <ads_voltageConv+0x5e>
		default: factor = 256; break;
 800367a:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	bf00      	nop
	}
	factor = factor*reading/32768;
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd fad1 	bl	8000c2c <__aeabi_i2f>
 800368a:	4603      	mov	r3, r0
 800368c:	68f9      	ldr	r1, [r7, #12]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fb20 	bl	8000cd4 <__aeabi_fmul>
 8003694:	4603      	mov	r3, r0
 8003696:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fbce 	bl	8000e3c <__aeabi_fdiv>
 80036a0:	4603      	mov	r3, r0
 80036a2:	60fb      	str	r3, [r7, #12]
	return (uint16_t) factor;
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7fd fc65 	bl	8000f74 <__aeabi_f2uiz>
 80036aa:	4603      	mov	r3, r0
 80036ac:	b29b      	uxth	r3, r3
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	45c00000 	.word	0x45c00000

080036bc <ads_read>:
 * 			0: +-6144 mV	1: +-4096 mV
 * 			2: +-2048 mV	3: +-1024 mV
 * 			4: +-512 mV		5, 6, 7: +-256 mV
 * @retval Voltage read by the module (mV)
 */
uint16_t ads_read(ads_t *ads, uint8_t mux, uint8_t gain){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
 80036c8:	4613      	mov	r3, r2
 80036ca:	70bb      	strb	r3, [r7, #2]
	if ((ads->mux != mux) & (ads->gain != gain)){
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7a5b      	ldrb	r3, [r3, #9]
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7a1b      	ldrb	r3, [r3, #8]
 80036e0:	78b9      	ldrb	r1, [r7, #2]
 80036e2:	4299      	cmp	r1, r3
 80036e4:	bf14      	ite	ne
 80036e6:	2301      	movne	r3, #1
 80036e8:	2300      	moveq	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4013      	ands	r3, r2
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <ads_read+0x4a>
		ads->mux = mux;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	725a      	strb	r2, [r3, #9]
		ads->gain = gain;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	78ba      	ldrb	r2, [r7, #2]
 80036fe:	721a      	strb	r2, [r3, #8]
		ads_write(ads);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff67 	bl	80035d4 <ads_write>
	}

	uint8_t adsRead[2];
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, 0x00, 1, 100);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6858      	ldr	r0, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	b299      	uxth	r1, r3
 8003714:	2364      	movs	r3, #100	; 0x64
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2301      	movs	r3, #1
 800371a:	2200      	movs	r2, #0
 800371c:	f7fe f854 	bl	80017c8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ads->hi2c, ads->addr<<1, adsRead, 2, 100);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6858      	ldr	r0, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	b299      	uxth	r1, r3
 800372e:	f107 020c 	add.w	r2, r7, #12
 8003732:	2364      	movs	r3, #100	; 0x64
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2302      	movs	r3, #2
 8003738:	f7fe f944 	bl	80019c4 <HAL_I2C_Master_Receive>
	int16_t reading = (adsRead[0] << 8 | adsRead[1]);
 800373c:	7b3b      	ldrb	r3, [r7, #12]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	b21a      	sxth	r2, r3
 8003742:	7b7b      	ldrb	r3, [r7, #13]
 8003744:	b21b      	sxth	r3, r3
 8003746:	4313      	orrs	r3, r2
 8003748:	81fb      	strh	r3, [r7, #14]
	if (reading < 0){
 800374a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800374e:	2b00      	cmp	r3, #0
 8003750:	da01      	bge.n	8003756 <ads_read+0x9a>
	  reading = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	81fb      	strh	r3, [r7, #14]
	}
	return ads_voltageConv(reading, gain);
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	78ba      	ldrb	r2, [r7, #2]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff61 	bl	8003624 <ads_voltageConv>
 8003762:	4603      	mov	r3, r0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003770:	f7fd fc20 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003774:	f000 f828 	bl	80037c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003778:	f000 f934 	bl	80039e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800377c:	f000 f86a 	bl	8003854 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003780:	f000 f896 	bl	80038b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003784:	f000 f8e0 	bl	8003948 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ads_1 = ads_new(&hi2c1, 0x48);
 8003788:	2148      	movs	r1, #72	; 0x48
 800378a:	480a      	ldr	r0, [pc, #40]	; (80037b4 <main+0x48>)
 800378c:	f7ff fefa 	bl	8003584 <ads_new>
 8003790:	4602      	mov	r2, r0
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <main+0x4c>)
 8003794:	601a      	str	r2, [r3, #0]
  ssd1306_1 = ssd1306_new(&hi2c1, 0x79);
 8003796:	2179      	movs	r1, #121	; 0x79
 8003798:	4806      	ldr	r0, [pc, #24]	; (80037b4 <main+0x48>)
 800379a:	f000 fa01 	bl	8003ba0 <ssd1306_new>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <main+0x50>)
 80037a2:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 80037a4:	4806      	ldr	r0, [pc, #24]	; (80037c0 <main+0x54>)
 80037a6:	f7ff fb98 	bl	8002eda <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80037aa:	4806      	ldr	r0, [pc, #24]	; (80037c4 <main+0x58>)
 80037ac:	f7ff fb95 	bl	8002eda <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037b0:	e7fe      	b.n	80037b0 <main+0x44>
 80037b2:	bf00      	nop
 80037b4:	200000cc 	.word	0x200000cc
 80037b8:	20000160 	.word	0x20000160
 80037bc:	200000c8 	.word	0x200000c8
 80037c0:	20000164 	.word	0x20000164
 80037c4:	20000120 	.word	0x20000120

080037c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b090      	sub	sp, #64	; 0x40
 80037cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ce:	f107 0318 	add.w	r3, r7, #24
 80037d2:	2228      	movs	r2, #40	; 0x28
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 ff56 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037f4:	2300      	movs	r3, #0
 80037f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f8:	2301      	movs	r3, #1
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037fc:	2302      	movs	r3, #2
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003806:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800380c:	f107 0318 	add.w	r3, r7, #24
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe ff2f 	bl	8002674 <HAL_RCC_OscConfig>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800381c:	f000 f9ba 	bl	8003b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003820:	230f      	movs	r3, #15
 8003822:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003824:	2302      	movs	r3, #2
 8003826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800382c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f99a 	bl	8002b74 <HAL_RCC_ClockConfig>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003846:	f000 f9a5 	bl	8003b94 <Error_Handler>
  }
}
 800384a:	bf00      	nop
 800384c:	3740      	adds	r7, #64	; 0x40
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <MX_I2C1_Init+0x50>)
 800385a:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <MX_I2C1_Init+0x54>)
 800385c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <MX_I2C1_Init+0x50>)
 8003860:	4a12      	ldr	r2, [pc, #72]	; (80038ac <MX_I2C1_Init+0x58>)
 8003862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <MX_I2C1_Init+0x50>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <MX_I2C1_Init+0x50>)
 800386c:	2200      	movs	r2, #0
 800386e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <MX_I2C1_Init+0x50>)
 8003872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <MX_I2C1_Init+0x50>)
 800387a:	2200      	movs	r2, #0
 800387c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_I2C1_Init+0x50>)
 8003880:	2200      	movs	r2, #0
 8003882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <MX_I2C1_Init+0x50>)
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_I2C1_Init+0x50>)
 800388c:	2200      	movs	r2, #0
 800388e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003890:	4804      	ldr	r0, [pc, #16]	; (80038a4 <MX_I2C1_Init+0x50>)
 8003892:	f7fd fe71 	bl	8001578 <HAL_I2C_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800389c:	f000 f97a 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	200000cc 	.word	0x200000cc
 80038a8:	40005400 	.word	0x40005400
 80038ac:	00061a80 	.word	0x00061a80

080038b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038b6:	f107 0308 	add.w	r3, r7, #8
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c4:	463b      	mov	r3, r7
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <MX_TIM2_Init+0x94>)
 80038ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <MX_TIM2_Init+0x94>)
 80038d6:	229f      	movs	r2, #159	; 0x9f
 80038d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038da:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <MX_TIM2_Init+0x94>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80038e0:	4b18      	ldr	r3, [pc, #96]	; (8003944 <MX_TIM2_Init+0x94>)
 80038e2:	2263      	movs	r2, #99	; 0x63
 80038e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e6:	4b17      	ldr	r3, [pc, #92]	; (8003944 <MX_TIM2_Init+0x94>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ec:	4b15      	ldr	r3, [pc, #84]	; (8003944 <MX_TIM2_Init+0x94>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038f2:	4814      	ldr	r0, [pc, #80]	; (8003944 <MX_TIM2_Init+0x94>)
 80038f4:	f7ff fac6 	bl	8002e84 <HAL_TIM_Base_Init>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80038fe:	f000 f949 	bl	8003b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	4619      	mov	r1, r3
 800390e:	480d      	ldr	r0, [pc, #52]	; (8003944 <MX_TIM2_Init+0x94>)
 8003910:	f7ff fc0e 	bl	8003130 <HAL_TIM_ConfigClockSource>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800391a:	f000 f93b 	bl	8003b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003926:	463b      	mov	r3, r7
 8003928:	4619      	mov	r1, r3
 800392a:	4806      	ldr	r0, [pc, #24]	; (8003944 <MX_TIM2_Init+0x94>)
 800392c:	f7ff fdd4 	bl	80034d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003936:	f000 f92d 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000164 	.word	0x20000164

08003948 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800394e:	f107 0308 	add.w	r3, r7, #8
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395c:	463b      	mov	r3, r7
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <MX_TIM3_Init+0x94>)
 8003966:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <MX_TIM3_Init+0x98>)
 8003968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 800396a:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <MX_TIM3_Init+0x94>)
 800396c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003972:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <MX_TIM3_Init+0x94>)
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <MX_TIM3_Init+0x94>)
 800397a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800397e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003980:	4b16      	ldr	r3, [pc, #88]	; (80039dc <MX_TIM3_Init+0x94>)
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <MX_TIM3_Init+0x94>)
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800398c:	4813      	ldr	r0, [pc, #76]	; (80039dc <MX_TIM3_Init+0x94>)
 800398e:	f7ff fa79 	bl	8002e84 <HAL_TIM_Base_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003998:	f000 f8fc 	bl	8003b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800399c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	4619      	mov	r1, r3
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <MX_TIM3_Init+0x94>)
 80039aa:	f7ff fbc1 	bl	8003130 <HAL_TIM_ConfigClockSource>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80039b4:	f000 f8ee 	bl	8003b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039c0:	463b      	mov	r3, r7
 80039c2:	4619      	mov	r1, r3
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_TIM3_Init+0x94>)
 80039c6:	f7ff fd87 	bl	80034d8 <HAL_TIMEx_MasterConfigSynchronization>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80039d0:	f000 f8e0 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000120 	.word	0x20000120
 80039e0:	40000400 	.word	0x40000400

080039e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ea:	f107 0310 	add.w	r3, r7, #16
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <MX_GPIO_Init+0xa8>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <MX_GPIO_Init+0xa8>)
 80039fe:	f043 0310 	orr.w	r3, r3, #16
 8003a02:	6193      	str	r3, [r2, #24]
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	6193      	str	r3, [r2, #24]
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6193      	str	r3, [r2, #24]
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6193      	str	r3, [r2, #24]
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <MX_GPIO_Init+0xa8>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a5e:	480c      	ldr	r0, [pc, #48]	; (8003a90 <MX_GPIO_Init+0xac>)
 8003a60:	f7fd fd72 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	2302      	movs	r3, #2
 8003a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <MX_GPIO_Init+0xac>)
 8003a7e:	f7fd fc09 	bl	8001294 <HAL_GPIO_Init>

}
 8003a82:	bf00      	nop
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40011000 	.word	0x40011000

08003a94 <check_ADC>:

/* USER CODE BEGIN 4 */
void check_ADC(ads_t* ads, uint16_t Size){
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
	static uint16_t index_adc = 0;
	static uint32_t avg_adc = 0;

	avg_adc += ads_read(ads, 4, 0);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2104      	movs	r1, #4
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fe09 	bl	80036bc <ads_read>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <check_ADC+0x68>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a11      	ldr	r2, [pc, #68]	; (8003afc <check_ADC+0x68>)
 8003ab6:	6013      	str	r3, [r2, #0]
	index_adc++;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <check_ADC+0x6c>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <check_ADC+0x6c>)
 8003ac2:	801a      	strh	r2, [r3, #0]

	if (index_adc >= Size ){
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <check_ADC+0x6c>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	887a      	ldrh	r2, [r7, #2]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d812      	bhi.n	8003af4 <check_ADC+0x60>
		voltage_adc = avg_adc/Size;
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <check_ADC+0x68>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	887b      	ldrh	r3, [r7, #2]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fc7b 	bl	80003d4 <__aeabi_ui2d>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <check_ADC+0x70>)
 8003ae4:	e9c2 3400 	strd	r3, r4, [r2]
		index_adc = 0;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <check_ADC+0x6c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	801a      	strh	r2, [r3, #0]
		avg_adc = 0;
 8003aee:	4b03      	ldr	r3, [pc, #12]	; (8003afc <check_ADC+0x68>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	200000b0 	.word	0x200000b0
 8003b00:	200000b4 	.word	0x200000b4
 8003b04:	200000a8 	.word	0x200000a8

08003b08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10c      	bne.n	8003b32 <HAL_TIM_PeriodElapsedCallback+0x2a>
		static uint8_t ready_2 = 0;
		if (ready_2 == 1){
 8003b18:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d105      	bne.n	8003b2c <HAL_TIM_PeriodElapsedCallback+0x24>
			 check_ADC(ads_1, 20);
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2114      	movs	r1, #20
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ffb4 	bl	8003a94 <check_ADC>
		}
		ready_2 = 1;
 8003b2c:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim3){
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d119      	bne.n	8003b6e <HAL_TIM_PeriodElapsedCallback+0x66>
		static uint8_t ready_3 = 0;
		if (ready_3 == 1){
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d112      	bne.n	8003b68 <HAL_TIM_PeriodElapsedCallback+0x60>
			SSD1306_Putint(ssd1306_1, voltage_adc, 1);
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003b44:	681d      	ldr	r5, [r3, #0]
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b48:	cb18      	ldmia	r3, {r3, r4}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	f7fc ff6b 	bl	8000a28 <__aeabi_d2iz>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2201      	movs	r2, #1
 8003b56:	4619      	mov	r1, r3
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f000 fa49 	bl	8003ff0 <SSD1306_Putint>
			SSD1306_UpdateScreen(ssd1306_1);
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f8f8 	bl	8003d58 <SSD1306_UpdateScreen>
		}
		ready_3 = 1;
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]
	}
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bdb0      	pop	{r4, r5, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000164 	.word	0x20000164
 8003b7c:	200000b6 	.word	0x200000b6
 8003b80:	20000160 	.word	0x20000160
 8003b84:	20000120 	.word	0x20000120
 8003b88:	200000b7 	.word	0x200000b7
 8003b8c:	200000c8 	.word	0x200000c8
 8003b90:	200000a8 	.word	0x200000a8

08003b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <ssd1306_new>:
#include "math.h"

/* SSD1306 data buffer */
//static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

ssd1306_t* ssd1306_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
	ssd1306_t* ssd1306 = malloc(sizeof(*ssd1306));
 8003bac:	f44f 6086 	mov.w	r0, #1072	; 0x430
 8003bb0:	f000 fd62 	bl	8004678 <malloc>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	60fb      	str	r3, [r7, #12]
	SSD1306_Init(ssd1306, hi2c, addr);
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f805 	bl	8003bce <SSD1306_Init>
	return ssd1306;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <SSD1306_Init>:

uint8_t SSD1306_Init(ssd1306_t* ssd1306, I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]

	ssd1306->hi2c = hi2c;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	605a      	str	r2, [r3, #4]
	ssd1306->addr = addr;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	79fa      	ldrb	r2, [r7, #7]
 8003be6:	701a      	strb	r2, [r3, #0]
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306->hi2c, ssd1306->addr, 1, 20000) != HAL_OK) {
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6858      	ldr	r0, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b299      	uxth	r1, r3
 8003bf2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f7fe f912 	bl	8001e20 <HAL_I2C_IsDeviceReady>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <SSD1306_Init+0x38>
		/* Return false */
		return 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e0a4      	b.n	8003d50 <SSD1306_Init+0x182>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;
	
	/* Init LCD */
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE);
 8003c06:	22ae      	movs	r2, #174	; 0xae
 8003c08:	2100      	movs	r1, #0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fb79 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE); //display off
 8003c10:	22ae      	movs	r2, #174	; 0xae
 8003c12:	2100      	movs	r1, #0
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fb74 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //Set Memory Addressing Mode
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fb6f 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003c24:	2210      	movs	r2, #16
 8003c26:	2100      	movs	r1, #0
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fb6a 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003c2e:	22b0      	movs	r2, #176	; 0xb0
 8003c30:	2100      	movs	r1, #0
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fb65 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xC8); //Set COM Output Scan Direction
 8003c38:	22c8      	movs	r2, #200	; 0xc8
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fb60 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //---set low column address
 8003c42:	2200      	movs	r2, #0
 8003c44:	2100      	movs	r1, #0
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fb5b 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //---set high column address
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	2100      	movs	r1, #0
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fb56 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x40); //--set start line address
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	2100      	movs	r1, #0
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fb51 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x81); //--set contrast control register
 8003c60:	2281      	movs	r2, #129	; 0x81
 8003c62:	2100      	movs	r1, #0
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fb4c 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xFF);
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fb47 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA1); //--set segment re-map 0 to 127
 8003c74:	22a1      	movs	r2, #161	; 0xa1
 8003c76:	2100      	movs	r1, #0
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fb42 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA6); //--set normal display
 8003c7e:	22a6      	movs	r2, #166	; 0xa6
 8003c80:	2100      	movs	r1, #0
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fb3d 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 8003c88:	22a8      	movs	r2, #168	; 0xa8
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fb38 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x3F); //
 8003c92:	223f      	movs	r2, #63	; 0x3f
 8003c94:	2100      	movs	r1, #0
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb33 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003c9c:	22a4      	movs	r2, #164	; 0xa4
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fb2e 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD3); //-set display offset
 8003ca6:	22d3      	movs	r2, #211	; 0xd3
 8003ca8:	2100      	movs	r1, #0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fb29 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //-not offset
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fb24 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 8003cba:	22d5      	movs	r2, #213	; 0xd5
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fb1f 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xF0); //--set divide ratio
 8003cc4:	22f0      	movs	r2, #240	; 0xf0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fb1a 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD9); //--set pre-charge period
 8003cce:	22d9      	movs	r2, #217	; 0xd9
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fb15 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x22); //
 8003cd8:	2222      	movs	r2, #34	; 0x22
 8003cda:	2100      	movs	r1, #0
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fb10 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDA); //--set com pins hardware configuration
 8003ce2:	22da      	movs	r2, #218	; 0xda
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb0b 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x12);
 8003cec:	2212      	movs	r2, #18
 8003cee:	2100      	movs	r1, #0
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fb06 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDB); //--set vcomh
 8003cf6:	22db      	movs	r2, #219	; 0xdb
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fb01 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //0x20,0.77xVcc
 8003d00:	2220      	movs	r2, #32
 8003d02:	2100      	movs	r1, #0
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fafc 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x8D); //--set DC-DC enable
 8003d0a:	228d      	movs	r2, #141	; 0x8d
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 faf7 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x14); //
 8003d14:	2214      	movs	r2, #20
 8003d16:	2100      	movs	r1, #0
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 faf2 	bl	8004302 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAF); //--turn on SSD1306 panel
 8003d1e:	22af      	movs	r2, #175	; 0xaf
 8003d20:	2100      	movs	r1, #0
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 faed 	bl	8004302 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(ssd1306, SSD1306_COLOR_BLACK);
 8003d28:	2100      	movs	r1, #0
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f845 	bl	8003dba <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(ssd1306);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f811 	bl	8003d58 <SSD1306_UpdateScreen>
	
	/* Set default values */
	ssd1306->CurrentX = 0;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = 0;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	815a      	strh	r2, [r3, #10]
	
	/* Initialized OK */
	ssd1306->Initialized = 1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	735a      	strb	r2, [r3, #13]
	ssd1306->Inverted= 0;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	731a      	strb	r2, [r3, #12]
	
	/* Return OK */
	return 1;
 8003d4e:	2301      	movs	r3, #1
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(ssd1306_t* ssd1306) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e022      	b.n	8003dac <SSD1306_UpdateScreen+0x54>
		ssd1306_I2C_Write(ssd1306, 0x00, 0xB0 + m);
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	3b50      	subs	r3, #80	; 0x50
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fac6 	bl	8004302 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x00);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fac1 	bl	8004302 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x10);
 8003d80:	2210      	movs	r2, #16
 8003d82:	2100      	movs	r1, #0
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fabc 	bl	8004302 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(ssd1306, 0x40, &ssd1306->SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	3308      	adds	r3, #8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	1d9a      	adds	r2, r3, #6
 8003d9c:	2384      	movs	r3, #132	; 0x84
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa56 	bl	8004252 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	3301      	adds	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b07      	cmp	r3, #7
 8003db0:	d9d9      	bls.n	8003d66 <SSD1306_UpdateScreen+0xe>
	}
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <SSD1306_Fill>:

void SSD1306_Fill(ssd1306_t* ssd1306, SSD1306_COLOR_t color) {
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(ssd1306->SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(ssd1306->SSD1306_Buffer));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f103 000e 	add.w	r0, r3, #14
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <SSD1306_Fill+0x1c>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <SSD1306_Fill+0x1e>
 8003dd6:	23ff      	movs	r3, #255	; 0xff
 8003dd8:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f000 fc53 	bl	8004688 <memset>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(ssd1306_t* ssd1306, uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003dea:	b490      	push	{r4, r7}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	4608      	mov	r0, r1
 8003df4:	4611      	mov	r1, r2
 8003df6:	461a      	mov	r2, r3
 8003df8:	4603      	mov	r3, r0
 8003dfa:	817b      	strh	r3, [r7, #10]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	813b      	strh	r3, [r7, #8]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71fb      	strb	r3, [r7, #7]
	if (
 8003e04:	897b      	ldrh	r3, [r7, #10]
 8003e06:	2b83      	cmp	r3, #131	; 0x83
 8003e08:	d85a      	bhi.n	8003ec0 <SSD1306_DrawPixel+0xd6>
		x >= SSD1306_WIDTH ||
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	2b3f      	cmp	r3, #63	; 0x3f
 8003e0e:	d857      	bhi.n	8003ec0 <SSD1306_DrawPixel+0xd6>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (ssd1306->Inverted) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	7b1b      	ldrb	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d006      	beq.n	8003e26 <SSD1306_DrawPixel+0x3c>
		color = (SSD1306_COLOR_t)!color;
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf0c      	ite	eq
 8003e1e:	2301      	moveq	r3, #1
 8003e20:	2300      	movne	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	71fb      	strb	r3, [r7, #7]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d123      	bne.n	8003e74 <SSD1306_DrawPixel+0x8a>
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003e2c:	897a      	ldrh	r2, [r7, #10]
 8003e2e:	893b      	ldrh	r3, [r7, #8]
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	b298      	uxth	r0, r3
 8003e34:	4601      	mov	r1, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	015b      	lsls	r3, r3, #5
 8003e3a:	440b      	add	r3, r1
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	7b9b      	ldrb	r3, [r3, #14]
 8003e46:	b25a      	sxtb	r2, r3
 8003e48:	893b      	ldrh	r3, [r7, #8]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b25c      	sxtb	r4, r3
 8003e5a:	897a      	ldrh	r2, [r7, #10]
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	015b      	lsls	r3, r3, #5
 8003e62:	440b      	add	r3, r1
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	b2e1      	uxtb	r1, r4
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	460a      	mov	r2, r1
 8003e70:	739a      	strb	r2, [r3, #14]
 8003e72:	e026      	b.n	8003ec2 <SSD1306_DrawPixel+0xd8>
	} else {
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003e74:	897a      	ldrh	r2, [r7, #10]
 8003e76:	893b      	ldrh	r3, [r7, #8]
 8003e78:	08db      	lsrs	r3, r3, #3
 8003e7a:	b298      	uxth	r0, r3
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	015b      	lsls	r3, r3, #5
 8003e82:	440b      	add	r3, r1
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	7b9b      	ldrb	r3, [r3, #14]
 8003e8e:	b25a      	sxtb	r2, r3
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b25c      	sxtb	r4, r3
 8003ea6:	897a      	ldrh	r2, [r7, #10]
 8003ea8:	4601      	mov	r1, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	015b      	lsls	r3, r3, #5
 8003eae:	440b      	add	r3, r1
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	b2e1      	uxtb	r1, r4
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	460a      	mov	r2, r1
 8003ebc:	739a      	strb	r2, [r3, #14]
 8003ebe:	e000      	b.n	8003ec2 <SSD1306_DrawPixel+0xd8>
		return;
 8003ec0:	bf00      	nop
	}
}
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc90      	pop	{r4, r7}
 8003ec8:	4770      	bx	lr

08003eca <SSD1306_GotoXY>:

void SSD1306_GotoXY(ssd1306_t* ssd1306, uint16_t x, uint16_t y) {
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	807b      	strh	r3, [r7, #2]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	ssd1306->CurrentX = x;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	887a      	ldrh	r2, [r7, #2]
 8003ede:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = y;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	883a      	ldrh	r2, [r7, #0]
 8003ee4:	815a      	strh	r2, [r3, #10]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <SSD1306_Putc>:

char SSD1306_Putc(ssd1306_t* ssd1306, uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	461a      	mov	r2, r3
 8003efc:	460b      	mov	r3, r1
 8003efe:	72fb      	strb	r3, [r7, #11]
 8003f00:	4613      	mov	r3, r2
 8003f02:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	891b      	ldrh	r3, [r3, #8]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	4413      	add	r3, r2
	if (
 8003f10:	2b83      	cmp	r3, #131	; 0x83
 8003f12:	dc07      	bgt.n	8003f24 <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (ssd1306->CurrentY + Font->FontHeight)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	895b      	ldrh	r3, [r3, #10]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8003f20:	2b3f      	cmp	r3, #63	; 0x3f
 8003f22:	dd01      	ble.n	8003f28 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e05e      	b.n	8003fe6 <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e04b      	b.n	8003fc6 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	3b20      	subs	r3, #32
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	7849      	ldrb	r1, [r1, #1]
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4619      	mov	r1, r3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	440b      	add	r3, r1
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e030      	b.n	8003fb4 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t) color);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	891a      	ldrh	r2, [r3, #8]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	b299      	uxth	r1, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	895a      	ldrh	r2, [r3, #10]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	7abb      	ldrb	r3, [r7, #10]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff ff34 	bl	8003dea <SSD1306_DrawPixel>
 8003f82:	e014      	b.n	8003fae <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t)!color);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	891a      	ldrh	r2, [r3, #8]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b299      	uxth	r1, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	895a      	ldrh	r2, [r3, #10]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	7abb      	ldrb	r3, [r7, #10]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ff1e 	bl	8003dea <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d3c8      	bcc.n	8003f52 <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d3ad      	bcc.n	8003f2e <SSD1306_Putc+0x3e>
			}
		}
	}
	
	/* Increase pointer */
	ssd1306->CurrentX += Font->FontWidth;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	891a      	ldrh	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	811a      	strh	r2, [r3, #8]
	
	/* Return character written */
	return ch;
 8003fe4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <SSD1306_Putint>:

void SSD1306_Putint(ssd1306_t* ssd1306, int data, uint8_t slot) {
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
 8003ffe:	466b      	mov	r3, sp
 8004000:	461d      	mov	r5, r3

	char menos_char = ' ';
 8004002:	2320      	movs	r3, #32
 8004004:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (data < 0) {
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	da05      	bge.n	800401a <SSD1306_Putint+0x2a>
		data = -data;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	425b      	negs	r3, r3
 8004012:	60bb      	str	r3, [r7, #8]
		menos_char = '-';
 8004014:	232d      	movs	r3, #45	; 0x2d
 8004016:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}

	int size = size_int_oled(data);
 800401a:	68b8      	ldr	r0, [r7, #8]
 800401c:	f000 f8c6 	bl	80041ac <size_int_oled>
 8004020:	4603      	mov	r3, r0
 8004022:	61fb      	str	r3, [r7, #28]
	char data_char[size];		// String de chars=
 8004024:	69f8      	ldr	r0, [r7, #28]
 8004026:	1e43      	subs	r3, r0, #1
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	4603      	mov	r3, r0
 800402c:	4619      	mov	r1, r3
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	00d4      	lsls	r4, r2, #3
 800403c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004040:	00cb      	lsls	r3, r1, #3
 8004042:	4603      	mov	r3, r0
 8004044:	4619      	mov	r1, r3
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	f04f 0400 	mov.w	r4, #0
 8004052:	00d4      	lsls	r4, r2, #3
 8004054:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004058:	00cb      	lsls	r3, r1, #3
 800405a:	4603      	mov	r3, r0
 800405c:	3307      	adds	r3, #7
 800405e:	08db      	lsrs	r3, r3, #3
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	ebad 0d03 	sub.w	sp, sp, r3
 8004066:	466b      	mov	r3, sp
 8004068:	3300      	adds	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4949      	ldr	r1, [pc, #292]	; (8004198 <SSD1306_Putint+0x1a8>)
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fbc6 	bl	8004804 <siprintf>

	uint16_t x_slot = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t y_slot = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t slot_mini = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (slot) {
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	3b01      	subs	r3, #1
 800408a:	2b04      	cmp	r3, #4
 800408c:	d82b      	bhi.n	80040e6 <SSD1306_Putint+0xf6>
 800408e:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <SSD1306_Putint+0xa4>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	080040a9 	.word	0x080040a9
 8004098:	080040b3 	.word	0x080040b3
 800409c:	080040bd 	.word	0x080040bd
 80040a0:	080040c7 	.word	0x080040c7
 80040a4:	080040d7 	.word	0x080040d7
	case 1:
		x_slot = 2;
 80040a8:	2302      	movs	r3, #2
 80040aa:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 80040b0:	e019      	b.n	80040e6 <SSD1306_Putint+0xf6>
	case 2:
		x_slot = 2;
 80040b2:	2302      	movs	r3, #2
 80040b4:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 17;
 80040b6:	2311      	movs	r3, #17
 80040b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 80040ba:	e014      	b.n	80040e6 <SSD1306_Putint+0xf6>
	case 3:
		x_slot = 2;
 80040bc:	2302      	movs	r3, #2
 80040be:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 35;
 80040c0:	2323      	movs	r3, #35	; 0x23
 80040c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 80040c4:	e00f      	b.n	80040e6 <SSD1306_Putint+0xf6>
	case 4:
		x_slot = 22;
 80040c6:	2316      	movs	r3, #22
 80040c8:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 53;
 80040ca:	2335      	movs	r3, #53	; 0x35
 80040cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		slot_mini = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 80040d4:	e007      	b.n	80040e6 <SSD1306_Putint+0xf6>
	case 5:
		x_slot = 70;
 80040d6:	2346      	movs	r3, #70	; 0x46
 80040d8:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 53;
 80040da:	2335      	movs	r3, #53	; 0x35
 80040dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		slot_mini = 1;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 80040e4:	bf00      	nop
	}
	if (slot_mini == 1){
 80040e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d129      	bne.n	8004142 <SSD1306_Putint+0x152>
		SSD1306_GotoXY (ssd1306, x_slot,y_slot);				// Select x and y from the selected slot
 80040ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040f2:	4619      	mov	r1, r3
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff fee8 	bl	8003eca <SSD1306_GotoXY>
		SSD1306_Puts (ssd1306, "       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 80040fa:	2301      	movs	r3, #1
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <SSD1306_Putint+0x1ac>)
 80040fe:	4928      	ldr	r1, [pc, #160]	; (80041a0 <SSD1306_Putint+0x1b0>)
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f881 	bl	8004208 <SSD1306_Puts>
		SSD1306_GotoXY (ssd1306, x_slot,y_slot);				// Come back to the initial position
 8004106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800410a:	4619      	mov	r1, r3
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7ff fedc 	bl	8003eca <SSD1306_GotoXY>
		SSD1306_Putc (ssd1306, menos_char, &Font_7x10, 1);	// Write minus char if necessary
 8004112:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8004116:	2301      	movs	r3, #1
 8004118:	4a20      	ldr	r2, [pc, #128]	; (800419c <SSD1306_Putint+0x1ac>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fee8 	bl	8003ef0 <SSD1306_Putc>
		SSD1306_GotoXY (ssd1306, x_slot+7,y_slot);			// Shif a char correspondig to the minus char
 8004120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004122:	3307      	adds	r3, #7
 8004124:	b29b      	uxth	r3, r3
 8004126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004128:	4619      	mov	r1, r3
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff fecd 	bl	8003eca <SSD1306_GotoXY>
		SSD1306_Puts (ssd1306, data_char, &Font_7x10, 1);	// Write the value
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	2301      	movs	r3, #1
 8004134:	4a19      	ldr	r2, [pc, #100]	; (800419c <SSD1306_Putint+0x1ac>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f866 	bl	8004208 <SSD1306_Puts>
		return;
 800413c:	bf00      	nop
 800413e:	46ad      	mov	sp, r5
 8004140:	e027      	b.n	8004192 <SSD1306_Putint+0x1a2>
	}
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 8004142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004146:	4619      	mov	r1, r3
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff febe 	bl	8003eca <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 800414e:	2301      	movs	r3, #1
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <SSD1306_Putint+0x1b4>)
 8004152:	4915      	ldr	r1, [pc, #84]	; (80041a8 <SSD1306_Putint+0x1b8>)
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f857 	bl	8004208 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 800415a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800415c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800415e:	4619      	mov	r1, r3
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff feb2 	bl	8003eca <SSD1306_GotoXY>
	SSD1306_Putc (ssd1306, menos_char, &Font_11x18, 1);
 8004166:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800416a:	2301      	movs	r3, #1
 800416c:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <SSD1306_Putint+0x1b4>)
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff febe 	bl	8003ef0 <SSD1306_Putc>
	SSD1306_GotoXY (ssd1306, x_slot+11,y_slot);
 8004174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004176:	330b      	adds	r3, #11
 8004178:	b29b      	uxth	r3, r3
 800417a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800417c:	4619      	mov	r1, r3
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fea3 	bl	8003eca <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, data_char, &Font_11x18, 1);
 8004184:	6979      	ldr	r1, [r7, #20]
 8004186:	2301      	movs	r3, #1
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <SSD1306_Putint+0x1b4>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f83c 	bl	8004208 <SSD1306_Puts>
 8004190:	46ad      	mov	sp, r5
}
 8004192:	3728      	adds	r7, #40	; 0x28
 8004194:	46bd      	mov	sp, r7
 8004196:	bdb0      	pop	{r4, r5, r7, pc}
 8004198:	08005568 	.word	0x08005568
 800419c:	20000008 	.word	0x20000008
 80041a0:	0800556c 	.word	0x0800556c
 80041a4:	20000010 	.word	0x20000010
 80041a8:	08005574 	.word	0x08005574

080041ac <size_int_oled>:
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
	SSD1306_Puts (ssd1306, float_str, &Font_11x18, 1);
//	SSD1306_UpdateScreen();
}

uint8_t size_int_oled(int data){
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <size_int_oled+0x14>
		size = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
 80041be:	e01b      	b.n	80041f8 <size_int_oled+0x4c>
	}
	else {
		size = floor(log10(data))+1;
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fc f917 	bl	80003f4 <__aeabi_i2d>
 80041c6:	4603      	mov	r3, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	4618      	mov	r0, r3
 80041cc:	4621      	mov	r1, r4
 80041ce:	f000 fefb 	bl	8004fc8 <log10>
 80041d2:	4603      	mov	r3, r0
 80041d4:	460c      	mov	r4, r1
 80041d6:	4618      	mov	r0, r3
 80041d8:	4621      	mov	r1, r4
 80041da:	f000 fe71 	bl	8004ec0 <floor>
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <size_int_oled+0x58>)
 80041e4:	f7fb ffba 	bl	800015c <__adddf3>
 80041e8:	4603      	mov	r3, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	4618      	mov	r0, r3
 80041ee:	4621      	mov	r1, r4
 80041f0:	f7fc fc42 	bl	8000a78 <__aeabi_d2uiz>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	bf00      	nop
 8004204:	3ff00000 	.word	0x3ff00000

08004208 <SSD1306_Puts>:

char SSD1306_Puts(ssd1306_t* ssd1306, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str) {
 8004216:	e012      	b.n	800423e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(ssd1306, *str, Font, color) != *str) {
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	7819      	ldrb	r1, [r3, #0]
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fe65 	bl	8003ef0 <SSD1306_Putc>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d002      	beq.n	8004238 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	e008      	b.n	800424a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3301      	adds	r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
	while (*str) {
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e8      	bne.n	8004218 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <ssd1306_I2C_WriteMulti>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(ssd1306_t* ssd1306, uint8_t reg, uint8_t* data, uint16_t count) {
 8004252:	b5b0      	push	{r4, r5, r7, lr}
 8004254:	b08a      	sub	sp, #40	; 0x28
 8004256:	af02      	add	r7, sp, #8
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	461a      	mov	r2, r3
 800425e:	460b      	mov	r3, r1
 8004260:	72fb      	strb	r3, [r7, #11]
 8004262:	4613      	mov	r3, r2
 8004264:	813b      	strh	r3, [r7, #8]
 8004266:	466b      	mov	r3, sp
 8004268:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 800426a:	893b      	ldrh	r3, [r7, #8]
 800426c:	1c58      	adds	r0, r3, #1
 800426e:	1e43      	subs	r3, r0, #1
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	4603      	mov	r3, r0
 8004274:	4619      	mov	r1, r3
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	f04f 0400 	mov.w	r4, #0
 8004282:	00d4      	lsls	r4, r2, #3
 8004284:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004288:	00cb      	lsls	r3, r1, #3
 800428a:	4603      	mov	r3, r0
 800428c:	4619      	mov	r1, r3
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	00d4      	lsls	r4, r2, #3
 800429c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80042a0:	00cb      	lsls	r3, r1, #3
 80042a2:	4603      	mov	r3, r0
 80042a4:	3307      	adds	r3, #7
 80042a6:	08db      	lsrs	r3, r3, #3
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	ebad 0d03 	sub.w	sp, sp, r3
 80042ae:	ab02      	add	r3, sp, #8
 80042b0:	3300      	adds	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
	dt[0] = reg;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	7afa      	ldrb	r2, [r7, #11]
 80042b8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80042ba:	2301      	movs	r3, #1
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e00a      	b.n	80042d6 <ssd1306_I2C_WriteMulti+0x84>
		dt[i] = data[i-1];
 80042c0:	7ffb      	ldrb	r3, [r7, #31]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	441a      	add	r2, r3
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	7811      	ldrb	r1, [r2, #0]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80042d0:	7ffb      	ldrb	r3, [r7, #31]
 80042d2:	3301      	adds	r3, #1
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	7ffb      	ldrb	r3, [r7, #31]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	893a      	ldrh	r2, [r7, #8]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d2ef      	bcs.n	80042c0 <ssd1306_I2C_WriteMulti+0x6e>
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, count, 10);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6858      	ldr	r0, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b299      	uxth	r1, r3
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	893c      	ldrh	r4, [r7, #8]
 80042ee:	230a      	movs	r3, #10
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fd fa68 	bl	80017c8 <HAL_I2C_Master_Transmit>
 80042f8:	46ad      	mov	sp, r5
}
 80042fa:	bf00      	nop
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bdb0      	pop	{r4, r5, r7, pc}

08004302 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(ssd1306_t* ssd1306, uint8_t reg, uint8_t data) {
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af02      	add	r7, sp, #8
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
 800430e:	4613      	mov	r3, r2
 8004310:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2];
	dt[0] = reg;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004316:	78bb      	ldrb	r3, [r7, #2]
 8004318:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, 2, 10);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6858      	ldr	r0, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b299      	uxth	r1, r3
 8004324:	f107 020c 	add.w	r2, r7, #12
 8004328:	230a      	movs	r3, #10
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2302      	movs	r3, #2
 800432e:	f7fd fa4b 	bl	80017c8 <HAL_I2C_Master_Transmit>
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <HAL_MspInit+0x5c>)
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	4a14      	ldr	r2, [pc, #80]	; (8004398 <HAL_MspInit+0x5c>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6193      	str	r3, [r2, #24]
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_MspInit+0x5c>)
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_MspInit+0x5c>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4a0e      	ldr	r2, [pc, #56]	; (8004398 <HAL_MspInit+0x5c>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	61d3      	str	r3, [r2, #28]
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_MspInit+0x5c>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_MspInit+0x60>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <HAL_MspInit+0x60>)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	40021000 	.word	0x40021000
 800439c:	40010000 	.word	0x40010000

080043a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a8:	f107 0310 	add.w	r3, r7, #16
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a15      	ldr	r2, [pc, #84]	; (8004410 <HAL_I2C_MspInit+0x70>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d123      	bne.n	8004408 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_I2C_MspInit+0x74>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_I2C_MspInit+0x74>)
 80043c6:	f043 0308 	orr.w	r3, r3, #8
 80043ca:	6193      	str	r3, [r2, #24]
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <HAL_I2C_MspInit+0x74>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043d8:	23c0      	movs	r3, #192	; 0xc0
 80043da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043dc:	2312      	movs	r3, #18
 80043de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043e0:	2303      	movs	r3, #3
 80043e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e4:	f107 0310 	add.w	r3, r7, #16
 80043e8:	4619      	mov	r1, r3
 80043ea:	480b      	ldr	r0, [pc, #44]	; (8004418 <HAL_I2C_MspInit+0x78>)
 80043ec:	f7fc ff52 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_I2C_MspInit+0x74>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_I2C_MspInit+0x74>)
 80043f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043fa:	61d3      	str	r3, [r2, #28]
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_I2C_MspInit+0x74>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004408:	bf00      	nop
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40005400 	.word	0x40005400
 8004414:	40021000 	.word	0x40021000
 8004418:	40010c00 	.word	0x40010c00

0800441c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d114      	bne.n	8004458 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800442e:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	61d3      	str	r3, [r2, #28]
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004446:	2200      	movs	r2, #0
 8004448:	2100      	movs	r1, #0
 800444a:	201c      	movs	r0, #28
 800444c:	f7fc feeb 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004450:	201c      	movs	r0, #28
 8004452:	f7fc ff04 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004456:	e018      	b.n	800448a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <HAL_TIM_Base_MspInit+0x7c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d113      	bne.n	800448a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004468:	f043 0302 	orr.w	r3, r3, #2
 800446c:	61d3      	str	r3, [r2, #28]
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	2100      	movs	r1, #0
 800447e:	201d      	movs	r0, #29
 8004480:	f7fc fed1 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004484:	201d      	movs	r0, #29
 8004486:	f7fc feea 	bl	800125e <HAL_NVIC_EnableIRQ>
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	40000400 	.word	0x40000400

0800449c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ac:	e7fe      	b.n	80044ac <HardFault_Handler+0x4>

080044ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044b2:	e7fe      	b.n	80044b2 <MemManage_Handler+0x4>

080044b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <BusFault_Handler+0x4>

080044ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044be:	e7fe      	b.n	80044be <UsageFault_Handler+0x4>

080044c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e8:	f7fc fdaa 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ec:	bf00      	nop
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <TIM2_IRQHandler+0x10>)
 80044f6:	f7fe fd13 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000164 	.word	0x20000164

08004504 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <TIM3_IRQHandler+0x10>)
 800450a:	f7fe fd09 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000120 	.word	0x20000120

08004518 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <_sbrk+0x50>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <_sbrk+0x16>
		heap_end = &end;
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <_sbrk+0x50>)
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <_sbrk+0x54>)
 800452c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <_sbrk+0x50>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <_sbrk+0x50>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	466a      	mov	r2, sp
 800453e:	4293      	cmp	r3, r2
 8004540:	d907      	bls.n	8004552 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004542:	f000 f86f 	bl	8004624 <__errno>
 8004546:	4602      	mov	r2, r0
 8004548:	230c      	movs	r3, #12
 800454a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	e006      	b.n	8004560 <_sbrk+0x48>
	}

	heap_end += incr;
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <_sbrk+0x50>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	4a03      	ldr	r2, [pc, #12]	; (8004568 <_sbrk+0x50>)
 800455c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800455e:	68fb      	ldr	r3, [r7, #12]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	200000b8 	.word	0x200000b8
 800456c:	200001a8 	.word	0x200001a8

08004570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004574:	4b15      	ldr	r3, [pc, #84]	; (80045cc <SystemInit+0x5c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <SystemInit+0x5c>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <SystemInit+0x5c>)
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4911      	ldr	r1, [pc, #68]	; (80045cc <SystemInit+0x5c>)
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <SystemInit+0x60>)
 8004588:	4013      	ands	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <SystemInit+0x5c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <SystemInit+0x5c>)
 8004592:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <SystemInit+0x5c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <SystemInit+0x5c>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <SystemInit+0x5c>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4a07      	ldr	r2, [pc, #28]	; (80045cc <SystemInit+0x5c>)
 80045ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80045b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <SystemInit+0x5c>)
 80045b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80045ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <SystemInit+0x64>)
 80045be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	40021000 	.word	0x40021000
 80045d0:	f8ff0000 	.word	0xf8ff0000
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045da:	e003      	b.n	80045e4 <LoopCopyDataInit>

080045dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045e2:	3104      	adds	r1, #4

080045e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045e4:	480a      	ldr	r0, [pc, #40]	; (8004610 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80045e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80045ec:	d3f6      	bcc.n	80045dc <CopyDataInit>
  ldr r2, =_sbss
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80045f0:	e002      	b.n	80045f8 <LoopFillZerobss>

080045f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80045f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80045f4:	f842 3b04 	str.w	r3, [r2], #4

080045f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80045f8:	4b08      	ldr	r3, [pc, #32]	; (800461c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80045fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80045fc:	d3f9      	bcc.n	80045f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045fe:	f7ff ffb7 	bl	8004570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004602:	f000 f815 	bl	8004630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004606:	f7ff f8b1 	bl	800376c <main>
  bx lr
 800460a:	4770      	bx	lr
  ldr r3, =_sidata
 800460c:	08006aa4 	.word	0x08006aa4
  ldr r0, =_sdata
 8004610:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004614:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8004618:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 800461c:	200001a8 	.word	0x200001a8

08004620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004620:	e7fe      	b.n	8004620 <ADC1_2_IRQHandler>
	...

08004624 <__errno>:
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <__errno+0x8>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	2000001c 	.word	0x2000001c

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	2500      	movs	r5, #0
 8004634:	4e0c      	ldr	r6, [pc, #48]	; (8004668 <__libc_init_array+0x38>)
 8004636:	4c0d      	ldr	r4, [pc, #52]	; (800466c <__libc_init_array+0x3c>)
 8004638:	1ba4      	subs	r4, r4, r6
 800463a:	10a4      	asrs	r4, r4, #2
 800463c:	42a5      	cmp	r5, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	f000 ff7c 	bl	800553c <_init>
 8004644:	2500      	movs	r5, #0
 8004646:	4e0a      	ldr	r6, [pc, #40]	; (8004670 <__libc_init_array+0x40>)
 8004648:	4c0a      	ldr	r4, [pc, #40]	; (8004674 <__libc_init_array+0x44>)
 800464a:	1ba4      	subs	r4, r4, r6
 800464c:	10a4      	asrs	r4, r4, #2
 800464e:	42a5      	cmp	r5, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004658:	4798      	blx	r3
 800465a:	3501      	adds	r5, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004662:	4798      	blx	r3
 8004664:	3501      	adds	r5, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	08006a9c 	.word	0x08006a9c
 800466c:	08006a9c 	.word	0x08006a9c
 8004670:	08006a9c 	.word	0x08006a9c
 8004674:	08006aa0 	.word	0x08006aa0

08004678 <malloc>:
 8004678:	4b02      	ldr	r3, [pc, #8]	; (8004684 <malloc+0xc>)
 800467a:	4601      	mov	r1, r0
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f000 b857 	b.w	8004730 <_malloc_r>
 8004682:	bf00      	nop
 8004684:	2000001c 	.word	0x2000001c

08004688 <memset>:
 8004688:	4603      	mov	r3, r0
 800468a:	4402      	add	r2, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <_free_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4605      	mov	r5, r0
 800469c:	2900      	cmp	r1, #0
 800469e:	d043      	beq.n	8004728 <_free_r+0x90>
 80046a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a4:	1f0c      	subs	r4, r1, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfb8      	it	lt
 80046aa:	18e4      	addlt	r4, r4, r3
 80046ac:	f000 f8ca 	bl	8004844 <__malloc_lock>
 80046b0:	4a1e      	ldr	r2, [pc, #120]	; (800472c <_free_r+0x94>)
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	4610      	mov	r0, r2
 80046b6:	b933      	cbnz	r3, 80046c6 <_free_r+0x2e>
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	6014      	str	r4, [r2, #0]
 80046bc:	4628      	mov	r0, r5
 80046be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c2:	f000 b8c0 	b.w	8004846 <__malloc_unlock>
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	d90b      	bls.n	80046e2 <_free_r+0x4a>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	1862      	adds	r2, r4, r1
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bf01      	itttt	eq
 80046d2:	681a      	ldreq	r2, [r3, #0]
 80046d4:	685b      	ldreq	r3, [r3, #4]
 80046d6:	1852      	addeq	r2, r2, r1
 80046d8:	6022      	streq	r2, [r4, #0]
 80046da:	6063      	str	r3, [r4, #4]
 80046dc:	6004      	str	r4, [r0, #0]
 80046de:	e7ed      	b.n	80046bc <_free_r+0x24>
 80046e0:	4613      	mov	r3, r2
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	b10a      	cbz	r2, 80046ea <_free_r+0x52>
 80046e6:	42a2      	cmp	r2, r4
 80046e8:	d9fa      	bls.n	80046e0 <_free_r+0x48>
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	1858      	adds	r0, r3, r1
 80046ee:	42a0      	cmp	r0, r4
 80046f0:	d10b      	bne.n	800470a <_free_r+0x72>
 80046f2:	6820      	ldr	r0, [r4, #0]
 80046f4:	4401      	add	r1, r0
 80046f6:	1858      	adds	r0, r3, r1
 80046f8:	4282      	cmp	r2, r0
 80046fa:	6019      	str	r1, [r3, #0]
 80046fc:	d1de      	bne.n	80046bc <_free_r+0x24>
 80046fe:	6810      	ldr	r0, [r2, #0]
 8004700:	6852      	ldr	r2, [r2, #4]
 8004702:	4401      	add	r1, r0
 8004704:	6019      	str	r1, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	e7d8      	b.n	80046bc <_free_r+0x24>
 800470a:	d902      	bls.n	8004712 <_free_r+0x7a>
 800470c:	230c      	movs	r3, #12
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	e7d4      	b.n	80046bc <_free_r+0x24>
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	1821      	adds	r1, r4, r0
 8004716:	428a      	cmp	r2, r1
 8004718:	bf01      	itttt	eq
 800471a:	6811      	ldreq	r1, [r2, #0]
 800471c:	6852      	ldreq	r2, [r2, #4]
 800471e:	1809      	addeq	r1, r1, r0
 8004720:	6021      	streq	r1, [r4, #0]
 8004722:	6062      	str	r2, [r4, #4]
 8004724:	605c      	str	r4, [r3, #4]
 8004726:	e7c9      	b.n	80046bc <_free_r+0x24>
 8004728:	bd38      	pop	{r3, r4, r5, pc}
 800472a:	bf00      	nop
 800472c:	200000bc 	.word	0x200000bc

08004730 <_malloc_r>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	1ccd      	adds	r5, r1, #3
 8004734:	f025 0503 	bic.w	r5, r5, #3
 8004738:	3508      	adds	r5, #8
 800473a:	2d0c      	cmp	r5, #12
 800473c:	bf38      	it	cc
 800473e:	250c      	movcc	r5, #12
 8004740:	2d00      	cmp	r5, #0
 8004742:	4606      	mov	r6, r0
 8004744:	db01      	blt.n	800474a <_malloc_r+0x1a>
 8004746:	42a9      	cmp	r1, r5
 8004748:	d903      	bls.n	8004752 <_malloc_r+0x22>
 800474a:	230c      	movs	r3, #12
 800474c:	6033      	str	r3, [r6, #0]
 800474e:	2000      	movs	r0, #0
 8004750:	bd70      	pop	{r4, r5, r6, pc}
 8004752:	f000 f877 	bl	8004844 <__malloc_lock>
 8004756:	4a21      	ldr	r2, [pc, #132]	; (80047dc <_malloc_r+0xac>)
 8004758:	6814      	ldr	r4, [r2, #0]
 800475a:	4621      	mov	r1, r4
 800475c:	b991      	cbnz	r1, 8004784 <_malloc_r+0x54>
 800475e:	4c20      	ldr	r4, [pc, #128]	; (80047e0 <_malloc_r+0xb0>)
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	b91b      	cbnz	r3, 800476c <_malloc_r+0x3c>
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f83d 	bl	80047e4 <_sbrk_r>
 800476a:	6020      	str	r0, [r4, #0]
 800476c:	4629      	mov	r1, r5
 800476e:	4630      	mov	r0, r6
 8004770:	f000 f838 	bl	80047e4 <_sbrk_r>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d124      	bne.n	80047c2 <_malloc_r+0x92>
 8004778:	230c      	movs	r3, #12
 800477a:	4630      	mov	r0, r6
 800477c:	6033      	str	r3, [r6, #0]
 800477e:	f000 f862 	bl	8004846 <__malloc_unlock>
 8004782:	e7e4      	b.n	800474e <_malloc_r+0x1e>
 8004784:	680b      	ldr	r3, [r1, #0]
 8004786:	1b5b      	subs	r3, r3, r5
 8004788:	d418      	bmi.n	80047bc <_malloc_r+0x8c>
 800478a:	2b0b      	cmp	r3, #11
 800478c:	d90f      	bls.n	80047ae <_malloc_r+0x7e>
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	18cc      	adds	r4, r1, r3
 8004792:	50cd      	str	r5, [r1, r3]
 8004794:	4630      	mov	r0, r6
 8004796:	f000 f856 	bl	8004846 <__malloc_unlock>
 800479a:	f104 000b 	add.w	r0, r4, #11
 800479e:	1d23      	adds	r3, r4, #4
 80047a0:	f020 0007 	bic.w	r0, r0, #7
 80047a4:	1ac3      	subs	r3, r0, r3
 80047a6:	d0d3      	beq.n	8004750 <_malloc_r+0x20>
 80047a8:	425a      	negs	r2, r3
 80047aa:	50e2      	str	r2, [r4, r3]
 80047ac:	e7d0      	b.n	8004750 <_malloc_r+0x20>
 80047ae:	684b      	ldr	r3, [r1, #4]
 80047b0:	428c      	cmp	r4, r1
 80047b2:	bf16      	itet	ne
 80047b4:	6063      	strne	r3, [r4, #4]
 80047b6:	6013      	streq	r3, [r2, #0]
 80047b8:	460c      	movne	r4, r1
 80047ba:	e7eb      	b.n	8004794 <_malloc_r+0x64>
 80047bc:	460c      	mov	r4, r1
 80047be:	6849      	ldr	r1, [r1, #4]
 80047c0:	e7cc      	b.n	800475c <_malloc_r+0x2c>
 80047c2:	1cc4      	adds	r4, r0, #3
 80047c4:	f024 0403 	bic.w	r4, r4, #3
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d005      	beq.n	80047d8 <_malloc_r+0xa8>
 80047cc:	1a21      	subs	r1, r4, r0
 80047ce:	4630      	mov	r0, r6
 80047d0:	f000 f808 	bl	80047e4 <_sbrk_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d0cf      	beq.n	8004778 <_malloc_r+0x48>
 80047d8:	6025      	str	r5, [r4, #0]
 80047da:	e7db      	b.n	8004794 <_malloc_r+0x64>
 80047dc:	200000bc 	.word	0x200000bc
 80047e0:	200000c0 	.word	0x200000c0

080047e4 <_sbrk_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	2300      	movs	r3, #0
 80047e8:	4c05      	ldr	r4, [pc, #20]	; (8004800 <_sbrk_r+0x1c>)
 80047ea:	4605      	mov	r5, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	f7ff fe92 	bl	8004518 <_sbrk>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_sbrk_r+0x1a>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_sbrk_r+0x1a>
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	200001a4 	.word	0x200001a4

08004804 <siprintf>:
 8004804:	b40e      	push	{r1, r2, r3}
 8004806:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800480a:	b500      	push	{lr}
 800480c:	b09c      	sub	sp, #112	; 0x70
 800480e:	ab1d      	add	r3, sp, #116	; 0x74
 8004810:	9002      	str	r0, [sp, #8]
 8004812:	9006      	str	r0, [sp, #24]
 8004814:	9107      	str	r1, [sp, #28]
 8004816:	9104      	str	r1, [sp, #16]
 8004818:	4808      	ldr	r0, [pc, #32]	; (800483c <siprintf+0x38>)
 800481a:	4909      	ldr	r1, [pc, #36]	; (8004840 <siprintf+0x3c>)
 800481c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004820:	9105      	str	r1, [sp, #20]
 8004822:	6800      	ldr	r0, [r0, #0]
 8004824:	a902      	add	r1, sp, #8
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	f000 f868 	bl	80048fc <_svfiprintf_r>
 800482c:	2200      	movs	r2, #0
 800482e:	9b02      	ldr	r3, [sp, #8]
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	b01c      	add	sp, #112	; 0x70
 8004834:	f85d eb04 	ldr.w	lr, [sp], #4
 8004838:	b003      	add	sp, #12
 800483a:	4770      	bx	lr
 800483c:	2000001c 	.word	0x2000001c
 8004840:	ffff0208 	.word	0xffff0208

08004844 <__malloc_lock>:
 8004844:	4770      	bx	lr

08004846 <__malloc_unlock>:
 8004846:	4770      	bx	lr

08004848 <__ssputs_r>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	688e      	ldr	r6, [r1, #8]
 800484e:	4682      	mov	sl, r0
 8004850:	429e      	cmp	r6, r3
 8004852:	460c      	mov	r4, r1
 8004854:	4690      	mov	r8, r2
 8004856:	4699      	mov	r9, r3
 8004858:	d837      	bhi.n	80048ca <__ssputs_r+0x82>
 800485a:	898a      	ldrh	r2, [r1, #12]
 800485c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004860:	d031      	beq.n	80048c6 <__ssputs_r+0x7e>
 8004862:	2302      	movs	r3, #2
 8004864:	6825      	ldr	r5, [r4, #0]
 8004866:	6909      	ldr	r1, [r1, #16]
 8004868:	1a6f      	subs	r7, r5, r1
 800486a:	6965      	ldr	r5, [r4, #20]
 800486c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004870:	fb95 f5f3 	sdiv	r5, r5, r3
 8004874:	f109 0301 	add.w	r3, r9, #1
 8004878:	443b      	add	r3, r7
 800487a:	429d      	cmp	r5, r3
 800487c:	bf38      	it	cc
 800487e:	461d      	movcc	r5, r3
 8004880:	0553      	lsls	r3, r2, #21
 8004882:	d530      	bpl.n	80048e6 <__ssputs_r+0x9e>
 8004884:	4629      	mov	r1, r5
 8004886:	f7ff ff53 	bl	8004730 <_malloc_r>
 800488a:	4606      	mov	r6, r0
 800488c:	b950      	cbnz	r0, 80048a4 <__ssputs_r+0x5c>
 800488e:	230c      	movs	r3, #12
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	f8ca 3000 	str.w	r3, [sl]
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a4:	463a      	mov	r2, r7
 80048a6:	6921      	ldr	r1, [r4, #16]
 80048a8:	f000 fab6 	bl	8004e18 <memcpy>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	6126      	str	r6, [r4, #16]
 80048ba:	443e      	add	r6, r7
 80048bc:	6026      	str	r6, [r4, #0]
 80048be:	464e      	mov	r6, r9
 80048c0:	6165      	str	r5, [r4, #20]
 80048c2:	1bed      	subs	r5, r5, r7
 80048c4:	60a5      	str	r5, [r4, #8]
 80048c6:	454e      	cmp	r6, r9
 80048c8:	d900      	bls.n	80048cc <__ssputs_r+0x84>
 80048ca:	464e      	mov	r6, r9
 80048cc:	4632      	mov	r2, r6
 80048ce:	4641      	mov	r1, r8
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	f000 faac 	bl	8004e2e <memmove>
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	2000      	movs	r0, #0
 80048da:	1b9b      	subs	r3, r3, r6
 80048dc:	60a3      	str	r3, [r4, #8]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	441e      	add	r6, r3
 80048e2:	6026      	str	r6, [r4, #0]
 80048e4:	e7dc      	b.n	80048a0 <__ssputs_r+0x58>
 80048e6:	462a      	mov	r2, r5
 80048e8:	f000 faba 	bl	8004e60 <_realloc_r>
 80048ec:	4606      	mov	r6, r0
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d1e2      	bne.n	80048b8 <__ssputs_r+0x70>
 80048f2:	6921      	ldr	r1, [r4, #16]
 80048f4:	4650      	mov	r0, sl
 80048f6:	f7ff fecf 	bl	8004698 <_free_r>
 80048fa:	e7c8      	b.n	800488e <__ssputs_r+0x46>

080048fc <_svfiprintf_r>:
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	461d      	mov	r5, r3
 8004902:	898b      	ldrh	r3, [r1, #12]
 8004904:	b09d      	sub	sp, #116	; 0x74
 8004906:	061f      	lsls	r7, r3, #24
 8004908:	4680      	mov	r8, r0
 800490a:	460c      	mov	r4, r1
 800490c:	4616      	mov	r6, r2
 800490e:	d50f      	bpl.n	8004930 <_svfiprintf_r+0x34>
 8004910:	690b      	ldr	r3, [r1, #16]
 8004912:	b96b      	cbnz	r3, 8004930 <_svfiprintf_r+0x34>
 8004914:	2140      	movs	r1, #64	; 0x40
 8004916:	f7ff ff0b 	bl	8004730 <_malloc_r>
 800491a:	6020      	str	r0, [r4, #0]
 800491c:	6120      	str	r0, [r4, #16]
 800491e:	b928      	cbnz	r0, 800492c <_svfiprintf_r+0x30>
 8004920:	230c      	movs	r3, #12
 8004922:	f8c8 3000 	str.w	r3, [r8]
 8004926:	f04f 30ff 	mov.w	r0, #4294967295
 800492a:	e0c8      	b.n	8004abe <_svfiprintf_r+0x1c2>
 800492c:	2340      	movs	r3, #64	; 0x40
 800492e:	6163      	str	r3, [r4, #20]
 8004930:	2300      	movs	r3, #0
 8004932:	9309      	str	r3, [sp, #36]	; 0x24
 8004934:	2320      	movs	r3, #32
 8004936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800493a:	2330      	movs	r3, #48	; 0x30
 800493c:	f04f 0b01 	mov.w	fp, #1
 8004940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004944:	9503      	str	r5, [sp, #12]
 8004946:	4637      	mov	r7, r6
 8004948:	463d      	mov	r5, r7
 800494a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800494e:	b10b      	cbz	r3, 8004954 <_svfiprintf_r+0x58>
 8004950:	2b25      	cmp	r3, #37	; 0x25
 8004952:	d13e      	bne.n	80049d2 <_svfiprintf_r+0xd6>
 8004954:	ebb7 0a06 	subs.w	sl, r7, r6
 8004958:	d00b      	beq.n	8004972 <_svfiprintf_r+0x76>
 800495a:	4653      	mov	r3, sl
 800495c:	4632      	mov	r2, r6
 800495e:	4621      	mov	r1, r4
 8004960:	4640      	mov	r0, r8
 8004962:	f7ff ff71 	bl	8004848 <__ssputs_r>
 8004966:	3001      	adds	r0, #1
 8004968:	f000 80a4 	beq.w	8004ab4 <_svfiprintf_r+0x1b8>
 800496c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800496e:	4453      	add	r3, sl
 8004970:	9309      	str	r3, [sp, #36]	; 0x24
 8004972:	783b      	ldrb	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 809d 	beq.w	8004ab4 <_svfiprintf_r+0x1b8>
 800497a:	2300      	movs	r3, #0
 800497c:	f04f 32ff 	mov.w	r2, #4294967295
 8004980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	9307      	str	r3, [sp, #28]
 8004988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800498c:	931a      	str	r3, [sp, #104]	; 0x68
 800498e:	462f      	mov	r7, r5
 8004990:	2205      	movs	r2, #5
 8004992:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004996:	4850      	ldr	r0, [pc, #320]	; (8004ad8 <_svfiprintf_r+0x1dc>)
 8004998:	f000 fa30 	bl	8004dfc <memchr>
 800499c:	9b04      	ldr	r3, [sp, #16]
 800499e:	b9d0      	cbnz	r0, 80049d6 <_svfiprintf_r+0xda>
 80049a0:	06d9      	lsls	r1, r3, #27
 80049a2:	bf44      	itt	mi
 80049a4:	2220      	movmi	r2, #32
 80049a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049aa:	071a      	lsls	r2, r3, #28
 80049ac:	bf44      	itt	mi
 80049ae:	222b      	movmi	r2, #43	; 0x2b
 80049b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049b4:	782a      	ldrb	r2, [r5, #0]
 80049b6:	2a2a      	cmp	r2, #42	; 0x2a
 80049b8:	d015      	beq.n	80049e6 <_svfiprintf_r+0xea>
 80049ba:	462f      	mov	r7, r5
 80049bc:	2000      	movs	r0, #0
 80049be:	250a      	movs	r5, #10
 80049c0:	9a07      	ldr	r2, [sp, #28]
 80049c2:	4639      	mov	r1, r7
 80049c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c8:	3b30      	subs	r3, #48	; 0x30
 80049ca:	2b09      	cmp	r3, #9
 80049cc:	d94d      	bls.n	8004a6a <_svfiprintf_r+0x16e>
 80049ce:	b1b8      	cbz	r0, 8004a00 <_svfiprintf_r+0x104>
 80049d0:	e00f      	b.n	80049f2 <_svfiprintf_r+0xf6>
 80049d2:	462f      	mov	r7, r5
 80049d4:	e7b8      	b.n	8004948 <_svfiprintf_r+0x4c>
 80049d6:	4a40      	ldr	r2, [pc, #256]	; (8004ad8 <_svfiprintf_r+0x1dc>)
 80049d8:	463d      	mov	r5, r7
 80049da:	1a80      	subs	r0, r0, r2
 80049dc:	fa0b f000 	lsl.w	r0, fp, r0
 80049e0:	4318      	orrs	r0, r3
 80049e2:	9004      	str	r0, [sp, #16]
 80049e4:	e7d3      	b.n	800498e <_svfiprintf_r+0x92>
 80049e6:	9a03      	ldr	r2, [sp, #12]
 80049e8:	1d11      	adds	r1, r2, #4
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	9103      	str	r1, [sp, #12]
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	db01      	blt.n	80049f6 <_svfiprintf_r+0xfa>
 80049f2:	9207      	str	r2, [sp, #28]
 80049f4:	e004      	b.n	8004a00 <_svfiprintf_r+0x104>
 80049f6:	4252      	negs	r2, r2
 80049f8:	f043 0302 	orr.w	r3, r3, #2
 80049fc:	9207      	str	r2, [sp, #28]
 80049fe:	9304      	str	r3, [sp, #16]
 8004a00:	783b      	ldrb	r3, [r7, #0]
 8004a02:	2b2e      	cmp	r3, #46	; 0x2e
 8004a04:	d10c      	bne.n	8004a20 <_svfiprintf_r+0x124>
 8004a06:	787b      	ldrb	r3, [r7, #1]
 8004a08:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0a:	d133      	bne.n	8004a74 <_svfiprintf_r+0x178>
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	3702      	adds	r7, #2
 8004a10:	1d1a      	adds	r2, r3, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	9203      	str	r2, [sp, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfb8      	it	lt
 8004a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a1e:	9305      	str	r3, [sp, #20]
 8004a20:	4d2e      	ldr	r5, [pc, #184]	; (8004adc <_svfiprintf_r+0x1e0>)
 8004a22:	2203      	movs	r2, #3
 8004a24:	7839      	ldrb	r1, [r7, #0]
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 f9e8 	bl	8004dfc <memchr>
 8004a2c:	b138      	cbz	r0, 8004a3e <_svfiprintf_r+0x142>
 8004a2e:	2340      	movs	r3, #64	; 0x40
 8004a30:	1b40      	subs	r0, r0, r5
 8004a32:	fa03 f000 	lsl.w	r0, r3, r0
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	3701      	adds	r7, #1
 8004a3a:	4303      	orrs	r3, r0
 8004a3c:	9304      	str	r3, [sp, #16]
 8004a3e:	7839      	ldrb	r1, [r7, #0]
 8004a40:	2206      	movs	r2, #6
 8004a42:	4827      	ldr	r0, [pc, #156]	; (8004ae0 <_svfiprintf_r+0x1e4>)
 8004a44:	1c7e      	adds	r6, r7, #1
 8004a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a4a:	f000 f9d7 	bl	8004dfc <memchr>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d038      	beq.n	8004ac4 <_svfiprintf_r+0x1c8>
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <_svfiprintf_r+0x1e8>)
 8004a54:	bb13      	cbnz	r3, 8004a9c <_svfiprintf_r+0x1a0>
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	3307      	adds	r3, #7
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	3308      	adds	r3, #8
 8004a60:	9303      	str	r3, [sp, #12]
 8004a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a64:	444b      	add	r3, r9
 8004a66:	9309      	str	r3, [sp, #36]	; 0x24
 8004a68:	e76d      	b.n	8004946 <_svfiprintf_r+0x4a>
 8004a6a:	fb05 3202 	mla	r2, r5, r2, r3
 8004a6e:	2001      	movs	r0, #1
 8004a70:	460f      	mov	r7, r1
 8004a72:	e7a6      	b.n	80049c2 <_svfiprintf_r+0xc6>
 8004a74:	2300      	movs	r3, #0
 8004a76:	250a      	movs	r5, #10
 8004a78:	4619      	mov	r1, r3
 8004a7a:	3701      	adds	r7, #1
 8004a7c:	9305      	str	r3, [sp, #20]
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a84:	3a30      	subs	r2, #48	; 0x30
 8004a86:	2a09      	cmp	r2, #9
 8004a88:	d903      	bls.n	8004a92 <_svfiprintf_r+0x196>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0c8      	beq.n	8004a20 <_svfiprintf_r+0x124>
 8004a8e:	9105      	str	r1, [sp, #20]
 8004a90:	e7c6      	b.n	8004a20 <_svfiprintf_r+0x124>
 8004a92:	fb05 2101 	mla	r1, r5, r1, r2
 8004a96:	2301      	movs	r3, #1
 8004a98:	4607      	mov	r7, r0
 8004a9a:	e7f0      	b.n	8004a7e <_svfiprintf_r+0x182>
 8004a9c:	ab03      	add	r3, sp, #12
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <_svfiprintf_r+0x1ec>)
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f3af 8000 	nop.w
 8004aac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ab0:	4681      	mov	r9, r0
 8004ab2:	d1d6      	bne.n	8004a62 <_svfiprintf_r+0x166>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	065b      	lsls	r3, r3, #25
 8004ab8:	f53f af35 	bmi.w	8004926 <_svfiprintf_r+0x2a>
 8004abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004abe:	b01d      	add	sp, #116	; 0x74
 8004ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac4:	ab03      	add	r3, sp, #12
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <_svfiprintf_r+0x1ec>)
 8004acc:	a904      	add	r1, sp, #16
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f000 f882 	bl	8004bd8 <_printf_i>
 8004ad4:	e7ea      	b.n	8004aac <_svfiprintf_r+0x1b0>
 8004ad6:	bf00      	nop
 8004ad8:	08006a60 	.word	0x08006a60
 8004adc:	08006a66 	.word	0x08006a66
 8004ae0:	08006a6a 	.word	0x08006a6a
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	08004849 	.word	0x08004849

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4691      	mov	r9, r2
 8004af2:	461f      	mov	r7, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	4606      	mov	r6, r0
 8004afa:	4293      	cmp	r3, r2
 8004afc:	bfb8      	it	lt
 8004afe:	4613      	movlt	r3, r2
 8004b00:	f8c9 3000 	str.w	r3, [r9]
 8004b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b08:	460c      	mov	r4, r1
 8004b0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b0e:	b112      	cbz	r2, 8004b16 <_printf_common+0x2a>
 8004b10:	3301      	adds	r3, #1
 8004b12:	f8c9 3000 	str.w	r3, [r9]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b20:	3302      	addmi	r3, #2
 8004b22:	f8c9 3000 	strmi.w	r3, [r9]
 8004b26:	6825      	ldr	r5, [r4, #0]
 8004b28:	f015 0506 	ands.w	r5, r5, #6
 8004b2c:	d107      	bne.n	8004b3e <_printf_common+0x52>
 8004b2e:	f104 0a19 	add.w	sl, r4, #25
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	f8d9 2000 	ldr.w	r2, [r9]
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	42ab      	cmp	r3, r5
 8004b3c:	dc29      	bgt.n	8004b92 <_printf_common+0xa6>
 8004b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	3300      	adds	r3, #0
 8004b46:	bf18      	it	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	0692      	lsls	r2, r2, #26
 8004b4c:	d42e      	bmi.n	8004bac <_printf_common+0xc0>
 8004b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b52:	4639      	mov	r1, r7
 8004b54:	4630      	mov	r0, r6
 8004b56:	47c0      	blx	r8
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d021      	beq.n	8004ba0 <_printf_common+0xb4>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	68e5      	ldr	r5, [r4, #12]
 8004b60:	f003 0306 	and.w	r3, r3, #6
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	bf18      	it	ne
 8004b68:	2500      	movne	r5, #0
 8004b6a:	f8d9 2000 	ldr.w	r2, [r9]
 8004b6e:	f04f 0900 	mov.w	r9, #0
 8004b72:	bf08      	it	eq
 8004b74:	1aad      	subeq	r5, r5, r2
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	6922      	ldr	r2, [r4, #16]
 8004b7a:	bf08      	it	eq
 8004b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b80:	4293      	cmp	r3, r2
 8004b82:	bfc4      	itt	gt
 8004b84:	1a9b      	subgt	r3, r3, r2
 8004b86:	18ed      	addgt	r5, r5, r3
 8004b88:	341a      	adds	r4, #26
 8004b8a:	454d      	cmp	r5, r9
 8004b8c:	d11a      	bne.n	8004bc4 <_printf_common+0xd8>
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e008      	b.n	8004ba4 <_printf_common+0xb8>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4652      	mov	r2, sl
 8004b96:	4639      	mov	r1, r7
 8004b98:	4630      	mov	r0, r6
 8004b9a:	47c0      	blx	r8
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d103      	bne.n	8004ba8 <_printf_common+0xbc>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	3501      	adds	r5, #1
 8004baa:	e7c2      	b.n	8004b32 <_printf_common+0x46>
 8004bac:	2030      	movs	r0, #48	; 0x30
 8004bae:	18e1      	adds	r1, r4, r3
 8004bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bba:	4422      	add	r2, r4
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc2:	e7c4      	b.n	8004b4e <_printf_common+0x62>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	47c0      	blx	r8
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d0e6      	beq.n	8004ba0 <_printf_common+0xb4>
 8004bd2:	f109 0901 	add.w	r9, r9, #1
 8004bd6:	e7d8      	b.n	8004b8a <_printf_common+0x9e>

08004bd8 <_printf_i>:
 8004bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004be0:	460c      	mov	r4, r1
 8004be2:	7e09      	ldrb	r1, [r1, #24]
 8004be4:	b085      	sub	sp, #20
 8004be6:	296e      	cmp	r1, #110	; 0x6e
 8004be8:	4617      	mov	r7, r2
 8004bea:	4606      	mov	r6, r0
 8004bec:	4698      	mov	r8, r3
 8004bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bf0:	f000 80b3 	beq.w	8004d5a <_printf_i+0x182>
 8004bf4:	d822      	bhi.n	8004c3c <_printf_i+0x64>
 8004bf6:	2963      	cmp	r1, #99	; 0x63
 8004bf8:	d036      	beq.n	8004c68 <_printf_i+0x90>
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x3a>
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	f000 80b9 	beq.w	8004d74 <_printf_i+0x19c>
 8004c02:	2958      	cmp	r1, #88	; 0x58
 8004c04:	f000 8083 	beq.w	8004d0e <_printf_i+0x136>
 8004c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c10:	e032      	b.n	8004c78 <_printf_i+0xa0>
 8004c12:	2964      	cmp	r1, #100	; 0x64
 8004c14:	d001      	beq.n	8004c1a <_printf_i+0x42>
 8004c16:	2969      	cmp	r1, #105	; 0x69
 8004c18:	d1f6      	bne.n	8004c08 <_printf_i+0x30>
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	0605      	lsls	r5, r0, #24
 8004c20:	f103 0104 	add.w	r1, r3, #4
 8004c24:	d52a      	bpl.n	8004c7c <_printf_i+0xa4>
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da03      	bge.n	8004c36 <_printf_i+0x5e>
 8004c2e:	222d      	movs	r2, #45	; 0x2d
 8004c30:	425b      	negs	r3, r3
 8004c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c36:	486f      	ldr	r0, [pc, #444]	; (8004df4 <_printf_i+0x21c>)
 8004c38:	220a      	movs	r2, #10
 8004c3a:	e039      	b.n	8004cb0 <_printf_i+0xd8>
 8004c3c:	2973      	cmp	r1, #115	; 0x73
 8004c3e:	f000 809d 	beq.w	8004d7c <_printf_i+0x1a4>
 8004c42:	d808      	bhi.n	8004c56 <_printf_i+0x7e>
 8004c44:	296f      	cmp	r1, #111	; 0x6f
 8004c46:	d020      	beq.n	8004c8a <_printf_i+0xb2>
 8004c48:	2970      	cmp	r1, #112	; 0x70
 8004c4a:	d1dd      	bne.n	8004c08 <_printf_i+0x30>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	f043 0320 	orr.w	r3, r3, #32
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	e003      	b.n	8004c5e <_printf_i+0x86>
 8004c56:	2975      	cmp	r1, #117	; 0x75
 8004c58:	d017      	beq.n	8004c8a <_printf_i+0xb2>
 8004c5a:	2978      	cmp	r1, #120	; 0x78
 8004c5c:	d1d4      	bne.n	8004c08 <_printf_i+0x30>
 8004c5e:	2378      	movs	r3, #120	; 0x78
 8004c60:	4865      	ldr	r0, [pc, #404]	; (8004df8 <_printf_i+0x220>)
 8004c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c66:	e055      	b.n	8004d14 <_printf_i+0x13c>
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c6e:	1d19      	adds	r1, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6011      	str	r1, [r2, #0]
 8004c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e08c      	b.n	8004d96 <_printf_i+0x1be>
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c82:	6011      	str	r1, [r2, #0]
 8004c84:	bf18      	it	ne
 8004c86:	b21b      	sxthne	r3, r3
 8004c88:	e7cf      	b.n	8004c2a <_printf_i+0x52>
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	1d18      	adds	r0, r3, #4
 8004c90:	6010      	str	r0, [r2, #0]
 8004c92:	0628      	lsls	r0, r5, #24
 8004c94:	d501      	bpl.n	8004c9a <_printf_i+0xc2>
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	e002      	b.n	8004ca0 <_printf_i+0xc8>
 8004c9a:	0668      	lsls	r0, r5, #25
 8004c9c:	d5fb      	bpl.n	8004c96 <_printf_i+0xbe>
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	296f      	cmp	r1, #111	; 0x6f
 8004ca2:	bf14      	ite	ne
 8004ca4:	220a      	movne	r2, #10
 8004ca6:	2208      	moveq	r2, #8
 8004ca8:	4852      	ldr	r0, [pc, #328]	; (8004df4 <_printf_i+0x21c>)
 8004caa:	2100      	movs	r1, #0
 8004cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cb0:	6865      	ldr	r5, [r4, #4]
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	60a5      	str	r5, [r4, #8]
 8004cb6:	f2c0 8095 	blt.w	8004de4 <_printf_i+0x20c>
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	f021 0104 	bic.w	r1, r1, #4
 8004cc0:	6021      	str	r1, [r4, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d13d      	bne.n	8004d42 <_printf_i+0x16a>
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	f040 808e 	bne.w	8004de8 <_printf_i+0x210>
 8004ccc:	4665      	mov	r5, ip
 8004cce:	2a08      	cmp	r2, #8
 8004cd0:	d10b      	bne.n	8004cea <_printf_i+0x112>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07db      	lsls	r3, r3, #31
 8004cd6:	d508      	bpl.n	8004cea <_printf_i+0x112>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bfde      	ittt	le
 8004ce0:	2330      	movle	r3, #48	; 0x30
 8004ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cea:	ebac 0305 	sub.w	r3, ip, r5
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	f8cd 8000 	str.w	r8, [sp]
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	aa03      	add	r2, sp, #12
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7ff fef6 	bl	8004aec <_printf_common>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d14d      	bne.n	8004da0 <_printf_i+0x1c8>
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	b005      	add	sp, #20
 8004d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0e:	4839      	ldr	r0, [pc, #228]	; (8004df4 <_printf_i+0x21c>)
 8004d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	6821      	ldr	r1, [r4, #0]
 8004d18:	1d1d      	adds	r5, r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6015      	str	r5, [r2, #0]
 8004d1e:	060a      	lsls	r2, r1, #24
 8004d20:	d50b      	bpl.n	8004d3a <_printf_i+0x162>
 8004d22:	07ca      	lsls	r2, r1, #31
 8004d24:	bf44      	itt	mi
 8004d26:	f041 0120 	orrmi.w	r1, r1, #32
 8004d2a:	6021      	strmi	r1, [r4, #0]
 8004d2c:	b91b      	cbnz	r3, 8004d36 <_printf_i+0x15e>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	f022 0220 	bic.w	r2, r2, #32
 8004d34:	6022      	str	r2, [r4, #0]
 8004d36:	2210      	movs	r2, #16
 8004d38:	e7b7      	b.n	8004caa <_printf_i+0xd2>
 8004d3a:	064d      	lsls	r5, r1, #25
 8004d3c:	bf48      	it	mi
 8004d3e:	b29b      	uxthmi	r3, r3
 8004d40:	e7ef      	b.n	8004d22 <_printf_i+0x14a>
 8004d42:	4665      	mov	r5, ip
 8004d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d48:	fb02 3311 	mls	r3, r2, r1, r3
 8004d4c:	5cc3      	ldrb	r3, [r0, r3]
 8004d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d52:	460b      	mov	r3, r1
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d1f5      	bne.n	8004d44 <_printf_i+0x16c>
 8004d58:	e7b9      	b.n	8004cce <_printf_i+0xf6>
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	1d18      	adds	r0, r3, #4
 8004d60:	6961      	ldr	r1, [r4, #20]
 8004d62:	6010      	str	r0, [r2, #0]
 8004d64:	0628      	lsls	r0, r5, #24
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	d501      	bpl.n	8004d6e <_printf_i+0x196>
 8004d6a:	6019      	str	r1, [r3, #0]
 8004d6c:	e002      	b.n	8004d74 <_printf_i+0x19c>
 8004d6e:	066a      	lsls	r2, r5, #25
 8004d70:	d5fb      	bpl.n	8004d6a <_printf_i+0x192>
 8004d72:	8019      	strh	r1, [r3, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	4665      	mov	r5, ip
 8004d78:	6123      	str	r3, [r4, #16]
 8004d7a:	e7b9      	b.n	8004cf0 <_printf_i+0x118>
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	1d19      	adds	r1, r3, #4
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	681d      	ldr	r5, [r3, #0]
 8004d84:	6862      	ldr	r2, [r4, #4]
 8004d86:	2100      	movs	r1, #0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 f837 	bl	8004dfc <memchr>
 8004d8e:	b108      	cbz	r0, 8004d94 <_printf_i+0x1bc>
 8004d90:	1b40      	subs	r0, r0, r5
 8004d92:	6060      	str	r0, [r4, #4]
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9e:	e7a7      	b.n	8004cf0 <_printf_i+0x118>
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	462a      	mov	r2, r5
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0aa      	beq.n	8004d04 <_printf_i+0x12c>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	079b      	lsls	r3, r3, #30
 8004db2:	d413      	bmi.n	8004ddc <_printf_i+0x204>
 8004db4:	68e0      	ldr	r0, [r4, #12]
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	4298      	cmp	r0, r3
 8004dba:	bfb8      	it	lt
 8004dbc:	4618      	movlt	r0, r3
 8004dbe:	e7a3      	b.n	8004d08 <_printf_i+0x130>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	464a      	mov	r2, r9
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d09a      	beq.n	8004d04 <_printf_i+0x12c>
 8004dce:	3501      	adds	r5, #1
 8004dd0:	68e3      	ldr	r3, [r4, #12]
 8004dd2:	9a03      	ldr	r2, [sp, #12]
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	42ab      	cmp	r3, r5
 8004dd8:	dcf2      	bgt.n	8004dc0 <_printf_i+0x1e8>
 8004dda:	e7eb      	b.n	8004db4 <_printf_i+0x1dc>
 8004ddc:	2500      	movs	r5, #0
 8004dde:	f104 0919 	add.w	r9, r4, #25
 8004de2:	e7f5      	b.n	8004dd0 <_printf_i+0x1f8>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ac      	bne.n	8004d42 <_printf_i+0x16a>
 8004de8:	7803      	ldrb	r3, [r0, #0]
 8004dea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df2:	e76c      	b.n	8004cce <_printf_i+0xf6>
 8004df4:	08006a71 	.word	0x08006a71
 8004df8:	08006a82 	.word	0x08006a82

08004dfc <memchr>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	b2c9      	uxtb	r1, r1
 8004e00:	4402      	add	r2, r0
 8004e02:	4290      	cmp	r0, r2
 8004e04:	4603      	mov	r3, r0
 8004e06:	d101      	bne.n	8004e0c <memchr+0x10>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e003      	b.n	8004e14 <memchr+0x18>
 8004e0c:	781c      	ldrb	r4, [r3, #0]
 8004e0e:	3001      	adds	r0, #1
 8004e10:	428c      	cmp	r4, r1
 8004e12:	d1f6      	bne.n	8004e02 <memchr+0x6>
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd10      	pop	{r4, pc}

08004e18 <memcpy>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	1e43      	subs	r3, r0, #1
 8004e1c:	440a      	add	r2, r1
 8004e1e:	4291      	cmp	r1, r2
 8004e20:	d100      	bne.n	8004e24 <memcpy+0xc>
 8004e22:	bd10      	pop	{r4, pc}
 8004e24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e2c:	e7f7      	b.n	8004e1e <memcpy+0x6>

08004e2e <memmove>:
 8004e2e:	4288      	cmp	r0, r1
 8004e30:	b510      	push	{r4, lr}
 8004e32:	eb01 0302 	add.w	r3, r1, r2
 8004e36:	d807      	bhi.n	8004e48 <memmove+0x1a>
 8004e38:	1e42      	subs	r2, r0, #1
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	d00a      	beq.n	8004e54 <memmove+0x26>
 8004e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e46:	e7f8      	b.n	8004e3a <memmove+0xc>
 8004e48:	4283      	cmp	r3, r0
 8004e4a:	d9f5      	bls.n	8004e38 <memmove+0xa>
 8004e4c:	1881      	adds	r1, r0, r2
 8004e4e:	1ad2      	subs	r2, r2, r3
 8004e50:	42d3      	cmn	r3, r2
 8004e52:	d100      	bne.n	8004e56 <memmove+0x28>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004e5e:	e7f7      	b.n	8004e50 <memmove+0x22>

08004e60 <_realloc_r>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	4607      	mov	r7, r0
 8004e64:	4614      	mov	r4, r2
 8004e66:	460e      	mov	r6, r1
 8004e68:	b921      	cbnz	r1, 8004e74 <_realloc_r+0x14>
 8004e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e6e:	4611      	mov	r1, r2
 8004e70:	f7ff bc5e 	b.w	8004730 <_malloc_r>
 8004e74:	b922      	cbnz	r2, 8004e80 <_realloc_r+0x20>
 8004e76:	f7ff fc0f 	bl	8004698 <_free_r>
 8004e7a:	4625      	mov	r5, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e80:	f000 f814 	bl	8004eac <_malloc_usable_size_r>
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d20f      	bcs.n	8004ea8 <_realloc_r+0x48>
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f7ff fc50 	bl	8004730 <_malloc_r>
 8004e90:	4605      	mov	r5, r0
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d0f2      	beq.n	8004e7c <_realloc_r+0x1c>
 8004e96:	4631      	mov	r1, r6
 8004e98:	4622      	mov	r2, r4
 8004e9a:	f7ff ffbd 	bl	8004e18 <memcpy>
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f7ff fbf9 	bl	8004698 <_free_r>
 8004ea6:	e7e9      	b.n	8004e7c <_realloc_r+0x1c>
 8004ea8:	4635      	mov	r5, r6
 8004eaa:	e7e7      	b.n	8004e7c <_realloc_r+0x1c>

08004eac <_malloc_usable_size_r>:
 8004eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb0:	1f18      	subs	r0, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfbc      	itt	lt
 8004eb6:	580b      	ldrlt	r3, [r1, r0]
 8004eb8:	18c0      	addlt	r0, r0, r3
 8004eba:	4770      	bx	lr
 8004ebc:	0000      	movs	r0, r0
	...

08004ec0 <floor>:
 8004ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004ec8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004ecc:	2e13      	cmp	r6, #19
 8004ece:	4607      	mov	r7, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	dc35      	bgt.n	8004f44 <floor+0x84>
 8004ed8:	2e00      	cmp	r6, #0
 8004eda:	da16      	bge.n	8004f0a <floor+0x4a>
 8004edc:	a336      	add	r3, pc, #216	; (adr r3, 8004fb8 <floor+0xf8>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f7fb f93b 	bl	800015c <__adddf3>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f7fb fd7d 	bl	80009e8 <__aeabi_dcmpgt>
 8004eee:	b148      	cbz	r0, 8004f04 <floor+0x44>
 8004ef0:	2c00      	cmp	r4, #0
 8004ef2:	da5b      	bge.n	8004fac <floor+0xec>
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004efa:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <floor+0x100>)
 8004efc:	433b      	orrs	r3, r7
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	bf18      	it	ne
 8004f02:	4614      	movne	r4, r2
 8004f04:	4623      	mov	r3, r4
 8004f06:	462f      	mov	r7, r5
 8004f08:	e026      	b.n	8004f58 <floor+0x98>
 8004f0a:	4a2e      	ldr	r2, [pc, #184]	; (8004fc4 <floor+0x104>)
 8004f0c:	fa42 f806 	asr.w	r8, r2, r6
 8004f10:	ea01 0208 	and.w	r2, r1, r8
 8004f14:	4302      	orrs	r2, r0
 8004f16:	d01f      	beq.n	8004f58 <floor+0x98>
 8004f18:	a327      	add	r3, pc, #156	; (adr r3, 8004fb8 <floor+0xf8>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb f91d 	bl	800015c <__adddf3>
 8004f22:	2200      	movs	r2, #0
 8004f24:	2300      	movs	r3, #0
 8004f26:	f7fb fd5f 	bl	80009e8 <__aeabi_dcmpgt>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d0ea      	beq.n	8004f04 <floor+0x44>
 8004f2e:	2c00      	cmp	r4, #0
 8004f30:	bfbe      	ittt	lt
 8004f32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004f36:	fa43 f606 	asrlt.w	r6, r3, r6
 8004f3a:	19a4      	addlt	r4, r4, r6
 8004f3c:	ea24 0408 	bic.w	r4, r4, r8
 8004f40:	2500      	movs	r5, #0
 8004f42:	e7df      	b.n	8004f04 <floor+0x44>
 8004f44:	2e33      	cmp	r6, #51	; 0x33
 8004f46:	dd0b      	ble.n	8004f60 <floor+0xa0>
 8004f48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f4c:	d104      	bne.n	8004f58 <floor+0x98>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	f7fb f904 	bl	800015c <__adddf3>
 8004f54:	4607      	mov	r7, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4638      	mov	r0, r7
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004f68:	fa22 f808 	lsr.w	r8, r2, r8
 8004f6c:	ea18 0f00 	tst.w	r8, r0
 8004f70:	d0f2      	beq.n	8004f58 <floor+0x98>
 8004f72:	a311      	add	r3, pc, #68	; (adr r3, 8004fb8 <floor+0xf8>)
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f7fb f8f0 	bl	800015c <__adddf3>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f7fb fd32 	bl	80009e8 <__aeabi_dcmpgt>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d0bd      	beq.n	8004f04 <floor+0x44>
 8004f88:	2c00      	cmp	r4, #0
 8004f8a:	da02      	bge.n	8004f92 <floor+0xd2>
 8004f8c:	2e14      	cmp	r6, #20
 8004f8e:	d103      	bne.n	8004f98 <floor+0xd8>
 8004f90:	3401      	adds	r4, #1
 8004f92:	ea25 0508 	bic.w	r5, r5, r8
 8004f96:	e7b5      	b.n	8004f04 <floor+0x44>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004f9e:	fa03 f606 	lsl.w	r6, r3, r6
 8004fa2:	4435      	add	r5, r6
 8004fa4:	42bd      	cmp	r5, r7
 8004fa6:	bf38      	it	cc
 8004fa8:	18e4      	addcc	r4, r4, r3
 8004faa:	e7f2      	b.n	8004f92 <floor+0xd2>
 8004fac:	2500      	movs	r5, #0
 8004fae:	462c      	mov	r4, r5
 8004fb0:	e7a8      	b.n	8004f04 <floor+0x44>
 8004fb2:	bf00      	nop
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	8800759c 	.word	0x8800759c
 8004fbc:	7e37e43c 	.word	0x7e37e43c
 8004fc0:	bff00000 	.word	0xbff00000
 8004fc4:	000fffff 	.word	0x000fffff

08004fc8 <log10>:
 8004fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fcc:	b08b      	sub	sp, #44	; 0x2c
 8004fce:	4604      	mov	r4, r0
 8004fd0:	460d      	mov	r5, r1
 8004fd2:	f000 f875 	bl	80050c0 <__ieee754_log10>
 8004fd6:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <log10+0xe0>)
 8004fd8:	4680      	mov	r8, r0
 8004fda:	f993 6000 	ldrsb.w	r6, [r3]
 8004fde:	4689      	mov	r9, r1
 8004fe0:	1c73      	adds	r3, r6, #1
 8004fe2:	d05c      	beq.n	800509e <log10+0xd6>
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	462b      	mov	r3, r5
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f7fb fd06 	bl	80009fc <__aeabi_dcmpun>
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d153      	bne.n	800509e <log10+0xd6>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7fb fcdf 	bl	80009c0 <__aeabi_dcmple>
 8005002:	2800      	cmp	r0, #0
 8005004:	d04b      	beq.n	800509e <log10+0xd6>
 8005006:	4b29      	ldr	r3, [pc, #164]	; (80050ac <log10+0xe4>)
 8005008:	9708      	str	r7, [sp, #32]
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005010:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005014:	b9a6      	cbnz	r6, 8005040 <log10+0x78>
 8005016:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800501a:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <log10+0xe8>)
 800501c:	4620      	mov	r0, r4
 800501e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005022:	4629      	mov	r1, r5
 8005024:	2200      	movs	r2, #0
 8005026:	2300      	movs	r3, #0
 8005028:	f7fb fcb6 	bl	8000998 <__aeabi_dcmpeq>
 800502c:	bb40      	cbnz	r0, 8005080 <log10+0xb8>
 800502e:	2301      	movs	r3, #1
 8005030:	2e02      	cmp	r6, #2
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	d119      	bne.n	800506a <log10+0xa2>
 8005036:	f7ff faf5 	bl	8004624 <__errno>
 800503a:	2321      	movs	r3, #33	; 0x21
 800503c:	6003      	str	r3, [r0, #0]
 800503e:	e019      	b.n	8005074 <log10+0xac>
 8005040:	2200      	movs	r2, #0
 8005042:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <log10+0xec>)
 8005044:	4620      	mov	r0, r4
 8005046:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800504a:	4629      	mov	r1, r5
 800504c:	2200      	movs	r2, #0
 800504e:	2300      	movs	r3, #0
 8005050:	f7fb fca2 	bl	8000998 <__aeabi_dcmpeq>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0ea      	beq.n	800502e <log10+0x66>
 8005058:	2302      	movs	r3, #2
 800505a:	429e      	cmp	r6, r3
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	d111      	bne.n	8005084 <log10+0xbc>
 8005060:	f7ff fae0 	bl	8004624 <__errno>
 8005064:	2322      	movs	r3, #34	; 0x22
 8005066:	6003      	str	r3, [r0, #0]
 8005068:	e011      	b.n	800508e <log10+0xc6>
 800506a:	4668      	mov	r0, sp
 800506c:	f000 f8aa 	bl	80051c4 <matherr>
 8005070:	2800      	cmp	r0, #0
 8005072:	d0e0      	beq.n	8005036 <log10+0x6e>
 8005074:	4810      	ldr	r0, [pc, #64]	; (80050b8 <log10+0xf0>)
 8005076:	f000 f8a7 	bl	80051c8 <nan>
 800507a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800507e:	e006      	b.n	800508e <log10+0xc6>
 8005080:	2302      	movs	r3, #2
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	4668      	mov	r0, sp
 8005086:	f000 f89d 	bl	80051c4 <matherr>
 800508a:	2800      	cmp	r0, #0
 800508c:	d0e8      	beq.n	8005060 <log10+0x98>
 800508e:	9b08      	ldr	r3, [sp, #32]
 8005090:	b11b      	cbz	r3, 800509a <log10+0xd2>
 8005092:	f7ff fac7 	bl	8004624 <__errno>
 8005096:	9b08      	ldr	r3, [sp, #32]
 8005098:	6003      	str	r3, [r0, #0]
 800509a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	b00b      	add	sp, #44	; 0x2c
 80050a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050a8:	20000080 	.word	0x20000080
 80050ac:	08006a93 	.word	0x08006a93
 80050b0:	c7efffff 	.word	0xc7efffff
 80050b4:	fff00000 	.word	0xfff00000
 80050b8:	08006a65 	.word	0x08006a65
 80050bc:	00000000 	.word	0x00000000

080050c0 <__ieee754_log10>:
 80050c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80050c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c8:	4604      	mov	r4, r0
 80050ca:	460d      	mov	r5, r1
 80050cc:	460b      	mov	r3, r1
 80050ce:	da26      	bge.n	800511e <__ieee754_log10+0x5e>
 80050d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80050d4:	4302      	orrs	r2, r0
 80050d6:	d107      	bne.n	80050e8 <__ieee754_log10+0x28>
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	2000      	movs	r0, #0
 80050de:	4936      	ldr	r1, [pc, #216]	; (80051b8 <__ieee754_log10+0xf8>)
 80050e0:	f7fb fb1c 	bl	800071c <__aeabi_ddiv>
 80050e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e8:	2900      	cmp	r1, #0
 80050ea:	da05      	bge.n	80050f8 <__ieee754_log10+0x38>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f7fb f833 	bl	8000158 <__aeabi_dsub>
 80050f2:	2200      	movs	r2, #0
 80050f4:	2300      	movs	r3, #0
 80050f6:	e7f3      	b.n	80050e0 <__ieee754_log10+0x20>
 80050f8:	2200      	movs	r2, #0
 80050fa:	4b30      	ldr	r3, [pc, #192]	; (80051bc <__ieee754_log10+0xfc>)
 80050fc:	f7fb f9e4 	bl	80004c8 <__aeabi_dmul>
 8005100:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005104:	4604      	mov	r4, r0
 8005106:	460d      	mov	r5, r1
 8005108:	460b      	mov	r3, r1
 800510a:	492d      	ldr	r1, [pc, #180]	; (80051c0 <__ieee754_log10+0x100>)
 800510c:	428b      	cmp	r3, r1
 800510e:	dd08      	ble.n	8005122 <__ieee754_log10+0x62>
 8005110:	4622      	mov	r2, r4
 8005112:	462b      	mov	r3, r5
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb f820 	bl	800015c <__adddf3>
 800511c:	e7e2      	b.n	80050e4 <__ieee754_log10+0x24>
 800511e:	2200      	movs	r2, #0
 8005120:	e7f3      	b.n	800510a <__ieee754_log10+0x4a>
 8005122:	1518      	asrs	r0, r3, #20
 8005124:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005128:	4410      	add	r0, r2
 800512a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800512e:	4448      	add	r0, r9
 8005130:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005134:	f7fb f95e 	bl	80003f4 <__aeabi_i2d>
 8005138:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800513c:	3303      	adds	r3, #3
 800513e:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005142:	4606      	mov	r6, r0
 8005144:	460f      	mov	r7, r1
 8005146:	4620      	mov	r0, r4
 8005148:	4629      	mov	r1, r5
 800514a:	f000 f845 	bl	80051d8 <__ieee754_log>
 800514e:	a314      	add	r3, pc, #80	; (adr r3, 80051a0 <__ieee754_log10+0xe0>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	4680      	mov	r8, r0
 8005156:	4689      	mov	r9, r1
 8005158:	4630      	mov	r0, r6
 800515a:	4639      	mov	r1, r7
 800515c:	f7fb f9b4 	bl	80004c8 <__aeabi_dmul>
 8005160:	a311      	add	r3, pc, #68	; (adr r3, 80051a8 <__ieee754_log10+0xe8>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	4604      	mov	r4, r0
 8005168:	460d      	mov	r5, r1
 800516a:	4640      	mov	r0, r8
 800516c:	4649      	mov	r1, r9
 800516e:	f7fb f9ab 	bl	80004c8 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fa ffef 	bl	800015c <__adddf3>
 800517e:	a30c      	add	r3, pc, #48	; (adr r3, 80051b0 <__ieee754_log10+0xf0>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	4604      	mov	r4, r0
 8005186:	460d      	mov	r5, r1
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	f7fb f99c 	bl	80004c8 <__aeabi_dmul>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4620      	mov	r0, r4
 8005196:	4629      	mov	r1, r5
 8005198:	e7be      	b.n	8005118 <__ieee754_log10+0x58>
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w
 80051a0:	11f12b36 	.word	0x11f12b36
 80051a4:	3d59fef3 	.word	0x3d59fef3
 80051a8:	1526e50e 	.word	0x1526e50e
 80051ac:	3fdbcb7b 	.word	0x3fdbcb7b
 80051b0:	509f6000 	.word	0x509f6000
 80051b4:	3fd34413 	.word	0x3fd34413
 80051b8:	c3500000 	.word	0xc3500000
 80051bc:	43500000 	.word	0x43500000
 80051c0:	7fefffff 	.word	0x7fefffff

080051c4 <matherr>:
 80051c4:	2000      	movs	r0, #0
 80051c6:	4770      	bx	lr

080051c8 <nan>:
 80051c8:	2000      	movs	r0, #0
 80051ca:	4901      	ldr	r1, [pc, #4]	; (80051d0 <nan+0x8>)
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	7ff80000 	.word	0x7ff80000
 80051d4:	00000000 	.word	0x00000000

080051d8 <__ieee754_log>:
 80051d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80051e0:	b087      	sub	sp, #28
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	460d      	mov	r5, r1
 80051e8:	da24      	bge.n	8005234 <__ieee754_log+0x5c>
 80051ea:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80051ee:	4304      	orrs	r4, r0
 80051f0:	d108      	bne.n	8005204 <__ieee754_log+0x2c>
 80051f2:	2200      	movs	r2, #0
 80051f4:	2300      	movs	r3, #0
 80051f6:	2000      	movs	r0, #0
 80051f8:	49cb      	ldr	r1, [pc, #812]	; (8005528 <__ieee754_log+0x350>)
 80051fa:	f7fb fa8f 	bl	800071c <__aeabi_ddiv>
 80051fe:	b007      	add	sp, #28
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	2900      	cmp	r1, #0
 8005206:	da04      	bge.n	8005212 <__ieee754_log+0x3a>
 8005208:	f7fa ffa6 	bl	8000158 <__aeabi_dsub>
 800520c:	2200      	movs	r2, #0
 800520e:	2300      	movs	r3, #0
 8005210:	e7f3      	b.n	80051fa <__ieee754_log+0x22>
 8005212:	2200      	movs	r2, #0
 8005214:	4bc5      	ldr	r3, [pc, #788]	; (800552c <__ieee754_log+0x354>)
 8005216:	f7fb f957 	bl	80004c8 <__aeabi_dmul>
 800521a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	460d      	mov	r5, r1
 8005224:	49c2      	ldr	r1, [pc, #776]	; (8005530 <__ieee754_log+0x358>)
 8005226:	428d      	cmp	r5, r1
 8005228:	dd06      	ble.n	8005238 <__ieee754_log+0x60>
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	f7fa ff95 	bl	800015c <__adddf3>
 8005232:	e7e4      	b.n	80051fe <__ieee754_log+0x26>
 8005234:	2600      	movs	r6, #0
 8005236:	e7f5      	b.n	8005224 <__ieee754_log+0x4c>
 8005238:	152c      	asrs	r4, r5, #20
 800523a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800523e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8005242:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005246:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800524a:	4426      	add	r6, r4
 800524c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8005250:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8005254:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8005258:	ea41 0305 	orr.w	r3, r1, r5
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	2200      	movs	r2, #0
 8005262:	4bb4      	ldr	r3, [pc, #720]	; (8005534 <__ieee754_log+0x35c>)
 8005264:	f7fa ff78 	bl	8000158 <__aeabi_dsub>
 8005268:	1cab      	adds	r3, r5, #2
 800526a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800526e:	2b02      	cmp	r3, #2
 8005270:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8005274:	4682      	mov	sl, r0
 8005276:	468b      	mov	fp, r1
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	dc53      	bgt.n	8005326 <__ieee754_log+0x14e>
 800527e:	2300      	movs	r3, #0
 8005280:	f7fb fb8a 	bl	8000998 <__aeabi_dcmpeq>
 8005284:	b1d0      	cbz	r0, 80052bc <__ieee754_log+0xe4>
 8005286:	2c00      	cmp	r4, #0
 8005288:	f000 8120 	beq.w	80054cc <__ieee754_log+0x2f4>
 800528c:	4620      	mov	r0, r4
 800528e:	f7fb f8b1 	bl	80003f4 <__aeabi_i2d>
 8005292:	a391      	add	r3, pc, #580	; (adr r3, 80054d8 <__ieee754_log+0x300>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	f7fb f914 	bl	80004c8 <__aeabi_dmul>
 80052a0:	a38f      	add	r3, pc, #572	; (adr r3, 80054e0 <__ieee754_log+0x308>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	4604      	mov	r4, r0
 80052a8:	460d      	mov	r5, r1
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fb f90b 	bl	80004c8 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	e7b8      	b.n	800522e <__ieee754_log+0x56>
 80052bc:	a38a      	add	r3, pc, #552	; (adr r3, 80054e8 <__ieee754_log+0x310>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	4650      	mov	r0, sl
 80052c4:	4659      	mov	r1, fp
 80052c6:	f7fb f8ff 	bl	80004c8 <__aeabi_dmul>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	2000      	movs	r0, #0
 80052d0:	4999      	ldr	r1, [pc, #612]	; (8005538 <__ieee754_log+0x360>)
 80052d2:	f7fa ff41 	bl	8000158 <__aeabi_dsub>
 80052d6:	4652      	mov	r2, sl
 80052d8:	4606      	mov	r6, r0
 80052da:	460f      	mov	r7, r1
 80052dc:	465b      	mov	r3, fp
 80052de:	4650      	mov	r0, sl
 80052e0:	4659      	mov	r1, fp
 80052e2:	f7fb f8f1 	bl	80004c8 <__aeabi_dmul>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fb f8eb 	bl	80004c8 <__aeabi_dmul>
 80052f2:	4606      	mov	r6, r0
 80052f4:	460f      	mov	r7, r1
 80052f6:	b914      	cbnz	r4, 80052fe <__ieee754_log+0x126>
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	e0a0      	b.n	8005440 <__ieee754_log+0x268>
 80052fe:	4620      	mov	r0, r4
 8005300:	f7fb f878 	bl	80003f4 <__aeabi_i2d>
 8005304:	a374      	add	r3, pc, #464	; (adr r3, 80054d8 <__ieee754_log+0x300>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	4680      	mov	r8, r0
 800530c:	4689      	mov	r9, r1
 800530e:	f7fb f8db 	bl	80004c8 <__aeabi_dmul>
 8005312:	a373      	add	r3, pc, #460	; (adr r3, 80054e0 <__ieee754_log+0x308>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	4604      	mov	r4, r0
 800531a:	460d      	mov	r5, r1
 800531c:	4640      	mov	r0, r8
 800531e:	4649      	mov	r1, r9
 8005320:	f7fb f8d2 	bl	80004c8 <__aeabi_dmul>
 8005324:	e0a5      	b.n	8005472 <__ieee754_log+0x29a>
 8005326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800532a:	f7fa ff17 	bl	800015c <__adddf3>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4650      	mov	r0, sl
 8005334:	4659      	mov	r1, fp
 8005336:	f7fb f9f1 	bl	800071c <__aeabi_ddiv>
 800533a:	e9cd 0100 	strd	r0, r1, [sp]
 800533e:	4620      	mov	r0, r4
 8005340:	f7fb f858 	bl	80003f4 <__aeabi_i2d>
 8005344:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	f7fb f8ba 	bl	80004c8 <__aeabi_dmul>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800535c:	f7fb f8b4 	bl	80004c8 <__aeabi_dmul>
 8005360:	a363      	add	r3, pc, #396	; (adr r3, 80054f0 <__ieee754_log+0x318>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	4680      	mov	r8, r0
 8005368:	4689      	mov	r9, r1
 800536a:	f7fb f8ad 	bl	80004c8 <__aeabi_dmul>
 800536e:	a362      	add	r3, pc, #392	; (adr r3, 80054f8 <__ieee754_log+0x320>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fa fef2 	bl	800015c <__adddf3>
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	f7fb f8a4 	bl	80004c8 <__aeabi_dmul>
 8005380:	a35f      	add	r3, pc, #380	; (adr r3, 8005500 <__ieee754_log+0x328>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fa fee9 	bl	800015c <__adddf3>
 800538a:	4642      	mov	r2, r8
 800538c:	464b      	mov	r3, r9
 800538e:	f7fb f89b 	bl	80004c8 <__aeabi_dmul>
 8005392:	a35d      	add	r3, pc, #372	; (adr r3, 8005508 <__ieee754_log+0x330>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fa fee0 	bl	800015c <__adddf3>
 800539c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053a0:	f7fb f892 	bl	80004c8 <__aeabi_dmul>
 80053a4:	a35a      	add	r3, pc, #360	; (adr r3, 8005510 <__ieee754_log+0x338>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fb f889 	bl	80004c8 <__aeabi_dmul>
 80053b6:	a358      	add	r3, pc, #352	; (adr r3, 8005518 <__ieee754_log+0x340>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f7fa fece 	bl	800015c <__adddf3>
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	f7fb f880 	bl	80004c8 <__aeabi_dmul>
 80053c8:	a355      	add	r3, pc, #340	; (adr r3, 8005520 <__ieee754_log+0x348>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fa fec5 	bl	800015c <__adddf3>
 80053d2:	4642      	mov	r2, r8
 80053d4:	464b      	mov	r3, r9
 80053d6:	f7fb f877 	bl	80004c8 <__aeabi_dmul>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053e2:	f7fa febb 	bl	800015c <__adddf3>
 80053e6:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80053ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80053ee:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80053f2:	3551      	adds	r5, #81	; 0x51
 80053f4:	4335      	orrs	r5, r6
 80053f6:	2d00      	cmp	r5, #0
 80053f8:	4680      	mov	r8, r0
 80053fa:	4689      	mov	r9, r1
 80053fc:	dd48      	ble.n	8005490 <__ieee754_log+0x2b8>
 80053fe:	2200      	movs	r2, #0
 8005400:	4b4d      	ldr	r3, [pc, #308]	; (8005538 <__ieee754_log+0x360>)
 8005402:	4650      	mov	r0, sl
 8005404:	4659      	mov	r1, fp
 8005406:	f7fb f85f 	bl	80004c8 <__aeabi_dmul>
 800540a:	4652      	mov	r2, sl
 800540c:	465b      	mov	r3, fp
 800540e:	f7fb f85b 	bl	80004c8 <__aeabi_dmul>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4606      	mov	r6, r0
 8005418:	460f      	mov	r7, r1
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	f7fa fe9d 	bl	800015c <__adddf3>
 8005422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005426:	f7fb f84f 	bl	80004c8 <__aeabi_dmul>
 800542a:	4680      	mov	r8, r0
 800542c:	4689      	mov	r9, r1
 800542e:	b964      	cbnz	r4, 800544a <__ieee754_log+0x272>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	f7fa fe8e 	bl	8000158 <__aeabi_dsub>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4650      	mov	r0, sl
 8005442:	4659      	mov	r1, fp
 8005444:	f7fa fe88 	bl	8000158 <__aeabi_dsub>
 8005448:	e6d9      	b.n	80051fe <__ieee754_log+0x26>
 800544a:	a323      	add	r3, pc, #140	; (adr r3, 80054d8 <__ieee754_log+0x300>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005454:	f7fb f838 	bl	80004c8 <__aeabi_dmul>
 8005458:	a321      	add	r3, pc, #132	; (adr r3, 80054e0 <__ieee754_log+0x308>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	4604      	mov	r4, r0
 8005460:	460d      	mov	r5, r1
 8005462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005466:	f7fb f82f 	bl	80004c8 <__aeabi_dmul>
 800546a:	4642      	mov	r2, r8
 800546c:	464b      	mov	r3, r9
 800546e:	f7fa fe75 	bl	800015c <__adddf3>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4630      	mov	r0, r6
 8005478:	4639      	mov	r1, r7
 800547a:	f7fa fe6d 	bl	8000158 <__aeabi_dsub>
 800547e:	4652      	mov	r2, sl
 8005480:	465b      	mov	r3, fp
 8005482:	f7fa fe69 	bl	8000158 <__aeabi_dsub>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4620      	mov	r0, r4
 800548c:	4629      	mov	r1, r5
 800548e:	e7d9      	b.n	8005444 <__ieee754_log+0x26c>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4650      	mov	r0, sl
 8005496:	4659      	mov	r1, fp
 8005498:	f7fa fe5e 	bl	8000158 <__aeabi_dsub>
 800549c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054a0:	f7fb f812 	bl	80004c8 <__aeabi_dmul>
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	2c00      	cmp	r4, #0
 80054aa:	f43f af25 	beq.w	80052f8 <__ieee754_log+0x120>
 80054ae:	a30a      	add	r3, pc, #40	; (adr r3, 80054d8 <__ieee754_log+0x300>)
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054b8:	f7fb f806 	bl	80004c8 <__aeabi_dmul>
 80054bc:	a308      	add	r3, pc, #32	; (adr r3, 80054e0 <__ieee754_log+0x308>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	4604      	mov	r4, r0
 80054c4:	460d      	mov	r5, r1
 80054c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ca:	e729      	b.n	8005320 <__ieee754_log+0x148>
 80054cc:	2000      	movs	r0, #0
 80054ce:	2100      	movs	r1, #0
 80054d0:	e695      	b.n	80051fe <__ieee754_log+0x26>
 80054d2:	bf00      	nop
 80054d4:	f3af 8000 	nop.w
 80054d8:	fee00000 	.word	0xfee00000
 80054dc:	3fe62e42 	.word	0x3fe62e42
 80054e0:	35793c76 	.word	0x35793c76
 80054e4:	3dea39ef 	.word	0x3dea39ef
 80054e8:	55555555 	.word	0x55555555
 80054ec:	3fd55555 	.word	0x3fd55555
 80054f0:	df3e5244 	.word	0xdf3e5244
 80054f4:	3fc2f112 	.word	0x3fc2f112
 80054f8:	96cb03de 	.word	0x96cb03de
 80054fc:	3fc74664 	.word	0x3fc74664
 8005500:	94229359 	.word	0x94229359
 8005504:	3fd24924 	.word	0x3fd24924
 8005508:	55555593 	.word	0x55555593
 800550c:	3fe55555 	.word	0x3fe55555
 8005510:	d078c69f 	.word	0xd078c69f
 8005514:	3fc39a09 	.word	0x3fc39a09
 8005518:	1d8e78af 	.word	0x1d8e78af
 800551c:	3fcc71c5 	.word	0x3fcc71c5
 8005520:	9997fa04 	.word	0x9997fa04
 8005524:	3fd99999 	.word	0x3fd99999
 8005528:	c3500000 	.word	0xc3500000
 800552c:	43500000 	.word	0x43500000
 8005530:	7fefffff 	.word	0x7fefffff
 8005534:	3ff00000 	.word	0x3ff00000
 8005538:	3fe00000 	.word	0x3fe00000

0800553c <_init>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr

08005548 <_fini>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr
