
bp_Electronic_Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d8  08006e38  08006e38  00016e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008410  08008410  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08008410  08008410  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008410  08008410  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008414  08008414  00018414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000088  0800849c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800849c  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed86  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002093  00000000  00000000  0002ee33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00030ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00031cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015774  00000000  00000000  00032a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abd6  00000000  00000000  00048174  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077f70  00000000  00000000  00052d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cacba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004428  00000000  00000000  000cad38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e20 	.word	0x08006e20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08006e20 	.word	0x08006e20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x28>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 fd5f 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f003 fda4 	bl	80046c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fd77 	bl	8001696 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 fd3f 	bl	8001642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000018 	.word	0x20000018
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	20000000 	.word	0x20000000

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000004 	.word	0x20000004
 8000c04:	200004fc 	.word	0x200004fc

08000c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	200004fc 	.word	0x200004fc

08000c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0be      	b.n	8000dbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d109      	bne.n	8000c60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f003 fd62 	bl	8004724 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fbdd 	bl	8001420 <ADC_ConversionStop_Disable>
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8099 	bne.w	8000daa <HAL_ADC_Init+0x18e>
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8095 	bne.w	8000daa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c88:	f023 0302 	bic.w	r3, r3, #2
 8000c8c:	f043 0202 	orr.w	r2, r3, #2
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
 8000ca2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ca4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb4:	d003      	beq.n	8000cbe <HAL_ADC_Init+0xa2>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d102      	bne.n	8000cc4 <HAL_ADC_Init+0xa8>
 8000cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc2:	e000      	b.n	8000cc6 <HAL_ADC_Init+0xaa>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7d1b      	ldrb	r3, [r3, #20]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d119      	bne.n	8000d08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7b1b      	ldrb	r3, [r3, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	035a      	lsls	r2, r3, #13
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e00b      	b.n	8000d08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	f043 0220 	orr.w	r2, r3, #32
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f043 0201 	orr.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_ADC_Init+0x1a8>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d38:	d003      	beq.n	8000d42 <HAL_ADC_Init+0x126>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d104      	bne.n	8000d4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	051b      	lsls	r3, r3, #20
 8000d4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_ADC_Init+0x1ac>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d10b      	bne.n	8000d88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d86:	e018      	b.n	8000dba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f023 0312 	bic.w	r3, r3, #18
 8000d90:	f043 0210 	orr.w	r2, r3, #16
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	f043 0201 	orr.w	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da8:	e007      	b.n	8000dba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	f043 0210 	orr.w	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	ffe1f7fd 	.word	0xffe1f7fd
 8000dc8:	ff1f0efe 	.word	0xff1f0efe

08000dcc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Start+0x1a>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e098      	b.n	8000f18 <HAL_ADC_Start+0x14c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fac4 	bl	800137c <ADC_Enable>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 8087 	bne.w	8000f0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a41      	ldr	r2, [pc, #260]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d105      	bne.n	8000e2a <HAL_ADC_Start+0x5e>
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d115      	bne.n	8000e56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d026      	beq.n	8000e92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e54:	e01d      	b.n	8000e92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d004      	beq.n	8000e76 <HAL_ADC_Start+0xaa>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_ADC_Start+0xc6>
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	f023 0206 	bic.w	r2, r3, #6
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eaa:	e002      	b.n	8000eb2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f06f 0202 	mvn.w	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ece:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ed2:	d113      	bne.n	8000efc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d105      	bne.n	8000eea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d108      	bne.n	8000efc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	e00c      	b.n	8000f16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	e003      	b.n	8000f16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40012800 	.word	0x40012800
 8000f24:	40012400 	.word	0x40012400

08000f28 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Stop+0x1a>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e01a      	b.n	8000f78 <HAL_ADC_Stop+0x50>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fa68 	bl	8001420 <ADC_ConversionStop_Disable>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	f043 0201 	orr.w	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f96:	f7ff fe37 	bl	8000c08 <HAL_GetTick>
 8000f9a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	f043 0220 	orr.w	r2, r3, #32
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0c8      	b.n	8001154 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d12a      	bne.n	8001026 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d123      	bne.n	8001026 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fde:	e01a      	b.n	8001016 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe6:	d016      	beq.n	8001016 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_PollForConversion+0x7e>
 8000fee:	f7ff fe0b 	bl	8000c08 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d20b      	bcs.n	8001016 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f043 0204 	orr.w	r2, r3, #4
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e09e      	b.n	8001154 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0dd      	beq.n	8000fe0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001024:	e06c      	b.n	8001100 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001026:	4b4d      	ldr	r3, [pc, #308]	; (800115c <HAL_ADC_PollForConversion+0x1dc>)
 8001028:	681c      	ldr	r4, [r3, #0]
 800102a:	2002      	movs	r0, #2
 800102c:	f001 fec8 	bl	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001030:	4603      	mov	r3, r0
 8001032:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6919      	ldr	r1, [r3, #16]
 800103c:	4b48      	ldr	r3, [pc, #288]	; (8001160 <HAL_ADC_PollForConversion+0x1e0>)
 800103e:	400b      	ands	r3, r1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d118      	bne.n	8001076 <HAL_ADC_PollForConversion+0xf6>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68d9      	ldr	r1, [r3, #12]
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_ADC_PollForConversion+0x1e4>)
 800104c:	400b      	ands	r3, r1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d111      	bne.n	8001076 <HAL_ADC_PollForConversion+0xf6>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6919      	ldr	r1, [r3, #16]
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_ADC_PollForConversion+0x1e8>)
 800105a:	400b      	ands	r3, r1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d108      	bne.n	8001072 <HAL_ADC_PollForConversion+0xf2>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68d9      	ldr	r1, [r3, #12]
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_ADC_PollForConversion+0x1ec>)
 8001068:	400b      	ands	r3, r1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_PollForConversion+0xf2>
 800106e:	2314      	movs	r3, #20
 8001070:	e020      	b.n	80010b4 <HAL_ADC_PollForConversion+0x134>
 8001072:	2329      	movs	r3, #41	; 0x29
 8001074:	e01e      	b.n	80010b4 <HAL_ADC_PollForConversion+0x134>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6919      	ldr	r1, [r3, #16]
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <HAL_ADC_PollForConversion+0x1e8>)
 800107e:	400b      	ands	r3, r1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <HAL_ADC_PollForConversion+0x112>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_ADC_PollForConversion+0x1ec>)
 800108c:	400b      	ands	r3, r1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <HAL_ADC_PollForConversion+0x12e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6919      	ldr	r1, [r3, #16]
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_ADC_PollForConversion+0x1f0>)
 800109a:	400b      	ands	r3, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d108      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x132>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68d9      	ldr	r1, [r3, #12]
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_ADC_PollForConversion+0x1f0>)
 80010a8:	400b      	ands	r3, r1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x132>
 80010ae:	2354      	movs	r3, #84	; 0x54
 80010b0:	e000      	b.n	80010b4 <HAL_ADC_PollForConversion+0x134>
 80010b2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010ba:	e01d      	b.n	80010f8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c2:	d016      	beq.n	80010f2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_ADC_PollForConversion+0x15a>
 80010ca:	f7ff fd9d 	bl	8000c08 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d20b      	bcs.n	80010f2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f043 0204 	orr.w	r2, r3, #4
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e030      	b.n	8001154 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8dd      	bhi.n	80010bc <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0212 	mvn.w	r2, #18
 8001108:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001120:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001124:	d115      	bne.n	8001152 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800112a:	2b00      	cmp	r3, #0
 800112c:	d111      	bne.n	8001152 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	20000018 	.word	0x20000018
 8001160:	24924924 	.word	0x24924924
 8001164:	00924924 	.word	0x00924924
 8001168:	12492492 	.word	0x12492492
 800116c:	00492492 	.word	0x00492492
 8001170:	00249249 	.word	0x00249249

08001174 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x20>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e0dc      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1da>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d81c      	bhi.n	80011f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b05      	subs	r3, #5
 80011ce:	221f      	movs	r2, #31
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b05      	subs	r3, #5
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
 80011f4:	e03c      	b.n	8001270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d81c      	bhi.n	8001238 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b23      	subs	r3, #35	; 0x23
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	4019      	ands	r1, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b23      	subs	r3, #35	; 0x23
 800122a:	fa00 f203 	lsl.w	r2, r0, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
 8001236:	e01b      	b.n	8001270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3b41      	subs	r3, #65	; 0x41
 800124a:	221f      	movs	r2, #31
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	3b41      	subs	r3, #65	; 0x41
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b09      	cmp	r3, #9
 8001276:	d91c      	bls.n	80012b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68d9      	ldr	r1, [r3, #12]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	3b1e      	subs	r3, #30
 800128a:	2207      	movs	r2, #7
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	4019      	ands	r1, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6898      	ldr	r0, [r3, #8]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	3b1e      	subs	r3, #30
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	e019      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4019      	ands	r1, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6898      	ldr	r0, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012f2:	2b11      	cmp	r3, #17
 80012f4:	d132      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_ADC_ConfigChannel+0x1e4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d125      	bne.n	800134c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d126      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800131c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b10      	cmp	r3, #16
 8001324:	d11a      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_ADC_ConfigChannel+0x1e8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_ADC_ConfigChannel+0x1ec>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9a      	lsrs	r2, r3, #18
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133c:	e002      	b.n	8001344 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <HAL_ADC_ConfigChannel+0x1b2>
 800134a:	e007      	b.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40012400 	.word	0x40012400
 8001374:	20000018 	.word	0x20000018
 8001378:	431bde83 	.word	0x431bde83

0800137c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b01      	cmp	r3, #1
 8001398:	d039      	beq.n	800140e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <ADC_Enable+0x9c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <ADC_Enable+0xa0>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013b8:	e002      	b.n	80013c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f9      	bne.n	80013ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013c6:	f7ff fc1f 	bl	8000c08 <HAL_GetTick>
 80013ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013cc:	e018      	b.n	8001400 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013ce:	f7ff fc1b 	bl	8000c08 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d911      	bls.n	8001400 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f043 0210 	orr.w	r2, r3, #16
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e007      	b.n	8001410 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d1df      	bne.n	80013ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000018 	.word	0x20000018
 800141c:	431bde83 	.word	0x431bde83

08001420 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d127      	bne.n	800148a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800144a:	f7ff fbdd 	bl	8000c08 <HAL_GetTick>
 800144e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001450:	e014      	b.n	800147c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001452:	f7ff fbd9 	bl	8000c08 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d90d      	bls.n	800147c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f043 0210 	orr.w	r2, r3, #16
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e007      	b.n	800148c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b01      	cmp	r3, #1
 8001488:	d0e3      	beq.n	8001452 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4906      	ldr	r1, [pc, #24]	; (800152c <__NVIC_EnableIRQ+0x34>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff90 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff2d 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff42 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff90 	bl	8001584 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5f 	bl	8001530 <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff35 	bl	80014f8 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b08b      	sub	sp, #44	; 0x2c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e127      	b.n	8001914 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016c4:	2201      	movs	r2, #1
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8116 	bne.w	800190e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d034      	beq.n	8001754 <HAL_GPIO_Init+0xa4>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d80d      	bhi.n	800170a <HAL_GPIO_Init+0x5a>
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x9a>
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d804      	bhi.n	8001700 <HAL_GPIO_Init+0x50>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d031      	beq.n	800175e <HAL_GPIO_Init+0xae>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d01c      	beq.n	8001738 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e048      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001700:	2b03      	cmp	r3, #3
 8001702:	d043      	beq.n	800178c <HAL_GPIO_Init+0xdc>
 8001704:	2b11      	cmp	r3, #17
 8001706:	d01b      	beq.n	8001740 <HAL_GPIO_Init+0x90>
          break;
 8001708:	e043      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800170a:	4a89      	ldr	r2, [pc, #548]	; (8001930 <HAL_GPIO_Init+0x280>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d026      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001710:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_GPIO_Init+0x280>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d806      	bhi.n	8001724 <HAL_GPIO_Init+0x74>
 8001716:	4a87      	ldr	r2, [pc, #540]	; (8001934 <HAL_GPIO_Init+0x284>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d020      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800171c:	4a86      	ldr	r2, [pc, #536]	; (8001938 <HAL_GPIO_Init+0x288>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001722:	e036      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001724:	4a85      	ldr	r2, [pc, #532]	; (800193c <HAL_GPIO_Init+0x28c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d019      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800172a:	4a85      	ldr	r2, [pc, #532]	; (8001940 <HAL_GPIO_Init+0x290>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d016      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001730:	4a84      	ldr	r2, [pc, #528]	; (8001944 <HAL_GPIO_Init+0x294>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001736:	e02c      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e028      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e023      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e01e      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e019      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001766:	2304      	movs	r3, #4
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e012      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]
          break;
 800177e:	e008      	b.n	8001792 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	615a      	str	r2, [r3, #20]
          break;
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d801      	bhi.n	800179c <HAL_GPIO_Init+0xec>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e001      	b.n	80017a0 <HAL_GPIO_Init+0xf0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d802      	bhi.n	80017ae <HAL_GPIO_Init+0xfe>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x104>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3b08      	subs	r3, #8
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	210f      	movs	r1, #15
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	6a39      	ldr	r1, [r7, #32]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8096 	beq.w	800190e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017fa:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_GPIO_Init+0x29c>)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x19e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2a4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x19a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_GPIO_Init+0x2a8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x196>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_GPIO_Init+0x2ac>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x192>
 800183e:	2303      	movs	r3, #3
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001842:	2304      	movs	r3, #4
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184e:	2300      	movs	r3, #0
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001860:	493a      	ldr	r1, [pc, #232]	; (800194c <HAL_GPIO_Init+0x29c>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4938      	ldr	r1, [pc, #224]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	4933      	ldr	r1, [pc, #204]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001892:	4013      	ands	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	492e      	ldr	r1, [pc, #184]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4929      	ldr	r1, [pc, #164]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	491f      	ldr	r1, [pc, #124]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	491a      	ldr	r1, [pc, #104]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4915      	ldr	r1, [pc, #84]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f aed0 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	372c      	adds	r7, #44	; 0x2c
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	10210000 	.word	0x10210000
 8001934:	10110000 	.word	0x10110000
 8001938:	10120000 	.word	0x10120000
 800193c:	10310000 	.word	0x10310000
 8001940:	10320000 	.word	0x10320000
 8001944:	10220000 	.word	0x10220000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001982:	e002      	b.n	800198a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001984:	887a      	ldrh	r2, [r7, #2]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e10f      	b.n	8001bc6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f002 feee 	bl	800479c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019d8:	f001 f8f6 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80019dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a7b      	ldr	r2, [pc, #492]	; (8001bd0 <HAL_I2C_Init+0x23c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d807      	bhi.n	80019f8 <HAL_I2C_Init+0x64>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <HAL_I2C_Init+0x240>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	bf94      	ite	ls
 80019f0:	2301      	movls	r3, #1
 80019f2:	2300      	movhi	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e006      	b.n	8001a06 <HAL_I2C_Init+0x72>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a77      	ldr	r2, [pc, #476]	; (8001bd8 <HAL_I2C_Init+0x244>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0db      	b.n	8001bc6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a72      	ldr	r2, [pc, #456]	; (8001bdc <HAL_I2C_Init+0x248>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a64      	ldr	r2, [pc, #400]	; (8001bd0 <HAL_I2C_Init+0x23c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d802      	bhi.n	8001a48 <HAL_I2C_Init+0xb4>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	e009      	b.n	8001a5c <HAL_I2C_Init+0xc8>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_I2C_Init+0x24c>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4956      	ldr	r1, [pc, #344]	; (8001bd0 <HAL_I2C_Init+0x23c>)
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	d80d      	bhi.n	8001a98 <HAL_I2C_Init+0x104>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e59      	subs	r1, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	bf38      	it	cc
 8001a94:	2304      	movcc	r3, #4
 8001a96:	e04f      	b.n	8001b38 <HAL_I2C_Init+0x1a4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <HAL_I2C_Init+0x130>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e012      	b.n	8001aea <HAL_I2C_Init+0x156>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	0099      	lsls	r1, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Init+0x15e>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e022      	b.n	8001b38 <HAL_I2C_Init+0x1a4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10e      	bne.n	8001b18 <HAL_I2C_Init+0x184>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e58      	subs	r0, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b16:	e00f      	b.n	8001b38 <HAL_I2C_Init+0x1a4>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e58      	subs	r0, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	0099      	lsls	r1, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	6809      	ldr	r1, [r1, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6911      	ldr	r1, [r2, #16]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	000186a0 	.word	0x000186a0
 8001bd4:	001e847f 	.word	0x001e847f
 8001bd8:	003d08ff 	.word	0x003d08ff
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff f806 	bl	8000c08 <HAL_GetTick>
 8001bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	f040 80e0 	bne.w	8001dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2319      	movs	r3, #25
 8001c12:	2201      	movs	r2, #1
 8001c14:	4970      	ldr	r1, [pc, #448]	; (8001dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fa7a 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	e0d3      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2C_Master_Transmit+0x50>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0cc      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d007      	beq.n	8001c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2221      	movs	r2, #33	; 0x21
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2210      	movs	r2, #16
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	893a      	ldrh	r2, [r7, #8]
 8001c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c9c:	8979      	ldrh	r1, [r7, #10]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	6a3a      	ldr	r2, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f9be 	bl	8002024 <I2C_MasterRequestWrite>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08d      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cc8:	e066      	b.n	8001d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	6a39      	ldr	r1, [r7, #32]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 faf4 	bl	80022bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d11b      	bne.n	8001d6c <HAL_I2C_Master_Transmit+0x188>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	6a39      	ldr	r1, [r7, #32]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fae4 	bl	800233e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e01a      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d194      	bne.n	8001cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	00100002 	.word	0x00100002
 8001ddc:	ffff0000 	.word	0xffff0000

08001de0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	460b      	mov	r3, r1
 8001dee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7fe ff0a 	bl	8000c08 <HAL_GetTick>
 8001df4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	f040 8105 	bne.w	8002012 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2319      	movs	r3, #25
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4982      	ldr	r1, [pc, #520]	; (800201c <HAL_I2C_IsDeviceReady+0x23c>)
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f97c 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e0f8      	b.n	8002014 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_I2C_IsDeviceReady+0x50>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e0f1      	b.n	8002014 <HAL_I2C_IsDeviceReady+0x234>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d007      	beq.n	8001e56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2224      	movs	r2, #36	; 0x24
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a6a      	ldr	r2, [pc, #424]	; (8002020 <HAL_I2C_IsDeviceReady+0x240>)
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f93a 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0b6      	b.n	8002014 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fea7 	bl	8000c08 <HAL_GetTick>
 8001eba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2301      	moveq	r3, #1
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001eea:	e025      	b.n	8001f38 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eec:	f7fe fe8c 	bl	8000c08 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d302      	bcc.n	8001f02 <HAL_I2C_IsDeviceReady+0x122>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	22a0      	movs	r2, #160	; 0xa0
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2ba0      	cmp	r3, #160	; 0xa0
 8001f42:	d005      	beq.n	8001f50 <HAL_I2C_IsDeviceReady+0x170>
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_I2C_IsDeviceReady+0x170>
 8001f4a:	7dbb      	ldrb	r3, [r7, #22]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0cd      	beq.n	8001eec <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d129      	bne.n	8001fba <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2319      	movs	r3, #25
 8001f92:	2201      	movs	r2, #1
 8001f94:	4921      	ldr	r1, [pc, #132]	; (800201c <HAL_I2C_IsDeviceReady+0x23c>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f8ba 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e036      	b.n	8002014 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e02c      	b.n	8002014 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fd2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2319      	movs	r3, #25
 8001fda:	2201      	movs	r2, #1
 8001fdc:	490f      	ldr	r1, [pc, #60]	; (800201c <HAL_I2C_IsDeviceReady+0x23c>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f896 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e012      	b.n	8002014 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f4ff af3e 	bcc.w	8001e7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002012:	2302      	movs	r3, #2
  }
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	00100002 	.word	0x00100002
 8002020:	ffff0000 	.word	0xffff0000

08002024 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	460b      	mov	r3, r1
 8002032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d006      	beq.n	800204e <I2C_MasterRequestWrite+0x2a>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d003      	beq.n	800204e <I2C_MasterRequestWrite+0x2a>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800204c:	d108      	bne.n	8002060 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e00b      	b.n	8002078 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	2b12      	cmp	r3, #18
 8002066:	d107      	bne.n	8002078 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f843 	bl	8002110 <I2C_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e035      	b.n	8002100 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800209c:	d108      	bne.n	80020b0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020ac:	611a      	str	r2, [r3, #16]
 80020ae:	e01b      	b.n	80020e8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	11db      	asrs	r3, r3, #7
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 0306 	and.w	r3, r3, #6
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f063 030f 	orn	r3, r3, #15
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <I2C_MasterRequestWrite+0xe4>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f875 	bl	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e010      	b.n	8002100 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <I2C_MasterRequestWrite+0xe8>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f865 	bl	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	00010008 	.word	0x00010008
 800210c:	00010002 	.word	0x00010002

08002110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002120:	e025      	b.n	800216e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d021      	beq.n	800216e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7fe fd6d 	bl	8000c08 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d116      	bne.n	800216e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f043 0220 	orr.w	r2, r3, #32
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e023      	b.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10d      	bne.n	8002194 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4013      	ands	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	e00c      	b.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d0b6      	beq.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021cc:	e051      	b.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021dc:	d123      	bne.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0204 	orr.w	r2, r3, #4
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e046      	b.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d021      	beq.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7fe fceb 	bl	8000c08 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d116      	bne.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e020      	b.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10c      	bne.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4013      	ands	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e00b      	b.n	80022ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	43da      	mvns	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4013      	ands	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d18d      	bne.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c8:	e02d      	b.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f878 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e02d      	b.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d021      	beq.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7fe fc91 	bl	8000c08 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d116      	bne.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e007      	b.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d1ca      	bne.n	80022ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800234a:	e02d      	b.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f837 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e02d      	b.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d021      	beq.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7fe fc50 	bl	8000c08 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d116      	bne.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e007      	b.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d1ca      	bne.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	d11b      	bne.n	8002410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e26c      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8087 	beq.w	800254a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243c:	4b92      	ldr	r3, [pc, #584]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b04      	cmp	r3, #4
 8002446:	d00c      	beq.n	8002462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002448:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d112      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
 8002454:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06c      	beq.n	8002548 <HAL_RCC_OscConfig+0x12c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d168      	bne.n	8002548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e246      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x76>
 8002484:	4b80      	ldr	r3, [pc, #512]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7f      	ldr	r2, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7a      	ldr	r2, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b78      	ldr	r3, [pc, #480]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a77      	ldr	r2, [pc, #476]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0xbc>
 80024be:	4b72      	ldr	r3, [pc, #456]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a71      	ldr	r2, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a67      	ldr	r2, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fb86 	bl	8000c08 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fb82 	bl	8000c08 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1fa      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xe4>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fb72 	bl	8000c08 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fb6e 	bl	8000c08 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1e6      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x10c>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002556:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1ba      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4939      	ldr	r1, [pc, #228]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_RCC_OscConfig+0x270>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fb27 	bl	8000c08 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe fb23 	bl	8000c08 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e19b      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4927      	ldr	r1, [pc, #156]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x270>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fb06 	bl	8000c08 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fb02 	bl	8000c08 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e17a      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_RCC_OscConfig+0x274>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe fae6 	bl	8000c08 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe fae2 	bl	8000c08 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e15a      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f000 fada 	bl	8002c18 <RCC_Delay>
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_OscConfig+0x274>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7fe facc 	bl	8000c08 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002672:	e00f      	b.n	8002694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002674:	f7fe fac8 	bl	8000c08 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d908      	bls.n	8002694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e140      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	42420000 	.word	0x42420000
 8002690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b9e      	ldr	r3, [pc, #632]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e9      	bne.n	8002674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a6 	beq.w	80027fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b97      	ldr	r3, [pc, #604]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	4b94      	ldr	r3, [pc, #592]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a93      	ldr	r2, [pc, #588]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	61d3      	str	r3, [r2, #28]
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a8a      	ldr	r2, [pc, #552]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fa89 	bl	8000c08 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe fa85 	bl	8000c08 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	; 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0fd      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b81      	ldr	r3, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x312>
 8002720:	4b7b      	ldr	r3, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a7a      	ldr	r2, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e02d      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a72      	ldr	r2, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	e01c      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d10c      	bne.n	8002772 <HAL_RCC_OscConfig+0x356>
 8002758:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	e00b      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002772:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a66      	ldr	r2, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	4b64      	ldr	r3, [pc, #400]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a63      	ldr	r2, [pc, #396]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d015      	beq.n	80027be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe fa39 	bl	8000c08 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe fa35 	bl	8000c08 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0ab      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ee      	beq.n	800279a <HAL_RCC_OscConfig+0x37e>
 80027bc:	e014      	b.n	80027e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7fe fa23 	bl	8000c08 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe fa1f 	bl	8000c08 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e095      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ee      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8081 	beq.w	8002906 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d061      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d146      	bne.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002818:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe f9f3 	bl	8000c08 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe f9ef 	bl	8000c08 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e067      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	492d      	ldr	r1, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a19      	ldr	r1, [r3, #32]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	430b      	orrs	r3, r1
 8002872:	4927      	ldr	r1, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe f9c3 	bl	8000c08 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe f9bf 	bl	8000c08 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e037      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x46a>
 80028a4:	e02f      	b.n	8002906 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe f9ac 	bl	8000c08 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe f9a8 	bl	8000c08 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e020      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x498>
 80028d2:	e018      	b.n	8002906 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e013      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
 8002918:	42420060 	.word	0x42420060

0800291c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0d0      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4965      	ldr	r1, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800299a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d040      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e073      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06b      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4936      	ldr	r1, [pc, #216]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe f8fc 	bl	8000c08 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7fe f8f8 	bl	8000c08 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e053      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1eb      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d210      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	4922      	ldr	r1, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f85a 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08008340 	.word	0x08008340
 8002ae8:	20000018 	.word	0x20000018
 8002aec:	20000000 	.word	0x20000000

08002af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b490      	push	{r4, r7}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002af8:	1d3c      	adds	r4, r7, #4
 8002afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b00:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x46>
 8002b2e:	e02d      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	e02d      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	0c9b      	lsrs	r3, r3, #18
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b42:	4413      	add	r3, r2
 8002b44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	0c5b      	lsrs	r3, r3, #17
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b62:	4413      	add	r3, r2
 8002b64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b6e:	fb02 f203 	mul.w	r2, r2, r3
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	e004      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	623b      	str	r3, [r7, #32]
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b8e:	623b      	str	r3, [r7, #32]
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6a3b      	ldr	r3, [r7, #32]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc90      	pop	{r4, r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	08006e38 	.word	0x08006e38
 8002ba4:	08006e48 	.word	0x08006e48
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	007a1200 	.word	0x007a1200
 8002bb0:	003d0900 	.word	0x003d0900

08002bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b02      	ldr	r3, [pc, #8]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	20000018 	.word	0x20000018

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bcc:	f7ff fff2 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4601      	mov	r1, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4a03      	ldr	r2, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08008350 	.word	0x08008350

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	f7ff ffde 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	0adb      	lsrs	r3, r3, #11
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08008350 	.word	0x08008350

08002c18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <RCC_Delay+0x34>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <RCC_Delay+0x38>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0a5b      	lsrs	r3, r3, #9
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c34:	bf00      	nop
  }
  while (Delay --);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e5a      	subs	r2, r3, #1
 8002c3a:	60fa      	str	r2, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f9      	bne.n	8002c34 <RCC_Delay+0x1c>
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000018 	.word	0x20000018
 8002c50:	10624dd3 	.word	0x10624dd3

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d07d      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c70:	2300      	movs	r3, #0
 8002c72:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10d      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c80:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	61d3      	str	r3, [r2, #28]
 8002c8c:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d118      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb4:	f7fd ffa8 	bl	8000c08 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	e008      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fd ffa4 	bl	8000c08 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e06d      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02e      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d027      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d08:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d0e:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d014      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fd ff73 	bl	8000c08 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fd ff6f 	bl	8000c08 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e036      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ee      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4917      	ldr	r1, [pc, #92]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	490b      	ldr	r1, [pc, #44]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4904      	ldr	r1, [pc, #16]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42420440 	.word	0x42420440

08002dc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b08d      	sub	sp, #52	; 0x34
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dc8:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002dca:	f107 040c 	add.w	r4, r7, #12
 8002dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	2300      	movs	r3, #0
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d07f      	beq.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d002      	beq.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d048      	beq.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002dfc:	e08b      	b.n	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e04:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d07f      	beq.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e22:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e2e:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0c5b      	lsrs	r3, r3, #17
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e4e:	4a37      	ldr	r2, [pc, #220]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5e:	e004      	b.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	4a33      	ldr	r2, [pc, #204]	; (8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d102      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e7c:	e048      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e8c:	e040      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9e:	d108      	bne.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb0:	e01f      	b.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d109      	bne.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002eca:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	e00f      	b.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d014      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002eea:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ef0:	e010      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002ef2:	e00f      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ef4:	f7ff fe7c 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0b9b      	lsrs	r3, r3, #14
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	3301      	adds	r3, #1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f0e:	e002      	b.n	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f10:	bf00      	nop
 8002f12:	e000      	b.n	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f14:	bf00      	nop
    }
  }
  return (frequency);
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3734      	adds	r7, #52	; 0x34
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd90      	pop	{r4, r7, pc}
 8002f20:	08006e4c 	.word	0x08006e4c
 8002f24:	08006e5c 	.word	0x08006e5c
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	007a1200 	.word	0x007a1200
 8002f30:	003d0900 	.word	0x003d0900
 8002f34:	aaaaaaab 	.word	0xaaaaaaab

08002f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e01d      	b.n	8002f86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f001 fc5a 	bl	8004818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f000 fa10 	bl	800339c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b06      	cmp	r3, #6
 8002fb6:	d007      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0202 	mvn.w	r2, #2
 8003000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f9a4 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f997 	bl	8003352 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9a6 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0204 	mvn.w	r2, #4
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f97a 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f96d 	bl	8003352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f97c 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0208 	mvn.w	r2, #8
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2204      	movs	r2, #4
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f950 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f943 	bl	8003352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f952 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2208      	movs	r2, #8
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f926 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f919 	bl	8003352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f928 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fd4a 	bl	8003bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b80      	cmp	r3, #128	; 0x80
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fa51 	bl	8003626 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8ec 	bl	8003388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0220 	mvn.w	r2, #32
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa1c 	bl	8003614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_ConfigClockSource+0x18>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e0a6      	b.n	800334a <HAL_TIM_ConfigClockSource+0x166>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800321a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003222:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d067      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0x120>
 8003234:	2b40      	cmp	r3, #64	; 0x40
 8003236:	d80b      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x6c>
 8003238:	2b10      	cmp	r3, #16
 800323a:	d073      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0x140>
 800323c:	2b10      	cmp	r3, #16
 800323e:	d802      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x62>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d06f      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003244:	e078      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003246:	2b20      	cmp	r3, #32
 8003248:	d06c      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0x140>
 800324a:	2b30      	cmp	r3, #48	; 0x30
 800324c:	d06a      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800324e:	e073      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003250:	2b70      	cmp	r3, #112	; 0x70
 8003252:	d00d      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x8c>
 8003254:	2b70      	cmp	r3, #112	; 0x70
 8003256:	d804      	bhi.n	8003262 <HAL_TIM_ConfigClockSource+0x7e>
 8003258:	2b50      	cmp	r3, #80	; 0x50
 800325a:	d033      	beq.n	80032c4 <HAL_TIM_ConfigClockSource+0xe0>
 800325c:	2b60      	cmp	r3, #96	; 0x60
 800325e:	d041      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003260:	e06a      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d066      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x152>
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326c:	d017      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800326e:	e063      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f000 f965 	bl	800354e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003292:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]
      break;
 800329c:	e04c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f000 f94e 	bl	800354e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c0:	609a      	str	r2, [r3, #8]
      break;
 80032c2:	e039      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f000 f8c5 	bl	8003460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2150      	movs	r1, #80	; 0x50
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f91c 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 80032e2:	e029      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f000 f8e3 	bl	80034bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2160      	movs	r1, #96	; 0x60
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f90c 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8003302:	e019      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	461a      	mov	r2, r3
 8003312:	f000 f8a5 	bl	8003460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2140      	movs	r1, #64	; 0x40
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f8fc 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8003322:	e009      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f000 f8f3 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8003334:	e000      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
	...

0800339c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a29      	ldr	r2, [pc, #164]	; (8003454 <TIM_Base_SetConfig+0xb8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x30>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x30>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a26      	ldr	r2, [pc, #152]	; (8003458 <TIM_Base_SetConfig+0xbc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x30>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a25      	ldr	r2, [pc, #148]	; (800345c <TIM_Base_SetConfig+0xc0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <TIM_Base_SetConfig+0xb8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00b      	beq.n	80033fe <TIM_Base_SetConfig+0x62>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d007      	beq.n	80033fe <TIM_Base_SetConfig+0x62>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <TIM_Base_SetConfig+0xbc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_Base_SetConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a18      	ldr	r2, [pc, #96]	; (800345c <TIM_Base_SetConfig+0xc0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d108      	bne.n	8003410 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a07      	ldr	r2, [pc, #28]	; (8003454 <TIM_Base_SetConfig+0xb8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d103      	bne.n	8003444 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	615a      	str	r2, [r3, #20]
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800

08003460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800348a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 030a 	bic.w	r3, r3, #10
 800349c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f023 0210 	bic.w	r2, r3, #16
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	031b      	lsls	r3, r3, #12
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	f043 0307 	orr.w	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b087      	sub	sp, #28
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003568:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	021a      	lsls	r2, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4313      	orrs	r3, r2
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	609a      	str	r2, [r3, #8]
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e032      	b.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800363c:	f7fd fa8c 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003640:	f000 f820 	bl	8003684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003644:	f000 f97a 	bl	800393c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003648:	f000 f872 	bl	8003730 <MX_ADC1_Init>
  MX_I2C1_Init();
 800364c:	f000 f8ae 	bl	80037ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8003650:	f000 f8da 	bl	8003808 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003654:	f000 f924 	bl	80038a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  set_oled_addr(0x78);
 8003658:	2078      	movs	r0, #120	; 0x78
 800365a:	f000 fb13 	bl	8003c84 <set_oled_addr>
  ssd1306_sel_I2C(&hi2c1);
 800365e:	4806      	ldr	r0, [pc, #24]	; (8003678 <main+0x40>)
 8003660:	f000 ffa4 	bl	80045ac <ssd1306_sel_I2C>
  SSD1306_Init ();
 8003664:	f000 fb1e 	bl	8003ca4 <SSD1306_Init>

//  HAL_ADCEx_Calibration_Start(&hadc1);

  HAL_TIM_Base_Start_IT(&htim2);
 8003668:	4804      	ldr	r0, [pc, #16]	; (800367c <main+0x44>)
 800366a:	f7ff fc90 	bl	8002f8e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800366e:	4804      	ldr	r0, [pc, #16]	; (8003680 <main+0x48>)
 8003670:	f7ff fc8d 	bl	8002f8e <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003674:	e7fe      	b.n	8003674 <main+0x3c>
 8003676:	bf00      	nop
 8003678:	20000690 	.word	0x20000690
 800367c:	20000754 	.word	0x20000754
 8003680:	200006e4 	.word	0x200006e4

08003684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b094      	sub	sp, #80	; 0x50
 8003688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800368a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368e:	2228      	movs	r2, #40	; 0x28
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f001 f9f9 	bl	8004a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	609a      	str	r2, [r3, #8]
 80036b2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036b4:	2302      	movs	r3, #2
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036b8:	2301      	movs	r3, #1
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036bc:	2310      	movs	r3, #16
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c0:	2302      	movs	r3, #2
 80036c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80036c4:	2300      	movs	r3, #0
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80036c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fea2 	bl	800241c <HAL_RCC_OscConfig>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80036de:	f000 facb 	bl	8003c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036e2:	230f      	movs	r3, #15
 80036e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036e6:	2302      	movs	r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036ee:	2300      	movs	r3, #0
 80036f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f90d 	bl	800291c <HAL_RCC_ClockConfig>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003708:	f000 fab6 	bl	8003c78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800370c:	2302      	movs	r3, #2
 800370e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa9c 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003722:	f000 faa9 	bl	8003c78 <Error_Handler>
  }
}
 8003726:	bf00      	nop
 8003728:	3750      	adds	r7, #80	; 0x50
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <MX_ADC1_Init+0x74>)
 8003742:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <MX_ADC1_Init+0x78>)
 8003744:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <MX_ADC1_Init+0x74>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <MX_ADC1_Init+0x74>)
 800374e:	2200      	movs	r2, #0
 8003750:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <MX_ADC1_Init+0x74>)
 8003754:	2200      	movs	r2, #0
 8003756:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <MX_ADC1_Init+0x74>)
 800375a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800375e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003760:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <MX_ADC1_Init+0x74>)
 8003762:	2200      	movs	r2, #0
 8003764:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <MX_ADC1_Init+0x74>)
 8003768:	2201      	movs	r2, #1
 800376a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800376c:	480d      	ldr	r0, [pc, #52]	; (80037a4 <MX_ADC1_Init+0x74>)
 800376e:	f7fd fa55 	bl	8000c1c <HAL_ADC_Init>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003778:	f000 fa7e 	bl	8003c78 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800377c:	2300      	movs	r3, #0
 800377e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003780:	2301      	movs	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4805      	ldr	r0, [pc, #20]	; (80037a4 <MX_ADC1_Init+0x74>)
 800378e:	f7fd fcfd 	bl	800118c <HAL_ADC_ConfigChannel>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003798:	f000 fa6e 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000724 	.word	0x20000724
 80037a8:	40012400 	.word	0x40012400

080037ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037b0:	4b12      	ldr	r3, [pc, #72]	; (80037fc <MX_I2C1_Init+0x50>)
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <MX_I2C1_Init+0x54>)
 80037b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <MX_I2C1_Init+0x50>)
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <MX_I2C1_Init+0x58>)
 80037ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <MX_I2C1_Init+0x50>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <MX_I2C1_Init+0x50>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <MX_I2C1_Init+0x50>)
 80037ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <MX_I2C1_Init+0x50>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <MX_I2C1_Init+0x50>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <MX_I2C1_Init+0x50>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <MX_I2C1_Init+0x50>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037e8:	4804      	ldr	r0, [pc, #16]	; (80037fc <MX_I2C1_Init+0x50>)
 80037ea:	f7fe f8d3 	bl	8001994 <HAL_I2C_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80037f4:	f000 fa40 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000690 	.word	0x20000690
 8003800:	40005400 	.word	0x40005400
 8003804:	00061a80 	.word	0x00061a80

08003808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381c:	463b      	mov	r3, r7
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <MX_TIM2_Init+0x94>)
 8003826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800382a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <MX_TIM2_Init+0x94>)
 800382e:	f240 623f 	movw	r2, #1599	; 0x63f
 8003832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <MX_TIM2_Init+0x94>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <MX_TIM2_Init+0x94>)
 800383c:	2213      	movs	r2, #19
 800383e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003840:	4b16      	ldr	r3, [pc, #88]	; (800389c <MX_TIM2_Init+0x94>)
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <MX_TIM2_Init+0x94>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800384c:	4813      	ldr	r0, [pc, #76]	; (800389c <MX_TIM2_Init+0x94>)
 800384e:	f7ff fb73 	bl	8002f38 <HAL_TIM_Base_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003858:	f000 fa0e 	bl	8003c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800385c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4619      	mov	r1, r3
 8003868:	480c      	ldr	r0, [pc, #48]	; (800389c <MX_TIM2_Init+0x94>)
 800386a:	f7ff fcbb 	bl	80031e4 <HAL_TIM_ConfigClockSource>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003874:	f000 fa00 	bl	8003c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003878:	2300      	movs	r3, #0
 800387a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800387c:	2300      	movs	r3, #0
 800387e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003880:	463b      	mov	r3, r7
 8003882:	4619      	mov	r1, r3
 8003884:	4805      	ldr	r0, [pc, #20]	; (800389c <MX_TIM2_Init+0x94>)
 8003886:	f7ff fe81 	bl	800358c <HAL_TIMEx_MasterConfigSynchronization>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003890:	f000 f9f2 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000754 	.word	0x20000754

080038a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b4:	463b      	mov	r3, r7
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <MX_TIM3_Init+0x94>)
 80038be:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <MX_TIM3_Init+0x98>)
 80038c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <MX_TIM3_Init+0x94>)
 80038c4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80038c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <MX_TIM3_Init+0x94>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <MX_TIM3_Init+0x94>)
 80038d2:	22c7      	movs	r2, #199	; 0xc7
 80038d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <MX_TIM3_Init+0x94>)
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <MX_TIM3_Init+0x94>)
 80038de:	2200      	movs	r2, #0
 80038e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038e2:	4814      	ldr	r0, [pc, #80]	; (8003934 <MX_TIM3_Init+0x94>)
 80038e4:	f7ff fb28 	bl	8002f38 <HAL_TIM_Base_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80038ee:	f000 f9c3 	bl	8003c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4619      	mov	r1, r3
 80038fe:	480d      	ldr	r0, [pc, #52]	; (8003934 <MX_TIM3_Init+0x94>)
 8003900:	f7ff fc70 	bl	80031e4 <HAL_TIM_ConfigClockSource>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800390a:	f000 f9b5 	bl	8003c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003916:	463b      	mov	r3, r7
 8003918:	4619      	mov	r1, r3
 800391a:	4806      	ldr	r0, [pc, #24]	; (8003934 <MX_TIM3_Init+0x94>)
 800391c:	f7ff fe36 	bl	800358c <HAL_TIMEx_MasterConfigSynchronization>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003926:	f000 f9a7 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200006e4 	.word	0x200006e4
 8003938:	40000400 	.word	0x40000400

0800393c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <MX_GPIO_Init+0x58>)
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <MX_GPIO_Init+0x58>)
 8003948:	f043 0320 	orr.w	r3, r3, #32
 800394c:	6193      	str	r3, [r2, #24]
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <MX_GPIO_Init+0x58>)
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <MX_GPIO_Init+0x58>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <MX_GPIO_Init+0x58>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6193      	str	r3, [r2, #24]
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <MX_GPIO_Init+0x58>)
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <MX_GPIO_Init+0x58>)
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	4a07      	ldr	r2, [pc, #28]	; (8003994 <MX_GPIO_Init+0x58>)
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	6193      	str	r3, [r2, #24]
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <MX_GPIO_Init+0x58>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]

}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	40021000 	.word	0x40021000

08003998 <factor_correct>:

/* USER CODE BEGIN 4 */
double factor_correct(double x){
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	e9c7 0100 	strd	r0, r1, [r7]
	// Fourier aprox
	if ((x < 250) && (x > 40)){
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <factor_correct+0xd0>)
 80039a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039ac:	f7fc fffe 	bl	80009ac <__aeabi_dcmplt>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d040      	beq.n	8003a38 <factor_correct+0xa0>
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <factor_correct+0xd4>)
 80039bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039c0:	f7fd f812 	bl	80009e8 <__aeabi_dcmpgt>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d036      	beq.n	8003a38 <factor_correct+0xa0>
		return a*exp(b*x) + c*exp(d*x);
 80039ca:	a11f      	add	r1, pc, #124	; (adr r1, 8003a48 <factor_correct+0xb0>)
 80039cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d4:	f7fc fd78 	bl	80004c8 <__aeabi_dmul>
 80039d8:	4603      	mov	r3, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	4618      	mov	r0, r3
 80039de:	4621      	mov	r1, r4
 80039e0:	f001 fd62 	bl	80054a8 <exp>
 80039e4:	a41a      	add	r4, pc, #104	; (adr r4, 8003a50 <factor_correct+0xb8>)
 80039e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80039ea:	461a      	mov	r2, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	f7fc fd6b 	bl	80004c8 <__aeabi_dmul>
 80039f2:	4603      	mov	r3, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	461d      	mov	r5, r3
 80039f8:	4626      	mov	r6, r4
 80039fa:	a117      	add	r1, pc, #92	; (adr r1, 8003a58 <factor_correct+0xc0>)
 80039fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a04:	f7fc fd60 	bl	80004c8 <__aeabi_dmul>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	4621      	mov	r1, r4
 8003a10:	f001 fd4a 	bl	80054a8 <exp>
 8003a14:	a412      	add	r4, pc, #72	; (adr r4, 8003a60 <factor_correct+0xc8>)
 8003a16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	f7fc fd53 	bl	80004c8 <__aeabi_dmul>
 8003a22:	4603      	mov	r3, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	461a      	mov	r2, r3
 8003a28:	4623      	mov	r3, r4
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	f7fc fb95 	bl	800015c <__adddf3>
 8003a32:	4603      	mov	r3, r0
 8003a34:	460c      	mov	r4, r1
 8003a36:	e002      	b.n	8003a3e <factor_correct+0xa6>
//		return a0 + a1*cos(x*w) + b1*sin(x*w) +
//            a2*cos(2*x*w) + b2*sin(2*x*w);
	} else {
		return 1;
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	4c0c      	ldr	r4, [pc, #48]	; (8003a70 <factor_correct+0xd8>)
	}
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	4621      	mov	r1, r4
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a48:	573eab36 	.word	0x573eab36
 8003a4c:	bf9fb15b 	.word	0xbf9fb15b
 8003a50:	d4fdf3b6 	.word	0xd4fdf3b6
 8003a54:	4001e978 	.word	0x4001e978
 8003a58:	95af294e 	.word	0x95af294e
 8003a5c:	bf525dd0 	.word	0xbf525dd0
 8003a60:	5a1cac08 	.word	0x5a1cac08
 8003a64:	3ffd3b64 	.word	0x3ffd3b64
 8003a68:	406f4000 	.word	0x406f4000
 8003a6c:	40440000 	.word	0x40440000
 8003a70:	3ff00000 	.word	0x3ff00000

08003a74 <check_ADC>:

void check_ADC(ADC_HandleTypeDef *hadc, uint16_t *pData, uint16_t Size){
 8003a74:	b5b0      	push	{r4, r5, r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
	static uint8_t index_adc = 0;
	static double processed_adc = 0;
	double data_adc = 0;
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f04f 0400 	mov.w	r4, #0
 8003a8a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	HAL_ADC_Start(&hadc1);
 8003a8e:	4851      	ldr	r0, [pc, #324]	; (8003bd4 <check_ADC+0x160>)
 8003a90:	f7fd f99c 	bl	8000dcc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8003a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a98:	484e      	ldr	r0, [pc, #312]	; (8003bd4 <check_ADC+0x160>)
 8003a9a:	f7fd fa71 	bl	8000f80 <HAL_ADC_PollForConversion>
	pData[index_adc] = HAL_ADC_GetValue(&hadc1);
 8003a9e:	484d      	ldr	r0, [pc, #308]	; (8003bd4 <check_ADC+0x160>)
 8003aa0:	f7fd fb68 	bl	8001174 <HAL_ADC_GetValue>
 8003aa4:	4601      	mov	r1, r0
 8003aa6:	4b4c      	ldr	r3, [pc, #304]	; (8003bd8 <check_ADC+0x164>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4413      	add	r3, r2
 8003ab0:	b28a      	uxth	r2, r1
 8003ab2:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003ab4:	4847      	ldr	r0, [pc, #284]	; (8003bd4 <check_ADC+0x160>)
 8003ab6:	f7fd fa37 	bl	8000f28 <HAL_ADC_Stop>
	data_adc = pData[index_adc]*3300/4095;
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <check_ADC+0x164>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f640 43e4 	movw	r3, #3300	; 0xce4
 8003acc:	fb03 f302 	mul.w	r3, r3, r2
 8003ad0:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <check_ADC+0x168>)
 8003ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8003ad6:	441a      	add	r2, r3
 8003ad8:	12d2      	asrs	r2, r2, #11
 8003ada:	17db      	asrs	r3, r3, #31
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fc88 	bl	80003f4 <__aeabi_i2d>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	processed_adc += data_adc;
 8003aec:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <check_ADC+0x16c>)
 8003aee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003af2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003af6:	f7fc fb31 	bl	800015c <__adddf3>
 8003afa:	4603      	mov	r3, r0
 8003afc:	460c      	mov	r4, r1
 8003afe:	4a38      	ldr	r2, [pc, #224]	; (8003be0 <check_ADC+0x16c>)
 8003b00:	e9c2 3400 	strd	r3, r4, [r2]
	index_adc++;
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <check_ADC+0x164>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <check_ADC+0x164>)
 8003b0e:	701a      	strb	r2, [r3, #0]

	if (index_adc >= Size ){
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <check_ADC+0x164>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d856      	bhi.n	8003bca <check_ADC+0x156>
		processed_adc = processed_adc/Size;
 8003b1c:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <check_ADC+0x16c>)
 8003b1e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fc65 	bl	80003f4 <__aeabi_i2d>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4620      	mov	r0, r4
 8003b30:	4629      	mov	r1, r5
 8003b32:	f7fc fdf3 	bl	800071c <__aeabi_ddiv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <check_ADC+0x16c>)
 8003b3c:	e9c2 3400 	strd	r3, r4, [r2]
		processed_adc = processed_adc*factor_correct(processed_adc);
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <check_ADC+0x16c>)
 8003b42:	cb18      	ldmia	r3, {r3, r4}
 8003b44:	4618      	mov	r0, r3
 8003b46:	4621      	mov	r1, r4
 8003b48:	f7ff ff26 	bl	8003998 <factor_correct>
 8003b4c:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <check_ADC+0x16c>)
 8003b4e:	cb18      	ldmia	r3, {r3, r4}
 8003b50:	461a      	mov	r2, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	f7fc fcb8 	bl	80004c8 <__aeabi_dmul>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	4a20      	ldr	r2, [pc, #128]	; (8003be0 <check_ADC+0x16c>)
 8003b5e:	e9c2 3400 	strd	r3, r4, [r2]
		processed_adc = processed_adc/10;
 8003b62:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <check_ADC+0x16c>)
 8003b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <check_ADC+0x170>)
 8003b6e:	f7fc fdd5 	bl	800071c <__aeabi_ddiv>
 8003b72:	4603      	mov	r3, r0
 8003b74:	460c      	mov	r4, r1
 8003b76:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <check_ADC+0x16c>)
 8003b78:	e9c2 3400 	strd	r3, r4, [r2]
		processed_adc = round(processed_adc);
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <check_ADC+0x16c>)
 8003b7e:	cb18      	ldmia	r3, {r3, r4}
 8003b80:	4618      	mov	r0, r3
 8003b82:	4621      	mov	r1, r4
 8003b84:	f001 fc18 	bl	80053b8 <round>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <check_ADC+0x16c>)
 8003b8e:	e9c2 3400 	strd	r3, r4, [r2]
		processed_adc = processed_adc*10;
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <check_ADC+0x16c>)
 8003b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <check_ADC+0x170>)
 8003b9e:	f7fc fc93 	bl	80004c8 <__aeabi_dmul>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <check_ADC+0x16c>)
 8003ba8:	e9c2 3400 	strd	r3, r4, [r2]


		voltage_adc = processed_adc;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <check_ADC+0x16c>)
 8003bae:	cb18      	ldmia	r3, {r3, r4}
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <check_ADC+0x174>)
 8003bb2:	e9c2 3400 	strd	r3, r4, [r2]
		index_adc = 0;
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <check_ADC+0x164>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
		processed_adc = 0;
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <check_ADC+0x16c>)
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f04f 0400 	mov.w	r4, #0
 8003bc6:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000724 	.word	0x20000724
 8003bd8:	200000b0 	.word	0x200000b0
 8003bdc:	80080081 	.word	0x80080081
 8003be0:	200000b8 	.word	0x200000b8
 8003be4:	40240000 	.word	0x40240000
 8003be8:	200000a8 	.word	0x200000a8

08003bec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10b      	bne.n	8003c14 <HAL_TIM_PeriodElapsedCallback+0x28>
		static uint8_t ready_2 = 0;
		if (ready_2 == 1){
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PeriodElapsedCallback+0x22>
			 check_ADC(&hadc1, rawValues, 200);
 8003c04:	22c8      	movs	r2, #200	; 0xc8
 8003c06:	4916      	ldr	r1, [pc, #88]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003c08:	4816      	ldr	r0, [pc, #88]	; (8003c64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003c0a:	f7ff ff33 	bl	8003a74 <check_ADC>
		}
		ready_2 = 1;
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim3){
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d118      	bne.n	8003c4e <HAL_TIM_PeriodElapsedCallback+0x62>
		static uint8_t ready_3 = 0;
		if (ready_3 == 1){
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d111      	bne.n	8003c48 <HAL_TIM_PeriodElapsedCallback+0x5c>
			SSD1306_Putdouble(voltage_adc, 1, 1);
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003c26:	cb18      	ldmia	r3, {r3, r4}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	f7fc ff44 	bl	8000ab8 <__aeabi_d2f>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2201      	movs	r2, #1
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fc12 	bl	8004460 <SSD1306_Putdouble>
			SSD1306_UpdateScreen();
 8003c3c:	f000 f928 	bl	8003e90 <SSD1306_UpdateScreen>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8003c40:	2108      	movs	r1, #8
 8003c42:	480c      	ldr	r0, [pc, #48]	; (8003c74 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003c44:	f7fd fe8e 	bl	8001964 <HAL_GPIO_TogglePin>
		}
		ready_3 = 1;
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
	}
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000754 	.word	0x20000754
 8003c5c:	200000c0 	.word	0x200000c0
 8003c60:	20000500 	.word	0x20000500
 8003c64:	20000724 	.word	0x20000724
 8003c68:	200006e4 	.word	0x200006e4
 8003c6c:	200000c1 	.word	0x200000c1
 8003c70:	200000a8 	.word	0x200000a8
 8003c74:	40010c00 	.word	0x40010c00

08003c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <set_oled_addr>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

void set_oled_addr(uint8_t addr){
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
	oled_addr = addr;
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <set_oled_addr+0x1c>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	7013      	strb	r3, [r2, #0]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	200007e8 	.word	0x200007e8

08003ca4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0

	/* Init I2C */
//	ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c_current, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003caa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003cae:	2201      	movs	r2, #1
 8003cb0:	2178      	movs	r1, #120	; 0x78
 8003cb2:	4874      	ldr	r0, [pc, #464]	; (8003e84 <SSD1306_Init+0x1e0>)
 8003cb4:	f7fe f894 	bl	8001de0 <HAL_I2C_IsDeviceReady>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e0dc      	b.n	8003e7c <SSD1306_Init+0x1d8>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003cc2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003cc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003cc8:	e002      	b.n	8003cd0 <SSD1306_Init+0x2c>
		p--;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f9      	bne.n	8003cca <SSD1306_Init+0x26>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	22ae      	movs	r2, #174	; 0xae
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fcd0 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003ce4:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fcc9 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003cf2:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fcc2 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	22b0      	movs	r2, #176	; 0xb0
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fcbb 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003d0e:	4b5e      	ldr	r3, [pc, #376]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	22c8      	movs	r2, #200	; 0xc8
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fcb4 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003d1c:	4b5a      	ldr	r3, [pc, #360]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fcad 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fca6 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003d38:	4b53      	ldr	r3, [pc, #332]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fc9f 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003d46:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2281      	movs	r2, #129	; 0x81
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fc98 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	22ff      	movs	r2, #255	; 0xff
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fc91 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003d62:	4b49      	ldr	r3, [pc, #292]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	22a1      	movs	r2, #161	; 0xa1
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fc8a 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003d70:	4b45      	ldr	r3, [pc, #276]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	22a6      	movs	r2, #166	; 0xa6
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fc83 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003d7e:	4b42      	ldr	r3, [pc, #264]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	22a8      	movs	r2, #168	; 0xa8
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fc7c 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003d8c:	4b3e      	ldr	r3, [pc, #248]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	223f      	movs	r2, #63	; 0x3f
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fc75 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	22a4      	movs	r2, #164	; 0xa4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fc6e 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	22d3      	movs	r2, #211	; 0xd3
 8003dae:	2100      	movs	r1, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fc67 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003db6:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fc60 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003dc4:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	22d5      	movs	r2, #213	; 0xd5
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fc59 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003dd2:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	22f0      	movs	r2, #240	; 0xf0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fc52 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003de0:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	22d9      	movs	r2, #217	; 0xd9
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fc4b 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2222      	movs	r2, #34	; 0x22
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fc44 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003dfc:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	22da      	movs	r2, #218	; 0xda
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fc3d 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003e0a:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2212      	movs	r2, #18
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fc36 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	22db      	movs	r2, #219	; 0xdb
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fc2f 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fc28 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	228d      	movs	r2, #141	; 0x8d
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fc21 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2214      	movs	r2, #20
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc1a 	bl	8004684 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003e50:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <SSD1306_Init+0x1e4>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	22af      	movs	r2, #175	; 0xaf
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fc13 	bl	8004684 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f000 f850 	bl	8003f04 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003e64:	f000 f814 	bl	8003e90 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <SSD1306_Init+0x1e8>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <SSD1306_Init+0x1e8>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <SSD1306_Init+0x1e8>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003e7a:	2301      	movs	r3, #1
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000794 	.word	0x20000794
 8003e88:	200007e8 	.word	0x200007e8
 8003e8c:	200004dc 	.word	0x200004dc

08003e90 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003e96:	2300      	movs	r3, #0
 8003e98:	71fb      	strb	r3, [r7, #7]
 8003e9a:	e027      	b.n	8003eec <SSD1306_UpdateScreen+0x5c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003e9c:	4b17      	ldr	r3, [pc, #92]	; (8003efc <SSD1306_UpdateScreen+0x6c>)
 8003e9e:	7818      	ldrb	r0, [r3, #0]
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	3b50      	subs	r3, #80	; 0x50
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f000 fbeb 	bl	8004684 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <SSD1306_UpdateScreen+0x6c>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fbe4 	bl	8004684 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <SSD1306_UpdateScreen+0x6c>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fbdd 	bl	8004684 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(oled_addr, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <SSD1306_UpdateScreen+0x6c>)
 8003ecc:	7818      	ldrb	r0, [r3, #0]
 8003ece:	79fa      	ldrb	r2, [r7, #7]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	019b      	lsls	r3, r3, #6
 8003ed4:	4413      	add	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <SSD1306_UpdateScreen+0x70>)
 8003edc:	441a      	add	r2, r3
 8003ede:	2383      	movs	r3, #131	; 0x83
 8003ee0:	2140      	movs	r1, #64	; 0x40
 8003ee2:	f000 fb75 	bl	80045d0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	71fb      	strb	r3, [r7, #7]
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d9d4      	bls.n	8003e9c <SSD1306_UpdateScreen+0xc>
	}
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200007e8 	.word	0x200007e8
 8003f00:	200000c4 	.word	0x200000c4

08003f04 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <SSD1306_Fill+0x14>
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <SSD1306_Fill+0x16>
 8003f18:	23ff      	movs	r3, #255	; 0xff
 8003f1a:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4803      	ldr	r0, [pc, #12]	; (8003f30 <SSD1306_Fill+0x2c>)
 8003f22:	f000 fdb2 	bl	8004a8a <memset>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200000c4 	.word	0x200000c4

08003f34 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003f34:	b490      	push	{r4, r7}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	80fb      	strh	r3, [r7, #6]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	80bb      	strh	r3, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	70fb      	strb	r3, [r7, #3]
	if (
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	2b82      	cmp	r3, #130	; 0x82
 8003f4a:	d858      	bhi.n	8003ffe <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 8003f4c:	88bb      	ldrh	r3, [r7, #4]
 8003f4e:	2b3f      	cmp	r3, #63	; 0x3f
 8003f50:	d855      	bhi.n	8003ffe <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003f52:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <SSD1306_DrawPixel+0xd4>)
 8003f54:	791b      	ldrb	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d122      	bne.n	8003fb4 <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003f6e:	88f9      	ldrh	r1, [r7, #6]
 8003f70:	88bb      	ldrh	r3, [r7, #4]
 8003f72:	08db      	lsrs	r3, r3, #3
 8003f74:	b298      	uxth	r0, r3
 8003f76:	4602      	mov	r2, r0
 8003f78:	4613      	mov	r3, r2
 8003f7a:	019b      	lsls	r3, r3, #6
 8003f7c:	4413      	add	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	440b      	add	r3, r1
 8003f84:	4a21      	ldr	r2, [pc, #132]	; (800400c <SSD1306_DrawPixel+0xd8>)
 8003f86:	5cd3      	ldrb	r3, [r2, r3]
 8003f88:	b25a      	sxtb	r2, r3
 8003f8a:	88bb      	ldrh	r3, [r7, #4]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	b25c      	sxtb	r4, r3
 8003f9c:	88f9      	ldrh	r1, [r7, #6]
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	4413      	add	r3, r2
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	4413      	add	r3, r2
 8003faa:	440b      	add	r3, r1
 8003fac:	b2e1      	uxtb	r1, r4
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <SSD1306_DrawPixel+0xd8>)
 8003fb0:	54d1      	strb	r1, [r2, r3]
 8003fb2:	e025      	b.n	8004000 <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003fb4:	88f9      	ldrh	r1, [r7, #6]
 8003fb6:	88bb      	ldrh	r3, [r7, #4]
 8003fb8:	08db      	lsrs	r3, r3, #3
 8003fba:	b298      	uxth	r0, r3
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	4413      	add	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	440b      	add	r3, r1
 8003fca:	4a10      	ldr	r2, [pc, #64]	; (800400c <SSD1306_DrawPixel+0xd8>)
 8003fcc:	5cd3      	ldrb	r3, [r2, r3]
 8003fce:	b25a      	sxtb	r2, r3
 8003fd0:	88bb      	ldrh	r3, [r7, #4]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b25c      	sxtb	r4, r3
 8003fe6:	88f9      	ldrh	r1, [r7, #6]
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4613      	mov	r3, r2
 8003fec:	019b      	lsls	r3, r3, #6
 8003fee:	4413      	add	r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4413      	add	r3, r2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	b2e1      	uxtb	r1, r4
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <SSD1306_DrawPixel+0xd8>)
 8003ffa:	54d1      	strb	r1, [r2, r3]
 8003ffc:	e000      	b.n	8004000 <SSD1306_DrawPixel+0xcc>
		return;
 8003ffe:	bf00      	nop
	}
}
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bc90      	pop	{r4, r7}
 8004006:	4770      	bx	lr
 8004008:	200004dc 	.word	0x200004dc
 800400c:	200000c4 	.word	0x200000c4

08004010 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	460a      	mov	r2, r1
 800401a:	80fb      	strh	r3, [r7, #6]
 800401c:	4613      	mov	r3, r2
 800401e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004020:	4a05      	ldr	r2, [pc, #20]	; (8004038 <SSD1306_GotoXY+0x28>)
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8004026:	4a04      	ldr	r2, [pc, #16]	; (8004038 <SSD1306_GotoXY+0x28>)
 8004028:	88bb      	ldrh	r3, [r7, #4]
 800402a:	8053      	strh	r3, [r2, #2]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	200004dc 	.word	0x200004dc

0800403c <SSD1306_Putc>:

char SSD1306_Putc(uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	71fb      	strb	r3, [r7, #7]
 8004048:	4613      	mov	r3, r2
 800404a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800404c:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <SSD1306_Putc+0xfc>)
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4413      	add	r3, r2
	if (
 8004058:	2b82      	cmp	r3, #130	; 0x82
 800405a:	dc07      	bgt.n	800406c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <SSD1306_Putc+0xfc>)
 800405e:	885b      	ldrh	r3, [r3, #2]
 8004060:	461a      	mov	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	785b      	ldrb	r3, [r3, #1]
 8004066:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004068:	2b3f      	cmp	r3, #63	; 0x3f
 800406a:	dd01      	ble.n	8004070 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800406c:	2300      	movs	r3, #0
 800406e:	e05e      	b.n	800412e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e04b      	b.n	800410e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	3b20      	subs	r3, #32
 800407e:	6839      	ldr	r1, [r7, #0]
 8004080:	7849      	ldrb	r1, [r1, #1]
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4619      	mov	r1, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	440b      	add	r3, r1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e030      	b.n	80040fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <SSD1306_Putc+0xfc>)
 80040ac:	881a      	ldrh	r2, [r3, #0]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	b298      	uxth	r0, r3
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <SSD1306_Putc+0xfc>)
 80040b8:	885a      	ldrh	r2, [r3, #2]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4413      	add	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	79ba      	ldrb	r2, [r7, #6]
 80040c4:	4619      	mov	r1, r3
 80040c6:	f7ff ff35 	bl	8003f34 <SSD1306_DrawPixel>
 80040ca:	e014      	b.n	80040f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <SSD1306_Putc+0xfc>)
 80040ce:	881a      	ldrh	r2, [r3, #0]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	b298      	uxth	r0, r3
 80040d8:	4b17      	ldr	r3, [pc, #92]	; (8004138 <SSD1306_Putc+0xfc>)
 80040da:	885a      	ldrh	r2, [r3, #2]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	b299      	uxth	r1, r3
 80040e4:	79bb      	ldrb	r3, [r7, #6]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	f7ff ff1f 	bl	8003f34 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	3301      	adds	r3, #1
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4293      	cmp	r3, r2
 8004106:	d3c8      	bcc.n	800409a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	461a      	mov	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4293      	cmp	r3, r2
 8004118:	d3ad      	bcc.n	8004076 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <SSD1306_Putc+0xfc>)
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4413      	add	r3, r2
 8004126:	b29a      	uxth	r2, r3
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <SSD1306_Putc+0xfc>)
 800412a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800412c:	79fb      	ldrb	r3, [r7, #7]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	200004dc 	.word	0x200004dc

0800413c <size_int>:

uint8_t size_int(int data){
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <size_int+0x14>
		size = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e01b      	b.n	8004188 <size_int+0x4c>
	}
	else {
		size = floor(log10(data))+1;
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fc f94f 	bl	80003f4 <__aeabi_i2d>
 8004156:	4603      	mov	r3, r0
 8004158:	460c      	mov	r4, r1
 800415a:	4618      	mov	r0, r3
 800415c:	4621      	mov	r1, r4
 800415e:	f001 fa1b 	bl	8005598 <log10>
 8004162:	4603      	mov	r3, r0
 8004164:	460c      	mov	r4, r1
 8004166:	4618      	mov	r0, r3
 8004168:	4621      	mov	r1, r4
 800416a:	f001 f8a1 	bl	80052b0 <floor>
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <size_int+0x58>)
 8004174:	f7fb fff2 	bl	800015c <__adddf3>
 8004178:	4603      	mov	r3, r0
 800417a:	460c      	mov	r4, r1
 800417c:	4618      	mov	r0, r3
 800417e:	4621      	mov	r1, r4
 8004180:	f7fc fc7a 	bl	8000a78 <__aeabi_d2uiz>
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	bf00      	nop
 8004194:	3ff00000 	.word	0x3ff00000

08004198 <double_str>:
	SSD1306_GotoXY (x_slot+11,y_slot);
	SSD1306_Puts (data_char, &Font_11x18, 1);
//	SSD1306_UpdateScreen();
}

char* double_str(double data, uint8_t decimales){
 8004198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800419c:	b095      	sub	sp, #84	; 0x54
 800419e:	af00      	add	r7, sp, #0
 80041a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71fb      	strb	r3, [r7, #7]
 80041a8:	466b      	mov	r3, sp
 80041aa:	461e      	mov	r6, r3
	char negativo = ' ';
 80041ac:	2320      	movs	r3, #32
 80041ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (data < 0) {
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041be:	f7fc fbf5 	bl	80009ac <__aeabi_dcmplt>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <double_str+0x42>
		data = -data;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80041d2:	60fb      	str	r3, [r7, #12]
		negativo = '-';
 80041d4:	232d      	movs	r3, #45	; 0x2d
 80041d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	int potencia_10 = pow(10, decimales);
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f8f9 	bl	80003d4 <__aeabi_ui2d>
 80041e2:	4603      	mov	r3, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	461a      	mov	r2, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	f04f 0000 	mov.w	r0, #0
 80041ee:	4999      	ldr	r1, [pc, #612]	; (8004454 <double_str+0x2bc>)
 80041f0:	f001 fa4c 	bl	800568c <pow>
 80041f4:	4603      	mov	r3, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	4618      	mov	r0, r3
 80041fa:	4621      	mov	r1, r4
 80041fc:	f7fc fc14 	bl	8000a28 <__aeabi_d2iz>
 8004200:	4603      	mov	r3, r0
 8004202:	643b      	str	r3, [r7, #64]	; 0x40
	double p_entera_f = trunc(data);
 8004204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004208:	f001 f91c 	bl	8005444 <trunc>
 800420c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	double p_decimal_f = data*potencia_10 - p_entera_f*potencia_10;
 8004210:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004212:	f7fc f8ef 	bl	80003f4 <__aeabi_i2d>
 8004216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800421a:	f7fc f955 	bl	80004c8 <__aeabi_dmul>
 800421e:	4603      	mov	r3, r0
 8004220:	460c      	mov	r4, r1
 8004222:	4625      	mov	r5, r4
 8004224:	461c      	mov	r4, r3
 8004226:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004228:	f7fc f8e4 	bl	80003f4 <__aeabi_i2d>
 800422c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004230:	f7fc f94a 	bl	80004c8 <__aeabi_dmul>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4620      	mov	r0, r4
 800423a:	4629      	mov	r1, r5
 800423c:	f7fb ff8c 	bl	8000158 <__aeabi_dsub>
 8004240:	4603      	mov	r3, r0
 8004242:	460c      	mov	r4, r1
 8004244:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int p_entera = p_entera_f;
 8004248:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800424c:	f7fc fbec 	bl	8000a28 <__aeabi_d2iz>
 8004250:	4603      	mov	r3, r0
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
	int p_decimal = p_decimal_f;
 8004254:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004258:	f7fc fbe6 	bl	8000a28 <__aeabi_d2iz>
 800425c:	4603      	mov	r3, r0
 800425e:	64bb      	str	r3, [r7, #72]	; 0x48

	int size = size_int(p_entera);
 8004260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004262:	f7ff ff6b 	bl	800413c <size_int>
 8004266:	4603      	mov	r3, r0
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
	char p_entera_char[size];		// String de chars
 800426a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800426c:	1e6b      	subs	r3, r5, #1
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	462b      	mov	r3, r5
 8004272:	4619      	mov	r1, r3
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	00d4      	lsls	r4, r2, #3
 8004282:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	462b      	mov	r3, r5
 800428a:	4619      	mov	r1, r3
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	00d4      	lsls	r4, r2, #3
 800429a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800429e:	00cb      	lsls	r3, r1, #3
 80042a0:	462b      	mov	r3, r5
 80042a2:	3307      	adds	r3, #7
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	ebad 0d03 	sub.w	sp, sp, r3
 80042ac:	466b      	mov	r3, sp
 80042ae:	3300      	adds	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
	sprintf(p_entera_char,"%d", p_entera);	// Cada numero del int en un char
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b6:	4968      	ldr	r1, [pc, #416]	; (8004458 <double_str+0x2c0>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fbef 	bl	8004a9c <siprintf>

	char p_decimal_char[decimales];
 80042be:	79f8      	ldrb	r0, [r7, #7]
 80042c0:	4603      	mov	r3, r0
 80042c2:	3b01      	subs	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	b2c1      	uxtb	r1, r0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	00d4      	lsls	r4, r2, #3
 80042d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80042da:	00cb      	lsls	r3, r1, #3
 80042dc:	b2c1      	uxtb	r1, r0
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	00d4      	lsls	r4, r2, #3
 80042ec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80042f0:	00cb      	lsls	r3, r1, #3
 80042f2:	4603      	mov	r3, r0
 80042f4:	3307      	adds	r3, #7
 80042f6:	08db      	lsrs	r3, r3, #3
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	ebad 0d03 	sub.w	sp, sp, r3
 80042fe:	466b      	mov	r3, sp
 8004300:	3300      	adds	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]
	size = size_int(p_decimal);
 8004304:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004306:	f7ff ff19 	bl	800413c <size_int>
 800430a:	4603      	mov	r3, r0
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (decimales>size){
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004312:	429a      	cmp	r2, r3
 8004314:	da22      	bge.n	800435c <double_str+0x1c4>
		p_decimal = p_decimal + pow(10,decimales-1);
 8004316:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004318:	f7fc f86c 	bl	80003f4 <__aeabi_i2d>
 800431c:	4680      	mov	r8, r0
 800431e:	4689      	mov	r9, r1
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	3b01      	subs	r3, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f865 	bl	80003f4 <__aeabi_i2d>
 800432a:	4603      	mov	r3, r0
 800432c:	460c      	mov	r4, r1
 800432e:	461a      	mov	r2, r3
 8004330:	4623      	mov	r3, r4
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	4947      	ldr	r1, [pc, #284]	; (8004454 <double_str+0x2bc>)
 8004338:	f001 f9a8 	bl	800568c <pow>
 800433c:	4603      	mov	r3, r0
 800433e:	460c      	mov	r4, r1
 8004340:	461a      	mov	r2, r3
 8004342:	4623      	mov	r3, r4
 8004344:	4640      	mov	r0, r8
 8004346:	4649      	mov	r1, r9
 8004348:	f7fb ff08 	bl	800015c <__adddf3>
 800434c:	4603      	mov	r3, r0
 800434e:	460c      	mov	r4, r1
 8004350:	4618      	mov	r0, r3
 8004352:	4621      	mov	r1, r4
 8004354:	f7fc fb68 	bl	8000a28 <__aeabi_d2iz>
 8004358:	4603      	mov	r3, r0
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	sprintf(p_decimal_char,"%d", p_decimal);
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004360:	493d      	ldr	r1, [pc, #244]	; (8004458 <double_str+0x2c0>)
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fb9a 	bl	8004a9c <siprintf>
	for(uint8_t i=0; i<(decimales-size);i++){
 8004368:	2300      	movs	r3, #0
 800436a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800436e:	e009      	b.n	8004384 <double_str+0x1ec>
		p_decimal_char[i] = '0';
 8004370:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	2130      	movs	r1, #48	; 0x30
 8004378:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<(decimales-size);i++){
 800437a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800437e:	3301      	adds	r3, #1
 8004380:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8004384:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8004388:	79f9      	ldrb	r1, [r7, #7]
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	1acb      	subs	r3, r1, r3
 800438e:	429a      	cmp	r2, r3
 8004390:	dbee      	blt.n	8004370 <double_str+0x1d8>
	}

	uint8_t total_size = sizeof(p_entera_char)+decimales+2;
 8004392:	b2ea      	uxtb	r2, r5
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	4413      	add	r3, r2
 8004398:	b2db      	uxtb	r3, r3
 800439a:	3302      	adds	r3, #2
 800439c:	75fb      	strb	r3, [r7, #23]
	static char float_str[10];

	for(uint8_t i= 0; i<11; i++){
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80043a4:	e04b      	b.n	800443e <double_str+0x2a6>
		if (i==0){
 80043a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <double_str+0x224>
			float_str[i] = negativo;
 80043ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043b2:	492a      	ldr	r1, [pc, #168]	; (800445c <double_str+0x2c4>)
 80043b4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80043b8:	54ca      	strb	r2, [r1, r3]
 80043ba:	e03b      	b.n	8004434 <double_str+0x29c>
		} else if((i>0) && (i<sizeof(p_entera_char)+1)){
 80043bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00f      	beq.n	80043e4 <double_str+0x24c>
 80043c4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80043c8:	462b      	mov	r3, r5
 80043ca:	3301      	adds	r3, #1
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d209      	bcs.n	80043e4 <double_str+0x24c>
			float_str[i] = p_entera_char[i-1];
 80043d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043d4:	1e5a      	subs	r2, r3, #1
 80043d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043da:	6a39      	ldr	r1, [r7, #32]
 80043dc:	5c89      	ldrb	r1, [r1, r2]
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <double_str+0x2c4>)
 80043e0:	54d1      	strb	r1, [r2, r3]
 80043e2:	e027      	b.n	8004434 <double_str+0x29c>
		} else if (i == sizeof(p_entera_char)+1){
 80043e4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80043e8:	462b      	mov	r3, r5
 80043ea:	3301      	adds	r3, #1
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d105      	bne.n	80043fc <double_str+0x264>
			float_str[i] = '.';
 80043f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <double_str+0x2c4>)
 80043f6:	212e      	movs	r1, #46	; 0x2e
 80043f8:	54d1      	strb	r1, [r2, r3]
 80043fa:	e01b      	b.n	8004434 <double_str+0x29c>
		} else if ((i> sizeof(p_entera_char)+1) && (i<total_size)){
 80043fc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004400:	462b      	mov	r3, r5
 8004402:	3301      	adds	r3, #1
 8004404:	429a      	cmp	r2, r3
 8004406:	d910      	bls.n	800442a <double_str+0x292>
 8004408:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	429a      	cmp	r2, r3
 8004410:	d20b      	bcs.n	800442a <double_str+0x292>
			float_str[i] = p_decimal_char[i-(sizeof(p_entera_char)+2)];
 8004412:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004416:	462a      	mov	r2, r5
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	1e9a      	subs	r2, r3, #2
 800441c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	5c89      	ldrb	r1, [r1, r2]
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <double_str+0x2c4>)
 8004426:	54d1      	strb	r1, [r2, r3]
 8004428:	e004      	b.n	8004434 <double_str+0x29c>
		} else {float_str[i] = ' ';}
 800442a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800442e:	4a0b      	ldr	r2, [pc, #44]	; (800445c <double_str+0x2c4>)
 8004430:	2120      	movs	r1, #32
 8004432:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i= 0; i<11; i++){
 8004434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004438:	3301      	adds	r3, #1
 800443a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800443e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004442:	2b0a      	cmp	r3, #10
 8004444:	d9af      	bls.n	80043a6 <double_str+0x20e>
	}
	return float_str;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <double_str+0x2c4>)
 8004448:	46b5      	mov	sp, r6
}
 800444a:	4618      	mov	r0, r3
 800444c:	3754      	adds	r7, #84	; 0x54
 800444e:	46bd      	mov	sp, r7
 8004450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004454:	40240000 	.word	0x40240000
 8004458:	08006e60 	.word	0x08006e60
 800445c:	200004e4 	.word	0x200004e4

08004460 <SSD1306_Putdouble>:

void SSD1306_Putdouble(float data, uint8_t decimales, uint8_t slot) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
 800446c:	4613      	mov	r3, r2
 800446e:	70bb      	strb	r3, [r7, #2]
	char* float_str = double_str(data, decimales);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fb ffd1 	bl	8000418 <__aeabi_f2d>
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	461a      	mov	r2, r3
 800447a:	f7ff fe8d 	bl	8004198 <double_str>
 800447e:	60f8      	str	r0, [r7, #12]

	uint16_t x_slot = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	82fb      	strh	r3, [r7, #22]
	uint16_t y_slot = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	82bb      	strh	r3, [r7, #20]
	uint8_t slot_mini = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	74fb      	strb	r3, [r7, #19]
	switch (slot) {
 800448c:	78bb      	ldrb	r3, [r7, #2]
 800448e:	3b01      	subs	r3, #1
 8004490:	2b04      	cmp	r3, #4
 8004492:	d82a      	bhi.n	80044ea <SSD1306_Putdouble+0x8a>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <SSD1306_Putdouble+0x3c>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044b1 	.word	0x080044b1
 80044a0:	080044bb 	.word	0x080044bb
 80044a4:	080044c5 	.word	0x080044c5
 80044a8:	080044cf 	.word	0x080044cf
 80044ac:	080044dd 	.word	0x080044dd
	case 1:
		x_slot = 2;
 80044b0:	2302      	movs	r3, #2
 80044b2:	82fb      	strh	r3, [r7, #22]
		y_slot = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	82bb      	strh	r3, [r7, #20]
		break;
 80044b8:	e017      	b.n	80044ea <SSD1306_Putdouble+0x8a>
	case 2:
		x_slot = 2;
 80044ba:	2302      	movs	r3, #2
 80044bc:	82fb      	strh	r3, [r7, #22]
		y_slot = 17;
 80044be:	2311      	movs	r3, #17
 80044c0:	82bb      	strh	r3, [r7, #20]
		break;
 80044c2:	e012      	b.n	80044ea <SSD1306_Putdouble+0x8a>
	case 3:
		x_slot = 2;
 80044c4:	2302      	movs	r3, #2
 80044c6:	82fb      	strh	r3, [r7, #22]
		y_slot = 35;
 80044c8:	2323      	movs	r3, #35	; 0x23
 80044ca:	82bb      	strh	r3, [r7, #20]
		break;
 80044cc:	e00d      	b.n	80044ea <SSD1306_Putdouble+0x8a>
	case 4:
		x_slot = 2;
 80044ce:	2302      	movs	r3, #2
 80044d0:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 80044d2:	2335      	movs	r3, #53	; 0x35
 80044d4:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	74fb      	strb	r3, [r7, #19]
		break;
 80044da:	e006      	b.n	80044ea <SSD1306_Putdouble+0x8a>
	case 5:
		x_slot = 60;
 80044dc:	233c      	movs	r3, #60	; 0x3c
 80044de:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 80044e0:	2335      	movs	r3, #53	; 0x35
 80044e2:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	74fb      	strb	r3, [r7, #19]
		break;
 80044e8:	bf00      	nop
	}
	if (slot_mini == 1){
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d116      	bne.n	800451e <SSD1306_Putdouble+0xbe>
		SSD1306_GotoXY (x_slot,y_slot);				// Select x and y from the selected slot
 80044f0:	8aba      	ldrh	r2, [r7, #20]
 80044f2:	8afb      	ldrh	r3, [r7, #22]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fd8a 	bl	8004010 <SSD1306_GotoXY>
		SSD1306_Puts ("       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 80044fc:	2201      	movs	r2, #1
 80044fe:	4914      	ldr	r1, [pc, #80]	; (8004550 <SSD1306_Putdouble+0xf0>)
 8004500:	4814      	ldr	r0, [pc, #80]	; (8004554 <SSD1306_Putdouble+0xf4>)
 8004502:	f000 f82d 	bl	8004560 <SSD1306_Puts>
		SSD1306_GotoXY (x_slot,y_slot);				// Come back to the initial position
 8004506:	8aba      	ldrh	r2, [r7, #20]
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fd7f 	bl	8004010 <SSD1306_GotoXY>
		SSD1306_Puts (float_str, &Font_7x10, 1);	// Write the value
 8004512:	2201      	movs	r2, #1
 8004514:	490e      	ldr	r1, [pc, #56]	; (8004550 <SSD1306_Putdouble+0xf0>)
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f822 	bl	8004560 <SSD1306_Puts>
//		SSD1306_UpdateScreen();						// Update the screen
		return;
 800451c:	e015      	b.n	800454a <SSD1306_Putdouble+0xea>
	}
	SSD1306_GotoXY (x_slot,y_slot);
 800451e:	8aba      	ldrh	r2, [r7, #20]
 8004520:	8afb      	ldrh	r3, [r7, #22]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fd73 	bl	8004010 <SSD1306_GotoXY>
	SSD1306_Puts ("         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 800452a:	2201      	movs	r2, #1
 800452c:	490a      	ldr	r1, [pc, #40]	; (8004558 <SSD1306_Putdouble+0xf8>)
 800452e:	480b      	ldr	r0, [pc, #44]	; (800455c <SSD1306_Putdouble+0xfc>)
 8004530:	f000 f816 	bl	8004560 <SSD1306_Puts>
	SSD1306_GotoXY (x_slot,y_slot);
 8004534:	8aba      	ldrh	r2, [r7, #20]
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fd68 	bl	8004010 <SSD1306_GotoXY>
	SSD1306_Puts (float_str, &Font_11x18, 1);
 8004540:	2201      	movs	r2, #1
 8004542:	4905      	ldr	r1, [pc, #20]	; (8004558 <SSD1306_Putdouble+0xf8>)
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f80b 	bl	8004560 <SSD1306_Puts>
//	SSD1306_UpdateScreen();
}
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000008 	.word	0x20000008
 8004554:	08006e64 	.word	0x08006e64
 8004558:	20000010 	.word	0x20000010
 800455c:	08006e6c 	.word	0x08006e6c

08004560 <SSD1306_Puts>:



char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800456e:	e012      	b.n	8004596 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	79fa      	ldrb	r2, [r7, #7]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fd5f 	bl	800403c <SSD1306_Putc>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d002      	beq.n	8004590 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	e008      	b.n	80045a2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e8      	bne.n	8004570 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	781b      	ldrb	r3, [r3, #0]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <ssd1306_sel_I2C>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_sel_I2C(I2C_HandleTypeDef *hi2c) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	hi2c_current = *hi2c;
 80045b4:	4a05      	ldr	r2, [pc, #20]	; (80045cc <ssd1306_sel_I2C+0x20>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	2354      	movs	r3, #84	; 0x54
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 fa58 	bl	8004a74 <memcpy>
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000794 	.word	0x20000794

080045d0 <ssd1306_I2C_WriteMulti>:
//	//while(p>0)
//	//	p--;
//	//MX_I2C1_Init();
//}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80045d0:	b5b0      	push	{r4, r5, r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	603a      	str	r2, [r7, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
 80045de:	460b      	mov	r3, r1
 80045e0:	71bb      	strb	r3, [r7, #6]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80bb      	strh	r3, [r7, #4]
 80045e6:	466b      	mov	r3, sp
 80045e8:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80045ea:	88bb      	ldrh	r3, [r7, #4]
 80045ec:	1c58      	adds	r0, r3, #1
 80045ee:	1e43      	subs	r3, r0, #1
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	4603      	mov	r3, r0
 80045f4:	4619      	mov	r1, r3
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	f04f 0400 	mov.w	r4, #0
 8004602:	00d4      	lsls	r4, r2, #3
 8004604:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004608:	00cb      	lsls	r3, r1, #3
 800460a:	4603      	mov	r3, r0
 800460c:	4619      	mov	r1, r3
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	f04f 0400 	mov.w	r4, #0
 800461a:	00d4      	lsls	r4, r2, #3
 800461c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004620:	00cb      	lsls	r3, r1, #3
 8004622:	4603      	mov	r3, r0
 8004624:	3307      	adds	r3, #7
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	ebad 0d03 	sub.w	sp, sp, r3
 800462e:	ab02      	add	r3, sp, #8
 8004630:	3300      	adds	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	79ba      	ldrb	r2, [r7, #6]
 8004638:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
 800463e:	e00a      	b.n	8004656 <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	3b01      	subs	r3, #1
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	441a      	add	r2, r3
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	7811      	ldrb	r1, [r2, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	3301      	adds	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	b29b      	uxth	r3, r3
 800465a:	88ba      	ldrh	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d2ef      	bcs.n	8004640 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, count, 10);
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	b299      	uxth	r1, r3
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	88b8      	ldrh	r0, [r7, #4]
 8004668:	230a      	movs	r3, #10
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4603      	mov	r3, r0
 800466e:	4804      	ldr	r0, [pc, #16]	; (8004680 <ssd1306_I2C_WriteMulti+0xb0>)
 8004670:	f7fd fab8 	bl	8001be4 <HAL_I2C_Master_Transmit>
 8004674:	46ad      	mov	sp, r5
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bdb0      	pop	{r4, r5, r7, pc}
 800467e:	bf00      	nop
 8004680:	20000794 	.word	0x20000794

08004684 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af02      	add	r7, sp, #8
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
 800468e:	460b      	mov	r3, r1
 8004690:	71bb      	strb	r3, [r7, #6]
 8004692:	4613      	mov	r3, r2
 8004694:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004696:	79bb      	ldrb	r3, [r7, #6]
 8004698:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800469a:	797b      	ldrb	r3, [r7, #5]
 800469c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, 2, 10);
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	b299      	uxth	r1, r3
 80046a2:	f107 020c 	add.w	r2, r7, #12
 80046a6:	230a      	movs	r3, #10
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2302      	movs	r3, #2
 80046ac:	4803      	ldr	r0, [pc, #12]	; (80046bc <ssd1306_I2C_Write+0x38>)
 80046ae:	f7fd fa99 	bl	8001be4 <HAL_I2C_Master_Transmit>
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000794 	.word	0x20000794

080046c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_MspInit+0x5c>)
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	4a14      	ldr	r2, [pc, #80]	; (800471c <HAL_MspInit+0x5c>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6193      	str	r3, [r2, #24]
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_MspInit+0x5c>)
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <HAL_MspInit+0x5c>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4a0e      	ldr	r2, [pc, #56]	; (800471c <HAL_MspInit+0x5c>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	61d3      	str	r3, [r2, #28]
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_MspInit+0x5c>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046f6:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <HAL_MspInit+0x60>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_MspInit+0x60>)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40021000 	.word	0x40021000
 8004720:	40010000 	.word	0x40010000

08004724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 0310 	add.w	r3, r7, #16
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a14      	ldr	r2, [pc, #80]	; (8004790 <HAL_ADC_MspInit+0x6c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d121      	bne.n	8004788 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004744:	4b13      	ldr	r3, [pc, #76]	; (8004794 <HAL_ADC_MspInit+0x70>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	4a12      	ldr	r2, [pc, #72]	; (8004794 <HAL_ADC_MspInit+0x70>)
 800474a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800474e:	6193      	str	r3, [r2, #24]
 8004750:	4b10      	ldr	r3, [pc, #64]	; (8004794 <HAL_ADC_MspInit+0x70>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_ADC_MspInit+0x70>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <HAL_ADC_MspInit+0x70>)
 8004762:	f043 0304 	orr.w	r3, r3, #4
 8004766:	6193      	str	r3, [r2, #24]
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_ADC_MspInit+0x70>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004774:	2301      	movs	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004778:	2303      	movs	r3, #3
 800477a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	4619      	mov	r1, r3
 8004782:	4805      	ldr	r0, [pc, #20]	; (8004798 <HAL_ADC_MspInit+0x74>)
 8004784:	f7fc ff94 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004788:	bf00      	nop
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40012400 	.word	0x40012400
 8004794:	40021000 	.word	0x40021000
 8004798:	40010800 	.word	0x40010800

0800479c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	f107 0310 	add.w	r3, r7, #16
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_I2C_MspInit+0x70>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d123      	bne.n	8004804 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_I2C_MspInit+0x74>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	4a13      	ldr	r2, [pc, #76]	; (8004810 <HAL_I2C_MspInit+0x74>)
 80047c2:	f043 0308 	orr.w	r3, r3, #8
 80047c6:	6193      	str	r3, [r2, #24]
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_I2C_MspInit+0x74>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047d4:	23c0      	movs	r3, #192	; 0xc0
 80047d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047d8:	2312      	movs	r3, #18
 80047da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047dc:	2303      	movs	r3, #3
 80047de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4619      	mov	r1, r3
 80047e6:	480b      	ldr	r0, [pc, #44]	; (8004814 <HAL_I2C_MspInit+0x78>)
 80047e8:	f7fc ff62 	bl	80016b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_I2C_MspInit+0x74>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_I2C_MspInit+0x74>)
 80047f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f6:	61d3      	str	r3, [r2, #28]
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_I2C_MspInit+0x74>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004804:	bf00      	nop
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40005400 	.word	0x40005400
 8004810:	40021000 	.word	0x40021000
 8004814:	40010c00 	.word	0x40010c00

08004818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d114      	bne.n	8004854 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800482a:	4b19      	ldr	r3, [pc, #100]	; (8004890 <HAL_TIM_Base_MspInit+0x78>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_TIM_Base_MspInit+0x78>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	61d3      	str	r3, [r2, #28]
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <HAL_TIM_Base_MspInit+0x78>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	201c      	movs	r0, #28
 8004848:	f7fc fefb 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800484c:	201c      	movs	r0, #28
 800484e:	f7fc ff14 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004852:	e018      	b.n	8004886 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0e      	ldr	r2, [pc, #56]	; (8004894 <HAL_TIM_Base_MspInit+0x7c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d113      	bne.n	8004886 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <HAL_TIM_Base_MspInit+0x78>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <HAL_TIM_Base_MspInit+0x78>)
 8004864:	f043 0302 	orr.w	r3, r3, #2
 8004868:	61d3      	str	r3, [r2, #28]
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_TIM_Base_MspInit+0x78>)
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	201d      	movs	r0, #29
 800487c:	f7fc fee1 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004880:	201d      	movs	r0, #29
 8004882:	f7fc fefa 	bl	800167a <HAL_NVIC_EnableIRQ>
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	40000400 	.word	0x40000400

08004898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048a8:	e7fe      	b.n	80048a8 <HardFault_Handler+0x4>

080048aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048aa:	b480      	push	{r7}
 80048ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048ae:	e7fe      	b.n	80048ae <MemManage_Handler+0x4>

080048b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048b4:	e7fe      	b.n	80048b4 <BusFault_Handler+0x4>

080048b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048b6:	b480      	push	{r7}
 80048b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048ba:	e7fe      	b.n	80048ba <UsageFault_Handler+0x4>

080048bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048e4:	f7fc f97e 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048e8:	bf00      	nop
 80048ea:	bd80      	pop	{r7, pc}

080048ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <TIM2_IRQHandler+0x10>)
 80048f2:	f7fe fb6f 	bl	8002fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000754 	.word	0x20000754

08004900 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004904:	4802      	ldr	r0, [pc, #8]	; (8004910 <TIM3_IRQHandler+0x10>)
 8004906:	f7fe fb65 	bl	8002fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200006e4 	.word	0x200006e4

08004914 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800491c:	4b11      	ldr	r3, [pc, #68]	; (8004964 <_sbrk+0x50>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <_sbrk+0x16>
		heap_end = &end;
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <_sbrk+0x50>)
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <_sbrk+0x54>)
 8004928:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800492a:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <_sbrk+0x50>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <_sbrk+0x50>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	466a      	mov	r2, sp
 800493a:	4293      	cmp	r3, r2
 800493c:	d907      	bls.n	800494e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800493e:	f000 f86f 	bl	8004a20 <__errno>
 8004942:	4602      	mov	r2, r0
 8004944:	230c      	movs	r3, #12
 8004946:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004948:	f04f 33ff 	mov.w	r3, #4294967295
 800494c:	e006      	b.n	800495c <_sbrk+0x48>
	}

	heap_end += incr;
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <_sbrk+0x50>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	4a03      	ldr	r2, [pc, #12]	; (8004964 <_sbrk+0x50>)
 8004958:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	200004f0 	.word	0x200004f0
 8004968:	200007f0 	.word	0x200007f0

0800496c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004970:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <SystemInit+0x5c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <SystemInit+0x5c>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800497c:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <SystemInit+0x5c>)
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4911      	ldr	r1, [pc, #68]	; (80049c8 <SystemInit+0x5c>)
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <SystemInit+0x60>)
 8004984:	4013      	ands	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <SystemInit+0x5c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <SystemInit+0x5c>)
 800498e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <SystemInit+0x5c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <SystemInit+0x5c>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80049a4:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <SystemInit+0x5c>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <SystemInit+0x5c>)
 80049aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80049ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <SystemInit+0x5c>)
 80049b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80049b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <SystemInit+0x64>)
 80049ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049be:	609a      	str	r2, [r3, #8]
#endif 
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	40021000 	.word	0x40021000
 80049cc:	f8ff0000 	.word	0xf8ff0000
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80049d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80049d6:	e003      	b.n	80049e0 <LoopCopyDataInit>

080049d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80049da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80049dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80049de:	3104      	adds	r1, #4

080049e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80049e0:	480a      	ldr	r0, [pc, #40]	; (8004a0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80049e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80049e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80049e8:	d3f6      	bcc.n	80049d8 <CopyDataInit>
  ldr r2, =_sbss
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80049ec:	e002      	b.n	80049f4 <LoopFillZerobss>

080049ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80049ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80049f0:	f842 3b04 	str.w	r3, [r2], #4

080049f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80049f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80049f8:	d3f9      	bcc.n	80049ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80049fa:	f7ff ffb7 	bl	800496c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049fe:	f000 f815 	bl	8004a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a02:	f7fe fe19 	bl	8003638 <main>
  bx lr
 8004a06:	4770      	bx	lr
  ldr r3, =_sidata
 8004a08:	08008418 	.word	0x08008418
  ldr r0, =_sdata
 8004a0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004a10:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8004a14:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8004a18:	200007f0 	.word	0x200007f0

08004a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a1c:	e7fe      	b.n	8004a1c <ADC1_2_IRQHandler>
	...

08004a20 <__errno>:
 8004a20:	4b01      	ldr	r3, [pc, #4]	; (8004a28 <__errno+0x8>)
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	2000001c 	.word	0x2000001c

08004a2c <__libc_init_array>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	2500      	movs	r5, #0
 8004a30:	4e0c      	ldr	r6, [pc, #48]	; (8004a64 <__libc_init_array+0x38>)
 8004a32:	4c0d      	ldr	r4, [pc, #52]	; (8004a68 <__libc_init_array+0x3c>)
 8004a34:	1ba4      	subs	r4, r4, r6
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	42a5      	cmp	r5, r4
 8004a3a:	d109      	bne.n	8004a50 <__libc_init_array+0x24>
 8004a3c:	f002 f9f0 	bl	8006e20 <_init>
 8004a40:	2500      	movs	r5, #0
 8004a42:	4e0a      	ldr	r6, [pc, #40]	; (8004a6c <__libc_init_array+0x40>)
 8004a44:	4c0a      	ldr	r4, [pc, #40]	; (8004a70 <__libc_init_array+0x44>)
 8004a46:	1ba4      	subs	r4, r4, r6
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	42a5      	cmp	r5, r4
 8004a4c:	d105      	bne.n	8004a5a <__libc_init_array+0x2e>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a54:	4798      	blx	r3
 8004a56:	3501      	adds	r5, #1
 8004a58:	e7ee      	b.n	8004a38 <__libc_init_array+0xc>
 8004a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a5e:	4798      	blx	r3
 8004a60:	3501      	adds	r5, #1
 8004a62:	e7f2      	b.n	8004a4a <__libc_init_array+0x1e>
 8004a64:	08008410 	.word	0x08008410
 8004a68:	08008410 	.word	0x08008410
 8004a6c:	08008410 	.word	0x08008410
 8004a70:	08008414 	.word	0x08008414

08004a74 <memcpy>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	1e43      	subs	r3, r0, #1
 8004a78:	440a      	add	r2, r1
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	d100      	bne.n	8004a80 <memcpy+0xc>
 8004a7e:	bd10      	pop	{r4, pc}
 8004a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a88:	e7f7      	b.n	8004a7a <memcpy+0x6>

08004a8a <memset>:
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4402      	add	r2, r0
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d100      	bne.n	8004a94 <memset+0xa>
 8004a92:	4770      	bx	lr
 8004a94:	f803 1b01 	strb.w	r1, [r3], #1
 8004a98:	e7f9      	b.n	8004a8e <memset+0x4>
	...

08004a9c <siprintf>:
 8004a9c:	b40e      	push	{r1, r2, r3}
 8004a9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004aa2:	b500      	push	{lr}
 8004aa4:	b09c      	sub	sp, #112	; 0x70
 8004aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8004aa8:	9002      	str	r0, [sp, #8]
 8004aaa:	9006      	str	r0, [sp, #24]
 8004aac:	9107      	str	r1, [sp, #28]
 8004aae:	9104      	str	r1, [sp, #16]
 8004ab0:	4808      	ldr	r0, [pc, #32]	; (8004ad4 <siprintf+0x38>)
 8004ab2:	4909      	ldr	r1, [pc, #36]	; (8004ad8 <siprintf+0x3c>)
 8004ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab8:	9105      	str	r1, [sp, #20]
 8004aba:	6800      	ldr	r0, [r0, #0]
 8004abc:	a902      	add	r1, sp, #8
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	f000 f866 	bl	8004b90 <_svfiprintf_r>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	b01c      	add	sp, #112	; 0x70
 8004acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad0:	b003      	add	sp, #12
 8004ad2:	4770      	bx	lr
 8004ad4:	2000001c 	.word	0x2000001c
 8004ad8:	ffff0208 	.word	0xffff0208

08004adc <__ssputs_r>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	688e      	ldr	r6, [r1, #8]
 8004ae2:	4682      	mov	sl, r0
 8004ae4:	429e      	cmp	r6, r3
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	4690      	mov	r8, r2
 8004aea:	4699      	mov	r9, r3
 8004aec:	d837      	bhi.n	8004b5e <__ssputs_r+0x82>
 8004aee:	898a      	ldrh	r2, [r1, #12]
 8004af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004af4:	d031      	beq.n	8004b5a <__ssputs_r+0x7e>
 8004af6:	2302      	movs	r3, #2
 8004af8:	6825      	ldr	r5, [r4, #0]
 8004afa:	6909      	ldr	r1, [r1, #16]
 8004afc:	1a6f      	subs	r7, r5, r1
 8004afe:	6965      	ldr	r5, [r4, #20]
 8004b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b04:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b08:	f109 0301 	add.w	r3, r9, #1
 8004b0c:	443b      	add	r3, r7
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	bf38      	it	cc
 8004b12:	461d      	movcc	r5, r3
 8004b14:	0553      	lsls	r3, r2, #21
 8004b16:	d530      	bpl.n	8004b7a <__ssputs_r+0x9e>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	f000 fb2d 	bl	8005178 <_malloc_r>
 8004b1e:	4606      	mov	r6, r0
 8004b20:	b950      	cbnz	r0, 8004b38 <__ssputs_r+0x5c>
 8004b22:	230c      	movs	r3, #12
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	f8ca 3000 	str.w	r3, [sl]
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b38:	463a      	mov	r2, r7
 8004b3a:	6921      	ldr	r1, [r4, #16]
 8004b3c:	f7ff ff9a 	bl	8004a74 <memcpy>
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	6126      	str	r6, [r4, #16]
 8004b4e:	443e      	add	r6, r7
 8004b50:	6026      	str	r6, [r4, #0]
 8004b52:	464e      	mov	r6, r9
 8004b54:	6165      	str	r5, [r4, #20]
 8004b56:	1bed      	subs	r5, r5, r7
 8004b58:	60a5      	str	r5, [r4, #8]
 8004b5a:	454e      	cmp	r6, r9
 8004b5c:	d900      	bls.n	8004b60 <__ssputs_r+0x84>
 8004b5e:	464e      	mov	r6, r9
 8004b60:	4632      	mov	r2, r6
 8004b62:	4641      	mov	r1, r8
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	f000 faa1 	bl	80050ac <memmove>
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	1b9b      	subs	r3, r3, r6
 8004b70:	60a3      	str	r3, [r4, #8]
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	441e      	add	r6, r3
 8004b76:	6026      	str	r6, [r4, #0]
 8004b78:	e7dc      	b.n	8004b34 <__ssputs_r+0x58>
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	f000 fb56 	bl	800522c <_realloc_r>
 8004b80:	4606      	mov	r6, r0
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d1e2      	bne.n	8004b4c <__ssputs_r+0x70>
 8004b86:	6921      	ldr	r1, [r4, #16]
 8004b88:	4650      	mov	r0, sl
 8004b8a:	f000 faa9 	bl	80050e0 <_free_r>
 8004b8e:	e7c8      	b.n	8004b22 <__ssputs_r+0x46>

08004b90 <_svfiprintf_r>:
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	461d      	mov	r5, r3
 8004b96:	898b      	ldrh	r3, [r1, #12]
 8004b98:	b09d      	sub	sp, #116	; 0x74
 8004b9a:	061f      	lsls	r7, r3, #24
 8004b9c:	4680      	mov	r8, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	d50f      	bpl.n	8004bc4 <_svfiprintf_r+0x34>
 8004ba4:	690b      	ldr	r3, [r1, #16]
 8004ba6:	b96b      	cbnz	r3, 8004bc4 <_svfiprintf_r+0x34>
 8004ba8:	2140      	movs	r1, #64	; 0x40
 8004baa:	f000 fae5 	bl	8005178 <_malloc_r>
 8004bae:	6020      	str	r0, [r4, #0]
 8004bb0:	6120      	str	r0, [r4, #16]
 8004bb2:	b928      	cbnz	r0, 8004bc0 <_svfiprintf_r+0x30>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	f8c8 3000 	str.w	r3, [r8]
 8004bba:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbe:	e0c8      	b.n	8004d52 <_svfiprintf_r+0x1c2>
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	6163      	str	r3, [r4, #20]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc8:	2320      	movs	r3, #32
 8004bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bce:	2330      	movs	r3, #48	; 0x30
 8004bd0:	f04f 0b01 	mov.w	fp, #1
 8004bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bd8:	9503      	str	r5, [sp, #12]
 8004bda:	4637      	mov	r7, r6
 8004bdc:	463d      	mov	r5, r7
 8004bde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004be2:	b10b      	cbz	r3, 8004be8 <_svfiprintf_r+0x58>
 8004be4:	2b25      	cmp	r3, #37	; 0x25
 8004be6:	d13e      	bne.n	8004c66 <_svfiprintf_r+0xd6>
 8004be8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004bec:	d00b      	beq.n	8004c06 <_svfiprintf_r+0x76>
 8004bee:	4653      	mov	r3, sl
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	4640      	mov	r0, r8
 8004bf6:	f7ff ff71 	bl	8004adc <__ssputs_r>
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f000 80a4 	beq.w	8004d48 <_svfiprintf_r+0x1b8>
 8004c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c02:	4453      	add	r3, sl
 8004c04:	9309      	str	r3, [sp, #36]	; 0x24
 8004c06:	783b      	ldrb	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 809d 	beq.w	8004d48 <_svfiprintf_r+0x1b8>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	9307      	str	r3, [sp, #28]
 8004c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c20:	931a      	str	r3, [sp, #104]	; 0x68
 8004c22:	462f      	mov	r7, r5
 8004c24:	2205      	movs	r2, #5
 8004c26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c2a:	4850      	ldr	r0, [pc, #320]	; (8004d6c <_svfiprintf_r+0x1dc>)
 8004c2c:	f000 fa30 	bl	8005090 <memchr>
 8004c30:	9b04      	ldr	r3, [sp, #16]
 8004c32:	b9d0      	cbnz	r0, 8004c6a <_svfiprintf_r+0xda>
 8004c34:	06d9      	lsls	r1, r3, #27
 8004c36:	bf44      	itt	mi
 8004c38:	2220      	movmi	r2, #32
 8004c3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c3e:	071a      	lsls	r2, r3, #28
 8004c40:	bf44      	itt	mi
 8004c42:	222b      	movmi	r2, #43	; 0x2b
 8004c44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c48:	782a      	ldrb	r2, [r5, #0]
 8004c4a:	2a2a      	cmp	r2, #42	; 0x2a
 8004c4c:	d015      	beq.n	8004c7a <_svfiprintf_r+0xea>
 8004c4e:	462f      	mov	r7, r5
 8004c50:	2000      	movs	r0, #0
 8004c52:	250a      	movs	r5, #10
 8004c54:	9a07      	ldr	r2, [sp, #28]
 8004c56:	4639      	mov	r1, r7
 8004c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c5c:	3b30      	subs	r3, #48	; 0x30
 8004c5e:	2b09      	cmp	r3, #9
 8004c60:	d94d      	bls.n	8004cfe <_svfiprintf_r+0x16e>
 8004c62:	b1b8      	cbz	r0, 8004c94 <_svfiprintf_r+0x104>
 8004c64:	e00f      	b.n	8004c86 <_svfiprintf_r+0xf6>
 8004c66:	462f      	mov	r7, r5
 8004c68:	e7b8      	b.n	8004bdc <_svfiprintf_r+0x4c>
 8004c6a:	4a40      	ldr	r2, [pc, #256]	; (8004d6c <_svfiprintf_r+0x1dc>)
 8004c6c:	463d      	mov	r5, r7
 8004c6e:	1a80      	subs	r0, r0, r2
 8004c70:	fa0b f000 	lsl.w	r0, fp, r0
 8004c74:	4318      	orrs	r0, r3
 8004c76:	9004      	str	r0, [sp, #16]
 8004c78:	e7d3      	b.n	8004c22 <_svfiprintf_r+0x92>
 8004c7a:	9a03      	ldr	r2, [sp, #12]
 8004c7c:	1d11      	adds	r1, r2, #4
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	9103      	str	r1, [sp, #12]
 8004c82:	2a00      	cmp	r2, #0
 8004c84:	db01      	blt.n	8004c8a <_svfiprintf_r+0xfa>
 8004c86:	9207      	str	r2, [sp, #28]
 8004c88:	e004      	b.n	8004c94 <_svfiprintf_r+0x104>
 8004c8a:	4252      	negs	r2, r2
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	9207      	str	r2, [sp, #28]
 8004c92:	9304      	str	r3, [sp, #16]
 8004c94:	783b      	ldrb	r3, [r7, #0]
 8004c96:	2b2e      	cmp	r3, #46	; 0x2e
 8004c98:	d10c      	bne.n	8004cb4 <_svfiprintf_r+0x124>
 8004c9a:	787b      	ldrb	r3, [r7, #1]
 8004c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9e:	d133      	bne.n	8004d08 <_svfiprintf_r+0x178>
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	3702      	adds	r7, #2
 8004ca4:	1d1a      	adds	r2, r3, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	9203      	str	r2, [sp, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bfb8      	it	lt
 8004cae:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	4d2e      	ldr	r5, [pc, #184]	; (8004d70 <_svfiprintf_r+0x1e0>)
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	7839      	ldrb	r1, [r7, #0]
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 f9e8 	bl	8005090 <memchr>
 8004cc0:	b138      	cbz	r0, 8004cd2 <_svfiprintf_r+0x142>
 8004cc2:	2340      	movs	r3, #64	; 0x40
 8004cc4:	1b40      	subs	r0, r0, r5
 8004cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8004cca:	9b04      	ldr	r3, [sp, #16]
 8004ccc:	3701      	adds	r7, #1
 8004cce:	4303      	orrs	r3, r0
 8004cd0:	9304      	str	r3, [sp, #16]
 8004cd2:	7839      	ldrb	r1, [r7, #0]
 8004cd4:	2206      	movs	r2, #6
 8004cd6:	4827      	ldr	r0, [pc, #156]	; (8004d74 <_svfiprintf_r+0x1e4>)
 8004cd8:	1c7e      	adds	r6, r7, #1
 8004cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cde:	f000 f9d7 	bl	8005090 <memchr>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d038      	beq.n	8004d58 <_svfiprintf_r+0x1c8>
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <_svfiprintf_r+0x1e8>)
 8004ce8:	bb13      	cbnz	r3, 8004d30 <_svfiprintf_r+0x1a0>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	3307      	adds	r3, #7
 8004cee:	f023 0307 	bic.w	r3, r3, #7
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf8:	444b      	add	r3, r9
 8004cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004cfc:	e76d      	b.n	8004bda <_svfiprintf_r+0x4a>
 8004cfe:	fb05 3202 	mla	r2, r5, r2, r3
 8004d02:	2001      	movs	r0, #1
 8004d04:	460f      	mov	r7, r1
 8004d06:	e7a6      	b.n	8004c56 <_svfiprintf_r+0xc6>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	250a      	movs	r5, #10
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	3701      	adds	r7, #1
 8004d10:	9305      	str	r3, [sp, #20]
 8004d12:	4638      	mov	r0, r7
 8004d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d18:	3a30      	subs	r2, #48	; 0x30
 8004d1a:	2a09      	cmp	r2, #9
 8004d1c:	d903      	bls.n	8004d26 <_svfiprintf_r+0x196>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0c8      	beq.n	8004cb4 <_svfiprintf_r+0x124>
 8004d22:	9105      	str	r1, [sp, #20]
 8004d24:	e7c6      	b.n	8004cb4 <_svfiprintf_r+0x124>
 8004d26:	fb05 2101 	mla	r1, r5, r1, r2
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	e7f0      	b.n	8004d12 <_svfiprintf_r+0x182>
 8004d30:	ab03      	add	r3, sp, #12
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4622      	mov	r2, r4
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <_svfiprintf_r+0x1ec>)
 8004d38:	a904      	add	r1, sp, #16
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f3af 8000 	nop.w
 8004d40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d44:	4681      	mov	r9, r0
 8004d46:	d1d6      	bne.n	8004cf6 <_svfiprintf_r+0x166>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	065b      	lsls	r3, r3, #25
 8004d4c:	f53f af35 	bmi.w	8004bba <_svfiprintf_r+0x2a>
 8004d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d52:	b01d      	add	sp, #116	; 0x74
 8004d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d58:	ab03      	add	r3, sp, #12
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <_svfiprintf_r+0x1ec>)
 8004d60:	a904      	add	r1, sp, #16
 8004d62:	4640      	mov	r0, r8
 8004d64:	f000 f882 	bl	8004e6c <_printf_i>
 8004d68:	e7ea      	b.n	8004d40 <_svfiprintf_r+0x1b0>
 8004d6a:	bf00      	nop
 8004d6c:	08008358 	.word	0x08008358
 8004d70:	0800835e 	.word	0x0800835e
 8004d74:	08008362 	.word	0x08008362
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	08004add 	.word	0x08004add

08004d80 <_printf_common>:
 8004d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d84:	4691      	mov	r9, r2
 8004d86:	461f      	mov	r7, r3
 8004d88:	688a      	ldr	r2, [r1, #8]
 8004d8a:	690b      	ldr	r3, [r1, #16]
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	bfb8      	it	lt
 8004d92:	4613      	movlt	r3, r2
 8004d94:	f8c9 3000 	str.w	r3, [r9]
 8004d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004da2:	b112      	cbz	r2, 8004daa <_printf_common+0x2a>
 8004da4:	3301      	adds	r3, #1
 8004da6:	f8c9 3000 	str.w	r3, [r9]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	0699      	lsls	r1, r3, #26
 8004dae:	bf42      	ittt	mi
 8004db0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004db4:	3302      	addmi	r3, #2
 8004db6:	f8c9 3000 	strmi.w	r3, [r9]
 8004dba:	6825      	ldr	r5, [r4, #0]
 8004dbc:	f015 0506 	ands.w	r5, r5, #6
 8004dc0:	d107      	bne.n	8004dd2 <_printf_common+0x52>
 8004dc2:	f104 0a19 	add.w	sl, r4, #25
 8004dc6:	68e3      	ldr	r3, [r4, #12]
 8004dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	42ab      	cmp	r3, r5
 8004dd0:	dc29      	bgt.n	8004e26 <_printf_common+0xa6>
 8004dd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	3300      	adds	r3, #0
 8004dda:	bf18      	it	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	0692      	lsls	r2, r2, #26
 8004de0:	d42e      	bmi.n	8004e40 <_printf_common+0xc0>
 8004de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004de6:	4639      	mov	r1, r7
 8004de8:	4630      	mov	r0, r6
 8004dea:	47c0      	blx	r8
 8004dec:	3001      	adds	r0, #1
 8004dee:	d021      	beq.n	8004e34 <_printf_common+0xb4>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	68e5      	ldr	r5, [r4, #12]
 8004df4:	f003 0306 	and.w	r3, r3, #6
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	bf18      	it	ne
 8004dfc:	2500      	movne	r5, #0
 8004dfe:	f8d9 2000 	ldr.w	r2, [r9]
 8004e02:	f04f 0900 	mov.w	r9, #0
 8004e06:	bf08      	it	eq
 8004e08:	1aad      	subeq	r5, r5, r2
 8004e0a:	68a3      	ldr	r3, [r4, #8]
 8004e0c:	6922      	ldr	r2, [r4, #16]
 8004e0e:	bf08      	it	eq
 8004e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bfc4      	itt	gt
 8004e18:	1a9b      	subgt	r3, r3, r2
 8004e1a:	18ed      	addgt	r5, r5, r3
 8004e1c:	341a      	adds	r4, #26
 8004e1e:	454d      	cmp	r5, r9
 8004e20:	d11a      	bne.n	8004e58 <_printf_common+0xd8>
 8004e22:	2000      	movs	r0, #0
 8004e24:	e008      	b.n	8004e38 <_printf_common+0xb8>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4652      	mov	r2, sl
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	47c0      	blx	r8
 8004e30:	3001      	adds	r0, #1
 8004e32:	d103      	bne.n	8004e3c <_printf_common+0xbc>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	e7c2      	b.n	8004dc6 <_printf_common+0x46>
 8004e40:	2030      	movs	r0, #48	; 0x30
 8004e42:	18e1      	adds	r1, r4, r3
 8004e44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e4e:	4422      	add	r2, r4
 8004e50:	3302      	adds	r3, #2
 8004e52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e56:	e7c4      	b.n	8004de2 <_printf_common+0x62>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	4630      	mov	r0, r6
 8004e60:	47c0      	blx	r8
 8004e62:	3001      	adds	r0, #1
 8004e64:	d0e6      	beq.n	8004e34 <_printf_common+0xb4>
 8004e66:	f109 0901 	add.w	r9, r9, #1
 8004e6a:	e7d8      	b.n	8004e1e <_printf_common+0x9e>

08004e6c <_printf_i>:
 8004e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e74:	460c      	mov	r4, r1
 8004e76:	7e09      	ldrb	r1, [r1, #24]
 8004e78:	b085      	sub	sp, #20
 8004e7a:	296e      	cmp	r1, #110	; 0x6e
 8004e7c:	4617      	mov	r7, r2
 8004e7e:	4606      	mov	r6, r0
 8004e80:	4698      	mov	r8, r3
 8004e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e84:	f000 80b3 	beq.w	8004fee <_printf_i+0x182>
 8004e88:	d822      	bhi.n	8004ed0 <_printf_i+0x64>
 8004e8a:	2963      	cmp	r1, #99	; 0x63
 8004e8c:	d036      	beq.n	8004efc <_printf_i+0x90>
 8004e8e:	d80a      	bhi.n	8004ea6 <_printf_i+0x3a>
 8004e90:	2900      	cmp	r1, #0
 8004e92:	f000 80b9 	beq.w	8005008 <_printf_i+0x19c>
 8004e96:	2958      	cmp	r1, #88	; 0x58
 8004e98:	f000 8083 	beq.w	8004fa2 <_printf_i+0x136>
 8004e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ea4:	e032      	b.n	8004f0c <_printf_i+0xa0>
 8004ea6:	2964      	cmp	r1, #100	; 0x64
 8004ea8:	d001      	beq.n	8004eae <_printf_i+0x42>
 8004eaa:	2969      	cmp	r1, #105	; 0x69
 8004eac:	d1f6      	bne.n	8004e9c <_printf_i+0x30>
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	6813      	ldr	r3, [r2, #0]
 8004eb2:	0605      	lsls	r5, r0, #24
 8004eb4:	f103 0104 	add.w	r1, r3, #4
 8004eb8:	d52a      	bpl.n	8004f10 <_printf_i+0xa4>
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da03      	bge.n	8004eca <_printf_i+0x5e>
 8004ec2:	222d      	movs	r2, #45	; 0x2d
 8004ec4:	425b      	negs	r3, r3
 8004ec6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004eca:	486f      	ldr	r0, [pc, #444]	; (8005088 <_printf_i+0x21c>)
 8004ecc:	220a      	movs	r2, #10
 8004ece:	e039      	b.n	8004f44 <_printf_i+0xd8>
 8004ed0:	2973      	cmp	r1, #115	; 0x73
 8004ed2:	f000 809d 	beq.w	8005010 <_printf_i+0x1a4>
 8004ed6:	d808      	bhi.n	8004eea <_printf_i+0x7e>
 8004ed8:	296f      	cmp	r1, #111	; 0x6f
 8004eda:	d020      	beq.n	8004f1e <_printf_i+0xb2>
 8004edc:	2970      	cmp	r1, #112	; 0x70
 8004ede:	d1dd      	bne.n	8004e9c <_printf_i+0x30>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	f043 0320 	orr.w	r3, r3, #32
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	e003      	b.n	8004ef2 <_printf_i+0x86>
 8004eea:	2975      	cmp	r1, #117	; 0x75
 8004eec:	d017      	beq.n	8004f1e <_printf_i+0xb2>
 8004eee:	2978      	cmp	r1, #120	; 0x78
 8004ef0:	d1d4      	bne.n	8004e9c <_printf_i+0x30>
 8004ef2:	2378      	movs	r3, #120	; 0x78
 8004ef4:	4865      	ldr	r0, [pc, #404]	; (800508c <_printf_i+0x220>)
 8004ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004efa:	e055      	b.n	8004fa8 <_printf_i+0x13c>
 8004efc:	6813      	ldr	r3, [r2, #0]
 8004efe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f02:	1d19      	adds	r1, r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6011      	str	r1, [r2, #0]
 8004f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e08c      	b.n	800502a <_printf_i+0x1be>
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f16:	6011      	str	r1, [r2, #0]
 8004f18:	bf18      	it	ne
 8004f1a:	b21b      	sxthne	r3, r3
 8004f1c:	e7cf      	b.n	8004ebe <_printf_i+0x52>
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	6825      	ldr	r5, [r4, #0]
 8004f22:	1d18      	adds	r0, r3, #4
 8004f24:	6010      	str	r0, [r2, #0]
 8004f26:	0628      	lsls	r0, r5, #24
 8004f28:	d501      	bpl.n	8004f2e <_printf_i+0xc2>
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	e002      	b.n	8004f34 <_printf_i+0xc8>
 8004f2e:	0668      	lsls	r0, r5, #25
 8004f30:	d5fb      	bpl.n	8004f2a <_printf_i+0xbe>
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	296f      	cmp	r1, #111	; 0x6f
 8004f36:	bf14      	ite	ne
 8004f38:	220a      	movne	r2, #10
 8004f3a:	2208      	moveq	r2, #8
 8004f3c:	4852      	ldr	r0, [pc, #328]	; (8005088 <_printf_i+0x21c>)
 8004f3e:	2100      	movs	r1, #0
 8004f40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f44:	6865      	ldr	r5, [r4, #4]
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	60a5      	str	r5, [r4, #8]
 8004f4a:	f2c0 8095 	blt.w	8005078 <_printf_i+0x20c>
 8004f4e:	6821      	ldr	r1, [r4, #0]
 8004f50:	f021 0104 	bic.w	r1, r1, #4
 8004f54:	6021      	str	r1, [r4, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d13d      	bne.n	8004fd6 <_printf_i+0x16a>
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	f040 808e 	bne.w	800507c <_printf_i+0x210>
 8004f60:	4665      	mov	r5, ip
 8004f62:	2a08      	cmp	r2, #8
 8004f64:	d10b      	bne.n	8004f7e <_printf_i+0x112>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	07db      	lsls	r3, r3, #31
 8004f6a:	d508      	bpl.n	8004f7e <_printf_i+0x112>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bfde      	ittt	le
 8004f74:	2330      	movle	r3, #48	; 0x30
 8004f76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f7e:	ebac 0305 	sub.w	r3, ip, r5
 8004f82:	6123      	str	r3, [r4, #16]
 8004f84:	f8cd 8000 	str.w	r8, [sp]
 8004f88:	463b      	mov	r3, r7
 8004f8a:	aa03      	add	r2, sp, #12
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff fef6 	bl	8004d80 <_printf_common>
 8004f94:	3001      	adds	r0, #1
 8004f96:	d14d      	bne.n	8005034 <_printf_i+0x1c8>
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	b005      	add	sp, #20
 8004f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fa2:	4839      	ldr	r0, [pc, #228]	; (8005088 <_printf_i+0x21c>)
 8004fa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	6821      	ldr	r1, [r4, #0]
 8004fac:	1d1d      	adds	r5, r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6015      	str	r5, [r2, #0]
 8004fb2:	060a      	lsls	r2, r1, #24
 8004fb4:	d50b      	bpl.n	8004fce <_printf_i+0x162>
 8004fb6:	07ca      	lsls	r2, r1, #31
 8004fb8:	bf44      	itt	mi
 8004fba:	f041 0120 	orrmi.w	r1, r1, #32
 8004fbe:	6021      	strmi	r1, [r4, #0]
 8004fc0:	b91b      	cbnz	r3, 8004fca <_printf_i+0x15e>
 8004fc2:	6822      	ldr	r2, [r4, #0]
 8004fc4:	f022 0220 	bic.w	r2, r2, #32
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	2210      	movs	r2, #16
 8004fcc:	e7b7      	b.n	8004f3e <_printf_i+0xd2>
 8004fce:	064d      	lsls	r5, r1, #25
 8004fd0:	bf48      	it	mi
 8004fd2:	b29b      	uxthmi	r3, r3
 8004fd4:	e7ef      	b.n	8004fb6 <_printf_i+0x14a>
 8004fd6:	4665      	mov	r5, ip
 8004fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fdc:	fb02 3311 	mls	r3, r2, r1, r3
 8004fe0:	5cc3      	ldrb	r3, [r0, r3]
 8004fe2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	2900      	cmp	r1, #0
 8004fea:	d1f5      	bne.n	8004fd8 <_printf_i+0x16c>
 8004fec:	e7b9      	b.n	8004f62 <_printf_i+0xf6>
 8004fee:	6813      	ldr	r3, [r2, #0]
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	1d18      	adds	r0, r3, #4
 8004ff4:	6961      	ldr	r1, [r4, #20]
 8004ff6:	6010      	str	r0, [r2, #0]
 8004ff8:	0628      	lsls	r0, r5, #24
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	d501      	bpl.n	8005002 <_printf_i+0x196>
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	e002      	b.n	8005008 <_printf_i+0x19c>
 8005002:	066a      	lsls	r2, r5, #25
 8005004:	d5fb      	bpl.n	8004ffe <_printf_i+0x192>
 8005006:	8019      	strh	r1, [r3, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	4665      	mov	r5, ip
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	e7b9      	b.n	8004f84 <_printf_i+0x118>
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	6011      	str	r1, [r2, #0]
 8005016:	681d      	ldr	r5, [r3, #0]
 8005018:	6862      	ldr	r2, [r4, #4]
 800501a:	2100      	movs	r1, #0
 800501c:	4628      	mov	r0, r5
 800501e:	f000 f837 	bl	8005090 <memchr>
 8005022:	b108      	cbz	r0, 8005028 <_printf_i+0x1bc>
 8005024:	1b40      	subs	r0, r0, r5
 8005026:	6060      	str	r0, [r4, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	2300      	movs	r3, #0
 800502e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005032:	e7a7      	b.n	8004f84 <_printf_i+0x118>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	462a      	mov	r2, r5
 8005038:	4639      	mov	r1, r7
 800503a:	4630      	mov	r0, r6
 800503c:	47c0      	blx	r8
 800503e:	3001      	adds	r0, #1
 8005040:	d0aa      	beq.n	8004f98 <_printf_i+0x12c>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	079b      	lsls	r3, r3, #30
 8005046:	d413      	bmi.n	8005070 <_printf_i+0x204>
 8005048:	68e0      	ldr	r0, [r4, #12]
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	4298      	cmp	r0, r3
 800504e:	bfb8      	it	lt
 8005050:	4618      	movlt	r0, r3
 8005052:	e7a3      	b.n	8004f9c <_printf_i+0x130>
 8005054:	2301      	movs	r3, #1
 8005056:	464a      	mov	r2, r9
 8005058:	4639      	mov	r1, r7
 800505a:	4630      	mov	r0, r6
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d09a      	beq.n	8004f98 <_printf_i+0x12c>
 8005062:	3501      	adds	r5, #1
 8005064:	68e3      	ldr	r3, [r4, #12]
 8005066:	9a03      	ldr	r2, [sp, #12]
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	42ab      	cmp	r3, r5
 800506c:	dcf2      	bgt.n	8005054 <_printf_i+0x1e8>
 800506e:	e7eb      	b.n	8005048 <_printf_i+0x1dc>
 8005070:	2500      	movs	r5, #0
 8005072:	f104 0919 	add.w	r9, r4, #25
 8005076:	e7f5      	b.n	8005064 <_printf_i+0x1f8>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ac      	bne.n	8004fd6 <_printf_i+0x16a>
 800507c:	7803      	ldrb	r3, [r0, #0]
 800507e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005086:	e76c      	b.n	8004f62 <_printf_i+0xf6>
 8005088:	08008369 	.word	0x08008369
 800508c:	0800837a 	.word	0x0800837a

08005090 <memchr>:
 8005090:	b510      	push	{r4, lr}
 8005092:	b2c9      	uxtb	r1, r1
 8005094:	4402      	add	r2, r0
 8005096:	4290      	cmp	r0, r2
 8005098:	4603      	mov	r3, r0
 800509a:	d101      	bne.n	80050a0 <memchr+0x10>
 800509c:	2300      	movs	r3, #0
 800509e:	e003      	b.n	80050a8 <memchr+0x18>
 80050a0:	781c      	ldrb	r4, [r3, #0]
 80050a2:	3001      	adds	r0, #1
 80050a4:	428c      	cmp	r4, r1
 80050a6:	d1f6      	bne.n	8005096 <memchr+0x6>
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd10      	pop	{r4, pc}

080050ac <memmove>:
 80050ac:	4288      	cmp	r0, r1
 80050ae:	b510      	push	{r4, lr}
 80050b0:	eb01 0302 	add.w	r3, r1, r2
 80050b4:	d807      	bhi.n	80050c6 <memmove+0x1a>
 80050b6:	1e42      	subs	r2, r0, #1
 80050b8:	4299      	cmp	r1, r3
 80050ba:	d00a      	beq.n	80050d2 <memmove+0x26>
 80050bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80050c4:	e7f8      	b.n	80050b8 <memmove+0xc>
 80050c6:	4283      	cmp	r3, r0
 80050c8:	d9f5      	bls.n	80050b6 <memmove+0xa>
 80050ca:	1881      	adds	r1, r0, r2
 80050cc:	1ad2      	subs	r2, r2, r3
 80050ce:	42d3      	cmn	r3, r2
 80050d0:	d100      	bne.n	80050d4 <memmove+0x28>
 80050d2:	bd10      	pop	{r4, pc}
 80050d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80050dc:	e7f7      	b.n	80050ce <memmove+0x22>
	...

080050e0 <_free_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4605      	mov	r5, r0
 80050e4:	2900      	cmp	r1, #0
 80050e6:	d043      	beq.n	8005170 <_free_r+0x90>
 80050e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ec:	1f0c      	subs	r4, r1, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfb8      	it	lt
 80050f2:	18e4      	addlt	r4, r4, r3
 80050f4:	f000 f8d0 	bl	8005298 <__malloc_lock>
 80050f8:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <_free_r+0x94>)
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	4610      	mov	r0, r2
 80050fe:	b933      	cbnz	r3, 800510e <_free_r+0x2e>
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	6014      	str	r4, [r2, #0]
 8005104:	4628      	mov	r0, r5
 8005106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800510a:	f000 b8c6 	b.w	800529a <__malloc_unlock>
 800510e:	42a3      	cmp	r3, r4
 8005110:	d90b      	bls.n	800512a <_free_r+0x4a>
 8005112:	6821      	ldr	r1, [r4, #0]
 8005114:	1862      	adds	r2, r4, r1
 8005116:	4293      	cmp	r3, r2
 8005118:	bf01      	itttt	eq
 800511a:	681a      	ldreq	r2, [r3, #0]
 800511c:	685b      	ldreq	r3, [r3, #4]
 800511e:	1852      	addeq	r2, r2, r1
 8005120:	6022      	streq	r2, [r4, #0]
 8005122:	6063      	str	r3, [r4, #4]
 8005124:	6004      	str	r4, [r0, #0]
 8005126:	e7ed      	b.n	8005104 <_free_r+0x24>
 8005128:	4613      	mov	r3, r2
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	b10a      	cbz	r2, 8005132 <_free_r+0x52>
 800512e:	42a2      	cmp	r2, r4
 8005130:	d9fa      	bls.n	8005128 <_free_r+0x48>
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	1858      	adds	r0, r3, r1
 8005136:	42a0      	cmp	r0, r4
 8005138:	d10b      	bne.n	8005152 <_free_r+0x72>
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	4401      	add	r1, r0
 800513e:	1858      	adds	r0, r3, r1
 8005140:	4282      	cmp	r2, r0
 8005142:	6019      	str	r1, [r3, #0]
 8005144:	d1de      	bne.n	8005104 <_free_r+0x24>
 8005146:	6810      	ldr	r0, [r2, #0]
 8005148:	6852      	ldr	r2, [r2, #4]
 800514a:	4401      	add	r1, r0
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	e7d8      	b.n	8005104 <_free_r+0x24>
 8005152:	d902      	bls.n	800515a <_free_r+0x7a>
 8005154:	230c      	movs	r3, #12
 8005156:	602b      	str	r3, [r5, #0]
 8005158:	e7d4      	b.n	8005104 <_free_r+0x24>
 800515a:	6820      	ldr	r0, [r4, #0]
 800515c:	1821      	adds	r1, r4, r0
 800515e:	428a      	cmp	r2, r1
 8005160:	bf01      	itttt	eq
 8005162:	6811      	ldreq	r1, [r2, #0]
 8005164:	6852      	ldreq	r2, [r2, #4]
 8005166:	1809      	addeq	r1, r1, r0
 8005168:	6021      	streq	r1, [r4, #0]
 800516a:	6062      	str	r2, [r4, #4]
 800516c:	605c      	str	r4, [r3, #4]
 800516e:	e7c9      	b.n	8005104 <_free_r+0x24>
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	200004f4 	.word	0x200004f4

08005178 <_malloc_r>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	1ccd      	adds	r5, r1, #3
 800517c:	f025 0503 	bic.w	r5, r5, #3
 8005180:	3508      	adds	r5, #8
 8005182:	2d0c      	cmp	r5, #12
 8005184:	bf38      	it	cc
 8005186:	250c      	movcc	r5, #12
 8005188:	2d00      	cmp	r5, #0
 800518a:	4606      	mov	r6, r0
 800518c:	db01      	blt.n	8005192 <_malloc_r+0x1a>
 800518e:	42a9      	cmp	r1, r5
 8005190:	d903      	bls.n	800519a <_malloc_r+0x22>
 8005192:	230c      	movs	r3, #12
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	2000      	movs	r0, #0
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	f000 f87d 	bl	8005298 <__malloc_lock>
 800519e:	4a21      	ldr	r2, [pc, #132]	; (8005224 <_malloc_r+0xac>)
 80051a0:	6814      	ldr	r4, [r2, #0]
 80051a2:	4621      	mov	r1, r4
 80051a4:	b991      	cbnz	r1, 80051cc <_malloc_r+0x54>
 80051a6:	4c20      	ldr	r4, [pc, #128]	; (8005228 <_malloc_r+0xb0>)
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	b91b      	cbnz	r3, 80051b4 <_malloc_r+0x3c>
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 f863 	bl	8005278 <_sbrk_r>
 80051b2:	6020      	str	r0, [r4, #0]
 80051b4:	4629      	mov	r1, r5
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 f85e 	bl	8005278 <_sbrk_r>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d124      	bne.n	800520a <_malloc_r+0x92>
 80051c0:	230c      	movs	r3, #12
 80051c2:	4630      	mov	r0, r6
 80051c4:	6033      	str	r3, [r6, #0]
 80051c6:	f000 f868 	bl	800529a <__malloc_unlock>
 80051ca:	e7e4      	b.n	8005196 <_malloc_r+0x1e>
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	1b5b      	subs	r3, r3, r5
 80051d0:	d418      	bmi.n	8005204 <_malloc_r+0x8c>
 80051d2:	2b0b      	cmp	r3, #11
 80051d4:	d90f      	bls.n	80051f6 <_malloc_r+0x7e>
 80051d6:	600b      	str	r3, [r1, #0]
 80051d8:	18cc      	adds	r4, r1, r3
 80051da:	50cd      	str	r5, [r1, r3]
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 f85c 	bl	800529a <__malloc_unlock>
 80051e2:	f104 000b 	add.w	r0, r4, #11
 80051e6:	1d23      	adds	r3, r4, #4
 80051e8:	f020 0007 	bic.w	r0, r0, #7
 80051ec:	1ac3      	subs	r3, r0, r3
 80051ee:	d0d3      	beq.n	8005198 <_malloc_r+0x20>
 80051f0:	425a      	negs	r2, r3
 80051f2:	50e2      	str	r2, [r4, r3]
 80051f4:	e7d0      	b.n	8005198 <_malloc_r+0x20>
 80051f6:	684b      	ldr	r3, [r1, #4]
 80051f8:	428c      	cmp	r4, r1
 80051fa:	bf16      	itet	ne
 80051fc:	6063      	strne	r3, [r4, #4]
 80051fe:	6013      	streq	r3, [r2, #0]
 8005200:	460c      	movne	r4, r1
 8005202:	e7eb      	b.n	80051dc <_malloc_r+0x64>
 8005204:	460c      	mov	r4, r1
 8005206:	6849      	ldr	r1, [r1, #4]
 8005208:	e7cc      	b.n	80051a4 <_malloc_r+0x2c>
 800520a:	1cc4      	adds	r4, r0, #3
 800520c:	f024 0403 	bic.w	r4, r4, #3
 8005210:	42a0      	cmp	r0, r4
 8005212:	d005      	beq.n	8005220 <_malloc_r+0xa8>
 8005214:	1a21      	subs	r1, r4, r0
 8005216:	4630      	mov	r0, r6
 8005218:	f000 f82e 	bl	8005278 <_sbrk_r>
 800521c:	3001      	adds	r0, #1
 800521e:	d0cf      	beq.n	80051c0 <_malloc_r+0x48>
 8005220:	6025      	str	r5, [r4, #0]
 8005222:	e7db      	b.n	80051dc <_malloc_r+0x64>
 8005224:	200004f4 	.word	0x200004f4
 8005228:	200004f8 	.word	0x200004f8

0800522c <_realloc_r>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	4607      	mov	r7, r0
 8005230:	4614      	mov	r4, r2
 8005232:	460e      	mov	r6, r1
 8005234:	b921      	cbnz	r1, 8005240 <_realloc_r+0x14>
 8005236:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800523a:	4611      	mov	r1, r2
 800523c:	f7ff bf9c 	b.w	8005178 <_malloc_r>
 8005240:	b922      	cbnz	r2, 800524c <_realloc_r+0x20>
 8005242:	f7ff ff4d 	bl	80050e0 <_free_r>
 8005246:	4625      	mov	r5, r4
 8005248:	4628      	mov	r0, r5
 800524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800524c:	f000 f826 	bl	800529c <_malloc_usable_size_r>
 8005250:	42a0      	cmp	r0, r4
 8005252:	d20f      	bcs.n	8005274 <_realloc_r+0x48>
 8005254:	4621      	mov	r1, r4
 8005256:	4638      	mov	r0, r7
 8005258:	f7ff ff8e 	bl	8005178 <_malloc_r>
 800525c:	4605      	mov	r5, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	d0f2      	beq.n	8005248 <_realloc_r+0x1c>
 8005262:	4631      	mov	r1, r6
 8005264:	4622      	mov	r2, r4
 8005266:	f7ff fc05 	bl	8004a74 <memcpy>
 800526a:	4631      	mov	r1, r6
 800526c:	4638      	mov	r0, r7
 800526e:	f7ff ff37 	bl	80050e0 <_free_r>
 8005272:	e7e9      	b.n	8005248 <_realloc_r+0x1c>
 8005274:	4635      	mov	r5, r6
 8005276:	e7e7      	b.n	8005248 <_realloc_r+0x1c>

08005278 <_sbrk_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	2300      	movs	r3, #0
 800527c:	4c05      	ldr	r4, [pc, #20]	; (8005294 <_sbrk_r+0x1c>)
 800527e:	4605      	mov	r5, r0
 8005280:	4608      	mov	r0, r1
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	f7ff fb46 	bl	8004914 <_sbrk>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_sbrk_r+0x1a>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	b103      	cbz	r3, 8005292 <_sbrk_r+0x1a>
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	200007ec 	.word	0x200007ec

08005298 <__malloc_lock>:
 8005298:	4770      	bx	lr

0800529a <__malloc_unlock>:
 800529a:	4770      	bx	lr

0800529c <_malloc_usable_size_r>:
 800529c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a0:	1f18      	subs	r0, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bfbc      	itt	lt
 80052a6:	580b      	ldrlt	r3, [r1, r0]
 80052a8:	18c0      	addlt	r0, r0, r3
 80052aa:	4770      	bx	lr
 80052ac:	0000      	movs	r0, r0
	...

080052b0 <floor>:
 80052b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80052b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80052bc:	2e13      	cmp	r6, #19
 80052be:	4607      	mov	r7, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	460c      	mov	r4, r1
 80052c4:	4605      	mov	r5, r0
 80052c6:	dc35      	bgt.n	8005334 <floor+0x84>
 80052c8:	2e00      	cmp	r6, #0
 80052ca:	da16      	bge.n	80052fa <floor+0x4a>
 80052cc:	a336      	add	r3, pc, #216	; (adr r3, 80053a8 <floor+0xf8>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fa ff43 	bl	800015c <__adddf3>
 80052d6:	2200      	movs	r2, #0
 80052d8:	2300      	movs	r3, #0
 80052da:	f7fb fb85 	bl	80009e8 <__aeabi_dcmpgt>
 80052de:	b148      	cbz	r0, 80052f4 <floor+0x44>
 80052e0:	2c00      	cmp	r4, #0
 80052e2:	da5b      	bge.n	800539c <floor+0xec>
 80052e4:	2500      	movs	r5, #0
 80052e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80052ea:	4a31      	ldr	r2, [pc, #196]	; (80053b0 <floor+0x100>)
 80052ec:	433b      	orrs	r3, r7
 80052ee:	42ab      	cmp	r3, r5
 80052f0:	bf18      	it	ne
 80052f2:	4614      	movne	r4, r2
 80052f4:	4623      	mov	r3, r4
 80052f6:	462f      	mov	r7, r5
 80052f8:	e026      	b.n	8005348 <floor+0x98>
 80052fa:	4a2e      	ldr	r2, [pc, #184]	; (80053b4 <floor+0x104>)
 80052fc:	fa42 f806 	asr.w	r8, r2, r6
 8005300:	ea01 0208 	and.w	r2, r1, r8
 8005304:	4302      	orrs	r2, r0
 8005306:	d01f      	beq.n	8005348 <floor+0x98>
 8005308:	a327      	add	r3, pc, #156	; (adr r3, 80053a8 <floor+0xf8>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fa ff25 	bl	800015c <__adddf3>
 8005312:	2200      	movs	r2, #0
 8005314:	2300      	movs	r3, #0
 8005316:	f7fb fb67 	bl	80009e8 <__aeabi_dcmpgt>
 800531a:	2800      	cmp	r0, #0
 800531c:	d0ea      	beq.n	80052f4 <floor+0x44>
 800531e:	2c00      	cmp	r4, #0
 8005320:	bfbe      	ittt	lt
 8005322:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005326:	fa43 f606 	asrlt.w	r6, r3, r6
 800532a:	19a4      	addlt	r4, r4, r6
 800532c:	ea24 0408 	bic.w	r4, r4, r8
 8005330:	2500      	movs	r5, #0
 8005332:	e7df      	b.n	80052f4 <floor+0x44>
 8005334:	2e33      	cmp	r6, #51	; 0x33
 8005336:	dd0b      	ble.n	8005350 <floor+0xa0>
 8005338:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800533c:	d104      	bne.n	8005348 <floor+0x98>
 800533e:	4602      	mov	r2, r0
 8005340:	f7fa ff0c 	bl	800015c <__adddf3>
 8005344:	4607      	mov	r7, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4638      	mov	r0, r7
 800534a:	4619      	mov	r1, r3
 800534c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005350:	f04f 32ff 	mov.w	r2, #4294967295
 8005354:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005358:	fa22 f808 	lsr.w	r8, r2, r8
 800535c:	ea18 0f00 	tst.w	r8, r0
 8005360:	d0f2      	beq.n	8005348 <floor+0x98>
 8005362:	a311      	add	r3, pc, #68	; (adr r3, 80053a8 <floor+0xf8>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fa fef8 	bl	800015c <__adddf3>
 800536c:	2200      	movs	r2, #0
 800536e:	2300      	movs	r3, #0
 8005370:	f7fb fb3a 	bl	80009e8 <__aeabi_dcmpgt>
 8005374:	2800      	cmp	r0, #0
 8005376:	d0bd      	beq.n	80052f4 <floor+0x44>
 8005378:	2c00      	cmp	r4, #0
 800537a:	da02      	bge.n	8005382 <floor+0xd2>
 800537c:	2e14      	cmp	r6, #20
 800537e:	d103      	bne.n	8005388 <floor+0xd8>
 8005380:	3401      	adds	r4, #1
 8005382:	ea25 0508 	bic.w	r5, r5, r8
 8005386:	e7b5      	b.n	80052f4 <floor+0x44>
 8005388:	2301      	movs	r3, #1
 800538a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800538e:	fa03 f606 	lsl.w	r6, r3, r6
 8005392:	4435      	add	r5, r6
 8005394:	42bd      	cmp	r5, r7
 8005396:	bf38      	it	cc
 8005398:	18e4      	addcc	r4, r4, r3
 800539a:	e7f2      	b.n	8005382 <floor+0xd2>
 800539c:	2500      	movs	r5, #0
 800539e:	462c      	mov	r4, r5
 80053a0:	e7a8      	b.n	80052f4 <floor+0x44>
 80053a2:	bf00      	nop
 80053a4:	f3af 8000 	nop.w
 80053a8:	8800759c 	.word	0x8800759c
 80053ac:	7e37e43c 	.word	0x7e37e43c
 80053b0:	bff00000 	.word	0xbff00000
 80053b4:	000fffff 	.word	0x000fffff

080053b8 <round>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80053be:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80053c2:	2c13      	cmp	r4, #19
 80053c4:	4606      	mov	r6, r0
 80053c6:	460d      	mov	r5, r1
 80053c8:	460b      	mov	r3, r1
 80053ca:	468c      	mov	ip, r1
 80053cc:	4602      	mov	r2, r0
 80053ce:	dc17      	bgt.n	8005400 <round+0x48>
 80053d0:	2c00      	cmp	r4, #0
 80053d2:	da09      	bge.n	80053e8 <round+0x30>
 80053d4:	3401      	adds	r4, #1
 80053d6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80053da:	d103      	bne.n	80053e4 <round+0x2c>
 80053dc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80053e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053e4:	2200      	movs	r2, #0
 80053e6:	e028      	b.n	800543a <round+0x82>
 80053e8:	4915      	ldr	r1, [pc, #84]	; (8005440 <round+0x88>)
 80053ea:	4121      	asrs	r1, r4
 80053ec:	420d      	tst	r5, r1
 80053ee:	d100      	bne.n	80053f2 <round+0x3a>
 80053f0:	b178      	cbz	r0, 8005412 <round+0x5a>
 80053f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80053f6:	4123      	asrs	r3, r4
 80053f8:	4463      	add	r3, ip
 80053fa:	ea23 0301 	bic.w	r3, r3, r1
 80053fe:	e7f1      	b.n	80053e4 <round+0x2c>
 8005400:	2c33      	cmp	r4, #51	; 0x33
 8005402:	dd09      	ble.n	8005418 <round+0x60>
 8005404:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005408:	d103      	bne.n	8005412 <round+0x5a>
 800540a:	f7fa fea7 	bl	800015c <__adddf3>
 800540e:	4606      	mov	r6, r0
 8005410:	460d      	mov	r5, r1
 8005412:	4630      	mov	r0, r6
 8005414:	4629      	mov	r1, r5
 8005416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
 800541c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005420:	40f8      	lsrs	r0, r7
 8005422:	4206      	tst	r6, r0
 8005424:	d0f5      	beq.n	8005412 <round+0x5a>
 8005426:	2101      	movs	r1, #1
 8005428:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800542c:	fa01 f404 	lsl.w	r4, r1, r4
 8005430:	1932      	adds	r2, r6, r4
 8005432:	bf28      	it	cs
 8005434:	185b      	addcs	r3, r3, r1
 8005436:	ea22 0200 	bic.w	r2, r2, r0
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	e7e6      	b.n	800540e <round+0x56>
 8005440:	000fffff 	.word	0x000fffff

08005444 <trunc>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800544a:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800544e:	2a13      	cmp	r2, #19
 8005450:	4603      	mov	r3, r0
 8005452:	460c      	mov	r4, r1
 8005454:	dc10      	bgt.n	8005478 <trunc+0x34>
 8005456:	2a00      	cmp	r2, #0
 8005458:	bfb3      	iteet	lt
 800545a:	2000      	movlt	r0, #0
 800545c:	2000      	movge	r0, #0
 800545e:	4b10      	ldrge	r3, [pc, #64]	; (80054a0 <trunc+0x5c>)
 8005460:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8005464:	bfa4      	itt	ge
 8005466:	fa43 f202 	asrge.w	r2, r3, r2
 800546a:	ea24 0102 	bicge.w	r1, r4, r2
 800546e:	4603      	mov	r3, r0
 8005470:	460c      	mov	r4, r1
 8005472:	4618      	mov	r0, r3
 8005474:	4621      	mov	r1, r4
 8005476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005478:	2a33      	cmp	r2, #51	; 0x33
 800547a:	dd07      	ble.n	800548c <trunc+0x48>
 800547c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005480:	d1f7      	bne.n	8005472 <trunc+0x2e>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	f7fa fe69 	bl	800015c <__adddf3>
 800548a:	e7f0      	b.n	800546e <trunc+0x2a>
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8005494:	fa22 f505 	lsr.w	r5, r2, r5
 8005498:	ea20 0005 	bic.w	r0, r0, r5
 800549c:	e7e7      	b.n	800546e <trunc+0x2a>
 800549e:	bf00      	nop
 80054a0:	000fffff 	.word	0x000fffff
 80054a4:	00000000 	.word	0x00000000

080054a8 <exp>:
 80054a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054ac:	b08b      	sub	sp, #44	; 0x2c
 80054ae:	4604      	mov	r4, r0
 80054b0:	460d      	mov	r5, r1
 80054b2:	f000 fa49 	bl	8005948 <__ieee754_exp>
 80054b6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8005594 <exp+0xec>
 80054ba:	4606      	mov	r6, r0
 80054bc:	f998 3000 	ldrsb.w	r3, [r8]
 80054c0:	460f      	mov	r7, r1
 80054c2:	3301      	adds	r3, #1
 80054c4:	d02c      	beq.n	8005520 <exp+0x78>
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	f001 f9e3 	bl	8006894 <finite>
 80054ce:	b338      	cbz	r0, 8005520 <exp+0x78>
 80054d0:	a329      	add	r3, pc, #164	; (adr r3, 8005578 <exp+0xd0>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	f7fb fa85 	bl	80009e8 <__aeabi_dcmpgt>
 80054de:	4681      	mov	r9, r0
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d02d      	beq.n	8005540 <exp+0x98>
 80054e4:	2303      	movs	r3, #3
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	4b27      	ldr	r3, [pc, #156]	; (8005588 <exp+0xe0>)
 80054ea:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9308      	str	r3, [sp, #32]
 80054f4:	f998 3000 	ldrsb.w	r3, [r8]
 80054f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80054fc:	b9ab      	cbnz	r3, 800552a <exp+0x82>
 80054fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005502:	4b22      	ldr	r3, [pc, #136]	; (800558c <exp+0xe4>)
 8005504:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005508:	4668      	mov	r0, sp
 800550a:	f001 f9c9 	bl	80068a0 <matherr>
 800550e:	b190      	cbz	r0, 8005536 <exp+0x8e>
 8005510:	9b08      	ldr	r3, [sp, #32]
 8005512:	b11b      	cbz	r3, 800551c <exp+0x74>
 8005514:	f7ff fa84 	bl	8004a20 <__errno>
 8005518:	9b08      	ldr	r3, [sp, #32]
 800551a:	6003      	str	r3, [r0, #0]
 800551c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	b00b      	add	sp, #44	; 0x2c
 8005526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800552a:	2000      	movs	r0, #0
 800552c:	4918      	ldr	r1, [pc, #96]	; (8005590 <exp+0xe8>)
 800552e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d1e8      	bne.n	8005508 <exp+0x60>
 8005536:	f7ff fa73 	bl	8004a20 <__errno>
 800553a:	2322      	movs	r3, #34	; 0x22
 800553c:	6003      	str	r3, [r0, #0]
 800553e:	e7e7      	b.n	8005510 <exp+0x68>
 8005540:	a30f      	add	r3, pc, #60	; (adr r3, 8005580 <exp+0xd8>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	4620      	mov	r0, r4
 8005548:	4629      	mov	r1, r5
 800554a:	f7fb fa2f 	bl	80009ac <__aeabi_dcmplt>
 800554e:	2800      	cmp	r0, #0
 8005550:	d0e6      	beq.n	8005520 <exp+0x78>
 8005552:	2304      	movs	r3, #4
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <exp+0xe0>)
 8005558:	2200      	movs	r2, #0
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	2300      	movs	r3, #0
 800555e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005562:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005566:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800556a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800556e:	f998 3000 	ldrsb.w	r3, [r8]
 8005572:	e7de      	b.n	8005532 <exp+0x8a>
 8005574:	f3af 8000 	nop.w
 8005578:	fefa39ef 	.word	0xfefa39ef
 800557c:	40862e42 	.word	0x40862e42
 8005580:	d52d3051 	.word	0xd52d3051
 8005584:	c0874910 	.word	0xc0874910
 8005588:	0800838b 	.word	0x0800838b
 800558c:	47efffff 	.word	0x47efffff
 8005590:	7ff00000 	.word	0x7ff00000
 8005594:	20000080 	.word	0x20000080

08005598 <log10>:
 8005598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800559c:	b08b      	sub	sp, #44	; 0x2c
 800559e:	4604      	mov	r4, r0
 80055a0:	460d      	mov	r5, r1
 80055a2:	f000 fb39 	bl	8005c18 <__ieee754_log10>
 80055a6:	4b34      	ldr	r3, [pc, #208]	; (8005678 <log10+0xe0>)
 80055a8:	4680      	mov	r8, r0
 80055aa:	f993 6000 	ldrsb.w	r6, [r3]
 80055ae:	4689      	mov	r9, r1
 80055b0:	1c73      	adds	r3, r6, #1
 80055b2:	d05c      	beq.n	800566e <log10+0xd6>
 80055b4:	4622      	mov	r2, r4
 80055b6:	462b      	mov	r3, r5
 80055b8:	4620      	mov	r0, r4
 80055ba:	4629      	mov	r1, r5
 80055bc:	f7fb fa1e 	bl	80009fc <__aeabi_dcmpun>
 80055c0:	4607      	mov	r7, r0
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d153      	bne.n	800566e <log10+0xd6>
 80055c6:	2200      	movs	r2, #0
 80055c8:	2300      	movs	r3, #0
 80055ca:	4620      	mov	r0, r4
 80055cc:	4629      	mov	r1, r5
 80055ce:	f7fb f9f7 	bl	80009c0 <__aeabi_dcmple>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d04b      	beq.n	800566e <log10+0xd6>
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <log10+0xe4>)
 80055d8:	9708      	str	r7, [sp, #32]
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80055e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80055e4:	b9a6      	cbnz	r6, 8005610 <log10+0x78>
 80055e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80055ea:	4b25      	ldr	r3, [pc, #148]	; (8005680 <log10+0xe8>)
 80055ec:	4620      	mov	r0, r4
 80055ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055f2:	4629      	mov	r1, r5
 80055f4:	2200      	movs	r2, #0
 80055f6:	2300      	movs	r3, #0
 80055f8:	f7fb f9ce 	bl	8000998 <__aeabi_dcmpeq>
 80055fc:	bb40      	cbnz	r0, 8005650 <log10+0xb8>
 80055fe:	2301      	movs	r3, #1
 8005600:	2e02      	cmp	r6, #2
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	d119      	bne.n	800563a <log10+0xa2>
 8005606:	f7ff fa0b 	bl	8004a20 <__errno>
 800560a:	2321      	movs	r3, #33	; 0x21
 800560c:	6003      	str	r3, [r0, #0]
 800560e:	e019      	b.n	8005644 <log10+0xac>
 8005610:	2200      	movs	r2, #0
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <log10+0xec>)
 8005614:	4620      	mov	r0, r4
 8005616:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800561a:	4629      	mov	r1, r5
 800561c:	2200      	movs	r2, #0
 800561e:	2300      	movs	r3, #0
 8005620:	f7fb f9ba 	bl	8000998 <__aeabi_dcmpeq>
 8005624:	2800      	cmp	r0, #0
 8005626:	d0ea      	beq.n	80055fe <log10+0x66>
 8005628:	2302      	movs	r3, #2
 800562a:	429e      	cmp	r6, r3
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	d111      	bne.n	8005654 <log10+0xbc>
 8005630:	f7ff f9f6 	bl	8004a20 <__errno>
 8005634:	2322      	movs	r3, #34	; 0x22
 8005636:	6003      	str	r3, [r0, #0]
 8005638:	e011      	b.n	800565e <log10+0xc6>
 800563a:	4668      	mov	r0, sp
 800563c:	f001 f930 	bl	80068a0 <matherr>
 8005640:	2800      	cmp	r0, #0
 8005642:	d0e0      	beq.n	8005606 <log10+0x6e>
 8005644:	4810      	ldr	r0, [pc, #64]	; (8005688 <log10+0xf0>)
 8005646:	f001 f92d 	bl	80068a4 <nan>
 800564a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800564e:	e006      	b.n	800565e <log10+0xc6>
 8005650:	2302      	movs	r3, #2
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4668      	mov	r0, sp
 8005656:	f001 f923 	bl	80068a0 <matherr>
 800565a:	2800      	cmp	r0, #0
 800565c:	d0e8      	beq.n	8005630 <log10+0x98>
 800565e:	9b08      	ldr	r3, [sp, #32]
 8005660:	b11b      	cbz	r3, 800566a <log10+0xd2>
 8005662:	f7ff f9dd 	bl	8004a20 <__errno>
 8005666:	9b08      	ldr	r3, [sp, #32]
 8005668:	6003      	str	r3, [r0, #0]
 800566a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800566e:	4640      	mov	r0, r8
 8005670:	4649      	mov	r1, r9
 8005672:	b00b      	add	sp, #44	; 0x2c
 8005674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005678:	20000080 	.word	0x20000080
 800567c:	0800838f 	.word	0x0800838f
 8005680:	c7efffff 	.word	0xc7efffff
 8005684:	fff00000 	.word	0xfff00000
 8005688:	0800835d 	.word	0x0800835d

0800568c <pow>:
 800568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	b08f      	sub	sp, #60	; 0x3c
 8005692:	461d      	mov	r5, r3
 8005694:	4680      	mov	r8, r0
 8005696:	4689      	mov	r9, r1
 8005698:	4614      	mov	r4, r2
 800569a:	f000 fb41 	bl	8005d20 <__ieee754_pow>
 800569e:	4fa1      	ldr	r7, [pc, #644]	; (8005924 <pow+0x298>)
 80056a0:	e9cd 0100 	strd	r0, r1, [sp]
 80056a4:	f997 3000 	ldrsb.w	r3, [r7]
 80056a8:	463e      	mov	r6, r7
 80056aa:	9302      	str	r3, [sp, #8]
 80056ac:	3301      	adds	r3, #1
 80056ae:	d05f      	beq.n	8005770 <pow+0xe4>
 80056b0:	4622      	mov	r2, r4
 80056b2:	462b      	mov	r3, r5
 80056b4:	4620      	mov	r0, r4
 80056b6:	4629      	mov	r1, r5
 80056b8:	f7fb f9a0 	bl	80009fc <__aeabi_dcmpun>
 80056bc:	4682      	mov	sl, r0
 80056be:	2800      	cmp	r0, #0
 80056c0:	d156      	bne.n	8005770 <pow+0xe4>
 80056c2:	4642      	mov	r2, r8
 80056c4:	464b      	mov	r3, r9
 80056c6:	4640      	mov	r0, r8
 80056c8:	4649      	mov	r1, r9
 80056ca:	f7fb f997 	bl	80009fc <__aeabi_dcmpun>
 80056ce:	9003      	str	r0, [sp, #12]
 80056d0:	b1e8      	cbz	r0, 800570e <pow+0x82>
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb f95d 	bl	8000998 <__aeabi_dcmpeq>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d046      	beq.n	8005770 <pow+0xe4>
 80056e2:	2301      	movs	r3, #1
 80056e4:	2200      	movs	r2, #0
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	4b8f      	ldr	r3, [pc, #572]	; (8005928 <pow+0x29c>)
 80056ea:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80056ee:	9305      	str	r3, [sp, #20]
 80056f0:	4b8e      	ldr	r3, [pc, #568]	; (800592c <pow+0x2a0>)
 80056f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80056f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056fa:	9b02      	ldr	r3, [sp, #8]
 80056fc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d031      	beq.n	8005768 <pow+0xdc>
 8005704:	a804      	add	r0, sp, #16
 8005706:	f001 f8cb 	bl	80068a0 <matherr>
 800570a:	bb38      	cbnz	r0, 800575c <pow+0xd0>
 800570c:	e058      	b.n	80057c0 <pow+0x134>
 800570e:	f04f 0a00 	mov.w	sl, #0
 8005712:	f04f 0b00 	mov.w	fp, #0
 8005716:	4652      	mov	r2, sl
 8005718:	465b      	mov	r3, fp
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fb f93b 	bl	8000998 <__aeabi_dcmpeq>
 8005722:	2800      	cmp	r0, #0
 8005724:	d051      	beq.n	80057ca <pow+0x13e>
 8005726:	4652      	mov	r2, sl
 8005728:	465b      	mov	r3, fp
 800572a:	4620      	mov	r0, r4
 800572c:	4629      	mov	r1, r5
 800572e:	f7fb f933 	bl	8000998 <__aeabi_dcmpeq>
 8005732:	4606      	mov	r6, r0
 8005734:	b308      	cbz	r0, 800577a <pow+0xee>
 8005736:	2301      	movs	r3, #1
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	4b7b      	ldr	r3, [pc, #492]	; (8005928 <pow+0x29c>)
 800573c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005740:	9305      	str	r3, [sp, #20]
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005748:	930c      	str	r3, [sp, #48]	; 0x30
 800574a:	9b02      	ldr	r3, [sp, #8]
 800574c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0d7      	beq.n	8005704 <pow+0x78>
 8005754:	2200      	movs	r2, #0
 8005756:	4b75      	ldr	r3, [pc, #468]	; (800592c <pow+0x2a0>)
 8005758:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800575c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800575e:	b11b      	cbz	r3, 8005768 <pow+0xdc>
 8005760:	f7ff f95e 	bl	8004a20 <__errno>
 8005764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005766:	6003      	str	r3, [r0, #0]
 8005768:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800576c:	e9cd 3400 	strd	r3, r4, [sp]
 8005770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005774:	b00f      	add	sp, #60	; 0x3c
 8005776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577a:	4620      	mov	r0, r4
 800577c:	4629      	mov	r1, r5
 800577e:	f001 f889 	bl	8006894 <finite>
 8005782:	2800      	cmp	r0, #0
 8005784:	d0f4      	beq.n	8005770 <pow+0xe4>
 8005786:	4652      	mov	r2, sl
 8005788:	465b      	mov	r3, fp
 800578a:	4620      	mov	r0, r4
 800578c:	4629      	mov	r1, r5
 800578e:	f7fb f90d 	bl	80009ac <__aeabi_dcmplt>
 8005792:	2800      	cmp	r0, #0
 8005794:	d0ec      	beq.n	8005770 <pow+0xe4>
 8005796:	2301      	movs	r3, #1
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <pow+0x29c>)
 800579c:	960c      	str	r6, [sp, #48]	; 0x30
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	f997 3000 	ldrsb.w	r3, [r7]
 80057a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80057a8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80057ac:	b913      	cbnz	r3, 80057b4 <pow+0x128>
 80057ae:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80057b2:	e7a7      	b.n	8005704 <pow+0x78>
 80057b4:	2000      	movs	r0, #0
 80057b6:	495e      	ldr	r1, [pc, #376]	; (8005930 <pow+0x2a4>)
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057be:	d1a1      	bne.n	8005704 <pow+0x78>
 80057c0:	f7ff f92e 	bl	8004a20 <__errno>
 80057c4:	2321      	movs	r3, #33	; 0x21
 80057c6:	6003      	str	r3, [r0, #0]
 80057c8:	e7c8      	b.n	800575c <pow+0xd0>
 80057ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057ce:	f001 f861 	bl	8006894 <finite>
 80057d2:	9002      	str	r0, [sp, #8]
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d177      	bne.n	80058c8 <pow+0x23c>
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f001 f85a 	bl	8006894 <finite>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d071      	beq.n	80058c8 <pow+0x23c>
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	f001 f854 	bl	8006894 <finite>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d06b      	beq.n	80058c8 <pow+0x23c>
 80057f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f7fb f900 	bl	80009fc <__aeabi_dcmpun>
 80057fc:	f997 7000 	ldrsb.w	r7, [r7]
 8005800:	4b49      	ldr	r3, [pc, #292]	; (8005928 <pow+0x29c>)
 8005802:	b1a0      	cbz	r0, 800582e <pow+0x1a2>
 8005804:	2201      	movs	r2, #1
 8005806:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800580a:	9b02      	ldr	r3, [sp, #8]
 800580c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005810:	930c      	str	r3, [sp, #48]	; 0x30
 8005812:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005816:	2f00      	cmp	r7, #0
 8005818:	d0c9      	beq.n	80057ae <pow+0x122>
 800581a:	4652      	mov	r2, sl
 800581c:	465b      	mov	r3, fp
 800581e:	4650      	mov	r0, sl
 8005820:	4659      	mov	r1, fp
 8005822:	f7fa ff7b 	bl	800071c <__aeabi_ddiv>
 8005826:	2f02      	cmp	r7, #2
 8005828:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800582c:	e7c7      	b.n	80057be <pow+0x132>
 800582e:	2203      	movs	r2, #3
 8005830:	900c      	str	r0, [sp, #48]	; 0x30
 8005832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	2200      	movs	r2, #0
 800583c:	4b3d      	ldr	r3, [pc, #244]	; (8005934 <pow+0x2a8>)
 800583e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005842:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005846:	f7fa fe3f 	bl	80004c8 <__aeabi_dmul>
 800584a:	4604      	mov	r4, r0
 800584c:	460d      	mov	r5, r1
 800584e:	bb17      	cbnz	r7, 8005896 <pow+0x20a>
 8005850:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005854:	4b38      	ldr	r3, [pc, #224]	; (8005938 <pow+0x2ac>)
 8005856:	4640      	mov	r0, r8
 8005858:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800585c:	4649      	mov	r1, r9
 800585e:	4652      	mov	r2, sl
 8005860:	465b      	mov	r3, fp
 8005862:	f7fb f8a3 	bl	80009ac <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	d054      	beq.n	8005914 <pow+0x288>
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f001 f81f 	bl	80068b0 <rint>
 8005872:	4622      	mov	r2, r4
 8005874:	462b      	mov	r3, r5
 8005876:	f7fb f88f 	bl	8000998 <__aeabi_dcmpeq>
 800587a:	b920      	cbnz	r0, 8005886 <pow+0x1fa>
 800587c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005880:	4b2e      	ldr	r3, [pc, #184]	; (800593c <pow+0x2b0>)
 8005882:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005886:	f996 3000 	ldrsb.w	r3, [r6]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d142      	bne.n	8005914 <pow+0x288>
 800588e:	f7ff f8c7 	bl	8004a20 <__errno>
 8005892:	2322      	movs	r3, #34	; 0x22
 8005894:	e797      	b.n	80057c6 <pow+0x13a>
 8005896:	2200      	movs	r2, #0
 8005898:	4b29      	ldr	r3, [pc, #164]	; (8005940 <pow+0x2b4>)
 800589a:	4640      	mov	r0, r8
 800589c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80058a0:	4649      	mov	r1, r9
 80058a2:	4652      	mov	r2, sl
 80058a4:	465b      	mov	r3, fp
 80058a6:	f7fb f881 	bl	80009ac <__aeabi_dcmplt>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d0eb      	beq.n	8005886 <pow+0x1fa>
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f000 fffd 	bl	80068b0 <rint>
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	f7fb f86d 	bl	8000998 <__aeabi_dcmpeq>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d1e1      	bne.n	8005886 <pow+0x1fa>
 80058c2:	2200      	movs	r2, #0
 80058c4:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <pow+0x2a4>)
 80058c6:	e7dc      	b.n	8005882 <pow+0x1f6>
 80058c8:	2200      	movs	r2, #0
 80058ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ce:	2300      	movs	r3, #0
 80058d0:	f7fb f862 	bl	8000998 <__aeabi_dcmpeq>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f43f af4b 	beq.w	8005770 <pow+0xe4>
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f000 ffd9 	bl	8006894 <finite>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f43f af44 	beq.w	8005770 <pow+0xe4>
 80058e8:	4620      	mov	r0, r4
 80058ea:	4629      	mov	r1, r5
 80058ec:	f000 ffd2 	bl	8006894 <finite>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f43f af3d 	beq.w	8005770 <pow+0xe4>
 80058f6:	2304      	movs	r3, #4
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <pow+0x29c>)
 80058fc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005900:	9305      	str	r3, [sp, #20]
 8005902:	2300      	movs	r3, #0
 8005904:	2400      	movs	r4, #0
 8005906:	930c      	str	r3, [sp, #48]	; 0x30
 8005908:	2300      	movs	r3, #0
 800590a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800590e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005912:	e7b8      	b.n	8005886 <pow+0x1fa>
 8005914:	a804      	add	r0, sp, #16
 8005916:	f000 ffc3 	bl	80068a0 <matherr>
 800591a:	2800      	cmp	r0, #0
 800591c:	f47f af1e 	bne.w	800575c <pow+0xd0>
 8005920:	e7b5      	b.n	800588e <pow+0x202>
 8005922:	bf00      	nop
 8005924:	20000080 	.word	0x20000080
 8005928:	08008395 	.word	0x08008395
 800592c:	3ff00000 	.word	0x3ff00000
 8005930:	fff00000 	.word	0xfff00000
 8005934:	3fe00000 	.word	0x3fe00000
 8005938:	47efffff 	.word	0x47efffff
 800593c:	c7efffff 	.word	0xc7efffff
 8005940:	7ff00000 	.word	0x7ff00000
 8005944:	00000000 	.word	0x00000000

08005948 <__ieee754_exp>:
 8005948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	4aa8      	ldr	r2, [pc, #672]	; (8005bf0 <__ieee754_exp+0x2a8>)
 800594e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005952:	4296      	cmp	r6, r2
 8005954:	4605      	mov	r5, r0
 8005956:	460c      	mov	r4, r1
 8005958:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800595c:	d92c      	bls.n	80059b8 <__ieee754_exp+0x70>
 800595e:	4aa5      	ldr	r2, [pc, #660]	; (8005bf4 <__ieee754_exp+0x2ac>)
 8005960:	4296      	cmp	r6, r2
 8005962:	d910      	bls.n	8005986 <__ieee754_exp+0x3e>
 8005964:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8005968:	4303      	orrs	r3, r0
 800596a:	4602      	mov	r2, r0
 800596c:	d005      	beq.n	800597a <__ieee754_exp+0x32>
 800596e:	460b      	mov	r3, r1
 8005970:	f7fa fbf4 	bl	800015c <__adddf3>
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	e000      	b.n	800597c <__ieee754_exp+0x34>
 800597a:	b9d7      	cbnz	r7, 80059b2 <__ieee754_exp+0x6a>
 800597c:	4628      	mov	r0, r5
 800597e:	4621      	mov	r1, r4
 8005980:	b004      	add	sp, #16
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	a384      	add	r3, pc, #528	; (adr r3, 8005b98 <__ieee754_exp+0x250>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fb f82c 	bl	80009e8 <__aeabi_dcmpgt>
 8005990:	b138      	cbz	r0, 80059a2 <__ieee754_exp+0x5a>
 8005992:	a383      	add	r3, pc, #524	; (adr r3, 8005ba0 <__ieee754_exp+0x258>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	f7fa fd94 	bl	80004c8 <__aeabi_dmul>
 80059a0:	e7e8      	b.n	8005974 <__ieee754_exp+0x2c>
 80059a2:	a381      	add	r3, pc, #516	; (adr r3, 8005ba8 <__ieee754_exp+0x260>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	4628      	mov	r0, r5
 80059aa:	4621      	mov	r1, r4
 80059ac:	f7fa fffe 	bl	80009ac <__aeabi_dcmplt>
 80059b0:	b130      	cbz	r0, 80059c0 <__ieee754_exp+0x78>
 80059b2:	2500      	movs	r5, #0
 80059b4:	462c      	mov	r4, r5
 80059b6:	e7e1      	b.n	800597c <__ieee754_exp+0x34>
 80059b8:	4b8f      	ldr	r3, [pc, #572]	; (8005bf8 <__ieee754_exp+0x2b0>)
 80059ba:	429e      	cmp	r6, r3
 80059bc:	f240 80a6 	bls.w	8005b0c <__ieee754_exp+0x1c4>
 80059c0:	4b8e      	ldr	r3, [pc, #568]	; (8005bfc <__ieee754_exp+0x2b4>)
 80059c2:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80059c6:	429e      	cmp	r6, r3
 80059c8:	d875      	bhi.n	8005ab6 <__ieee754_exp+0x16e>
 80059ca:	4b8d      	ldr	r3, [pc, #564]	; (8005c00 <__ieee754_exp+0x2b8>)
 80059cc:	4628      	mov	r0, r5
 80059ce:	4443      	add	r3, r8
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	4621      	mov	r1, r4
 80059d6:	f7fa fbbf 	bl	8000158 <__aeabi_dsub>
 80059da:	4e8a      	ldr	r6, [pc, #552]	; (8005c04 <__ieee754_exp+0x2bc>)
 80059dc:	e9cd 0100 	strd	r0, r1, [sp]
 80059e0:	f1c7 0a01 	rsb	sl, r7, #1
 80059e4:	4446      	add	r6, r8
 80059e6:	ebaa 0a07 	sub.w	sl, sl, r7
 80059ea:	e9d6 8900 	ldrd	r8, r9, [r6]
 80059ee:	4642      	mov	r2, r8
 80059f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059f4:	464b      	mov	r3, r9
 80059f6:	f7fa fbaf 	bl	8000158 <__aeabi_dsub>
 80059fa:	4605      	mov	r5, r0
 80059fc:	460c      	mov	r4, r1
 80059fe:	462a      	mov	r2, r5
 8005a00:	4623      	mov	r3, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	4621      	mov	r1, r4
 8005a06:	f7fa fd5f 	bl	80004c8 <__aeabi_dmul>
 8005a0a:	a369      	add	r3, pc, #420	; (adr r3, 8005bb0 <__ieee754_exp+0x268>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	4606      	mov	r6, r0
 8005a12:	460f      	mov	r7, r1
 8005a14:	f7fa fd58 	bl	80004c8 <__aeabi_dmul>
 8005a18:	a367      	add	r3, pc, #412	; (adr r3, 8005bb8 <__ieee754_exp+0x270>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa fb9b 	bl	8000158 <__aeabi_dsub>
 8005a22:	4632      	mov	r2, r6
 8005a24:	463b      	mov	r3, r7
 8005a26:	f7fa fd4f 	bl	80004c8 <__aeabi_dmul>
 8005a2a:	a365      	add	r3, pc, #404	; (adr r3, 8005bc0 <__ieee754_exp+0x278>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f7fa fb94 	bl	800015c <__adddf3>
 8005a34:	4632      	mov	r2, r6
 8005a36:	463b      	mov	r3, r7
 8005a38:	f7fa fd46 	bl	80004c8 <__aeabi_dmul>
 8005a3c:	a362      	add	r3, pc, #392	; (adr r3, 8005bc8 <__ieee754_exp+0x280>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fb89 	bl	8000158 <__aeabi_dsub>
 8005a46:	4632      	mov	r2, r6
 8005a48:	463b      	mov	r3, r7
 8005a4a:	f7fa fd3d 	bl	80004c8 <__aeabi_dmul>
 8005a4e:	a360      	add	r3, pc, #384	; (adr r3, 8005bd0 <__ieee754_exp+0x288>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fb82 	bl	800015c <__adddf3>
 8005a58:	4632      	mov	r2, r6
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	f7fa fd34 	bl	80004c8 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4628      	mov	r0, r5
 8005a66:	4621      	mov	r1, r4
 8005a68:	f7fa fb76 	bl	8000158 <__aeabi_dsub>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4606      	mov	r6, r0
 8005a72:	460f      	mov	r7, r1
 8005a74:	4628      	mov	r0, r5
 8005a76:	4621      	mov	r1, r4
 8005a78:	f7fa fd26 	bl	80004c8 <__aeabi_dmul>
 8005a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a80:	f1ba 0f00 	cmp.w	sl, #0
 8005a84:	d159      	bne.n	8005b3a <__ieee754_exp+0x1f2>
 8005a86:	2200      	movs	r2, #0
 8005a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fa fb62 	bl	8000158 <__aeabi_dsub>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a9c:	f7fa fe3e 	bl	800071c <__aeabi_ddiv>
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	f7fa fb58 	bl	8000158 <__aeabi_dsub>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	2000      	movs	r0, #0
 8005aae:	4956      	ldr	r1, [pc, #344]	; (8005c08 <__ieee754_exp+0x2c0>)
 8005ab0:	f7fa fb52 	bl	8000158 <__aeabi_dsub>
 8005ab4:	e75e      	b.n	8005974 <__ieee754_exp+0x2c>
 8005ab6:	4e55      	ldr	r6, [pc, #340]	; (8005c0c <__ieee754_exp+0x2c4>)
 8005ab8:	a347      	add	r3, pc, #284	; (adr r3, 8005bd8 <__ieee754_exp+0x290>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	4446      	add	r6, r8
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	f7fa fd00 	bl	80004c8 <__aeabi_dmul>
 8005ac8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005acc:	f7fa fb46 	bl	800015c <__adddf3>
 8005ad0:	f7fa ffaa 	bl	8000a28 <__aeabi_d2iz>
 8005ad4:	4682      	mov	sl, r0
 8005ad6:	f7fa fc8d 	bl	80003f4 <__aeabi_i2d>
 8005ada:	a341      	add	r3, pc, #260	; (adr r3, 8005be0 <__ieee754_exp+0x298>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	460f      	mov	r7, r1
 8005ae4:	f7fa fcf0 	bl	80004c8 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4628      	mov	r0, r5
 8005aee:	4621      	mov	r1, r4
 8005af0:	f7fa fb32 	bl	8000158 <__aeabi_dsub>
 8005af4:	a33c      	add	r3, pc, #240	; (adr r3, 8005be8 <__ieee754_exp+0x2a0>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	e9cd 0100 	strd	r0, r1, [sp]
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa fce1 	bl	80004c8 <__aeabi_dmul>
 8005b06:	4680      	mov	r8, r0
 8005b08:	4689      	mov	r9, r1
 8005b0a:	e770      	b.n	80059ee <__ieee754_exp+0xa6>
 8005b0c:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <__ieee754_exp+0x2c8>)
 8005b0e:	429e      	cmp	r6, r3
 8005b10:	d80e      	bhi.n	8005b30 <__ieee754_exp+0x1e8>
 8005b12:	a323      	add	r3, pc, #140	; (adr r3, 8005ba0 <__ieee754_exp+0x258>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fb20 	bl	800015c <__adddf3>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <__ieee754_exp+0x2c0>)
 8005b20:	f7fa ff62 	bl	80009e8 <__aeabi_dcmpgt>
 8005b24:	b138      	cbz	r0, 8005b36 <__ieee754_exp+0x1ee>
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b37      	ldr	r3, [pc, #220]	; (8005c08 <__ieee754_exp+0x2c0>)
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	e71f      	b.n	8005970 <__ieee754_exp+0x28>
 8005b30:	f04f 0a00 	mov.w	sl, #0
 8005b34:	e763      	b.n	80059fe <__ieee754_exp+0xb6>
 8005b36:	4682      	mov	sl, r0
 8005b38:	e761      	b.n	80059fe <__ieee754_exp+0xb6>
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b44:	f7fa fb08 	bl	8000158 <__aeabi_dsub>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b50:	f7fa fde4 	bl	800071c <__aeabi_ddiv>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4640      	mov	r0, r8
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	f7fa fafc 	bl	8000158 <__aeabi_dsub>
 8005b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b64:	f7fa faf8 	bl	8000158 <__aeabi_dsub>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	4926      	ldr	r1, [pc, #152]	; (8005c08 <__ieee754_exp+0x2c0>)
 8005b70:	f7fa faf2 	bl	8000158 <__aeabi_dsub>
 8005b74:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8005b78:	4592      	cmp	sl, r2
 8005b7a:	db02      	blt.n	8005b82 <__ieee754_exp+0x23a>
 8005b7c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005b80:	e6f8      	b.n	8005974 <__ieee754_exp+0x2c>
 8005b82:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8005b86:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8005b90:	e704      	b.n	800599c <__ieee754_exp+0x54>
 8005b92:	bf00      	nop
 8005b94:	f3af 8000 	nop.w
 8005b98:	fefa39ef 	.word	0xfefa39ef
 8005b9c:	40862e42 	.word	0x40862e42
 8005ba0:	8800759c 	.word	0x8800759c
 8005ba4:	7e37e43c 	.word	0x7e37e43c
 8005ba8:	d52d3051 	.word	0xd52d3051
 8005bac:	c0874910 	.word	0xc0874910
 8005bb0:	72bea4d0 	.word	0x72bea4d0
 8005bb4:	3e663769 	.word	0x3e663769
 8005bb8:	c5d26bf1 	.word	0xc5d26bf1
 8005bbc:	3ebbbd41 	.word	0x3ebbbd41
 8005bc0:	af25de2c 	.word	0xaf25de2c
 8005bc4:	3f11566a 	.word	0x3f11566a
 8005bc8:	16bebd93 	.word	0x16bebd93
 8005bcc:	3f66c16c 	.word	0x3f66c16c
 8005bd0:	5555553e 	.word	0x5555553e
 8005bd4:	3fc55555 	.word	0x3fc55555
 8005bd8:	652b82fe 	.word	0x652b82fe
 8005bdc:	3ff71547 	.word	0x3ff71547
 8005be0:	fee00000 	.word	0xfee00000
 8005be4:	3fe62e42 	.word	0x3fe62e42
 8005be8:	35793c76 	.word	0x35793c76
 8005bec:	3dea39ef 	.word	0x3dea39ef
 8005bf0:	40862e41 	.word	0x40862e41
 8005bf4:	7fefffff 	.word	0x7fefffff
 8005bf8:	3fd62e42 	.word	0x3fd62e42
 8005bfc:	3ff0a2b1 	.word	0x3ff0a2b1
 8005c00:	080083b0 	.word	0x080083b0
 8005c04:	080083c0 	.word	0x080083c0
 8005c08:	3ff00000 	.word	0x3ff00000
 8005c0c:	080083a0 	.word	0x080083a0
 8005c10:	3e2fffff 	.word	0x3e2fffff
 8005c14:	00000000 	.word	0x00000000

08005c18 <__ieee754_log10>:
 8005c18:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c20:	4604      	mov	r4, r0
 8005c22:	460d      	mov	r5, r1
 8005c24:	460b      	mov	r3, r1
 8005c26:	da26      	bge.n	8005c76 <__ieee754_log10+0x5e>
 8005c28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005c2c:	4302      	orrs	r2, r0
 8005c2e:	d107      	bne.n	8005c40 <__ieee754_log10+0x28>
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	2000      	movs	r0, #0
 8005c36:	4936      	ldr	r1, [pc, #216]	; (8005d10 <__ieee754_log10+0xf8>)
 8005c38:	f7fa fd70 	bl	800071c <__aeabi_ddiv>
 8005c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c40:	2900      	cmp	r1, #0
 8005c42:	da05      	bge.n	8005c50 <__ieee754_log10+0x38>
 8005c44:	4602      	mov	r2, r0
 8005c46:	f7fa fa87 	bl	8000158 <__aeabi_dsub>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e7f3      	b.n	8005c38 <__ieee754_log10+0x20>
 8005c50:	2200      	movs	r2, #0
 8005c52:	4b30      	ldr	r3, [pc, #192]	; (8005d14 <__ieee754_log10+0xfc>)
 8005c54:	f7fa fc38 	bl	80004c8 <__aeabi_dmul>
 8005c58:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	460d      	mov	r5, r1
 8005c60:	460b      	mov	r3, r1
 8005c62:	492d      	ldr	r1, [pc, #180]	; (8005d18 <__ieee754_log10+0x100>)
 8005c64:	428b      	cmp	r3, r1
 8005c66:	dd08      	ble.n	8005c7a <__ieee754_log10+0x62>
 8005c68:	4622      	mov	r2, r4
 8005c6a:	462b      	mov	r3, r5
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa fa74 	bl	800015c <__adddf3>
 8005c74:	e7e2      	b.n	8005c3c <__ieee754_log10+0x24>
 8005c76:	2200      	movs	r2, #0
 8005c78:	e7f3      	b.n	8005c62 <__ieee754_log10+0x4a>
 8005c7a:	1518      	asrs	r0, r3, #20
 8005c7c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005c80:	4410      	add	r0, r2
 8005c82:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005c86:	4448      	add	r0, r9
 8005c88:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005c8c:	f7fa fbb2 	bl	80003f4 <__aeabi_i2d>
 8005c90:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005c94:	3303      	adds	r3, #3
 8005c96:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	460f      	mov	r7, r1
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f000 ff01 	bl	8006aa8 <__ieee754_log>
 8005ca6:	a314      	add	r3, pc, #80	; (adr r3, 8005cf8 <__ieee754_log10+0xe0>)
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	4680      	mov	r8, r0
 8005cae:	4689      	mov	r9, r1
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	f7fa fc08 	bl	80004c8 <__aeabi_dmul>
 8005cb8:	a311      	add	r3, pc, #68	; (adr r3, 8005d00 <__ieee754_log10+0xe8>)
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	f7fa fbff 	bl	80004c8 <__aeabi_dmul>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7fa fa43 	bl	800015c <__adddf3>
 8005cd6:	a30c      	add	r3, pc, #48	; (adr r3, 8005d08 <__ieee754_log10+0xf0>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	4604      	mov	r4, r0
 8005cde:	460d      	mov	r5, r1
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fbf0 	bl	80004c8 <__aeabi_dmul>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	e7be      	b.n	8005c70 <__ieee754_log10+0x58>
 8005cf2:	bf00      	nop
 8005cf4:	f3af 8000 	nop.w
 8005cf8:	11f12b36 	.word	0x11f12b36
 8005cfc:	3d59fef3 	.word	0x3d59fef3
 8005d00:	1526e50e 	.word	0x1526e50e
 8005d04:	3fdbcb7b 	.word	0x3fdbcb7b
 8005d08:	509f6000 	.word	0x509f6000
 8005d0c:	3fd34413 	.word	0x3fd34413
 8005d10:	c3500000 	.word	0xc3500000
 8005d14:	43500000 	.word	0x43500000
 8005d18:	7fefffff 	.word	0x7fefffff
 8005d1c:	00000000 	.word	0x00000000

08005d20 <__ieee754_pow>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b091      	sub	sp, #68	; 0x44
 8005d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d2a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005d2e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005d32:	ea55 0302 	orrs.w	r3, r5, r2
 8005d36:	4607      	mov	r7, r0
 8005d38:	4688      	mov	r8, r1
 8005d3a:	f000 84b7 	beq.w	80066ac <__ieee754_pow+0x98c>
 8005d3e:	4b80      	ldr	r3, [pc, #512]	; (8005f40 <__ieee754_pow+0x220>)
 8005d40:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005d44:	429c      	cmp	r4, r3
 8005d46:	4689      	mov	r9, r1
 8005d48:	4682      	mov	sl, r0
 8005d4a:	dc09      	bgt.n	8005d60 <__ieee754_pow+0x40>
 8005d4c:	d103      	bne.n	8005d56 <__ieee754_pow+0x36>
 8005d4e:	b938      	cbnz	r0, 8005d60 <__ieee754_pow+0x40>
 8005d50:	42a5      	cmp	r5, r4
 8005d52:	dc0d      	bgt.n	8005d70 <__ieee754_pow+0x50>
 8005d54:	e001      	b.n	8005d5a <__ieee754_pow+0x3a>
 8005d56:	429d      	cmp	r5, r3
 8005d58:	dc02      	bgt.n	8005d60 <__ieee754_pow+0x40>
 8005d5a:	429d      	cmp	r5, r3
 8005d5c:	d10e      	bne.n	8005d7c <__ieee754_pow+0x5c>
 8005d5e:	b16a      	cbz	r2, 8005d7c <__ieee754_pow+0x5c>
 8005d60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d68:	ea54 030a 	orrs.w	r3, r4, sl
 8005d6c:	f000 849e 	beq.w	80066ac <__ieee754_pow+0x98c>
 8005d70:	4874      	ldr	r0, [pc, #464]	; (8005f44 <__ieee754_pow+0x224>)
 8005d72:	b011      	add	sp, #68	; 0x44
 8005d74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	f000 bd94 	b.w	80068a4 <nan>
 8005d7c:	f1b9 0f00 	cmp.w	r9, #0
 8005d80:	da53      	bge.n	8005e2a <__ieee754_pow+0x10a>
 8005d82:	4b71      	ldr	r3, [pc, #452]	; (8005f48 <__ieee754_pow+0x228>)
 8005d84:	429d      	cmp	r5, r3
 8005d86:	dc4e      	bgt.n	8005e26 <__ieee754_pow+0x106>
 8005d88:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005d8c:	429d      	cmp	r5, r3
 8005d8e:	dd4c      	ble.n	8005e2a <__ieee754_pow+0x10a>
 8005d90:	152b      	asrs	r3, r5, #20
 8005d92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d96:	2b14      	cmp	r3, #20
 8005d98:	dd28      	ble.n	8005dec <__ieee754_pow+0xcc>
 8005d9a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005d9e:	fa22 f103 	lsr.w	r1, r2, r3
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d13f      	bne.n	8005e2a <__ieee754_pow+0x10a>
 8005daa:	f001 0101 	and.w	r1, r1, #1
 8005dae:	f1c1 0302 	rsb	r3, r1, #2
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	d15c      	bne.n	8005e72 <__ieee754_pow+0x152>
 8005db8:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <__ieee754_pow+0x220>)
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	d126      	bne.n	8005e0c <__ieee754_pow+0xec>
 8005dbe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005dc2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005dc6:	ea53 030a 	orrs.w	r3, r3, sl
 8005dca:	f000 846f 	beq.w	80066ac <__ieee754_pow+0x98c>
 8005dce:	4b5f      	ldr	r3, [pc, #380]	; (8005f4c <__ieee754_pow+0x22c>)
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	dd2c      	ble.n	8005e2e <__ieee754_pow+0x10e>
 8005dd4:	2e00      	cmp	r6, #0
 8005dd6:	f280 846f 	bge.w	80066b8 <__ieee754_pow+0x998>
 8005dda:	f04f 0b00 	mov.w	fp, #0
 8005dde:	f04f 0c00 	mov.w	ip, #0
 8005de2:	4658      	mov	r0, fp
 8005de4:	4661      	mov	r1, ip
 8005de6:	b011      	add	sp, #68	; 0x44
 8005de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	d13e      	bne.n	8005e6e <__ieee754_pow+0x14e>
 8005df0:	f1c3 0314 	rsb	r3, r3, #20
 8005df4:	fa45 f103 	asr.w	r1, r5, r3
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	f040 8463 	bne.w	80066c8 <__ieee754_pow+0x9a8>
 8005e02:	f001 0101 	and.w	r1, r1, #1
 8005e06:	f1c1 0302 	rsb	r3, r1, #2
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <__ieee754_pow+0x230>)
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	d114      	bne.n	8005e3c <__ieee754_pow+0x11c>
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	f280 8454 	bge.w	80066c0 <__ieee754_pow+0x9a0>
 8005e18:	463a      	mov	r2, r7
 8005e1a:	4643      	mov	r3, r8
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	494c      	ldr	r1, [pc, #304]	; (8005f50 <__ieee754_pow+0x230>)
 8005e20:	f7fa fc7c 	bl	800071c <__aeabi_ddiv>
 8005e24:	e013      	b.n	8005e4e <__ieee754_pow+0x12e>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e7c3      	b.n	8005db2 <__ieee754_pow+0x92>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e7c1      	b.n	8005db2 <__ieee754_pow+0x92>
 8005e2e:	2e00      	cmp	r6, #0
 8005e30:	dad3      	bge.n	8005dda <__ieee754_pow+0xba>
 8005e32:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005e36:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005e3a:	e7d2      	b.n	8005de2 <__ieee754_pow+0xc2>
 8005e3c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005e40:	d108      	bne.n	8005e54 <__ieee754_pow+0x134>
 8005e42:	463a      	mov	r2, r7
 8005e44:	4643      	mov	r3, r8
 8005e46:	4638      	mov	r0, r7
 8005e48:	4641      	mov	r1, r8
 8005e4a:	f7fa fb3d 	bl	80004c8 <__aeabi_dmul>
 8005e4e:	4683      	mov	fp, r0
 8005e50:	468c      	mov	ip, r1
 8005e52:	e7c6      	b.n	8005de2 <__ieee754_pow+0xc2>
 8005e54:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <__ieee754_pow+0x234>)
 8005e56:	429e      	cmp	r6, r3
 8005e58:	d10b      	bne.n	8005e72 <__ieee754_pow+0x152>
 8005e5a:	f1b9 0f00 	cmp.w	r9, #0
 8005e5e:	db08      	blt.n	8005e72 <__ieee754_pow+0x152>
 8005e60:	4638      	mov	r0, r7
 8005e62:	4641      	mov	r1, r8
 8005e64:	b011      	add	sp, #68	; 0x44
 8005e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6a:	f000 bc63 	b.w	8006734 <__ieee754_sqrt>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4638      	mov	r0, r7
 8005e74:	4641      	mov	r1, r8
 8005e76:	f000 fd09 	bl	800688c <fabs>
 8005e7a:	4683      	mov	fp, r0
 8005e7c:	468c      	mov	ip, r1
 8005e7e:	f1ba 0f00 	cmp.w	sl, #0
 8005e82:	d12b      	bne.n	8005edc <__ieee754_pow+0x1bc>
 8005e84:	b124      	cbz	r4, 8005e90 <__ieee754_pow+0x170>
 8005e86:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <__ieee754_pow+0x230>)
 8005e88:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d125      	bne.n	8005edc <__ieee754_pow+0x1bc>
 8005e90:	2e00      	cmp	r6, #0
 8005e92:	da07      	bge.n	8005ea4 <__ieee754_pow+0x184>
 8005e94:	465a      	mov	r2, fp
 8005e96:	4663      	mov	r3, ip
 8005e98:	2000      	movs	r0, #0
 8005e9a:	492d      	ldr	r1, [pc, #180]	; (8005f50 <__ieee754_pow+0x230>)
 8005e9c:	f7fa fc3e 	bl	800071c <__aeabi_ddiv>
 8005ea0:	4683      	mov	fp, r0
 8005ea2:	468c      	mov	ip, r1
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	da9b      	bge.n	8005de2 <__ieee754_pow+0xc2>
 8005eaa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005eae:	9b00      	ldr	r3, [sp, #0]
 8005eb0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005eb4:	4323      	orrs	r3, r4
 8005eb6:	d108      	bne.n	8005eca <__ieee754_pow+0x1aa>
 8005eb8:	465a      	mov	r2, fp
 8005eba:	4663      	mov	r3, ip
 8005ebc:	4658      	mov	r0, fp
 8005ebe:	4661      	mov	r1, ip
 8005ec0:	f7fa f94a 	bl	8000158 <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	e7aa      	b.n	8005e20 <__ieee754_pow+0x100>
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d188      	bne.n	8005de2 <__ieee754_pow+0xc2>
 8005ed0:	4658      	mov	r0, fp
 8005ed2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005ed6:	4683      	mov	fp, r0
 8005ed8:	469c      	mov	ip, r3
 8005eda:	e782      	b.n	8005de2 <__ieee754_pow+0xc2>
 8005edc:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005ee0:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ee8:	9b00      	ldr	r3, [sp, #0]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	d104      	bne.n	8005ef8 <__ieee754_pow+0x1d8>
 8005eee:	463a      	mov	r2, r7
 8005ef0:	4643      	mov	r3, r8
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	4641      	mov	r1, r8
 8005ef6:	e7e3      	b.n	8005ec0 <__ieee754_pow+0x1a0>
 8005ef8:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <__ieee754_pow+0x238>)
 8005efa:	429d      	cmp	r5, r3
 8005efc:	f340 80fe 	ble.w	80060fc <__ieee754_pow+0x3dc>
 8005f00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f04:	429d      	cmp	r5, r3
 8005f06:	dd0b      	ble.n	8005f20 <__ieee754_pow+0x200>
 8005f08:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <__ieee754_pow+0x22c>)
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	dc0e      	bgt.n	8005f2c <__ieee754_pow+0x20c>
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	f6bf af63 	bge.w	8005dda <__ieee754_pow+0xba>
 8005f14:	a308      	add	r3, pc, #32	; (adr r3, 8005f38 <__ieee754_pow+0x218>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	e794      	b.n	8005e4a <__ieee754_pow+0x12a>
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <__ieee754_pow+0x23c>)
 8005f22:	429c      	cmp	r4, r3
 8005f24:	ddf3      	ble.n	8005f0e <__ieee754_pow+0x1ee>
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <__ieee754_pow+0x230>)
 8005f28:	429c      	cmp	r4, r3
 8005f2a:	dd19      	ble.n	8005f60 <__ieee754_pow+0x240>
 8005f2c:	2e00      	cmp	r6, #0
 8005f2e:	dcf1      	bgt.n	8005f14 <__ieee754_pow+0x1f4>
 8005f30:	e753      	b.n	8005dda <__ieee754_pow+0xba>
 8005f32:	bf00      	nop
 8005f34:	f3af 8000 	nop.w
 8005f38:	8800759c 	.word	0x8800759c
 8005f3c:	7e37e43c 	.word	0x7e37e43c
 8005f40:	7ff00000 	.word	0x7ff00000
 8005f44:	0800835d 	.word	0x0800835d
 8005f48:	433fffff 	.word	0x433fffff
 8005f4c:	3fefffff 	.word	0x3fefffff
 8005f50:	3ff00000 	.word	0x3ff00000
 8005f54:	3fe00000 	.word	0x3fe00000
 8005f58:	41e00000 	.word	0x41e00000
 8005f5c:	3feffffe 	.word	0x3feffffe
 8005f60:	4661      	mov	r1, ip
 8005f62:	2200      	movs	r2, #0
 8005f64:	4b60      	ldr	r3, [pc, #384]	; (80060e8 <__ieee754_pow+0x3c8>)
 8005f66:	4658      	mov	r0, fp
 8005f68:	f7fa f8f6 	bl	8000158 <__aeabi_dsub>
 8005f6c:	a354      	add	r3, pc, #336	; (adr r3, 80060c0 <__ieee754_pow+0x3a0>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	4604      	mov	r4, r0
 8005f74:	460d      	mov	r5, r1
 8005f76:	f7fa faa7 	bl	80004c8 <__aeabi_dmul>
 8005f7a:	a353      	add	r3, pc, #332	; (adr r3, 80060c8 <__ieee754_pow+0x3a8>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	4606      	mov	r6, r0
 8005f82:	460f      	mov	r7, r1
 8005f84:	4620      	mov	r0, r4
 8005f86:	4629      	mov	r1, r5
 8005f88:	f7fa fa9e 	bl	80004c8 <__aeabi_dmul>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4682      	mov	sl, r0
 8005f90:	468b      	mov	fp, r1
 8005f92:	4b56      	ldr	r3, [pc, #344]	; (80060ec <__ieee754_pow+0x3cc>)
 8005f94:	4620      	mov	r0, r4
 8005f96:	4629      	mov	r1, r5
 8005f98:	f7fa fa96 	bl	80004c8 <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	a14b      	add	r1, pc, #300	; (adr r1, 80060d0 <__ieee754_pow+0x3b0>)
 8005fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa6:	f7fa f8d7 	bl	8000158 <__aeabi_dsub>
 8005faa:	4622      	mov	r2, r4
 8005fac:	462b      	mov	r3, r5
 8005fae:	f7fa fa8b 	bl	80004c8 <__aeabi_dmul>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	494d      	ldr	r1, [pc, #308]	; (80060f0 <__ieee754_pow+0x3d0>)
 8005fba:	f7fa f8cd 	bl	8000158 <__aeabi_dsub>
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	f7fa fa7d 	bl	80004c8 <__aeabi_dmul>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	f7fa fa77 	bl	80004c8 <__aeabi_dmul>
 8005fda:	a33f      	add	r3, pc, #252	; (adr r3, 80060d8 <__ieee754_pow+0x3b8>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa fa72 	bl	80004c8 <__aeabi_dmul>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4650      	mov	r0, sl
 8005fea:	4659      	mov	r1, fp
 8005fec:	f7fa f8b4 	bl	8000158 <__aeabi_dsub>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa f8ae 	bl	800015c <__adddf3>
 8006000:	2000      	movs	r0, #0
 8006002:	468b      	mov	fp, r1
 8006004:	4682      	mov	sl, r0
 8006006:	4632      	mov	r2, r6
 8006008:	463b      	mov	r3, r7
 800600a:	f7fa f8a5 	bl	8000158 <__aeabi_dsub>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4620      	mov	r0, r4
 8006014:	4629      	mov	r1, r5
 8006016:	f7fa f89f 	bl	8000158 <__aeabi_dsub>
 800601a:	9b00      	ldr	r3, [sp, #0]
 800601c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800601e:	3b01      	subs	r3, #1
 8006020:	4313      	orrs	r3, r2
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	bf0c      	ite	eq
 8006028:	4c32      	ldreq	r4, [pc, #200]	; (80060f4 <__ieee754_pow+0x3d4>)
 800602a:	4c2f      	ldrne	r4, [pc, #188]	; (80060e8 <__ieee754_pow+0x3c8>)
 800602c:	4606      	mov	r6, r0
 800602e:	e9cd 3400 	strd	r3, r4, [sp]
 8006032:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006036:	2400      	movs	r4, #0
 8006038:	460f      	mov	r7, r1
 800603a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	f7fa f889 	bl	8000158 <__aeabi_dsub>
 8006046:	4652      	mov	r2, sl
 8006048:	465b      	mov	r3, fp
 800604a:	f7fa fa3d 	bl	80004c8 <__aeabi_dmul>
 800604e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006052:	4680      	mov	r8, r0
 8006054:	4689      	mov	r9, r1
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa fa35 	bl	80004c8 <__aeabi_dmul>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	f7fa f879 	bl	800015c <__adddf3>
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	4680      	mov	r8, r0
 8006070:	4689      	mov	r9, r1
 8006072:	4650      	mov	r0, sl
 8006074:	4659      	mov	r1, fp
 8006076:	f7fa fa27 	bl	80004c8 <__aeabi_dmul>
 800607a:	4604      	mov	r4, r0
 800607c:	460d      	mov	r5, r1
 800607e:	460b      	mov	r3, r1
 8006080:	4602      	mov	r2, r0
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800608a:	f7fa f867 	bl	800015c <__adddf3>
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <__ieee754_pow+0x3d8>)
 8006090:	4682      	mov	sl, r0
 8006092:	4299      	cmp	r1, r3
 8006094:	460f      	mov	r7, r1
 8006096:	460e      	mov	r6, r1
 8006098:	f340 82e1 	ble.w	800665e <__ieee754_pow+0x93e>
 800609c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80060a0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80060a4:	4303      	orrs	r3, r0
 80060a6:	f000 81db 	beq.w	8006460 <__ieee754_pow+0x740>
 80060aa:	a30d      	add	r3, pc, #52	; (adr r3, 80060e0 <__ieee754_pow+0x3c0>)
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060b4:	f7fa fa08 	bl	80004c8 <__aeabi_dmul>
 80060b8:	a309      	add	r3, pc, #36	; (adr r3, 80060e0 <__ieee754_pow+0x3c0>)
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	e6c4      	b.n	8005e4a <__ieee754_pow+0x12a>
 80060c0:	60000000 	.word	0x60000000
 80060c4:	3ff71547 	.word	0x3ff71547
 80060c8:	f85ddf44 	.word	0xf85ddf44
 80060cc:	3e54ae0b 	.word	0x3e54ae0b
 80060d0:	55555555 	.word	0x55555555
 80060d4:	3fd55555 	.word	0x3fd55555
 80060d8:	652b82fe 	.word	0x652b82fe
 80060dc:	3ff71547 	.word	0x3ff71547
 80060e0:	8800759c 	.word	0x8800759c
 80060e4:	7e37e43c 	.word	0x7e37e43c
 80060e8:	3ff00000 	.word	0x3ff00000
 80060ec:	3fd00000 	.word	0x3fd00000
 80060f0:	3fe00000 	.word	0x3fe00000
 80060f4:	bff00000 	.word	0xbff00000
 80060f8:	408fffff 	.word	0x408fffff
 80060fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	da08      	bge.n	8006118 <__ieee754_pow+0x3f8>
 8006106:	4658      	mov	r0, fp
 8006108:	4bcd      	ldr	r3, [pc, #820]	; (8006440 <__ieee754_pow+0x720>)
 800610a:	4661      	mov	r1, ip
 800610c:	f7fa f9dc 	bl	80004c8 <__aeabi_dmul>
 8006110:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006114:	4683      	mov	fp, r0
 8006116:	460c      	mov	r4, r1
 8006118:	1523      	asrs	r3, r4, #20
 800611a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800611e:	4413      	add	r3, r2
 8006120:	930c      	str	r3, [sp, #48]	; 0x30
 8006122:	4bc8      	ldr	r3, [pc, #800]	; (8006444 <__ieee754_pow+0x724>)
 8006124:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006128:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800612c:	429c      	cmp	r4, r3
 800612e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006132:	dd08      	ble.n	8006146 <__ieee754_pow+0x426>
 8006134:	4bc4      	ldr	r3, [pc, #784]	; (8006448 <__ieee754_pow+0x728>)
 8006136:	429c      	cmp	r4, r3
 8006138:	f340 815b 	ble.w	80063f2 <__ieee754_pow+0x6d2>
 800613c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800613e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006142:	3301      	adds	r3, #1
 8006144:	930c      	str	r3, [sp, #48]	; 0x30
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	4658      	mov	r0, fp
 800614c:	4629      	mov	r1, r5
 800614e:	4bbf      	ldr	r3, [pc, #764]	; (800644c <__ieee754_pow+0x72c>)
 8006150:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006154:	444b      	add	r3, r9
 8006156:	e9d3 3400 	ldrd	r3, r4, [r3]
 800615a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800615e:	461a      	mov	r2, r3
 8006160:	4623      	mov	r3, r4
 8006162:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006166:	f7f9 fff7 	bl	8000158 <__aeabi_dsub>
 800616a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800616e:	4606      	mov	r6, r0
 8006170:	460f      	mov	r7, r1
 8006172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006176:	f7f9 fff1 	bl	800015c <__adddf3>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	2000      	movs	r0, #0
 8006180:	49b3      	ldr	r1, [pc, #716]	; (8006450 <__ieee754_pow+0x730>)
 8006182:	f7fa facb 	bl	800071c <__aeabi_ddiv>
 8006186:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4630      	mov	r0, r6
 8006190:	4639      	mov	r1, r7
 8006192:	f7fa f999 	bl	80004c8 <__aeabi_dmul>
 8006196:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800619a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800619e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061a2:	2300      	movs	r3, #0
 80061a4:	2200      	movs	r2, #0
 80061a6:	106d      	asrs	r5, r5, #1
 80061a8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80061b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80061b6:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80061ba:	4650      	mov	r0, sl
 80061bc:	4659      	mov	r1, fp
 80061be:	4614      	mov	r4, r2
 80061c0:	461d      	mov	r5, r3
 80061c2:	f7fa f981 	bl	80004c8 <__aeabi_dmul>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4630      	mov	r0, r6
 80061cc:	4639      	mov	r1, r7
 80061ce:	f7f9 ffc3 	bl	8000158 <__aeabi_dsub>
 80061d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061d6:	4606      	mov	r6, r0
 80061d8:	460f      	mov	r7, r1
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f7f9 ffbb 	bl	8000158 <__aeabi_dsub>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061ea:	f7f9 ffb5 	bl	8000158 <__aeabi_dsub>
 80061ee:	4652      	mov	r2, sl
 80061f0:	465b      	mov	r3, fp
 80061f2:	f7fa f969 	bl	80004c8 <__aeabi_dmul>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4630      	mov	r0, r6
 80061fc:	4639      	mov	r1, r7
 80061fe:	f7f9 ffab 	bl	8000158 <__aeabi_dsub>
 8006202:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006206:	f7fa f95f 	bl	80004c8 <__aeabi_dmul>
 800620a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800620e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006212:	4610      	mov	r0, r2
 8006214:	4619      	mov	r1, r3
 8006216:	f7fa f957 	bl	80004c8 <__aeabi_dmul>
 800621a:	a377      	add	r3, pc, #476	; (adr r3, 80063f8 <__ieee754_pow+0x6d8>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	4604      	mov	r4, r0
 8006222:	460d      	mov	r5, r1
 8006224:	f7fa f950 	bl	80004c8 <__aeabi_dmul>
 8006228:	a375      	add	r3, pc, #468	; (adr r3, 8006400 <__ieee754_pow+0x6e0>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7f9 ff95 	bl	800015c <__adddf3>
 8006232:	4622      	mov	r2, r4
 8006234:	462b      	mov	r3, r5
 8006236:	f7fa f947 	bl	80004c8 <__aeabi_dmul>
 800623a:	a373      	add	r3, pc, #460	; (adr r3, 8006408 <__ieee754_pow+0x6e8>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7f9 ff8c 	bl	800015c <__adddf3>
 8006244:	4622      	mov	r2, r4
 8006246:	462b      	mov	r3, r5
 8006248:	f7fa f93e 	bl	80004c8 <__aeabi_dmul>
 800624c:	a370      	add	r3, pc, #448	; (adr r3, 8006410 <__ieee754_pow+0x6f0>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f7f9 ff83 	bl	800015c <__adddf3>
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	f7fa f935 	bl	80004c8 <__aeabi_dmul>
 800625e:	a36e      	add	r3, pc, #440	; (adr r3, 8006418 <__ieee754_pow+0x6f8>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f7f9 ff7a 	bl	800015c <__adddf3>
 8006268:	4622      	mov	r2, r4
 800626a:	462b      	mov	r3, r5
 800626c:	f7fa f92c 	bl	80004c8 <__aeabi_dmul>
 8006270:	a36b      	add	r3, pc, #428	; (adr r3, 8006420 <__ieee754_pow+0x700>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f7f9 ff71 	bl	800015c <__adddf3>
 800627a:	4622      	mov	r2, r4
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	462b      	mov	r3, r5
 8006282:	4620      	mov	r0, r4
 8006284:	4629      	mov	r1, r5
 8006286:	f7fa f91f 	bl	80004c8 <__aeabi_dmul>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7fa f919 	bl	80004c8 <__aeabi_dmul>
 8006296:	4604      	mov	r4, r0
 8006298:	460d      	mov	r5, r1
 800629a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800629e:	4652      	mov	r2, sl
 80062a0:	465b      	mov	r3, fp
 80062a2:	f7f9 ff5b 	bl	800015c <__adddf3>
 80062a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062aa:	f7fa f90d 	bl	80004c8 <__aeabi_dmul>
 80062ae:	4622      	mov	r2, r4
 80062b0:	462b      	mov	r3, r5
 80062b2:	f7f9 ff53 	bl	800015c <__adddf3>
 80062b6:	4652      	mov	r2, sl
 80062b8:	4606      	mov	r6, r0
 80062ba:	460f      	mov	r7, r1
 80062bc:	465b      	mov	r3, fp
 80062be:	4650      	mov	r0, sl
 80062c0:	4659      	mov	r1, fp
 80062c2:	f7fa f901 	bl	80004c8 <__aeabi_dmul>
 80062c6:	2200      	movs	r2, #0
 80062c8:	4b62      	ldr	r3, [pc, #392]	; (8006454 <__ieee754_pow+0x734>)
 80062ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062ce:	f7f9 ff45 	bl	800015c <__adddf3>
 80062d2:	4632      	mov	r2, r6
 80062d4:	463b      	mov	r3, r7
 80062d6:	f7f9 ff41 	bl	800015c <__adddf3>
 80062da:	9804      	ldr	r0, [sp, #16]
 80062dc:	460d      	mov	r5, r1
 80062de:	4604      	mov	r4, r0
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4650      	mov	r0, sl
 80062e6:	4659      	mov	r1, fp
 80062e8:	f7fa f8ee 	bl	80004c8 <__aeabi_dmul>
 80062ec:	2200      	movs	r2, #0
 80062ee:	4682      	mov	sl, r0
 80062f0:	468b      	mov	fp, r1
 80062f2:	4b58      	ldr	r3, [pc, #352]	; (8006454 <__ieee754_pow+0x734>)
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7f9 ff2e 	bl	8000158 <__aeabi_dsub>
 80062fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006300:	f7f9 ff2a 	bl	8000158 <__aeabi_dsub>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4630      	mov	r0, r6
 800630a:	4639      	mov	r1, r7
 800630c:	f7f9 ff24 	bl	8000158 <__aeabi_dsub>
 8006310:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006314:	f7fa f8d8 	bl	80004c8 <__aeabi_dmul>
 8006318:	4622      	mov	r2, r4
 800631a:	4606      	mov	r6, r0
 800631c:	460f      	mov	r7, r1
 800631e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006322:	462b      	mov	r3, r5
 8006324:	f7fa f8d0 	bl	80004c8 <__aeabi_dmul>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4630      	mov	r0, r6
 800632e:	4639      	mov	r1, r7
 8006330:	f7f9 ff14 	bl	800015c <__adddf3>
 8006334:	4606      	mov	r6, r0
 8006336:	460f      	mov	r7, r1
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4650      	mov	r0, sl
 800633e:	4659      	mov	r1, fp
 8006340:	f7f9 ff0c 	bl	800015c <__adddf3>
 8006344:	a338      	add	r3, pc, #224	; (adr r3, 8006428 <__ieee754_pow+0x708>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	9804      	ldr	r0, [sp, #16]
 800634c:	460d      	mov	r5, r1
 800634e:	4604      	mov	r4, r0
 8006350:	f7fa f8ba 	bl	80004c8 <__aeabi_dmul>
 8006354:	4652      	mov	r2, sl
 8006356:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800635a:	465b      	mov	r3, fp
 800635c:	4620      	mov	r0, r4
 800635e:	4629      	mov	r1, r5
 8006360:	f7f9 fefa 	bl	8000158 <__aeabi_dsub>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4630      	mov	r0, r6
 800636a:	4639      	mov	r1, r7
 800636c:	f7f9 fef4 	bl	8000158 <__aeabi_dsub>
 8006370:	a32f      	add	r3, pc, #188	; (adr r3, 8006430 <__ieee754_pow+0x710>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7fa f8a7 	bl	80004c8 <__aeabi_dmul>
 800637a:	a32f      	add	r3, pc, #188	; (adr r3, 8006438 <__ieee754_pow+0x718>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	4606      	mov	r6, r0
 8006382:	460f      	mov	r7, r1
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	f7fa f89e 	bl	80004c8 <__aeabi_dmul>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7f9 fee2 	bl	800015c <__adddf3>
 8006398:	4b2f      	ldr	r3, [pc, #188]	; (8006458 <__ieee754_pow+0x738>)
 800639a:	444b      	add	r3, r9
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7f9 fedc 	bl	800015c <__adddf3>
 80063a4:	4604      	mov	r4, r0
 80063a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80063a8:	460d      	mov	r5, r1
 80063aa:	f7fa f823 	bl	80003f4 <__aeabi_i2d>
 80063ae:	4606      	mov	r6, r0
 80063b0:	460f      	mov	r7, r1
 80063b2:	4b2a      	ldr	r3, [pc, #168]	; (800645c <__ieee754_pow+0x73c>)
 80063b4:	4622      	mov	r2, r4
 80063b6:	444b      	add	r3, r9
 80063b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063bc:	462b      	mov	r3, r5
 80063be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c2:	f7f9 fecb 	bl	800015c <__adddf3>
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	f7f9 fec7 	bl	800015c <__adddf3>
 80063ce:	4632      	mov	r2, r6
 80063d0:	463b      	mov	r3, r7
 80063d2:	f7f9 fec3 	bl	800015c <__adddf3>
 80063d6:	9804      	ldr	r0, [sp, #16]
 80063d8:	4632      	mov	r2, r6
 80063da:	463b      	mov	r3, r7
 80063dc:	4682      	mov	sl, r0
 80063de:	468b      	mov	fp, r1
 80063e0:	f7f9 feba 	bl	8000158 <__aeabi_dsub>
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	f7f9 feb6 	bl	8000158 <__aeabi_dsub>
 80063ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f0:	e60b      	b.n	800600a <__ieee754_pow+0x2ea>
 80063f2:	f04f 0801 	mov.w	r8, #1
 80063f6:	e6a8      	b.n	800614a <__ieee754_pow+0x42a>
 80063f8:	4a454eef 	.word	0x4a454eef
 80063fc:	3fca7e28 	.word	0x3fca7e28
 8006400:	93c9db65 	.word	0x93c9db65
 8006404:	3fcd864a 	.word	0x3fcd864a
 8006408:	a91d4101 	.word	0xa91d4101
 800640c:	3fd17460 	.word	0x3fd17460
 8006410:	518f264d 	.word	0x518f264d
 8006414:	3fd55555 	.word	0x3fd55555
 8006418:	db6fabff 	.word	0xdb6fabff
 800641c:	3fdb6db6 	.word	0x3fdb6db6
 8006420:	33333303 	.word	0x33333303
 8006424:	3fe33333 	.word	0x3fe33333
 8006428:	e0000000 	.word	0xe0000000
 800642c:	3feec709 	.word	0x3feec709
 8006430:	dc3a03fd 	.word	0xdc3a03fd
 8006434:	3feec709 	.word	0x3feec709
 8006438:	145b01f5 	.word	0x145b01f5
 800643c:	be3e2fe0 	.word	0xbe3e2fe0
 8006440:	43400000 	.word	0x43400000
 8006444:	0003988e 	.word	0x0003988e
 8006448:	000bb679 	.word	0x000bb679
 800644c:	080083d0 	.word	0x080083d0
 8006450:	3ff00000 	.word	0x3ff00000
 8006454:	40080000 	.word	0x40080000
 8006458:	080083f0 	.word	0x080083f0
 800645c:	080083e0 	.word	0x080083e0
 8006460:	a39b      	add	r3, pc, #620	; (adr r3, 80066d0 <__ieee754_pow+0x9b0>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	4640      	mov	r0, r8
 8006468:	4649      	mov	r1, r9
 800646a:	f7f9 fe77 	bl	800015c <__adddf3>
 800646e:	4622      	mov	r2, r4
 8006470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006474:	462b      	mov	r3, r5
 8006476:	4650      	mov	r0, sl
 8006478:	4639      	mov	r1, r7
 800647a:	f7f9 fe6d 	bl	8000158 <__aeabi_dsub>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006486:	f7fa faaf 	bl	80009e8 <__aeabi_dcmpgt>
 800648a:	2800      	cmp	r0, #0
 800648c:	f47f ae0d 	bne.w	80060aa <__ieee754_pow+0x38a>
 8006490:	4aa3      	ldr	r2, [pc, #652]	; (8006720 <__ieee754_pow+0xa00>)
 8006492:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006496:	4293      	cmp	r3, r2
 8006498:	f340 8103 	ble.w	80066a2 <__ieee754_pow+0x982>
 800649c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80064a0:	2000      	movs	r0, #0
 80064a2:	151b      	asrs	r3, r3, #20
 80064a4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80064a8:	fa4a f303 	asr.w	r3, sl, r3
 80064ac:	4433      	add	r3, r6
 80064ae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80064b2:	4f9c      	ldr	r7, [pc, #624]	; (8006724 <__ieee754_pow+0xa04>)
 80064b4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80064b8:	4117      	asrs	r7, r2
 80064ba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80064be:	ea23 0107 	bic.w	r1, r3, r7
 80064c2:	f1c2 0214 	rsb	r2, r2, #20
 80064c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80064ca:	fa4a fa02 	asr.w	sl, sl, r2
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	bfb8      	it	lt
 80064da:	f1ca 0a00 	rsblt	sl, sl, #0
 80064de:	f7f9 fe3b 	bl	8000158 <__aeabi_dsub>
 80064e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ea:	4642      	mov	r2, r8
 80064ec:	464b      	mov	r3, r9
 80064ee:	f7f9 fe35 	bl	800015c <__adddf3>
 80064f2:	a379      	add	r3, pc, #484	; (adr r3, 80066d8 <__ieee754_pow+0x9b8>)
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	2000      	movs	r0, #0
 80064fa:	460d      	mov	r5, r1
 80064fc:	4604      	mov	r4, r0
 80064fe:	f7f9 ffe3 	bl	80004c8 <__aeabi_dmul>
 8006502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006506:	4606      	mov	r6, r0
 8006508:	460f      	mov	r7, r1
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7f9 fe23 	bl	8000158 <__aeabi_dsub>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7f9 fe1d 	bl	8000158 <__aeabi_dsub>
 800651e:	a370      	add	r3, pc, #448	; (adr r3, 80066e0 <__ieee754_pow+0x9c0>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7f9 ffd0 	bl	80004c8 <__aeabi_dmul>
 8006528:	a36f      	add	r3, pc, #444	; (adr r3, 80066e8 <__ieee754_pow+0x9c8>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	4680      	mov	r8, r0
 8006530:	4689      	mov	r9, r1
 8006532:	4620      	mov	r0, r4
 8006534:	4629      	mov	r1, r5
 8006536:	f7f9 ffc7 	bl	80004c8 <__aeabi_dmul>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7f9 fe0b 	bl	800015c <__adddf3>
 8006546:	4604      	mov	r4, r0
 8006548:	460d      	mov	r5, r1
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7f9 fe03 	bl	800015c <__adddf3>
 8006556:	4632      	mov	r2, r6
 8006558:	463b      	mov	r3, r7
 800655a:	4680      	mov	r8, r0
 800655c:	4689      	mov	r9, r1
 800655e:	f7f9 fdfb 	bl	8000158 <__aeabi_dsub>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4620      	mov	r0, r4
 8006568:	4629      	mov	r1, r5
 800656a:	f7f9 fdf5 	bl	8000158 <__aeabi_dsub>
 800656e:	4642      	mov	r2, r8
 8006570:	4606      	mov	r6, r0
 8006572:	460f      	mov	r7, r1
 8006574:	464b      	mov	r3, r9
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7f9 ffa5 	bl	80004c8 <__aeabi_dmul>
 800657e:	a35c      	add	r3, pc, #368	; (adr r3, 80066f0 <__ieee754_pow+0x9d0>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	f7f9 ff9e 	bl	80004c8 <__aeabi_dmul>
 800658c:	a35a      	add	r3, pc, #360	; (adr r3, 80066f8 <__ieee754_pow+0x9d8>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fde1 	bl	8000158 <__aeabi_dsub>
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	f7f9 ff95 	bl	80004c8 <__aeabi_dmul>
 800659e:	a358      	add	r3, pc, #352	; (adr r3, 8006700 <__ieee754_pow+0x9e0>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 fdda 	bl	800015c <__adddf3>
 80065a8:	4622      	mov	r2, r4
 80065aa:	462b      	mov	r3, r5
 80065ac:	f7f9 ff8c 	bl	80004c8 <__aeabi_dmul>
 80065b0:	a355      	add	r3, pc, #340	; (adr r3, 8006708 <__ieee754_pow+0x9e8>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7f9 fdcf 	bl	8000158 <__aeabi_dsub>
 80065ba:	4622      	mov	r2, r4
 80065bc:	462b      	mov	r3, r5
 80065be:	f7f9 ff83 	bl	80004c8 <__aeabi_dmul>
 80065c2:	a353      	add	r3, pc, #332	; (adr r3, 8006710 <__ieee754_pow+0x9f0>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7f9 fdc8 	bl	800015c <__adddf3>
 80065cc:	4622      	mov	r2, r4
 80065ce:	462b      	mov	r3, r5
 80065d0:	f7f9 ff7a 	bl	80004c8 <__aeabi_dmul>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4640      	mov	r0, r8
 80065da:	4649      	mov	r1, r9
 80065dc:	f7f9 fdbc 	bl	8000158 <__aeabi_dsub>
 80065e0:	4604      	mov	r4, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	f7f9 ff6c 	bl	80004c8 <__aeabi_dmul>
 80065f0:	2200      	movs	r2, #0
 80065f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065fa:	4620      	mov	r0, r4
 80065fc:	4629      	mov	r1, r5
 80065fe:	f7f9 fdab 	bl	8000158 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660a:	f7fa f887 	bl	800071c <__aeabi_ddiv>
 800660e:	4632      	mov	r2, r6
 8006610:	4604      	mov	r4, r0
 8006612:	460d      	mov	r5, r1
 8006614:	463b      	mov	r3, r7
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7f9 ff55 	bl	80004c8 <__aeabi_dmul>
 800661e:	4632      	mov	r2, r6
 8006620:	463b      	mov	r3, r7
 8006622:	f7f9 fd9b 	bl	800015c <__adddf3>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7f9 fd93 	bl	8000158 <__aeabi_dsub>
 8006632:	4642      	mov	r2, r8
 8006634:	464b      	mov	r3, r9
 8006636:	f7f9 fd8f 	bl	8000158 <__aeabi_dsub>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	2000      	movs	r0, #0
 8006640:	4939      	ldr	r1, [pc, #228]	; (8006728 <__ieee754_pow+0xa08>)
 8006642:	f7f9 fd89 	bl	8000158 <__aeabi_dsub>
 8006646:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800664a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800664e:	da2b      	bge.n	80066a8 <__ieee754_pow+0x988>
 8006650:	4652      	mov	r2, sl
 8006652:	f000 f9b9 	bl	80069c8 <scalbn>
 8006656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665a:	f7ff bbf6 	b.w	8005e4a <__ieee754_pow+0x12a>
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <__ieee754_pow+0xa0c>)
 8006660:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006664:	429f      	cmp	r7, r3
 8006666:	f77f af13 	ble.w	8006490 <__ieee754_pow+0x770>
 800666a:	4b31      	ldr	r3, [pc, #196]	; (8006730 <__ieee754_pow+0xa10>)
 800666c:	440b      	add	r3, r1
 800666e:	4303      	orrs	r3, r0
 8006670:	d00b      	beq.n	800668a <__ieee754_pow+0x96a>
 8006672:	a329      	add	r3, pc, #164	; (adr r3, 8006718 <__ieee754_pow+0x9f8>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	e9dd 0100 	ldrd	r0, r1, [sp]
 800667c:	f7f9 ff24 	bl	80004c8 <__aeabi_dmul>
 8006680:	a325      	add	r3, pc, #148	; (adr r3, 8006718 <__ieee754_pow+0x9f8>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7ff bbe0 	b.w	8005e4a <__ieee754_pow+0x12a>
 800668a:	4622      	mov	r2, r4
 800668c:	462b      	mov	r3, r5
 800668e:	f7f9 fd63 	bl	8000158 <__aeabi_dsub>
 8006692:	4642      	mov	r2, r8
 8006694:	464b      	mov	r3, r9
 8006696:	f7fa f99d 	bl	80009d4 <__aeabi_dcmpge>
 800669a:	2800      	cmp	r0, #0
 800669c:	f43f aef8 	beq.w	8006490 <__ieee754_pow+0x770>
 80066a0:	e7e7      	b.n	8006672 <__ieee754_pow+0x952>
 80066a2:	f04f 0a00 	mov.w	sl, #0
 80066a6:	e71e      	b.n	80064e6 <__ieee754_pow+0x7c6>
 80066a8:	4621      	mov	r1, r4
 80066aa:	e7d4      	b.n	8006656 <__ieee754_pow+0x936>
 80066ac:	f04f 0b00 	mov.w	fp, #0
 80066b0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006728 <__ieee754_pow+0xa08>
 80066b4:	f7ff bb95 	b.w	8005de2 <__ieee754_pow+0xc2>
 80066b8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80066bc:	f7ff bb91 	b.w	8005de2 <__ieee754_pow+0xc2>
 80066c0:	4638      	mov	r0, r7
 80066c2:	4641      	mov	r1, r8
 80066c4:	f7ff bbc3 	b.w	8005e4e <__ieee754_pow+0x12e>
 80066c8:	9200      	str	r2, [sp, #0]
 80066ca:	f7ff bb9f 	b.w	8005e0c <__ieee754_pow+0xec>
 80066ce:	bf00      	nop
 80066d0:	652b82fe 	.word	0x652b82fe
 80066d4:	3c971547 	.word	0x3c971547
 80066d8:	00000000 	.word	0x00000000
 80066dc:	3fe62e43 	.word	0x3fe62e43
 80066e0:	fefa39ef 	.word	0xfefa39ef
 80066e4:	3fe62e42 	.word	0x3fe62e42
 80066e8:	0ca86c39 	.word	0x0ca86c39
 80066ec:	be205c61 	.word	0xbe205c61
 80066f0:	72bea4d0 	.word	0x72bea4d0
 80066f4:	3e663769 	.word	0x3e663769
 80066f8:	c5d26bf1 	.word	0xc5d26bf1
 80066fc:	3ebbbd41 	.word	0x3ebbbd41
 8006700:	af25de2c 	.word	0xaf25de2c
 8006704:	3f11566a 	.word	0x3f11566a
 8006708:	16bebd93 	.word	0x16bebd93
 800670c:	3f66c16c 	.word	0x3f66c16c
 8006710:	5555553e 	.word	0x5555553e
 8006714:	3fc55555 	.word	0x3fc55555
 8006718:	c2f8f359 	.word	0xc2f8f359
 800671c:	01a56e1f 	.word	0x01a56e1f
 8006720:	3fe00000 	.word	0x3fe00000
 8006724:	000fffff 	.word	0x000fffff
 8006728:	3ff00000 	.word	0x3ff00000
 800672c:	4090cbff 	.word	0x4090cbff
 8006730:	3f6f3400 	.word	0x3f6f3400

08006734 <__ieee754_sqrt>:
 8006734:	4b54      	ldr	r3, [pc, #336]	; (8006888 <__ieee754_sqrt+0x154>)
 8006736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	438b      	bics	r3, r1
 800673c:	4606      	mov	r6, r0
 800673e:	460d      	mov	r5, r1
 8006740:	460a      	mov	r2, r1
 8006742:	460c      	mov	r4, r1
 8006744:	d10f      	bne.n	8006766 <__ieee754_sqrt+0x32>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	f7f9 febd 	bl	80004c8 <__aeabi_dmul>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4630      	mov	r0, r6
 8006754:	4629      	mov	r1, r5
 8006756:	f7f9 fd01 	bl	800015c <__adddf3>
 800675a:	4606      	mov	r6, r0
 800675c:	460d      	mov	r5, r1
 800675e:	4630      	mov	r0, r6
 8006760:	4629      	mov	r1, r5
 8006762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006766:	2900      	cmp	r1, #0
 8006768:	4607      	mov	r7, r0
 800676a:	4603      	mov	r3, r0
 800676c:	dc0e      	bgt.n	800678c <__ieee754_sqrt+0x58>
 800676e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006772:	ea5c 0707 	orrs.w	r7, ip, r7
 8006776:	d0f2      	beq.n	800675e <__ieee754_sqrt+0x2a>
 8006778:	b141      	cbz	r1, 800678c <__ieee754_sqrt+0x58>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	f7f9 fceb 	bl	8000158 <__aeabi_dsub>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	f7f9 ffc9 	bl	800071c <__aeabi_ddiv>
 800678a:	e7e6      	b.n	800675a <__ieee754_sqrt+0x26>
 800678c:	1512      	asrs	r2, r2, #20
 800678e:	d074      	beq.n	800687a <__ieee754_sqrt+0x146>
 8006790:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006794:	07d5      	lsls	r5, r2, #31
 8006796:	f04f 0500 	mov.w	r5, #0
 800679a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800679e:	bf48      	it	mi
 80067a0:	0fd9      	lsrmi	r1, r3, #31
 80067a2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80067a6:	bf44      	itt	mi
 80067a8:	005b      	lslmi	r3, r3, #1
 80067aa:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80067ae:	1051      	asrs	r1, r2, #1
 80067b0:	0fda      	lsrs	r2, r3, #31
 80067b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80067b6:	4628      	mov	r0, r5
 80067b8:	2216      	movs	r2, #22
 80067ba:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	1987      	adds	r7, r0, r6
 80067c2:	42a7      	cmp	r7, r4
 80067c4:	bfde      	ittt	le
 80067c6:	19b8      	addle	r0, r7, r6
 80067c8:	1be4      	suble	r4, r4, r7
 80067ca:	19ad      	addle	r5, r5, r6
 80067cc:	0fdf      	lsrs	r7, r3, #31
 80067ce:	3a01      	subs	r2, #1
 80067d0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80067d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067dc:	d1f0      	bne.n	80067c0 <__ieee754_sqrt+0x8c>
 80067de:	f04f 0c20 	mov.w	ip, #32
 80067e2:	4696      	mov	lr, r2
 80067e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80067e8:	4284      	cmp	r4, r0
 80067ea:	eb06 070e 	add.w	r7, r6, lr
 80067ee:	dc02      	bgt.n	80067f6 <__ieee754_sqrt+0xc2>
 80067f0:	d112      	bne.n	8006818 <__ieee754_sqrt+0xe4>
 80067f2:	429f      	cmp	r7, r3
 80067f4:	d810      	bhi.n	8006818 <__ieee754_sqrt+0xe4>
 80067f6:	2f00      	cmp	r7, #0
 80067f8:	eb07 0e06 	add.w	lr, r7, r6
 80067fc:	da42      	bge.n	8006884 <__ieee754_sqrt+0x150>
 80067fe:	f1be 0f00 	cmp.w	lr, #0
 8006802:	db3f      	blt.n	8006884 <__ieee754_sqrt+0x150>
 8006804:	f100 0801 	add.w	r8, r0, #1
 8006808:	1a24      	subs	r4, r4, r0
 800680a:	4640      	mov	r0, r8
 800680c:	429f      	cmp	r7, r3
 800680e:	bf88      	it	hi
 8006810:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006814:	1bdb      	subs	r3, r3, r7
 8006816:	4432      	add	r2, r6
 8006818:	0064      	lsls	r4, r4, #1
 800681a:	f1bc 0c01 	subs.w	ip, ip, #1
 800681e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006822:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800682a:	d1dd      	bne.n	80067e8 <__ieee754_sqrt+0xb4>
 800682c:	4323      	orrs	r3, r4
 800682e:	d006      	beq.n	800683e <__ieee754_sqrt+0x10a>
 8006830:	1c54      	adds	r4, r2, #1
 8006832:	bf0b      	itete	eq
 8006834:	4662      	moveq	r2, ip
 8006836:	3201      	addne	r2, #1
 8006838:	3501      	addeq	r5, #1
 800683a:	f022 0201 	bicne.w	r2, r2, #1
 800683e:	106b      	asrs	r3, r5, #1
 8006840:	0852      	lsrs	r2, r2, #1
 8006842:	07e8      	lsls	r0, r5, #31
 8006844:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006848:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800684c:	bf48      	it	mi
 800684e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006852:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006856:	4616      	mov	r6, r2
 8006858:	e781      	b.n	800675e <__ieee754_sqrt+0x2a>
 800685a:	0adc      	lsrs	r4, r3, #11
 800685c:	3915      	subs	r1, #21
 800685e:	055b      	lsls	r3, r3, #21
 8006860:	2c00      	cmp	r4, #0
 8006862:	d0fa      	beq.n	800685a <__ieee754_sqrt+0x126>
 8006864:	02e6      	lsls	r6, r4, #11
 8006866:	d50a      	bpl.n	800687e <__ieee754_sqrt+0x14a>
 8006868:	f1c2 0020 	rsb	r0, r2, #32
 800686c:	fa23 f000 	lsr.w	r0, r3, r0
 8006870:	1e55      	subs	r5, r2, #1
 8006872:	4093      	lsls	r3, r2
 8006874:	4304      	orrs	r4, r0
 8006876:	1b4a      	subs	r2, r1, r5
 8006878:	e78a      	b.n	8006790 <__ieee754_sqrt+0x5c>
 800687a:	4611      	mov	r1, r2
 800687c:	e7f0      	b.n	8006860 <__ieee754_sqrt+0x12c>
 800687e:	0064      	lsls	r4, r4, #1
 8006880:	3201      	adds	r2, #1
 8006882:	e7ef      	b.n	8006864 <__ieee754_sqrt+0x130>
 8006884:	4680      	mov	r8, r0
 8006886:	e7bf      	b.n	8006808 <__ieee754_sqrt+0xd4>
 8006888:	7ff00000 	.word	0x7ff00000

0800688c <fabs>:
 800688c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006890:	4619      	mov	r1, r3
 8006892:	4770      	bx	lr

08006894 <finite>:
 8006894:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006898:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800689c:	0fc0      	lsrs	r0, r0, #31
 800689e:	4770      	bx	lr

080068a0 <matherr>:
 80068a0:	2000      	movs	r0, #0
 80068a2:	4770      	bx	lr

080068a4 <nan>:
 80068a4:	2000      	movs	r0, #0
 80068a6:	4901      	ldr	r1, [pc, #4]	; (80068ac <nan+0x8>)
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	7ff80000 	.word	0x7ff80000

080068b0 <rint>:
 80068b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80068b6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80068ba:	f1bc 0f13 	cmp.w	ip, #19
 80068be:	4604      	mov	r4, r0
 80068c0:	460d      	mov	r5, r1
 80068c2:	460b      	mov	r3, r1
 80068c4:	4606      	mov	r6, r0
 80068c6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80068ca:	dc5a      	bgt.n	8006982 <rint+0xd2>
 80068cc:	f1bc 0f00 	cmp.w	ip, #0
 80068d0:	da2b      	bge.n	800692a <rint+0x7a>
 80068d2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80068d6:	4302      	orrs	r2, r0
 80068d8:	d023      	beq.n	8006922 <rint+0x72>
 80068da:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80068de:	4302      	orrs	r2, r0
 80068e0:	4256      	negs	r6, r2
 80068e2:	4316      	orrs	r6, r2
 80068e4:	0c4b      	lsrs	r3, r1, #17
 80068e6:	0b36      	lsrs	r6, r6, #12
 80068e8:	4934      	ldr	r1, [pc, #208]	; (80069bc <rint+0x10c>)
 80068ea:	045b      	lsls	r3, r3, #17
 80068ec:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80068f0:	ea46 0503 	orr.w	r5, r6, r3
 80068f4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80068f8:	4602      	mov	r2, r0
 80068fa:	462b      	mov	r3, r5
 80068fc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	f7f9 fc2a 	bl	800015c <__adddf3>
 8006908:	e9cd 0100 	strd	r0, r1, [sp]
 800690c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006910:	462b      	mov	r3, r5
 8006912:	4622      	mov	r2, r4
 8006914:	f7f9 fc20 	bl	8000158 <__aeabi_dsub>
 8006918:	4604      	mov	r4, r0
 800691a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800691e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8006922:	4620      	mov	r0, r4
 8006924:	4629      	mov	r1, r5
 8006926:	b003      	add	sp, #12
 8006928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800692a:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <rint+0x110>)
 800692c:	fa42 f20c 	asr.w	r2, r2, ip
 8006930:	4011      	ands	r1, r2
 8006932:	4301      	orrs	r1, r0
 8006934:	d0f5      	beq.n	8006922 <rint+0x72>
 8006936:	0852      	lsrs	r2, r2, #1
 8006938:	ea05 0102 	and.w	r1, r5, r2
 800693c:	ea50 0601 	orrs.w	r6, r0, r1
 8006940:	d00c      	beq.n	800695c <rint+0xac>
 8006942:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006946:	f1bc 0f13 	cmp.w	ip, #19
 800694a:	bf0c      	ite	eq
 800694c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8006950:	2600      	movne	r6, #0
 8006952:	ea25 0202 	bic.w	r2, r5, r2
 8006956:	fa43 f30c 	asr.w	r3, r3, ip
 800695a:	4313      	orrs	r3, r2
 800695c:	4917      	ldr	r1, [pc, #92]	; (80069bc <rint+0x10c>)
 800695e:	4632      	mov	r2, r6
 8006960:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8006964:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006968:	4620      	mov	r0, r4
 800696a:	4629      	mov	r1, r5
 800696c:	f7f9 fbf6 	bl	800015c <__adddf3>
 8006970:	e9cd 0100 	strd	r0, r1, [sp]
 8006974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006978:	4622      	mov	r2, r4
 800697a:	462b      	mov	r3, r5
 800697c:	f7f9 fbec 	bl	8000158 <__aeabi_dsub>
 8006980:	e008      	b.n	8006994 <rint+0xe4>
 8006982:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8006986:	dd08      	ble.n	800699a <rint+0xea>
 8006988:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800698c:	d1c9      	bne.n	8006922 <rint+0x72>
 800698e:	4602      	mov	r2, r0
 8006990:	f7f9 fbe4 	bl	800015c <__adddf3>
 8006994:	4604      	mov	r4, r0
 8006996:	460d      	mov	r5, r1
 8006998:	e7c3      	b.n	8006922 <rint+0x72>
 800699a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	40ca      	lsrs	r2, r1
 80069a4:	4210      	tst	r0, r2
 80069a6:	d0bc      	beq.n	8006922 <rint+0x72>
 80069a8:	0852      	lsrs	r2, r2, #1
 80069aa:	4210      	tst	r0, r2
 80069ac:	bf1f      	itttt	ne
 80069ae:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80069b2:	ea20 0202 	bicne.w	r2, r0, r2
 80069b6:	410e      	asrne	r6, r1
 80069b8:	4316      	orrne	r6, r2
 80069ba:	e7cf      	b.n	800695c <rint+0xac>
 80069bc:	08008400 	.word	0x08008400
 80069c0:	000fffff 	.word	0x000fffff
 80069c4:	00000000 	.word	0x00000000

080069c8 <scalbn>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	4616      	mov	r6, r2
 80069cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069d0:	4604      	mov	r4, r0
 80069d2:	460d      	mov	r5, r1
 80069d4:	460b      	mov	r3, r1
 80069d6:	b982      	cbnz	r2, 80069fa <scalbn+0x32>
 80069d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80069dc:	4303      	orrs	r3, r0
 80069de:	d034      	beq.n	8006a4a <scalbn+0x82>
 80069e0:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <scalbn+0xd0>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	f7f9 fd70 	bl	80004c8 <__aeabi_dmul>
 80069e8:	4b2c      	ldr	r3, [pc, #176]	; (8006a9c <scalbn+0xd4>)
 80069ea:	4604      	mov	r4, r0
 80069ec:	429e      	cmp	r6, r3
 80069ee:	460d      	mov	r5, r1
 80069f0:	da0d      	bge.n	8006a0e <scalbn+0x46>
 80069f2:	a325      	add	r3, pc, #148	; (adr r3, 8006a88 <scalbn+0xc0>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	e01c      	b.n	8006a34 <scalbn+0x6c>
 80069fa:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80069fe:	42ba      	cmp	r2, r7
 8006a00:	d109      	bne.n	8006a16 <scalbn+0x4e>
 8006a02:	4602      	mov	r2, r0
 8006a04:	f7f9 fbaa 	bl	800015c <__adddf3>
 8006a08:	4604      	mov	r4, r0
 8006a0a:	460d      	mov	r5, r1
 8006a0c:	e01d      	b.n	8006a4a <scalbn+0x82>
 8006a0e:	460b      	mov	r3, r1
 8006a10:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a14:	3a36      	subs	r2, #54	; 0x36
 8006a16:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006a1a:	4432      	add	r2, r6
 8006a1c:	428a      	cmp	r2, r1
 8006a1e:	dd0c      	ble.n	8006a3a <scalbn+0x72>
 8006a20:	4622      	mov	r2, r4
 8006a22:	462b      	mov	r3, r5
 8006a24:	a11a      	add	r1, pc, #104	; (adr r1, 8006a90 <scalbn+0xc8>)
 8006a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a2a:	f000 f9ef 	bl	8006e0c <copysign>
 8006a2e:	a318      	add	r3, pc, #96	; (adr r3, 8006a90 <scalbn+0xc8>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f7f9 fd48 	bl	80004c8 <__aeabi_dmul>
 8006a38:	e7e6      	b.n	8006a08 <scalbn+0x40>
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	dd08      	ble.n	8006a50 <scalbn+0x88>
 8006a3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a46:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006a54:	da0b      	bge.n	8006a6e <scalbn+0xa6>
 8006a56:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a5a:	429e      	cmp	r6, r3
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	462b      	mov	r3, r5
 8006a60:	dce0      	bgt.n	8006a24 <scalbn+0x5c>
 8006a62:	a109      	add	r1, pc, #36	; (adr r1, 8006a88 <scalbn+0xc0>)
 8006a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a68:	f000 f9d0 	bl	8006e0c <copysign>
 8006a6c:	e7c1      	b.n	80069f2 <scalbn+0x2a>
 8006a6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a72:	3236      	adds	r2, #54	; 0x36
 8006a74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	2200      	movs	r2, #0
 8006a82:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <scalbn+0xd8>)
 8006a84:	e7d6      	b.n	8006a34 <scalbn+0x6c>
 8006a86:	bf00      	nop
 8006a88:	c2f8f359 	.word	0xc2f8f359
 8006a8c:	01a56e1f 	.word	0x01a56e1f
 8006a90:	8800759c 	.word	0x8800759c
 8006a94:	7e37e43c 	.word	0x7e37e43c
 8006a98:	43500000 	.word	0x43500000
 8006a9c:	ffff3cb0 	.word	0xffff3cb0
 8006aa0:	3c900000 	.word	0x3c900000
 8006aa4:	00000000 	.word	0x00000000

08006aa8 <__ieee754_log>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	da24      	bge.n	8006b04 <__ieee754_log+0x5c>
 8006aba:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006abe:	4304      	orrs	r4, r0
 8006ac0:	d108      	bne.n	8006ad4 <__ieee754_log+0x2c>
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	49cb      	ldr	r1, [pc, #812]	; (8006df8 <__ieee754_log+0x350>)
 8006aca:	f7f9 fe27 	bl	800071c <__aeabi_ddiv>
 8006ace:	b007      	add	sp, #28
 8006ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	da04      	bge.n	8006ae2 <__ieee754_log+0x3a>
 8006ad8:	f7f9 fb3e 	bl	8000158 <__aeabi_dsub>
 8006adc:	2200      	movs	r2, #0
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e7f3      	b.n	8006aca <__ieee754_log+0x22>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4bc5      	ldr	r3, [pc, #788]	; (8006dfc <__ieee754_log+0x354>)
 8006ae6:	f7f9 fcef 	bl	80004c8 <__aeabi_dmul>
 8006aea:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	460d      	mov	r5, r1
 8006af4:	49c2      	ldr	r1, [pc, #776]	; (8006e00 <__ieee754_log+0x358>)
 8006af6:	428d      	cmp	r5, r1
 8006af8:	dd06      	ble.n	8006b08 <__ieee754_log+0x60>
 8006afa:	4610      	mov	r0, r2
 8006afc:	4619      	mov	r1, r3
 8006afe:	f7f9 fb2d 	bl	800015c <__adddf3>
 8006b02:	e7e4      	b.n	8006ace <__ieee754_log+0x26>
 8006b04:	2600      	movs	r6, #0
 8006b06:	e7f5      	b.n	8006af4 <__ieee754_log+0x4c>
 8006b08:	152c      	asrs	r4, r5, #20
 8006b0a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006b0e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8006b12:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006b16:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8006b1a:	4426      	add	r6, r4
 8006b1c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8006b20:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8006b24:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8006b28:	ea41 0305 	orr.w	r3, r1, r5
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	2200      	movs	r2, #0
 8006b32:	4bb4      	ldr	r3, [pc, #720]	; (8006e04 <__ieee754_log+0x35c>)
 8006b34:	f7f9 fb10 	bl	8000158 <__aeabi_dsub>
 8006b38:	1cab      	adds	r3, r5, #2
 8006b3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8006b44:	4682      	mov	sl, r0
 8006b46:	468b      	mov	fp, r1
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	dc53      	bgt.n	8006bf6 <__ieee754_log+0x14e>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f7f9 ff22 	bl	8000998 <__aeabi_dcmpeq>
 8006b54:	b1d0      	cbz	r0, 8006b8c <__ieee754_log+0xe4>
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	f000 8120 	beq.w	8006d9c <__ieee754_log+0x2f4>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7f9 fc49 	bl	80003f4 <__aeabi_i2d>
 8006b62:	a391      	add	r3, pc, #580	; (adr r3, 8006da8 <__ieee754_log+0x300>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	4606      	mov	r6, r0
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	f7f9 fcac 	bl	80004c8 <__aeabi_dmul>
 8006b70:	a38f      	add	r3, pc, #572	; (adr r3, 8006db0 <__ieee754_log+0x308>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	f7f9 fca3 	bl	80004c8 <__aeabi_dmul>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	e7b8      	b.n	8006afe <__ieee754_log+0x56>
 8006b8c:	a38a      	add	r3, pc, #552	; (adr r3, 8006db8 <__ieee754_log+0x310>)
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	4650      	mov	r0, sl
 8006b94:	4659      	mov	r1, fp
 8006b96:	f7f9 fc97 	bl	80004c8 <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	4999      	ldr	r1, [pc, #612]	; (8006e08 <__ieee754_log+0x360>)
 8006ba2:	f7f9 fad9 	bl	8000158 <__aeabi_dsub>
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	4606      	mov	r6, r0
 8006baa:	460f      	mov	r7, r1
 8006bac:	465b      	mov	r3, fp
 8006bae:	4650      	mov	r0, sl
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	f7f9 fc89 	bl	80004c8 <__aeabi_dmul>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4630      	mov	r0, r6
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	f7f9 fc83 	bl	80004c8 <__aeabi_dmul>
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460f      	mov	r7, r1
 8006bc6:	b914      	cbnz	r4, 8006bce <__ieee754_log+0x126>
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	e0a0      	b.n	8006d10 <__ieee754_log+0x268>
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7f9 fc10 	bl	80003f4 <__aeabi_i2d>
 8006bd4:	a374      	add	r3, pc, #464	; (adr r3, 8006da8 <__ieee754_log+0x300>)
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4689      	mov	r9, r1
 8006bde:	f7f9 fc73 	bl	80004c8 <__aeabi_dmul>
 8006be2:	a373      	add	r3, pc, #460	; (adr r3, 8006db0 <__ieee754_log+0x308>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	4604      	mov	r4, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	4640      	mov	r0, r8
 8006bee:	4649      	mov	r1, r9
 8006bf0:	f7f9 fc6a 	bl	80004c8 <__aeabi_dmul>
 8006bf4:	e0a5      	b.n	8006d42 <__ieee754_log+0x29a>
 8006bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bfa:	f7f9 faaf 	bl	800015c <__adddf3>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4650      	mov	r0, sl
 8006c04:	4659      	mov	r1, fp
 8006c06:	f7f9 fd89 	bl	800071c <__aeabi_ddiv>
 8006c0a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7f9 fbf0 	bl	80003f4 <__aeabi_i2d>
 8006c14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f7f9 fc52 	bl	80004c8 <__aeabi_dmul>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c2c:	f7f9 fc4c 	bl	80004c8 <__aeabi_dmul>
 8006c30:	a363      	add	r3, pc, #396	; (adr r3, 8006dc0 <__ieee754_log+0x318>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	4680      	mov	r8, r0
 8006c38:	4689      	mov	r9, r1
 8006c3a:	f7f9 fc45 	bl	80004c8 <__aeabi_dmul>
 8006c3e:	a362      	add	r3, pc, #392	; (adr r3, 8006dc8 <__ieee754_log+0x320>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fa8a 	bl	800015c <__adddf3>
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	f7f9 fc3c 	bl	80004c8 <__aeabi_dmul>
 8006c50:	a35f      	add	r3, pc, #380	; (adr r3, 8006dd0 <__ieee754_log+0x328>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fa81 	bl	800015c <__adddf3>
 8006c5a:	4642      	mov	r2, r8
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	f7f9 fc33 	bl	80004c8 <__aeabi_dmul>
 8006c62:	a35d      	add	r3, pc, #372	; (adr r3, 8006dd8 <__ieee754_log+0x330>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fa78 	bl	800015c <__adddf3>
 8006c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c70:	f7f9 fc2a 	bl	80004c8 <__aeabi_dmul>
 8006c74:	a35a      	add	r3, pc, #360	; (adr r3, 8006de0 <__ieee754_log+0x338>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4649      	mov	r1, r9
 8006c82:	f7f9 fc21 	bl	80004c8 <__aeabi_dmul>
 8006c86:	a358      	add	r3, pc, #352	; (adr r3, 8006de8 <__ieee754_log+0x340>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 fa66 	bl	800015c <__adddf3>
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	f7f9 fc18 	bl	80004c8 <__aeabi_dmul>
 8006c98:	a355      	add	r3, pc, #340	; (adr r3, 8006df0 <__ieee754_log+0x348>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fa5d 	bl	800015c <__adddf3>
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	f7f9 fc0f 	bl	80004c8 <__aeabi_dmul>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb2:	f7f9 fa53 	bl	800015c <__adddf3>
 8006cb6:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8006cba:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006cbe:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8006cc2:	3551      	adds	r5, #81	; 0x51
 8006cc4:	4335      	orrs	r5, r6
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	4680      	mov	r8, r0
 8006cca:	4689      	mov	r9, r1
 8006ccc:	dd48      	ble.n	8006d60 <__ieee754_log+0x2b8>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4b4d      	ldr	r3, [pc, #308]	; (8006e08 <__ieee754_log+0x360>)
 8006cd2:	4650      	mov	r0, sl
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	f7f9 fbf7 	bl	80004c8 <__aeabi_dmul>
 8006cda:	4652      	mov	r2, sl
 8006cdc:	465b      	mov	r3, fp
 8006cde:	f7f9 fbf3 	bl	80004c8 <__aeabi_dmul>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fa35 	bl	800015c <__adddf3>
 8006cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cf6:	f7f9 fbe7 	bl	80004c8 <__aeabi_dmul>
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	4689      	mov	r9, r1
 8006cfe:	b964      	cbnz	r4, 8006d1a <__ieee754_log+0x272>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4630      	mov	r0, r6
 8006d06:	4639      	mov	r1, r7
 8006d08:	f7f9 fa26 	bl	8000158 <__aeabi_dsub>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4650      	mov	r0, sl
 8006d12:	4659      	mov	r1, fp
 8006d14:	f7f9 fa20 	bl	8000158 <__aeabi_dsub>
 8006d18:	e6d9      	b.n	8006ace <__ieee754_log+0x26>
 8006d1a:	a323      	add	r3, pc, #140	; (adr r3, 8006da8 <__ieee754_log+0x300>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d24:	f7f9 fbd0 	bl	80004c8 <__aeabi_dmul>
 8006d28:	a321      	add	r3, pc, #132	; (adr r3, 8006db0 <__ieee754_log+0x308>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d36:	f7f9 fbc7 	bl	80004c8 <__aeabi_dmul>
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	f7f9 fa0d 	bl	800015c <__adddf3>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4630      	mov	r0, r6
 8006d48:	4639      	mov	r1, r7
 8006d4a:	f7f9 fa05 	bl	8000158 <__aeabi_dsub>
 8006d4e:	4652      	mov	r2, sl
 8006d50:	465b      	mov	r3, fp
 8006d52:	f7f9 fa01 	bl	8000158 <__aeabi_dsub>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	e7d9      	b.n	8006d14 <__ieee754_log+0x26c>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4650      	mov	r0, sl
 8006d66:	4659      	mov	r1, fp
 8006d68:	f7f9 f9f6 	bl	8000158 <__aeabi_dsub>
 8006d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d70:	f7f9 fbaa 	bl	80004c8 <__aeabi_dmul>
 8006d74:	4606      	mov	r6, r0
 8006d76:	460f      	mov	r7, r1
 8006d78:	2c00      	cmp	r4, #0
 8006d7a:	f43f af25 	beq.w	8006bc8 <__ieee754_log+0x120>
 8006d7e:	a30a      	add	r3, pc, #40	; (adr r3, 8006da8 <__ieee754_log+0x300>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d88:	f7f9 fb9e 	bl	80004c8 <__aeabi_dmul>
 8006d8c:	a308      	add	r3, pc, #32	; (adr r3, 8006db0 <__ieee754_log+0x308>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	4604      	mov	r4, r0
 8006d94:	460d      	mov	r5, r1
 8006d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9a:	e729      	b.n	8006bf0 <__ieee754_log+0x148>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	e695      	b.n	8006ace <__ieee754_log+0x26>
 8006da2:	bf00      	nop
 8006da4:	f3af 8000 	nop.w
 8006da8:	fee00000 	.word	0xfee00000
 8006dac:	3fe62e42 	.word	0x3fe62e42
 8006db0:	35793c76 	.word	0x35793c76
 8006db4:	3dea39ef 	.word	0x3dea39ef
 8006db8:	55555555 	.word	0x55555555
 8006dbc:	3fd55555 	.word	0x3fd55555
 8006dc0:	df3e5244 	.word	0xdf3e5244
 8006dc4:	3fc2f112 	.word	0x3fc2f112
 8006dc8:	96cb03de 	.word	0x96cb03de
 8006dcc:	3fc74664 	.word	0x3fc74664
 8006dd0:	94229359 	.word	0x94229359
 8006dd4:	3fd24924 	.word	0x3fd24924
 8006dd8:	55555593 	.word	0x55555593
 8006ddc:	3fe55555 	.word	0x3fe55555
 8006de0:	d078c69f 	.word	0xd078c69f
 8006de4:	3fc39a09 	.word	0x3fc39a09
 8006de8:	1d8e78af 	.word	0x1d8e78af
 8006dec:	3fcc71c5 	.word	0x3fcc71c5
 8006df0:	9997fa04 	.word	0x9997fa04
 8006df4:	3fd99999 	.word	0x3fd99999
 8006df8:	c3500000 	.word	0xc3500000
 8006dfc:	43500000 	.word	0x43500000
 8006e00:	7fefffff 	.word	0x7fefffff
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	3fe00000 	.word	0x3fe00000

08006e0c <copysign>:
 8006e0c:	b530      	push	{r4, r5, lr}
 8006e0e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e16:	ea42 0503 	orr.w	r5, r2, r3
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	bd30      	pop	{r4, r5, pc}
	...

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
