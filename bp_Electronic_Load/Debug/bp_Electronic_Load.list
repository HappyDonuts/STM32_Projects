
bp_Electronic_Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017b0  080080c8  080080c8  000180c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009878  08009878  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08009878  08009878  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009878  08009878  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800987c  0800987c  0001987c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000088  08009904  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08009904  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee11  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002079  00000000  00000000  0002eebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00030f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015774  00000000  00000000  00032a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac0f  00000000  00000000  000481e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077f7f  00000000  00000000  00052df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cad72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000458c  00000000  00000000  000cadf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	080080b0 	.word	0x080080b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	080080b0 	.word	0x080080b0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x28>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 fd5f 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f003 ffd0 	bl	8004b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fd77 	bl	8001696 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 fd3f 	bl	8001642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000018 	.word	0x20000018
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	20000000 	.word	0x20000000

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000004 	.word	0x20000004
 8000c04:	2000054c 	.word	0x2000054c

08000c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	2000054c 	.word	0x2000054c

08000c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0be      	b.n	8000dbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d109      	bne.n	8000c60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f003 ff8e 	bl	8004b7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fbdd 	bl	8001420 <ADC_ConversionStop_Disable>
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8099 	bne.w	8000daa <HAL_ADC_Init+0x18e>
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8095 	bne.w	8000daa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c88:	f023 0302 	bic.w	r3, r3, #2
 8000c8c:	f043 0202 	orr.w	r2, r3, #2
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
 8000ca2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ca4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb4:	d003      	beq.n	8000cbe <HAL_ADC_Init+0xa2>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d102      	bne.n	8000cc4 <HAL_ADC_Init+0xa8>
 8000cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc2:	e000      	b.n	8000cc6 <HAL_ADC_Init+0xaa>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7d1b      	ldrb	r3, [r3, #20]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d119      	bne.n	8000d08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7b1b      	ldrb	r3, [r3, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	035a      	lsls	r2, r3, #13
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e00b      	b.n	8000d08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	f043 0220 	orr.w	r2, r3, #32
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f043 0201 	orr.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_ADC_Init+0x1a8>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d38:	d003      	beq.n	8000d42 <HAL_ADC_Init+0x126>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d104      	bne.n	8000d4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	051b      	lsls	r3, r3, #20
 8000d4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_ADC_Init+0x1ac>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d10b      	bne.n	8000d88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d86:	e018      	b.n	8000dba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f023 0312 	bic.w	r3, r3, #18
 8000d90:	f043 0210 	orr.w	r2, r3, #16
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	f043 0201 	orr.w	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da8:	e007      	b.n	8000dba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	f043 0210 	orr.w	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	ffe1f7fd 	.word	0xffe1f7fd
 8000dc8:	ff1f0efe 	.word	0xff1f0efe

08000dcc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Start+0x1a>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e098      	b.n	8000f18 <HAL_ADC_Start+0x14c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fac4 	bl	800137c <ADC_Enable>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 8087 	bne.w	8000f0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a41      	ldr	r2, [pc, #260]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d105      	bne.n	8000e2a <HAL_ADC_Start+0x5e>
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d115      	bne.n	8000e56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d026      	beq.n	8000e92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e54:	e01d      	b.n	8000e92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d004      	beq.n	8000e76 <HAL_ADC_Start+0xaa>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_ADC_Start+0xc6>
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	f023 0206 	bic.w	r2, r3, #6
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eaa:	e002      	b.n	8000eb2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f06f 0202 	mvn.w	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ece:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ed2:	d113      	bne.n	8000efc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d105      	bne.n	8000eea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d108      	bne.n	8000efc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	e00c      	b.n	8000f16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	e003      	b.n	8000f16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40012800 	.word	0x40012800
 8000f24:	40012400 	.word	0x40012400

08000f28 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Stop+0x1a>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e01a      	b.n	8000f78 <HAL_ADC_Stop+0x50>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fa68 	bl	8001420 <ADC_ConversionStop_Disable>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	f043 0201 	orr.w	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f96:	f7ff fe37 	bl	8000c08 <HAL_GetTick>
 8000f9a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	f043 0220 	orr.w	r2, r3, #32
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0c8      	b.n	8001154 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d12a      	bne.n	8001026 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d123      	bne.n	8001026 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fde:	e01a      	b.n	8001016 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe6:	d016      	beq.n	8001016 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_PollForConversion+0x7e>
 8000fee:	f7ff fe0b 	bl	8000c08 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d20b      	bcs.n	8001016 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f043 0204 	orr.w	r2, r3, #4
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e09e      	b.n	8001154 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0dd      	beq.n	8000fe0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001024:	e06c      	b.n	8001100 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001026:	4b4d      	ldr	r3, [pc, #308]	; (800115c <HAL_ADC_PollForConversion+0x1dc>)
 8001028:	681c      	ldr	r4, [r3, #0]
 800102a:	2002      	movs	r0, #2
 800102c:	f001 fee0 	bl	8002df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001030:	4603      	mov	r3, r0
 8001032:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6919      	ldr	r1, [r3, #16]
 800103c:	4b48      	ldr	r3, [pc, #288]	; (8001160 <HAL_ADC_PollForConversion+0x1e0>)
 800103e:	400b      	ands	r3, r1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d118      	bne.n	8001076 <HAL_ADC_PollForConversion+0xf6>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68d9      	ldr	r1, [r3, #12]
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_ADC_PollForConversion+0x1e4>)
 800104c:	400b      	ands	r3, r1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d111      	bne.n	8001076 <HAL_ADC_PollForConversion+0xf6>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6919      	ldr	r1, [r3, #16]
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_ADC_PollForConversion+0x1e8>)
 800105a:	400b      	ands	r3, r1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d108      	bne.n	8001072 <HAL_ADC_PollForConversion+0xf2>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68d9      	ldr	r1, [r3, #12]
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_ADC_PollForConversion+0x1ec>)
 8001068:	400b      	ands	r3, r1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_PollForConversion+0xf2>
 800106e:	2314      	movs	r3, #20
 8001070:	e020      	b.n	80010b4 <HAL_ADC_PollForConversion+0x134>
 8001072:	2329      	movs	r3, #41	; 0x29
 8001074:	e01e      	b.n	80010b4 <HAL_ADC_PollForConversion+0x134>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6919      	ldr	r1, [r3, #16]
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <HAL_ADC_PollForConversion+0x1e8>)
 800107e:	400b      	ands	r3, r1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <HAL_ADC_PollForConversion+0x112>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_ADC_PollForConversion+0x1ec>)
 800108c:	400b      	ands	r3, r1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <HAL_ADC_PollForConversion+0x12e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6919      	ldr	r1, [r3, #16]
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_ADC_PollForConversion+0x1f0>)
 800109a:	400b      	ands	r3, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d108      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x132>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68d9      	ldr	r1, [r3, #12]
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_ADC_PollForConversion+0x1f0>)
 80010a8:	400b      	ands	r3, r1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x132>
 80010ae:	2354      	movs	r3, #84	; 0x54
 80010b0:	e000      	b.n	80010b4 <HAL_ADC_PollForConversion+0x134>
 80010b2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010ba:	e01d      	b.n	80010f8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c2:	d016      	beq.n	80010f2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_ADC_PollForConversion+0x15a>
 80010ca:	f7ff fd9d 	bl	8000c08 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d20b      	bcs.n	80010f2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f043 0204 	orr.w	r2, r3, #4
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e030      	b.n	8001154 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8dd      	bhi.n	80010bc <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0212 	mvn.w	r2, #18
 8001108:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001120:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001124:	d115      	bne.n	8001152 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800112a:	2b00      	cmp	r3, #0
 800112c:	d111      	bne.n	8001152 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	20000018 	.word	0x20000018
 8001160:	24924924 	.word	0x24924924
 8001164:	00924924 	.word	0x00924924
 8001168:	12492492 	.word	0x12492492
 800116c:	00492492 	.word	0x00492492
 8001170:	00249249 	.word	0x00249249

08001174 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x20>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e0dc      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1da>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d81c      	bhi.n	80011f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b05      	subs	r3, #5
 80011ce:	221f      	movs	r2, #31
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b05      	subs	r3, #5
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
 80011f4:	e03c      	b.n	8001270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d81c      	bhi.n	8001238 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b23      	subs	r3, #35	; 0x23
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	4019      	ands	r1, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b23      	subs	r3, #35	; 0x23
 800122a:	fa00 f203 	lsl.w	r2, r0, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
 8001236:	e01b      	b.n	8001270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3b41      	subs	r3, #65	; 0x41
 800124a:	221f      	movs	r2, #31
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	3b41      	subs	r3, #65	; 0x41
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b09      	cmp	r3, #9
 8001276:	d91c      	bls.n	80012b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68d9      	ldr	r1, [r3, #12]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	3b1e      	subs	r3, #30
 800128a:	2207      	movs	r2, #7
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	4019      	ands	r1, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6898      	ldr	r0, [r3, #8]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	3b1e      	subs	r3, #30
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	e019      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4019      	ands	r1, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6898      	ldr	r0, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012f2:	2b11      	cmp	r3, #17
 80012f4:	d132      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_ADC_ConfigChannel+0x1e4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d125      	bne.n	800134c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d126      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800131c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b10      	cmp	r3, #16
 8001324:	d11a      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_ADC_ConfigChannel+0x1e8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_ADC_ConfigChannel+0x1ec>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9a      	lsrs	r2, r3, #18
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133c:	e002      	b.n	8001344 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <HAL_ADC_ConfigChannel+0x1b2>
 800134a:	e007      	b.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40012400 	.word	0x40012400
 8001374:	20000018 	.word	0x20000018
 8001378:	431bde83 	.word	0x431bde83

0800137c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b01      	cmp	r3, #1
 8001398:	d039      	beq.n	800140e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <ADC_Enable+0x9c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <ADC_Enable+0xa0>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013b8:	e002      	b.n	80013c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f9      	bne.n	80013ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013c6:	f7ff fc1f 	bl	8000c08 <HAL_GetTick>
 80013ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013cc:	e018      	b.n	8001400 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013ce:	f7ff fc1b 	bl	8000c08 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d911      	bls.n	8001400 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f043 0210 	orr.w	r2, r3, #16
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e007      	b.n	8001410 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d1df      	bne.n	80013ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000018 	.word	0x20000018
 800141c:	431bde83 	.word	0x431bde83

08001420 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d127      	bne.n	800148a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800144a:	f7ff fbdd 	bl	8000c08 <HAL_GetTick>
 800144e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001450:	e014      	b.n	800147c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001452:	f7ff fbd9 	bl	8000c08 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d90d      	bls.n	800147c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f043 0210 	orr.w	r2, r3, #16
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e007      	b.n	800148c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b01      	cmp	r3, #1
 8001488:	d0e3      	beq.n	8001452 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4906      	ldr	r1, [pc, #24]	; (800152c <__NVIC_EnableIRQ+0x34>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff90 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff2d 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff42 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff90 	bl	8001584 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5f 	bl	8001530 <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff35 	bl	80014f8 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b08b      	sub	sp, #44	; 0x2c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e127      	b.n	8001914 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016c4:	2201      	movs	r2, #1
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8116 	bne.w	800190e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d034      	beq.n	8001754 <HAL_GPIO_Init+0xa4>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d80d      	bhi.n	800170a <HAL_GPIO_Init+0x5a>
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x9a>
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d804      	bhi.n	8001700 <HAL_GPIO_Init+0x50>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d031      	beq.n	800175e <HAL_GPIO_Init+0xae>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d01c      	beq.n	8001738 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e048      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001700:	2b03      	cmp	r3, #3
 8001702:	d043      	beq.n	800178c <HAL_GPIO_Init+0xdc>
 8001704:	2b11      	cmp	r3, #17
 8001706:	d01b      	beq.n	8001740 <HAL_GPIO_Init+0x90>
          break;
 8001708:	e043      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800170a:	4a89      	ldr	r2, [pc, #548]	; (8001930 <HAL_GPIO_Init+0x280>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d026      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001710:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_GPIO_Init+0x280>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d806      	bhi.n	8001724 <HAL_GPIO_Init+0x74>
 8001716:	4a87      	ldr	r2, [pc, #540]	; (8001934 <HAL_GPIO_Init+0x284>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d020      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800171c:	4a86      	ldr	r2, [pc, #536]	; (8001938 <HAL_GPIO_Init+0x288>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001722:	e036      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001724:	4a85      	ldr	r2, [pc, #532]	; (800193c <HAL_GPIO_Init+0x28c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d019      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800172a:	4a85      	ldr	r2, [pc, #532]	; (8001940 <HAL_GPIO_Init+0x290>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d016      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001730:	4a84      	ldr	r2, [pc, #528]	; (8001944 <HAL_GPIO_Init+0x294>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001736:	e02c      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e028      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e023      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e01e      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e019      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001766:	2304      	movs	r3, #4
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e012      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]
          break;
 800177e:	e008      	b.n	8001792 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	615a      	str	r2, [r3, #20]
          break;
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d801      	bhi.n	800179c <HAL_GPIO_Init+0xec>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e001      	b.n	80017a0 <HAL_GPIO_Init+0xf0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d802      	bhi.n	80017ae <HAL_GPIO_Init+0xfe>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x104>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3b08      	subs	r3, #8
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	210f      	movs	r1, #15
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	6a39      	ldr	r1, [r7, #32]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8096 	beq.w	800190e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017fa:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_GPIO_Init+0x29c>)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x19e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2a4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x19a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_GPIO_Init+0x2a8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x196>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_GPIO_Init+0x2ac>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x192>
 800183e:	2303      	movs	r3, #3
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001842:	2304      	movs	r3, #4
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184e:	2300      	movs	r3, #0
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001860:	493a      	ldr	r1, [pc, #232]	; (800194c <HAL_GPIO_Init+0x29c>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4938      	ldr	r1, [pc, #224]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	4933      	ldr	r1, [pc, #204]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001892:	4013      	ands	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	492e      	ldr	r1, [pc, #184]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4929      	ldr	r1, [pc, #164]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	491f      	ldr	r1, [pc, #124]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	491a      	ldr	r1, [pc, #104]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4915      	ldr	r1, [pc, #84]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f aed0 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	372c      	adds	r7, #44	; 0x2c
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	10210000 	.word	0x10210000
 8001934:	10110000 	.word	0x10110000
 8001938:	10120000 	.word	0x10120000
 800193c:	10310000 	.word	0x10310000
 8001940:	10320000 	.word	0x10320000
 8001944:	10220000 	.word	0x10220000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e10f      	b.n	8001bf6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f003 f902 	bl	8004bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a08:	f001 f8f6 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8001a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a7b      	ldr	r2, [pc, #492]	; (8001c00 <HAL_I2C_Init+0x23c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d807      	bhi.n	8001a28 <HAL_I2C_Init+0x64>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4a7a      	ldr	r2, [pc, #488]	; (8001c04 <HAL_I2C_Init+0x240>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e006      	b.n	8001a36 <HAL_I2C_Init+0x72>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a77      	ldr	r2, [pc, #476]	; (8001c08 <HAL_I2C_Init+0x244>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf94      	ite	ls
 8001a30:	2301      	movls	r3, #1
 8001a32:	2300      	movhi	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0db      	b.n	8001bf6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <HAL_I2C_Init+0x248>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a64      	ldr	r2, [pc, #400]	; (8001c00 <HAL_I2C_Init+0x23c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d802      	bhi.n	8001a78 <HAL_I2C_Init+0xb4>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3301      	adds	r3, #1
 8001a76:	e009      	b.n	8001a8c <HAL_I2C_Init+0xc8>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	4a63      	ldr	r2, [pc, #396]	; (8001c10 <HAL_I2C_Init+0x24c>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4956      	ldr	r1, [pc, #344]	; (8001c00 <HAL_I2C_Init+0x23c>)
 8001aa8:	428b      	cmp	r3, r1
 8001aaa:	d80d      	bhi.n	8001ac8 <HAL_I2C_Init+0x104>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e59      	subs	r1, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	bf38      	it	cc
 8001ac4:	2304      	movcc	r3, #4
 8001ac6:	e04f      	b.n	8001b68 <HAL_I2C_Init+0x1a4>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d111      	bne.n	8001af4 <HAL_I2C_Init+0x130>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	440b      	add	r3, r1
 8001ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e012      	b.n	8001b1a <HAL_I2C_Init+0x156>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Init+0x15e>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e022      	b.n	8001b68 <HAL_I2C_Init+0x1a4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10e      	bne.n	8001b48 <HAL_I2C_Init+0x184>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1e58      	subs	r0, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6859      	ldr	r1, [r3, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	440b      	add	r3, r1
 8001b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b46:	e00f      	b.n	8001b68 <HAL_I2C_Init+0x1a4>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	6809      	ldr	r1, [r1, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6911      	ldr	r1, [r2, #16]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68d2      	ldr	r2, [r2, #12]
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	000186a0 	.word	0x000186a0
 8001c04:	001e847f 	.word	0x001e847f
 8001c08:	003d08ff 	.word	0x003d08ff
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	817b      	strh	r3, [r7, #10]
 8001c24:	4613      	mov	r3, r2
 8001c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7fe ffee 	bl	8000c08 <HAL_GetTick>
 8001c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	f040 80e0 	bne.w	8001dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2319      	movs	r3, #25
 8001c42:	2201      	movs	r2, #1
 8001c44:	4970      	ldr	r1, [pc, #448]	; (8001e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa7a 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0d3      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2C_Master_Transmit+0x50>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0cc      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d007      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2221      	movs	r2, #33	; 0x21
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	893a      	ldrh	r2, [r7, #8]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f9be 	bl	8002054 <I2C_MasterRequestWrite>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e08d      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cf8:	e066      	b.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	6a39      	ldr	r1, [r7, #32]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 faf4 	bl	80022ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11b      	bne.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d017      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fae4 	bl	800236e <I2C_WaitOnBTFFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e01a      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d194      	bne.n	8001cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	00100002 	.word	0x00100002
 8001e0c:	ffff0000 	.word	0xffff0000

08001e10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7fe fef2 	bl	8000c08 <HAL_GetTick>
 8001e24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	f040 8105 	bne.w	8002042 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2319      	movs	r3, #25
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4982      	ldr	r1, [pc, #520]	; (800204c <HAL_I2C_IsDeviceReady+0x23c>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f97c 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0f8      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2C_IsDeviceReady+0x50>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0f1      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d007      	beq.n	8001e86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2224      	movs	r2, #36	; 0x24
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_I2C_IsDeviceReady+0x240>)
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f93a 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0b6      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe fe8f 	bl	8000c08 <HAL_GetTick>
 8001eea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f1a:	e025      	b.n	8001f68 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f1c:	f7fe fe74 	bl	8000c08 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d302      	bcc.n	8001f32 <HAL_I2C_IsDeviceReady+0x122>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	22a0      	movs	r2, #160	; 0xa0
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2ba0      	cmp	r3, #160	; 0xa0
 8001f72:	d005      	beq.n	8001f80 <HAL_I2C_IsDeviceReady+0x170>
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_I2C_IsDeviceReady+0x170>
 8001f7a:	7dbb      	ldrb	r3, [r7, #22]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0cd      	beq.n	8001f1c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d129      	bne.n	8001fea <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2319      	movs	r3, #25
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4921      	ldr	r1, [pc, #132]	; (800204c <HAL_I2C_IsDeviceReady+0x23c>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f8ba 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e036      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e02c      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002002:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2319      	movs	r3, #25
 800200a:	2201      	movs	r2, #1
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_I2C_IsDeviceReady+0x23c>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f896 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e012      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	3301      	adds	r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	f4ff af3e 	bcc.w	8001eaa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002042:	2302      	movs	r3, #2
  }
}
 8002044:	4618      	mov	r0, r3
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000

08002054 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	460b      	mov	r3, r1
 8002062:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d006      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d003      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800207c:	d108      	bne.n	8002090 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e00b      	b.n	80020a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2b12      	cmp	r3, #18
 8002096:	d107      	bne.n	80020a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f843 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e035      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020cc:	d108      	bne.n	80020e0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	e01b      	b.n	8002118 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	11db      	asrs	r3, r3, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0306 	and.w	r3, r3, #6
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f063 030f 	orn	r3, r3, #15
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <I2C_MasterRequestWrite+0xe4>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f875 	bl	80021ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e010      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <I2C_MasterRequestWrite+0xe8>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f865 	bl	80021ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00010008 	.word	0x00010008
 800213c:	00010002 	.word	0x00010002

08002140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002150:	e025      	b.n	800219e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d021      	beq.n	800219e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215a:	f7fe fd55 	bl	8000c08 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d116      	bne.n	800219e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e023      	b.n	80021e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10d      	bne.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4013      	ands	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	e00c      	b.n	80021de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4013      	ands	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d0b6      	beq.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021fc:	e051      	b.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220c:	d123      	bne.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f043 0204 	orr.w	r2, r3, #4
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e046      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d021      	beq.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225e:	f7fe fcd3 	bl	8000c08 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d116      	bne.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e020      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10c      	bne.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4013      	ands	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	e00b      	b.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	43da      	mvns	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4013      	ands	r3, r2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d18d      	bne.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f8:	e02d      	b.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f878 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e02d      	b.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d021      	beq.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe fc79 	bl	8000c08 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d116      	bne.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e007      	b.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d1ca      	bne.n	80022fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800237a:	e02d      	b.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f837 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e02d      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d021      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002394:	f7fe fc38 	bl	8000c08 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d302      	bcc.n	80023aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d1ca      	bne.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d11b      	bne.n	8002440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e26c      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8087 	beq.w	800257a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800246c:	4b92      	ldr	r3, [pc, #584]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b04      	cmp	r3, #4
 8002476:	d00c      	beq.n	8002492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002478:	4b8f      	ldr	r3, [pc, #572]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d112      	bne.n	80024aa <HAL_RCC_OscConfig+0x5e>
 8002484:	4b8c      	ldr	r3, [pc, #560]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d10b      	bne.n	80024aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002492:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d06c      	beq.n	8002578 <HAL_RCC_OscConfig+0x12c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d168      	bne.n	8002578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e246      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x76>
 80024b4:	4b80      	ldr	r3, [pc, #512]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7f      	ldr	r2, [pc, #508]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e02e      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x98>
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7a      	ldr	r2, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b78      	ldr	r3, [pc, #480]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a77      	ldr	r2, [pc, #476]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0xbc>
 80024ee:	4b72      	ldr	r3, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a71      	ldr	r2, [pc, #452]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6e      	ldr	r2, [pc, #440]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 8002508:	4b6b      	ldr	r3, [pc, #428]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6a      	ldr	r2, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a67      	ldr	r2, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fb6e 	bl	8000c08 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fb6a 	bl	8000c08 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1fa      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xe4>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fb5a 	bl	8000c08 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fb56 	bl	8000c08 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1e6      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x10c>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002586:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002592:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x18c>
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x176>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1ba      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4939      	ldr	r1, [pc, #228]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	e03a      	b.n	800264e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCC_OscConfig+0x270>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fb0f 	bl	8000c08 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fb0b 	bl	8000c08 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e19b      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4927      	ldr	r1, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_RCC_OscConfig+0x270>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe faee 	bl	8000c08 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002630:	f7fe faea 	bl	8000c08 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e17a      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d03a      	beq.n	80026d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d019      	beq.n	8002696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7fe face 	bl	8000c08 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe faca 	bl	8000c08 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e15a      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800268e:	2001      	movs	r0, #1
 8002690:	f000 fada 	bl	8002c48 <RCC_Delay>
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7fe fab4 	bl	8000c08 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a2:	e00f      	b.n	80026c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe fab0 	bl	8000c08 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d908      	bls.n	80026c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e140      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	42420000 	.word	0x42420000
 80026c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	4b9e      	ldr	r3, [pc, #632]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e9      	bne.n	80026a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a6 	beq.w	800282a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e2:	4b97      	ldr	r3, [pc, #604]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	4b94      	ldr	r3, [pc, #592]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a93      	ldr	r2, [pc, #588]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]
 80026fa:	4b91      	ldr	r3, [pc, #580]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d118      	bne.n	8002748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b8b      	ldr	r3, [pc, #556]	; (8002944 <HAL_RCC_OscConfig+0x4f8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a8a      	ldr	r2, [pc, #552]	; (8002944 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe fa71 	bl	8000c08 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7fe fa6d 	bl	8000c08 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0fd      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_OscConfig+0x4f8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x312>
 8002750:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a7a      	ldr	r2, [pc, #488]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	e02d      	b.n	80027ba <HAL_RCC_OscConfig+0x36e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x334>
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a75      	ldr	r2, [pc, #468]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b73      	ldr	r3, [pc, #460]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a72      	ldr	r2, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	e01c      	b.n	80027ba <HAL_RCC_OscConfig+0x36e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b05      	cmp	r3, #5
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x356>
 8002788:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a6c      	ldr	r2, [pc, #432]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a69      	ldr	r2, [pc, #420]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	e00b      	b.n	80027ba <HAL_RCC_OscConfig+0x36e>
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a66      	ldr	r2, [pc, #408]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	4b64      	ldr	r3, [pc, #400]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4a63      	ldr	r2, [pc, #396]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fa21 	bl	8000c08 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe fa1d 	bl	8000c08 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0ab      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	4b57      	ldr	r3, [pc, #348]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ee      	beq.n	80027ca <HAL_RCC_OscConfig+0x37e>
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fa0b 	bl	8000c08 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fa07 	bl	8000c08 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e095      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ee      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4b48      	ldr	r3, [pc, #288]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4a47      	ldr	r2, [pc, #284]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8081 	beq.w	8002936 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002834:	4b42      	ldr	r3, [pc, #264]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d061      	beq.n	8002904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d146      	bne.n	80028d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x4fc>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe f9db 	bl	8000c08 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe f9d7 	bl	8000c08 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e067      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d108      	bne.n	8002890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	492d      	ldr	r1, [pc, #180]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a19      	ldr	r1, [r3, #32]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	430b      	orrs	r3, r1
 80028a2:	4927      	ldr	r1, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_OscConfig+0x4fc>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe f9ab 	bl	8000c08 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe f9a7 	bl	8000c08 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e037      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x46a>
 80028d4:	e02f      	b.n	8002936 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <HAL_RCC_OscConfig+0x4fc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe f994 	bl	8000c08 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe f990 	bl	8000c08 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e020      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x498>
 8002902:	e018      	b.n	8002936 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e013      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_OscConfig+0x4f4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	42420060 	.word	0x42420060

0800294c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0d0      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d910      	bls.n	8002990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	4965      	ldr	r1, [pc, #404]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	494d      	ldr	r1, [pc, #308]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d040      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d115      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e073      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06b      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4936      	ldr	r1, [pc, #216]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe f8e4 	bl	8000c08 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f7fe f8e0 	bl	8000c08 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e053      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 020c 	and.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1eb      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d210      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4922      	ldr	r1, [pc, #136]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4916      	ldr	r1, [pc, #88]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ada:	f000 f821 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	fa21 f303 	lsr.w	r3, r1, r3
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1cc>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1d0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f842 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40021000 	.word	0x40021000
 8002b14:	080095d0 	.word	0x080095d0
 8002b18:	20000018 	.word	0x20000018
 8002b1c:	20000000 	.word	0x20000000

08002b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	b490      	push	{r4, r7}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b28:	1d3c      	adds	r4, r7, #4
 8002b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x40>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x46>
 8002b5e:	e02d      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b62:	623b      	str	r3, [r7, #32]
      break;
 8002b64:	e02d      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	0c9b      	lsrs	r3, r3, #18
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b72:	4413      	add	r3, r2
 8002b74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0c5b      	lsrs	r3, r3, #17
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b92:	4413      	add	r3, r2
 8002b94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b9e:	fb02 f203 	mul.w	r2, r2, r3
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8002baa:	e004      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	623b      	str	r3, [r7, #32]
      break;
 8002bba:	e002      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bbe:	623b      	str	r3, [r7, #32]
      break;
 8002bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc90      	pop	{r4, r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	080080c8 	.word	0x080080c8
 8002bd4:	080080d8 	.word	0x080080d8
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	007a1200 	.word	0x007a1200
 8002be0:	003d0900 	.word	0x003d0900

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000018 	.word	0x20000018

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bfc:	f7ff fff2 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c00:	4601      	mov	r1, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4a03      	ldr	r2, [pc, #12]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080095e0 	.word	0x080095e0

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c24:	f7ff ffde 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c28:	4601      	mov	r1, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0adb      	lsrs	r3, r3, #11
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4a03      	ldr	r2, [pc, #12]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	080095e0 	.word	0x080095e0

08002c48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <RCC_Delay+0x34>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <RCC_Delay+0x38>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a5b      	lsrs	r3, r3, #9
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c64:	bf00      	nop
  }
  while (Delay --);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f9      	bne.n	8002c64 <RCC_Delay+0x1c>
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000018 	.word	0x20000018
 8002c80:	10624dd3 	.word	0x10624dd3

08002c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d07d      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4a4b      	ldr	r2, [pc, #300]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cba:	61d3      	str	r3, [r2, #28]
 8002cbc:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d118      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a42      	ldr	r2, [pc, #264]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce4:	f7fd ff90 	bl	8000c08 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	e008      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fd ff8c 	bl	8000c08 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e06d      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02e      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d027      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d28:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d38:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d3e:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d014      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fd ff5b 	bl	8000c08 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fd ff57 	bl	8000c08 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e036      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4917      	ldr	r1, [pc, #92]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	490b      	ldr	r1, [pc, #44]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4904      	ldr	r1, [pc, #16]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42420440 	.word	0x42420440

08002df0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b08d      	sub	sp, #52	; 0x34
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002df8:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002dfa:	f107 040c 	add.w	r4, r7, #12
 8002dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d07f      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d002      	beq.n	8002e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d048      	beq.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e2c:	e08b      	b.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e34:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d07f      	beq.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	0c9b      	lsrs	r3, r3, #18
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e52:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	0c5b      	lsrs	r3, r3, #17
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e7e:	4a37      	ldr	r2, [pc, #220]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8e:	e004      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e9a:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea6:	d102      	bne.n	8002eae <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002eac:	e048      	b.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ebc:	e040      	b.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ece:	d108      	bne.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee0:	e01f      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d109      	bne.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002efa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f00:	e00f      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f0c:	d11a      	bne.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002f1a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f20:	e010      	b.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f22:	e00f      	b.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f24:	f7ff fe7c 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	0b9b      	lsrs	r3, r3, #14
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	3301      	adds	r3, #1
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f3e:	e002      	b.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f40:	bf00      	nop
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f44:	bf00      	nop
    }
  }
  return (frequency);
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3734      	adds	r7, #52	; 0x34
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}
 8002f50:	080080dc 	.word	0x080080dc
 8002f54:	080080ec 	.word	0x080080ec
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	003d0900 	.word	0x003d0900
 8002f64:	aaaaaaab 	.word	0xaaaaaaab

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e01d      	b.n	8002fb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f001 fe6e 	bl	8004c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fa10 	bl	80033cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d007      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0202 	mvn.w	r2, #2
 8003030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9a4 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f997 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f9a6 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d122      	bne.n	80030b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0204 	mvn.w	r2, #4
 8003084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f97a 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f96d 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f97c 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d122      	bne.n	8003108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d11b      	bne.n	8003108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0208 	mvn.w	r2, #8
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2204      	movs	r2, #4
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f950 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f943 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f952 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b10      	cmp	r3, #16
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0210 	mvn.w	r2, #16
 800312c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2208      	movs	r2, #8
 8003132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f926 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f919 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f928 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0201 	mvn.w	r2, #1
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 ff48 	bl	8004018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa51 	bl	8003656 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8ec 	bl	80033b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d10e      	bne.n	800320c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d107      	bne.n	800320c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0220 	mvn.w	r2, #32
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa1c 	bl	8003644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_TIM_ConfigClockSource+0x18>
 8003228:	2302      	movs	r3, #2
 800322a:	e0a6      	b.n	800337a <HAL_TIM_ConfigClockSource+0x166>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800324a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d067      	beq.n	8003334 <HAL_TIM_ConfigClockSource+0x120>
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d80b      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x6c>
 8003268:	2b10      	cmp	r3, #16
 800326a:	d073      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0x140>
 800326c:	2b10      	cmp	r3, #16
 800326e:	d802      	bhi.n	8003276 <HAL_TIM_ConfigClockSource+0x62>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d06f      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003274:	e078      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003276:	2b20      	cmp	r3, #32
 8003278:	d06c      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0x140>
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d06a      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800327e:	e073      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003280:	2b70      	cmp	r3, #112	; 0x70
 8003282:	d00d      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0x8c>
 8003284:	2b70      	cmp	r3, #112	; 0x70
 8003286:	d804      	bhi.n	8003292 <HAL_TIM_ConfigClockSource+0x7e>
 8003288:	2b50      	cmp	r3, #80	; 0x50
 800328a:	d033      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0xe0>
 800328c:	2b60      	cmp	r3, #96	; 0x60
 800328e:	d041      	beq.n	8003314 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003290:	e06a      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003296:	d066      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x152>
 8003298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329c:	d017      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800329e:	e063      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6899      	ldr	r1, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f000 f965 	bl	800357e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	609a      	str	r2, [r3, #8]
      break;
 80032cc:	e04c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f000 f94e 	bl	800357e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f0:	609a      	str	r2, [r3, #8]
      break;
 80032f2:	e039      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	461a      	mov	r2, r3
 8003302:	f000 f8c5 	bl	8003490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2150      	movs	r1, #80	; 0x50
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f91c 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003312:	e029      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	461a      	mov	r2, r3
 8003322:	f000 f8e3 	bl	80034ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2160      	movs	r1, #96	; 0x60
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f90c 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003332:	e019      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	461a      	mov	r2, r3
 8003342:	f000 f8a5 	bl	8003490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2140      	movs	r1, #64	; 0x40
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f8fc 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003352:	e009      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4619      	mov	r1, r3
 800335e:	4610      	mov	r0, r2
 8003360:	f000 f8f3 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003364:	e000      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
	...

080033cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a29      	ldr	r2, [pc, #164]	; (8003484 <TIM_Base_SetConfig+0xb8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <TIM_Base_SetConfig+0x30>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0x30>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a26      	ldr	r2, [pc, #152]	; (8003488 <TIM_Base_SetConfig+0xbc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0x30>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a25      	ldr	r2, [pc, #148]	; (800348c <TIM_Base_SetConfig+0xc0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <TIM_Base_SetConfig+0xb8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_Base_SetConfig+0x62>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d007      	beq.n	800342e <TIM_Base_SetConfig+0x62>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <TIM_Base_SetConfig+0xbc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_Base_SetConfig+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a18      	ldr	r2, [pc, #96]	; (800348c <TIM_Base_SetConfig+0xc0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a07      	ldr	r2, [pc, #28]	; (8003484 <TIM_Base_SetConfig+0xb8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d103      	bne.n	8003474 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	615a      	str	r2, [r3, #20]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800

08003490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f023 0201 	bic.w	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f023 030a 	bic.w	r3, r3, #10
 80034cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f023 0210 	bic.w	r2, r3, #16
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003516:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	031b      	lsls	r3, r3, #12
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003528:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	f043 0307 	orr.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800357e:	b480      	push	{r7}
 8003580:	b087      	sub	sp, #28
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003598:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	609a      	str	r2, [r3, #8]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e032      	b.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4313      	orrs	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800366c:	f7fd fa74 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003670:	f000 f820 	bl	80036b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003674:	f000 f97a 	bl	800396c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003678:	f000 f872 	bl	8003760 <MX_ADC1_Init>
  MX_I2C1_Init();
 800367c:	f000 f8ae 	bl	80037dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8003680:	f000 f8da 	bl	8003838 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003684:	f000 f924 	bl	80038d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  set_oled_addr(0x78);
 8003688:	2078      	movs	r0, #120	; 0x78
 800368a:	f000 fd27 	bl	80040dc <set_oled_addr>
  ssd1306_sel_I2C(&hi2c1);
 800368e:	4806      	ldr	r0, [pc, #24]	; (80036a8 <main+0x40>)
 8003690:	f001 f9b8 	bl	8004a04 <ssd1306_sel_I2C>
  SSD1306_Init ();
 8003694:	f000 fd32 	bl	80040fc <SSD1306_Init>

//  HAL_ADCEx_Calibration_Start(&hadc1);

  HAL_TIM_Base_Start_IT(&htim2);
 8003698:	4804      	ldr	r0, [pc, #16]	; (80036ac <main+0x44>)
 800369a:	f7ff fc90 	bl	8002fbe <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800369e:	4804      	ldr	r0, [pc, #16]	; (80036b0 <main+0x48>)
 80036a0:	f7ff fc8d 	bl	8002fbe <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <main+0x3c>
 80036a6:	bf00      	nop
 80036a8:	200006e0 	.word	0x200006e0
 80036ac:	200007a4 	.word	0x200007a4
 80036b0:	20000734 	.word	0x20000734

080036b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b094      	sub	sp, #80	; 0x50
 80036b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036be:	2228      	movs	r2, #40	; 0x28
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fc0d 	bl	8004ee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036e4:	2302      	movs	r3, #2
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036e8:	2301      	movs	r3, #1
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036ec:	2310      	movs	r3, #16
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036f0:	2302      	movs	r3, #2
 80036f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80036f4:	2300      	movs	r3, #0
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80036f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fea2 	bl	800244c <HAL_RCC_OscConfig>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800370e:	f000 fcdf 	bl	80040d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003712:	230f      	movs	r3, #15
 8003714:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003716:	2302      	movs	r3, #2
 8003718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f90d 	bl	800294c <HAL_RCC_ClockConfig>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003738:	f000 fcca 	bl	80040d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800373c:	2302      	movs	r3, #2
 800373e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fa9c 	bl	8002c84 <HAL_RCCEx_PeriphCLKConfig>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003752:	f000 fcbd 	bl	80040d0 <Error_Handler>
  }
}
 8003756:	bf00      	nop
 8003758:	3750      	adds	r7, #80	; 0x50
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <MX_ADC1_Init+0x74>)
 8003772:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <MX_ADC1_Init+0x78>)
 8003774:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <MX_ADC1_Init+0x74>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <MX_ADC1_Init+0x74>)
 800377e:	2200      	movs	r2, #0
 8003780:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <MX_ADC1_Init+0x74>)
 8003784:	2200      	movs	r2, #0
 8003786:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <MX_ADC1_Init+0x74>)
 800378a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800378e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <MX_ADC1_Init+0x74>)
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <MX_ADC1_Init+0x74>)
 8003798:	2201      	movs	r2, #1
 800379a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800379c:	480d      	ldr	r0, [pc, #52]	; (80037d4 <MX_ADC1_Init+0x74>)
 800379e:	f7fd fa3d 	bl	8000c1c <HAL_ADC_Init>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80037a8:	f000 fc92 	bl	80040d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037b0:	2301      	movs	r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4805      	ldr	r0, [pc, #20]	; (80037d4 <MX_ADC1_Init+0x74>)
 80037be:	f7fd fce5 	bl	800118c <HAL_ADC_ConfigChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80037c8:	f000 fc82 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000774 	.word	0x20000774
 80037d8:	40012400 	.word	0x40012400

080037dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <MX_I2C1_Init+0x50>)
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <MX_I2C1_Init+0x54>)
 80037e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <MX_I2C1_Init+0x50>)
 80037e8:	4a12      	ldr	r2, [pc, #72]	; (8003834 <MX_I2C1_Init+0x58>)
 80037ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MX_I2C1_Init+0x50>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <MX_I2C1_Init+0x50>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <MX_I2C1_Init+0x50>)
 80037fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <MX_I2C1_Init+0x50>)
 8003802:	2200      	movs	r2, #0
 8003804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <MX_I2C1_Init+0x50>)
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800380c:	4b07      	ldr	r3, [pc, #28]	; (800382c <MX_I2C1_Init+0x50>)
 800380e:	2200      	movs	r2, #0
 8003810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <MX_I2C1_Init+0x50>)
 8003814:	2200      	movs	r2, #0
 8003816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <MX_I2C1_Init+0x50>)
 800381a:	f7fe f8d3 	bl	80019c4 <HAL_I2C_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003824:	f000 fc54 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	200006e0 	.word	0x200006e0
 8003830:	40005400 	.word	0x40005400
 8003834:	00061a80 	.word	0x00061a80

08003838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	f107 0308 	add.w	r3, r7, #8
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	463b      	mov	r3, r7
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <MX_TIM2_Init+0x94>)
 8003856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800385a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <MX_TIM2_Init+0x94>)
 800385e:	229f      	movs	r2, #159	; 0x9f
 8003860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <MX_TIM2_Init+0x94>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8003868:	4b18      	ldr	r3, [pc, #96]	; (80038cc <MX_TIM2_Init+0x94>)
 800386a:	2263      	movs	r2, #99	; 0x63
 800386c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <MX_TIM2_Init+0x94>)
 8003870:	2200      	movs	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <MX_TIM2_Init+0x94>)
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800387a:	4814      	ldr	r0, [pc, #80]	; (80038cc <MX_TIM2_Init+0x94>)
 800387c:	f7ff fb74 	bl	8002f68 <HAL_TIM_Base_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003886:	f000 fc23 	bl	80040d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	4619      	mov	r1, r3
 8003896:	480d      	ldr	r0, [pc, #52]	; (80038cc <MX_TIM2_Init+0x94>)
 8003898:	f7ff fcbc 	bl	8003214 <HAL_TIM_ConfigClockSource>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80038a2:	f000 fc15 	bl	80040d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038ae:	463b      	mov	r3, r7
 80038b0:	4619      	mov	r1, r3
 80038b2:	4806      	ldr	r0, [pc, #24]	; (80038cc <MX_TIM2_Init+0x94>)
 80038b4:	f7ff fe82 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80038be:	f000 fc07 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200007a4 	.word	0x200007a4

080038d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e4:	463b      	mov	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <MX_TIM3_Init+0x94>)
 80038ee:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <MX_TIM3_Init+0x98>)
 80038f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <MX_TIM3_Init+0x94>)
 80038f4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80038f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <MX_TIM3_Init+0x94>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <MX_TIM3_Init+0x94>)
 8003902:	22c7      	movs	r2, #199	; 0xc7
 8003904:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003906:	4b17      	ldr	r3, [pc, #92]	; (8003964 <MX_TIM3_Init+0x94>)
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390c:	4b15      	ldr	r3, [pc, #84]	; (8003964 <MX_TIM3_Init+0x94>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003912:	4814      	ldr	r0, [pc, #80]	; (8003964 <MX_TIM3_Init+0x94>)
 8003914:	f7ff fb28 	bl	8002f68 <HAL_TIM_Base_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800391e:	f000 fbd7 	bl	80040d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	4619      	mov	r1, r3
 800392e:	480d      	ldr	r0, [pc, #52]	; (8003964 <MX_TIM3_Init+0x94>)
 8003930:	f7ff fc70 	bl	8003214 <HAL_TIM_ConfigClockSource>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800393a:	f000 fbc9 	bl	80040d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003946:	463b      	mov	r3, r7
 8003948:	4619      	mov	r1, r3
 800394a:	4806      	ldr	r0, [pc, #24]	; (8003964 <MX_TIM3_Init+0x94>)
 800394c:	f7ff fe36 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003956:	f000 fbbb 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000734 	.word	0x20000734
 8003968:	40000400 	.word	0x40000400

0800396c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <MX_GPIO_Init+0xa8>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <MX_GPIO_Init+0xa8>)
 8003986:	f043 0310 	orr.w	r3, r3, #16
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <MX_GPIO_Init+0xa8>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <MX_GPIO_Init+0xa8>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <MX_GPIO_Init+0xa8>)
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	6193      	str	r3, [r2, #24]
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <MX_GPIO_Init+0xa8>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b0:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <MX_GPIO_Init+0xa8>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <MX_GPIO_Init+0xa8>)
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	6193      	str	r3, [r2, #24]
 80039bc:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <MX_GPIO_Init+0xa8>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <MX_GPIO_Init+0xa8>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <MX_GPIO_Init+0xa8>)
 80039ce:	f043 0308 	orr.w	r3, r3, #8
 80039d2:	6193      	str	r3, [r2, #24]
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <MX_GPIO_Init+0xa8>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80039e0:	2200      	movs	r2, #0
 80039e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039e6:	480c      	ldr	r0, [pc, #48]	; (8003a18 <MX_GPIO_Init+0xac>)
 80039e8:	f7fd ffbc 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80039ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f2:	2301      	movs	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fa:	2302      	movs	r3, #2
 80039fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	4619      	mov	r1, r3
 8003a04:	4804      	ldr	r0, [pc, #16]	; (8003a18 <MX_GPIO_Init+0xac>)
 8003a06:	f7fd fe53 	bl	80016b0 <HAL_GPIO_Init>

}
 8003a0a:	bf00      	nop
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40011000 	.word	0x40011000
 8003a1c:	00000000 	.word	0x00000000

08003a20 <factor_correct>:

/* USER CODE BEGIN 4 */
double factor_correct(double x){
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	e9c7 0100 	strd	r0, r1, [r7]
	if ((x < 250) && (x > 40)){
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	4ba8      	ldr	r3, [pc, #672]	; (8003cd0 <factor_correct+0x2b0>)
 8003a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a34:	f7fc ffba 	bl	80009ac <__aeabi_dcmplt>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d056      	beq.n	8003aec <factor_correct+0xcc>
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4ba4      	ldr	r3, [pc, #656]	; (8003cd4 <factor_correct+0x2b4>)
 8003a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a48:	f7fc ffce 	bl	80009e8 <__aeabi_dcmpgt>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d04c      	beq.n	8003aec <factor_correct+0xcc>
		// Exp aprox
		a1 = 2.239;
 8003a52:	4aa1      	ldr	r2, [pc, #644]	; (8003cd8 <factor_correct+0x2b8>)
 8003a54:	a48a      	add	r4, pc, #552	; (adr r4, 8003c80 <factor_correct+0x260>)
 8003a56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a5a:	e9c2 3400 	strd	r3, r4, [r2]
		b1 = -0.03095;
 8003a5e:	4a9f      	ldr	r2, [pc, #636]	; (8003cdc <factor_correct+0x2bc>)
 8003a60:	a489      	add	r4, pc, #548	; (adr r4, 8003c88 <factor_correct+0x268>)
 8003a62:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a66:	e9c2 3400 	strd	r3, r4, [r2]
		c1 = 1.827;
 8003a6a:	4a9d      	ldr	r2, [pc, #628]	; (8003ce0 <factor_correct+0x2c0>)
 8003a6c:	a488      	add	r4, pc, #544	; (adr r4, 8003c90 <factor_correct+0x270>)
 8003a6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a72:	e9c2 3400 	strd	r3, r4, [r2]
		d1 = -0.001121;
 8003a76:	4a9b      	ldr	r2, [pc, #620]	; (8003ce4 <factor_correct+0x2c4>)
 8003a78:	a487      	add	r4, pc, #540	; (adr r4, 8003c98 <factor_correct+0x278>)
 8003a7a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a7e:	e9c2 3400 	strd	r3, r4, [r2]
		return (a1*exp(b1*x) + c1*exp(d1*x))*1;
 8003a82:	4b96      	ldr	r3, [pc, #600]	; (8003cdc <factor_correct+0x2bc>)
 8003a84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8c:	f7fc fd1c 	bl	80004c8 <__aeabi_dmul>
 8003a90:	4603      	mov	r3, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4618      	mov	r0, r3
 8003a96:	4621      	mov	r1, r4
 8003a98:	f001 ff9e 	bl	80059d8 <exp>
 8003a9c:	4b8e      	ldr	r3, [pc, #568]	; (8003cd8 <factor_correct+0x2b8>)
 8003a9e:	cb18      	ldmia	r3, {r3, r4}
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	f7fc fd10 	bl	80004c8 <__aeabi_dmul>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	460c      	mov	r4, r1
 8003aac:	461d      	mov	r5, r3
 8003aae:	4626      	mov	r6, r4
 8003ab0:	4b8c      	ldr	r3, [pc, #560]	; (8003ce4 <factor_correct+0x2c4>)
 8003ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aba:	f7fc fd05 	bl	80004c8 <__aeabi_dmul>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	f001 ff87 	bl	80059d8 <exp>
 8003aca:	4b85      	ldr	r3, [pc, #532]	; (8003ce0 <factor_correct+0x2c0>)
 8003acc:	cb18      	ldmia	r3, {r3, r4}
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7fc fcf9 	bl	80004c8 <__aeabi_dmul>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	461a      	mov	r2, r3
 8003adc:	4623      	mov	r3, r4
 8003ade:	4628      	mov	r0, r5
 8003ae0:	4631      	mov	r1, r6
 8003ae2:	f7fc fb3b 	bl	800015c <__adddf3>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	e174      	b.n	8003dd6 <factor_correct+0x3b6>

	} else if ((x >=250) && (x<620)){
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <factor_correct+0x2b0>)
 8003af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003af6:	f7fc ff6d 	bl	80009d4 <__aeabi_dcmpge>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80fd 	beq.w	8003cfc <factor_correct+0x2dc>
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	4b78      	ldr	r3, [pc, #480]	; (8003ce8 <factor_correct+0x2c8>)
 8003b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b0c:	f7fc ff4e 	bl	80009ac <__aeabi_dcmplt>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80f2 	beq.w	8003cfc <factor_correct+0x2dc>
		// Fourier aprox
		a0 = 1.196;
 8003b18:	4a74      	ldr	r2, [pc, #464]	; (8003cec <factor_correct+0x2cc>)
 8003b1a:	a461      	add	r4, pc, #388	; (adr r4, 8003ca0 <factor_correct+0x280>)
 8003b1c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b20:	e9c2 3400 	strd	r3, r4, [r2]
		a1 = -0.03788;
 8003b24:	4a6c      	ldr	r2, [pc, #432]	; (8003cd8 <factor_correct+0x2b8>)
 8003b26:	a460      	add	r4, pc, #384	; (adr r4, 8003ca8 <factor_correct+0x288>)
 8003b28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b2c:	e9c2 3400 	strd	r3, r4, [r2]
		b1 = 0.006196;
 8003b30:	4a6a      	ldr	r2, [pc, #424]	; (8003cdc <factor_correct+0x2bc>)
 8003b32:	a45f      	add	r4, pc, #380	; (adr r4, 8003cb0 <factor_correct+0x290>)
 8003b34:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b38:	e9c2 3400 	strd	r3, r4, [r2]
		a2 = 0.00541;
 8003b3c:	4a6c      	ldr	r2, [pc, #432]	; (8003cf0 <factor_correct+0x2d0>)
 8003b3e:	a45e      	add	r4, pc, #376	; (adr r4, 8003cb8 <factor_correct+0x298>)
 8003b40:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b44:	e9c2 3400 	strd	r3, r4, [r2]
		b2 = -0.01333;
 8003b48:	4a6a      	ldr	r2, [pc, #424]	; (8003cf4 <factor_correct+0x2d4>)
 8003b4a:	a45d      	add	r4, pc, #372	; (adr r4, 8003cc0 <factor_correct+0x2a0>)
 8003b4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b50:	e9c2 3400 	strd	r3, r4, [r2]
		w = 0.01085;
 8003b54:	4a68      	ldr	r2, [pc, #416]	; (8003cf8 <factor_correct+0x2d8>)
 8003b56:	a45c      	add	r4, pc, #368	; (adr r4, 8003cc8 <factor_correct+0x2a8>)
 8003b58:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b5c:	e9c2 3400 	strd	r3, r4, [r2]
		return a0 + a1*cos(x*w) + b1*sin(x*w) +
 8003b60:	4b65      	ldr	r3, [pc, #404]	; (8003cf8 <factor_correct+0x2d8>)
 8003b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6a:	f7fc fcad 	bl	80004c8 <__aeabi_dmul>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	4618      	mov	r0, r3
 8003b74:	4621      	mov	r1, r4
 8003b76:	f001 fdc5 	bl	8005704 <cos>
 8003b7a:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <factor_correct+0x2b8>)
 8003b7c:	cb18      	ldmia	r3, {r3, r4}
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	f7fc fca1 	bl	80004c8 <__aeabi_dmul>
 8003b86:	4603      	mov	r3, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <factor_correct+0x2cc>)
 8003b90:	cb18      	ldmia	r3, {r3, r4}
 8003b92:	461a      	mov	r2, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	f7fc fae1 	bl	800015c <__adddf3>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	461d      	mov	r5, r3
 8003ba0:	4626      	mov	r6, r4
 8003ba2:	4b55      	ldr	r3, [pc, #340]	; (8003cf8 <factor_correct+0x2d8>)
 8003ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bac:	f7fc fc8c 	bl	80004c8 <__aeabi_dmul>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	f001 fea4 	bl	8005904 <sin>
 8003bbc:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <factor_correct+0x2bc>)
 8003bbe:	cb18      	ldmia	r3, {r3, r4}
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	f7fc fc80 	bl	80004c8 <__aeabi_dmul>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	f7fc fac2 	bl	800015c <__adddf3>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	461d      	mov	r5, r3
 8003bde:	4626      	mov	r6, r4
		            a2*cos(2*x*w) + b2*sin(2*x*w);
 8003be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	f7fc fab8 	bl	800015c <__adddf3>
 8003bec:	4603      	mov	r3, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <factor_correct+0x2d8>)
 8003bf6:	cb18      	ldmia	r3, {r3, r4}
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	f7fc fc64 	bl	80004c8 <__aeabi_dmul>
 8003c00:	4603      	mov	r3, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	4618      	mov	r0, r3
 8003c06:	4621      	mov	r1, r4
 8003c08:	f001 fd7c 	bl	8005704 <cos>
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <factor_correct+0x2d0>)
 8003c0e:	cb18      	ldmia	r3, {r3, r4}
 8003c10:	461a      	mov	r2, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	f7fc fc58 	bl	80004c8 <__aeabi_dmul>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	460c      	mov	r4, r1
		return a0 + a1*cos(x*w) + b1*sin(x*w) +
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	4628      	mov	r0, r5
 8003c22:	4631      	mov	r1, r6
 8003c24:	f7fc fa9a 	bl	800015c <__adddf3>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	4626      	mov	r6, r4
		            a2*cos(2*x*w) + b2*sin(2*x*w);
 8003c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	f7fc fa90 	bl	800015c <__adddf3>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4618      	mov	r0, r3
 8003c42:	4621      	mov	r1, r4
 8003c44:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <factor_correct+0x2d8>)
 8003c46:	cb18      	ldmia	r3, {r3, r4}
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	f7fc fc3c 	bl	80004c8 <__aeabi_dmul>
 8003c50:	4603      	mov	r3, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	4618      	mov	r0, r3
 8003c56:	4621      	mov	r1, r4
 8003c58:	f001 fe54 	bl	8005904 <sin>
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <factor_correct+0x2d4>)
 8003c5e:	cb18      	ldmia	r3, {r3, r4}
 8003c60:	461a      	mov	r2, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	f7fc fc30 	bl	80004c8 <__aeabi_dmul>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	4628      	mov	r0, r5
 8003c72:	4631      	mov	r1, r6
 8003c74:	f7fc fa72 	bl	800015c <__adddf3>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	e0ab      	b.n	8003dd6 <factor_correct+0x3b6>
 8003c7e:	bf00      	nop
 8003c80:	d4fdf3b6 	.word	0xd4fdf3b6
 8003c84:	4001e978 	.word	0x4001e978
 8003c88:	573eab36 	.word	0x573eab36
 8003c8c:	bf9fb15b 	.word	0xbf9fb15b
 8003c90:	5a1cac08 	.word	0x5a1cac08
 8003c94:	3ffd3b64 	.word	0x3ffd3b64
 8003c98:	95af294e 	.word	0x95af294e
 8003c9c:	bf525dd0 	.word	0xbf525dd0
 8003ca0:	e5604189 	.word	0xe5604189
 8003ca4:	3ff322d0 	.word	0x3ff322d0
 8003ca8:	e2584f4c 	.word	0xe2584f4c
 8003cac:	bfa36501 	.word	0xbfa36501
 8003cb0:	15db3398 	.word	0x15db3398
 8003cb4:	3f7960fa 	.word	0x3f7960fa
 8003cb8:	d1244a62 	.word	0xd1244a62
 8003cbc:	3f7628cb 	.word	0x3f7628cb
 8003cc0:	5072085b 	.word	0x5072085b
 8003cc4:	bf8b4cc2 	.word	0xbf8b4cc2
 8003cc8:	594af4f1 	.word	0x594af4f1
 8003ccc:	3f863886 	.word	0x3f863886
 8003cd0:	406f4000 	.word	0x406f4000
 8003cd4:	40440000 	.word	0x40440000
 8003cd8:	200000c8 	.word	0x200000c8
 8003cdc:	200000d0 	.word	0x200000d0
 8003ce0:	200000f0 	.word	0x200000f0
 8003ce4:	200000f8 	.word	0x200000f8
 8003ce8:	40836000 	.word	0x40836000
 8003cec:	200000c0 	.word	0x200000c0
 8003cf0:	200000d8 	.word	0x200000d8
 8003cf4:	200000e0 	.word	0x200000e0
 8003cf8:	200000e8 	.word	0x200000e8
	} else if ((x >= 620) && (x < 1200)) {
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <factor_correct+0x3e8>)
 8003d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d06:	f7fc fe65 	bl	80009d4 <__aeabi_dcmpge>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05f      	beq.n	8003dd0 <factor_correct+0x3b0>
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <factor_correct+0x3ec>)
 8003d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d1a:	f7fc fe47 	bl	80009ac <__aeabi_dcmplt>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d055      	beq.n	8003dd0 <factor_correct+0x3b0>
		a1 = 1.21;
 8003d24:	4a3a      	ldr	r2, [pc, #232]	; (8003e10 <factor_correct+0x3f0>)
 8003d26:	a42e      	add	r4, pc, #184	; (adr r4, 8003de0 <factor_correct+0x3c0>)
 8003d28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003d2c:	e9c2 3400 	strd	r3, r4, [r2]
		b1 = -0.0001777;
 8003d30:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <factor_correct+0x3f4>)
 8003d32:	a42d      	add	r4, pc, #180	; (adr r4, 8003de8 <factor_correct+0x3c8>)
 8003d34:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003d38:	e9c2 3400 	strd	r3, r4, [r2]
		c1 = 0.03541;
 8003d3c:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <factor_correct+0x3f8>)
 8003d3e:	a42c      	add	r4, pc, #176	; (adr r4, 8003df0 <factor_correct+0x3d0>)
 8003d40:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003d44:	e9c2 3400 	strd	r3, r4, [r2]
		d1 = 0.001033;
 8003d48:	4a34      	ldr	r2, [pc, #208]	; (8003e1c <factor_correct+0x3fc>)
 8003d4a:	a42b      	add	r4, pc, #172	; (adr r4, 8003df8 <factor_correct+0x3d8>)
 8003d4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003d50:	e9c2 3400 	strd	r3, r4, [r2]
		return (a1*exp(b1*x) + c1*exp(d1*x))*0.967;
 8003d54:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <factor_correct+0x3f4>)
 8003d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d5e:	f7fc fbb3 	bl	80004c8 <__aeabi_dmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	4618      	mov	r0, r3
 8003d68:	4621      	mov	r1, r4
 8003d6a:	f001 fe35 	bl	80059d8 <exp>
 8003d6e:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <factor_correct+0x3f0>)
 8003d70:	cb18      	ldmia	r3, {r3, r4}
 8003d72:	461a      	mov	r2, r3
 8003d74:	4623      	mov	r3, r4
 8003d76:	f7fc fba7 	bl	80004c8 <__aeabi_dmul>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	461d      	mov	r5, r3
 8003d80:	4626      	mov	r6, r4
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <factor_correct+0x3fc>)
 8003d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d8c:	f7fc fb9c 	bl	80004c8 <__aeabi_dmul>
 8003d90:	4603      	mov	r3, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4618      	mov	r0, r3
 8003d96:	4621      	mov	r1, r4
 8003d98:	f001 fe1e 	bl	80059d8 <exp>
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <factor_correct+0x3f8>)
 8003d9e:	cb18      	ldmia	r3, {r3, r4}
 8003da0:	461a      	mov	r2, r3
 8003da2:	4623      	mov	r3, r4
 8003da4:	f7fc fb90 	bl	80004c8 <__aeabi_dmul>
 8003da8:	4603      	mov	r3, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	4631      	mov	r1, r6
 8003db4:	f7fc f9d2 	bl	800015c <__adddf3>
 8003db8:	4603      	mov	r3, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	a30f      	add	r3, pc, #60	; (adr r3, 8003e00 <factor_correct+0x3e0>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fb7f 	bl	80004c8 <__aeabi_dmul>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	460c      	mov	r4, r1
 8003dce:	e002      	b.n	8003dd6 <factor_correct+0x3b6>
	} else {
		return 1;
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	4c12      	ldr	r4, [pc, #72]	; (8003e20 <factor_correct+0x400>)
	}

}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	4621      	mov	r1, r4
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de0:	f5c28f5c 	.word	0xf5c28f5c
 8003de4:	3ff35c28 	.word	0x3ff35c28
 8003de8:	6082f797 	.word	0x6082f797
 8003dec:	bf274a9f 	.word	0xbf274a9f
 8003df0:	6fe718a8 	.word	0x6fe718a8
 8003df4:	3fa22142 	.word	0x3fa22142
 8003df8:	4ddf86e4 	.word	0x4ddf86e4
 8003dfc:	3f50ecb7 	.word	0x3f50ecb7
 8003e00:	fbe76c8b 	.word	0xfbe76c8b
 8003e04:	3feef1a9 	.word	0x3feef1a9
 8003e08:	40836000 	.word	0x40836000
 8003e0c:	4092c000 	.word	0x4092c000
 8003e10:	200000c8 	.word	0x200000c8
 8003e14:	200000d0 	.word	0x200000d0
 8003e18:	200000f0 	.word	0x200000f0
 8003e1c:	200000f8 	.word	0x200000f8
 8003e20:	3ff00000 	.word	0x3ff00000

08003e24 <check_ADC>:

void check_ADC(ADC_HandleTypeDef *hadc, uint16_t *pData, uint16_t Size){
 8003e24:	b5b0      	push	{r4, r5, r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
	static uint8_t index_adc = 0;
	static double processed_adc = 0;
	double data_adc = 0;
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	f04f 0400 	mov.w	r4, #0
 8003e3a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	HAL_ADC_Start(&hadc1);
 8003e3e:	486d      	ldr	r0, [pc, #436]	; (8003ff4 <check_ADC+0x1d0>)
 8003e40:	f7fc ffc4 	bl	8000dcc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8003e44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e48:	486a      	ldr	r0, [pc, #424]	; (8003ff4 <check_ADC+0x1d0>)
 8003e4a:	f7fd f899 	bl	8000f80 <HAL_ADC_PollForConversion>
	pData[index_adc] = HAL_ADC_GetValue(&hadc1);
 8003e4e:	4869      	ldr	r0, [pc, #420]	; (8003ff4 <check_ADC+0x1d0>)
 8003e50:	f7fd f990 	bl	8001174 <HAL_ADC_GetValue>
 8003e54:	4601      	mov	r1, r0
 8003e56:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <check_ADC+0x1d4>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	4413      	add	r3, r2
 8003e60:	b28a      	uxth	r2, r1
 8003e62:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003e64:	4863      	ldr	r0, [pc, #396]	; (8003ff4 <check_ADC+0x1d0>)
 8003e66:	f7fd f85f 	bl	8000f28 <HAL_ADC_Stop>
	data_adc = pData[index_adc]*3300/4095;
 8003e6a:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <check_ADC+0x1d4>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f640 43e4 	movw	r3, #3300	; 0xce4
 8003e7c:	fb03 f302 	mul.w	r3, r3, r2
 8003e80:	4a5e      	ldr	r2, [pc, #376]	; (8003ffc <check_ADC+0x1d8>)
 8003e82:	fb82 1203 	smull	r1, r2, r2, r3
 8003e86:	441a      	add	r2, r3
 8003e88:	12d2      	asrs	r2, r2, #11
 8003e8a:	17db      	asrs	r3, r3, #31
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc fab0 	bl	80003f4 <__aeabi_i2d>
 8003e94:	4603      	mov	r3, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	e9c7 3404 	strd	r3, r4, [r7, #16]
	processed_adc += data_adc;
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <check_ADC+0x1dc>)
 8003e9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ea6:	f7fc f959 	bl	800015c <__adddf3>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	4a54      	ldr	r2, [pc, #336]	; (8004000 <check_ADC+0x1dc>)
 8003eb0:	e9c2 3400 	strd	r3, r4, [r2]
	index_adc++;
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <check_ADC+0x1d4>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <check_ADC+0x1d4>)
 8003ebe:	701a      	strb	r2, [r3, #0]

	if (index_adc >= Size ){
 8003ec0:	4b4d      	ldr	r3, [pc, #308]	; (8003ff8 <check_ADC+0x1d4>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f200 808e 	bhi.w	8003fea <check_ADC+0x1c6>
		processed_adc = processed_adc/Size;
 8003ece:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <check_ADC+0x1dc>)
 8003ed0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc fa8c 	bl	80003f4 <__aeabi_i2d>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	f7fc fc1a 	bl	800071c <__aeabi_ddiv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	4a44      	ldr	r2, [pc, #272]	; (8004000 <check_ADC+0x1dc>)
 8003eee:	e9c2 3400 	strd	r3, r4, [r2]
		raw_adc = processed_adc;
 8003ef2:	4b43      	ldr	r3, [pc, #268]	; (8004000 <check_ADC+0x1dc>)
 8003ef4:	cb18      	ldmia	r3, {r3, r4}
 8003ef6:	4a43      	ldr	r2, [pc, #268]	; (8004004 <check_ADC+0x1e0>)
 8003ef8:	e9c2 3400 	strd	r3, r4, [r2]

		factor = factor_correct(processed_adc);
 8003efc:	4b40      	ldr	r3, [pc, #256]	; (8004000 <check_ADC+0x1dc>)
 8003efe:	cb18      	ldmia	r3, {r3, r4}
 8003f00:	4618      	mov	r0, r3
 8003f02:	4621      	mov	r1, r4
 8003f04:	f7ff fd8c 	bl	8003a20 <factor_correct>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	4a3e      	ldr	r2, [pc, #248]	; (8004008 <check_ADC+0x1e4>)
 8003f0e:	e9c2 3400 	strd	r3, r4, [r2]
		processed_adc = processed_adc*factor;
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <check_ADC+0x1dc>)
 8003f14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f18:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <check_ADC+0x1e4>)
 8003f1a:	cb18      	ldmia	r3, {r3, r4}
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	f7fc fad2 	bl	80004c8 <__aeabi_dmul>
 8003f24:	4603      	mov	r3, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	4a35      	ldr	r2, [pc, #212]	; (8004000 <check_ADC+0x1dc>)
 8003f2a:	e9c2 3400 	strd	r3, r4, [r2]
		processed_adc = processed_adc/10;
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <check_ADC+0x1dc>)
 8003f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	4b34      	ldr	r3, [pc, #208]	; (800400c <check_ADC+0x1e8>)
 8003f3a:	f7fc fbef 	bl	800071c <__aeabi_ddiv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <check_ADC+0x1dc>)
 8003f44:	e9c2 3400 	strd	r3, r4, [r2]
		raw_adc = raw_adc/10;
 8003f48:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <check_ADC+0x1e0>)
 8003f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	4b2e      	ldr	r3, [pc, #184]	; (800400c <check_ADC+0x1e8>)
 8003f54:	f7fc fbe2 	bl	800071c <__aeabi_ddiv>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4a29      	ldr	r2, [pc, #164]	; (8004004 <check_ADC+0x1e0>)
 8003f5e:	e9c2 3400 	strd	r3, r4, [r2]

		processed_adc = round(processed_adc);
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <check_ADC+0x1dc>)
 8003f64:	cb18      	ldmia	r3, {r3, r4}
 8003f66:	4618      	mov	r0, r3
 8003f68:	4621      	mov	r1, r4
 8003f6a:	f001 fc85 	bl	8005878 <round>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460c      	mov	r4, r1
 8003f72:	4a23      	ldr	r2, [pc, #140]	; (8004000 <check_ADC+0x1dc>)
 8003f74:	e9c2 3400 	strd	r3, r4, [r2]
		raw_adc = round(raw_adc);
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <check_ADC+0x1e0>)
 8003f7a:	cb18      	ldmia	r3, {r3, r4}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	4621      	mov	r1, r4
 8003f80:	f001 fc7a 	bl	8005878 <round>
 8003f84:	4603      	mov	r3, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <check_ADC+0x1e0>)
 8003f8a:	e9c2 3400 	strd	r3, r4, [r2]

		processed_adc = processed_adc*10;
 8003f8e:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <check_ADC+0x1dc>)
 8003f90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <check_ADC+0x1e8>)
 8003f9a:	f7fc fa95 	bl	80004c8 <__aeabi_dmul>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	4a17      	ldr	r2, [pc, #92]	; (8004000 <check_ADC+0x1dc>)
 8003fa4:	e9c2 3400 	strd	r3, r4, [r2]
		raw_adc = raw_adc*10;
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <check_ADC+0x1e0>)
 8003faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <check_ADC+0x1e8>)
 8003fb4:	f7fc fa88 	bl	80004c8 <__aeabi_dmul>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	4a11      	ldr	r2, [pc, #68]	; (8004004 <check_ADC+0x1e0>)
 8003fbe:	e9c2 3400 	strd	r3, r4, [r2]

		voltage_adc = processed_adc;
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <check_ADC+0x1dc>)
 8003fc4:	cb18      	ldmia	r3, {r3, r4}
 8003fc6:	4a12      	ldr	r2, [pc, #72]	; (8004010 <check_ADC+0x1ec>)
 8003fc8:	e9c2 3400 	strd	r3, r4, [r2]
		index_adc = 0;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <check_ADC+0x1d4>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
		processed_adc = 0;
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <check_ADC+0x1dc>)
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	f04f 0400 	mov.w	r4, #0
 8003fdc:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fe4:	480b      	ldr	r0, [pc, #44]	; (8004014 <check_ADC+0x1f0>)
 8003fe6:	f7fd fcd5 	bl	8001994 <HAL_GPIO_TogglePin>
	}
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000774 	.word	0x20000774
 8003ff8:	20000100 	.word	0x20000100
 8003ffc:	80080081 	.word	0x80080081
 8004000:	20000108 	.word	0x20000108
 8004004:	200000b0 	.word	0x200000b0
 8004008:	200000b8 	.word	0x200000b8
 800400c:	40240000 	.word	0x40240000
 8004010:	200000a8 	.word	0x200000a8
 8004014:	40011000 	.word	0x40011000

08004018 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d10b      	bne.n	8004040 <HAL_TIM_PeriodElapsedCallback+0x28>
		static uint8_t ready_2 = 0;
		if (ready_2 == 1){
 8004028:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d104      	bne.n	800403a <HAL_TIM_PeriodElapsedCallback+0x22>
			 check_ADC(&hadc1, rawValues, 200);
 8004030:	22c8      	movs	r2, #200	; 0xc8
 8004032:	4920      	ldr	r1, [pc, #128]	; (80040b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004034:	4820      	ldr	r0, [pc, #128]	; (80040b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004036:	f7ff fef5 	bl	8003e24 <check_ADC>
		}
		ready_2 = 1;
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim3){
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d12c      	bne.n	80040a2 <HAL_TIM_PeriodElapsedCallback+0x8a>
		static uint8_t ready_3 = 0;
		if (ready_3 == 1){
 8004048:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d125      	bne.n	800409c <HAL_TIM_PeriodElapsedCallback+0x84>
			SSD1306_Putdouble(voltage_adc, 1, 1);
 8004050:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004052:	cb18      	ldmia	r3, {r3, r4}
 8004054:	4618      	mov	r0, r3
 8004056:	4621      	mov	r1, r4
 8004058:	f7fc fd2e 	bl	8000ab8 <__aeabi_d2f>
 800405c:	4603      	mov	r3, r0
 800405e:	2201      	movs	r2, #1
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fc28 	bl	80048b8 <SSD1306_Putdouble>
			SSD1306_Putdouble(raw_adc, 1, 2);
 8004068:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800406a:	cb18      	ldmia	r3, {r3, r4}
 800406c:	4618      	mov	r0, r3
 800406e:	4621      	mov	r1, r4
 8004070:	f7fc fd22 	bl	8000ab8 <__aeabi_d2f>
 8004074:	4603      	mov	r3, r0
 8004076:	2202      	movs	r2, #2
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fc1c 	bl	80048b8 <SSD1306_Putdouble>
			SSD1306_Putdouble(factor, 4, 3);
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004082:	cb18      	ldmia	r3, {r3, r4}
 8004084:	4618      	mov	r0, r3
 8004086:	4621      	mov	r1, r4
 8004088:	f7fc fd16 	bl	8000ab8 <__aeabi_d2f>
 800408c:	4603      	mov	r3, r0
 800408e:	2203      	movs	r2, #3
 8004090:	2104      	movs	r1, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fc10 	bl	80048b8 <SSD1306_Putdouble>
			SSD1306_UpdateScreen();
 8004098:	f000 f926 	bl	80042e8 <SSD1306_UpdateScreen>
		}
		ready_3 = 1;
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
	}
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd90      	pop	{r4, r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200007a4 	.word	0x200007a4
 80040b0:	20000110 	.word	0x20000110
 80040b4:	20000550 	.word	0x20000550
 80040b8:	20000774 	.word	0x20000774
 80040bc:	20000734 	.word	0x20000734
 80040c0:	20000111 	.word	0x20000111
 80040c4:	200000a8 	.word	0x200000a8
 80040c8:	200000b0 	.word	0x200000b0
 80040cc:	200000b8 	.word	0x200000b8

080040d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <set_oled_addr>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

void set_oled_addr(uint8_t addr){
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
	oled_addr = addr;
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <set_oled_addr+0x1c>)
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	7013      	strb	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000838 	.word	0x20000838

080040fc <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0

	/* Init I2C */
//	ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c_current, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004102:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004106:	2201      	movs	r2, #1
 8004108:	2178      	movs	r1, #120	; 0x78
 800410a:	4874      	ldr	r0, [pc, #464]	; (80042dc <SSD1306_Init+0x1e0>)
 800410c:	f7fd fe80 	bl	8001e10 <HAL_I2C_IsDeviceReady>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8004116:	2300      	movs	r3, #0
 8004118:	e0dc      	b.n	80042d4 <SSD1306_Init+0x1d8>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800411a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800411e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004120:	e002      	b.n	8004128 <SSD1306_Init+0x2c>
		p--;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3b01      	subs	r3, #1
 8004126:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f9      	bne.n	8004122 <SSD1306_Init+0x26>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800412e:	4b6c      	ldr	r3, [pc, #432]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	22ae      	movs	r2, #174	; 0xae
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fcd0 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <SSD1306_Init+0x1e4>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2220      	movs	r2, #32
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fcc9 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <SSD1306_Init+0x1e4>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2210      	movs	r2, #16
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fcc2 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004158:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <SSD1306_Init+0x1e4>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	22b0      	movs	r2, #176	; 0xb0
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fcbb 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004166:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	22c8      	movs	r2, #200	; 0xc8
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fcb4 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004174:	4b5a      	ldr	r3, [pc, #360]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fcad 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004182:	4b57      	ldr	r3, [pc, #348]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2210      	movs	r2, #16
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fca6 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2240      	movs	r2, #64	; 0x40
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fc9f 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800419e:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <SSD1306_Init+0x1e4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2281      	movs	r2, #129	; 0x81
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fc98 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80041ac:	4b4c      	ldr	r3, [pc, #304]	; (80042e0 <SSD1306_Init+0x1e4>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	22ff      	movs	r2, #255	; 0xff
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fc91 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80041ba:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <SSD1306_Init+0x1e4>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	22a1      	movs	r2, #161	; 0xa1
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fc8a 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80041c8:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <SSD1306_Init+0x1e4>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	22a6      	movs	r2, #166	; 0xa6
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fc83 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80041d6:	4b42      	ldr	r3, [pc, #264]	; (80042e0 <SSD1306_Init+0x1e4>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	22a8      	movs	r2, #168	; 0xa8
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fc7c 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80041e4:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <SSD1306_Init+0x1e4>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	223f      	movs	r2, #63	; 0x3f
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fc75 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80041f2:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <SSD1306_Init+0x1e4>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	22a4      	movs	r2, #164	; 0xa4
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fc6e 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004200:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	22d3      	movs	r2, #211	; 0xd3
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fc67 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800420e:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fc60 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800421c:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <SSD1306_Init+0x1e4>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	22d5      	movs	r2, #213	; 0xd5
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fc59 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <SSD1306_Init+0x1e4>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	22f0      	movs	r2, #240	; 0xf0
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fc52 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004238:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <SSD1306_Init+0x1e4>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	22d9      	movs	r2, #217	; 0xd9
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fc4b 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2222      	movs	r2, #34	; 0x22
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fc44 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	22da      	movs	r2, #218	; 0xda
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fc3d 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8004262:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2212      	movs	r2, #18
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fc36 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	22db      	movs	r2, #219	; 0xdb
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fc2f 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <SSD1306_Init+0x1e4>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2220      	movs	r2, #32
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fc28 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <SSD1306_Init+0x1e4>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	228d      	movs	r2, #141	; 0x8d
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fc21 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <SSD1306_Init+0x1e4>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2214      	movs	r2, #20
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fc1a 	bl	8004adc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <SSD1306_Init+0x1e4>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	22af      	movs	r2, #175	; 0xaf
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fc13 	bl	8004adc <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80042b6:	2000      	movs	r0, #0
 80042b8:	f000 f850 	bl	800435c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80042bc:	f000 f814 	bl	80042e8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <SSD1306_Init+0x1e8>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <SSD1306_Init+0x1e8>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <SSD1306_Init+0x1e8>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80042d2:	2301      	movs	r3, #1
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	200007e4 	.word	0x200007e4
 80042e0:	20000838 	.word	0x20000838
 80042e4:	2000052c 	.word	0x2000052c

080042e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80042ee:	2300      	movs	r3, #0
 80042f0:	71fb      	strb	r3, [r7, #7]
 80042f2:	e027      	b.n	8004344 <SSD1306_UpdateScreen+0x5c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <SSD1306_UpdateScreen+0x6c>)
 80042f6:	7818      	ldrb	r0, [r3, #0]
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	3b50      	subs	r3, #80	; 0x50
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	2100      	movs	r1, #0
 8004302:	f000 fbeb 	bl	8004adc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <SSD1306_UpdateScreen+0x6c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fbe4 	bl	8004adc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <SSD1306_UpdateScreen+0x6c>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2210      	movs	r2, #16
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fbdd 	bl	8004adc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(oled_addr, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <SSD1306_UpdateScreen+0x6c>)
 8004324:	7818      	ldrb	r0, [r3, #0]
 8004326:	79fa      	ldrb	r2, [r7, #7]
 8004328:	4613      	mov	r3, r2
 800432a:	019b      	lsls	r3, r3, #6
 800432c:	4413      	add	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <SSD1306_UpdateScreen+0x70>)
 8004334:	441a      	add	r2, r3
 8004336:	2383      	movs	r3, #131	; 0x83
 8004338:	2140      	movs	r1, #64	; 0x40
 800433a:	f000 fb75 	bl	8004a28 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	3301      	adds	r3, #1
 8004342:	71fb      	strb	r3, [r7, #7]
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b07      	cmp	r3, #7
 8004348:	d9d4      	bls.n	80042f4 <SSD1306_UpdateScreen+0xc>
	}
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000838 	.word	0x20000838
 8004358:	20000114 	.word	0x20000114

0800435c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <SSD1306_Fill+0x14>
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <SSD1306_Fill+0x16>
 8004370:	23ff      	movs	r3, #255	; 0xff
 8004372:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8004376:	4619      	mov	r1, r3
 8004378:	4803      	ldr	r0, [pc, #12]	; (8004388 <SSD1306_Fill+0x2c>)
 800437a:	f000 fdb2 	bl	8004ee2 <memset>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000114 	.word	0x20000114

0800438c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800438c:	b490      	push	{r4, r7}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	80fb      	strh	r3, [r7, #6]
 8004396:	460b      	mov	r3, r1
 8004398:	80bb      	strh	r3, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	70fb      	strb	r3, [r7, #3]
	if (
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b82      	cmp	r3, #130	; 0x82
 80043a2:	d858      	bhi.n	8004456 <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 80043a4:	88bb      	ldrh	r3, [r7, #4]
 80043a6:	2b3f      	cmp	r3, #63	; 0x3f
 80043a8:	d855      	bhi.n	8004456 <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80043aa:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <SSD1306_DrawPixel+0xd4>)
 80043ac:	791b      	ldrb	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d006      	beq.n	80043c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d122      	bne.n	800440c <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80043c6:	88f9      	ldrh	r1, [r7, #6]
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	08db      	lsrs	r3, r3, #3
 80043cc:	b298      	uxth	r0, r3
 80043ce:	4602      	mov	r2, r0
 80043d0:	4613      	mov	r3, r2
 80043d2:	019b      	lsls	r3, r3, #6
 80043d4:	4413      	add	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	440b      	add	r3, r1
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <SSD1306_DrawPixel+0xd8>)
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	b25a      	sxtb	r2, r3
 80043e2:	88bb      	ldrh	r3, [r7, #4]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	b25b      	sxtb	r3, r3
 80043f0:	4313      	orrs	r3, r2
 80043f2:	b25c      	sxtb	r4, r3
 80043f4:	88f9      	ldrh	r1, [r7, #6]
 80043f6:	4602      	mov	r2, r0
 80043f8:	4613      	mov	r3, r2
 80043fa:	019b      	lsls	r3, r3, #6
 80043fc:	4413      	add	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	440b      	add	r3, r1
 8004404:	b2e1      	uxtb	r1, r4
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <SSD1306_DrawPixel+0xd8>)
 8004408:	54d1      	strb	r1, [r2, r3]
 800440a:	e025      	b.n	8004458 <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800440c:	88f9      	ldrh	r1, [r7, #6]
 800440e:	88bb      	ldrh	r3, [r7, #4]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	b298      	uxth	r0, r3
 8004414:	4602      	mov	r2, r0
 8004416:	4613      	mov	r3, r2
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	4413      	add	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	440b      	add	r3, r1
 8004422:	4a10      	ldr	r2, [pc, #64]	; (8004464 <SSD1306_DrawPixel+0xd8>)
 8004424:	5cd3      	ldrb	r3, [r2, r3]
 8004426:	b25a      	sxtb	r2, r3
 8004428:	88bb      	ldrh	r3, [r7, #4]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	2101      	movs	r1, #1
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	b25b      	sxtb	r3, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	b25b      	sxtb	r3, r3
 800443a:	4013      	ands	r3, r2
 800443c:	b25c      	sxtb	r4, r3
 800443e:	88f9      	ldrh	r1, [r7, #6]
 8004440:	4602      	mov	r2, r0
 8004442:	4613      	mov	r3, r2
 8004444:	019b      	lsls	r3, r3, #6
 8004446:	4413      	add	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	440b      	add	r3, r1
 800444e:	b2e1      	uxtb	r1, r4
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <SSD1306_DrawPixel+0xd8>)
 8004452:	54d1      	strb	r1, [r2, r3]
 8004454:	e000      	b.n	8004458 <SSD1306_DrawPixel+0xcc>
		return;
 8004456:	bf00      	nop
	}
}
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bc90      	pop	{r4, r7}
 800445e:	4770      	bx	lr
 8004460:	2000052c 	.word	0x2000052c
 8004464:	20000114 	.word	0x20000114

08004468 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	460a      	mov	r2, r1
 8004472:	80fb      	strh	r3, [r7, #6]
 8004474:	4613      	mov	r3, r2
 8004476:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004478:	4a05      	ldr	r2, [pc, #20]	; (8004490 <SSD1306_GotoXY+0x28>)
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800447e:	4a04      	ldr	r2, [pc, #16]	; (8004490 <SSD1306_GotoXY+0x28>)
 8004480:	88bb      	ldrh	r3, [r7, #4]
 8004482:	8053      	strh	r3, [r2, #2]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	2000052c 	.word	0x2000052c

08004494 <SSD1306_Putc>:

char SSD1306_Putc(uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	71fb      	strb	r3, [r7, #7]
 80044a0:	4613      	mov	r3, r2
 80044a2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <SSD1306_Putc+0xfc>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	4413      	add	r3, r2
	if (
 80044b0:	2b82      	cmp	r3, #130	; 0x82
 80044b2:	dc07      	bgt.n	80044c4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <SSD1306_Putc+0xfc>)
 80044b6:	885b      	ldrh	r3, [r3, #2]
 80044b8:	461a      	mov	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80044c0:	2b3f      	cmp	r3, #63	; 0x3f
 80044c2:	dd01      	ble.n	80044c8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e05e      	b.n	8004586 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e04b      	b.n	8004566 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	3b20      	subs	r3, #32
 80044d6:	6839      	ldr	r1, [r7, #0]
 80044d8:	7849      	ldrb	r1, [r1, #1]
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4619      	mov	r1, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	440b      	add	r3, r1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e030      	b.n	8004554 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <SSD1306_Putc+0xfc>)
 8004504:	881a      	ldrh	r2, [r3, #0]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	b29b      	uxth	r3, r3
 800450a:	4413      	add	r3, r2
 800450c:	b298      	uxth	r0, r3
 800450e:	4b20      	ldr	r3, [pc, #128]	; (8004590 <SSD1306_Putc+0xfc>)
 8004510:	885a      	ldrh	r2, [r3, #2]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	b29b      	uxth	r3, r3
 8004516:	4413      	add	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	79ba      	ldrb	r2, [r7, #6]
 800451c:	4619      	mov	r1, r3
 800451e:	f7ff ff35 	bl	800438c <SSD1306_DrawPixel>
 8004522:	e014      	b.n	800454e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <SSD1306_Putc+0xfc>)
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	b29b      	uxth	r3, r3
 800452c:	4413      	add	r3, r2
 800452e:	b298      	uxth	r0, r3
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <SSD1306_Putc+0xfc>)
 8004532:	885a      	ldrh	r2, [r3, #2]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	b29b      	uxth	r3, r3
 8004538:	4413      	add	r3, r2
 800453a:	b299      	uxth	r1, r3
 800453c:	79bb      	ldrb	r3, [r7, #6]
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	f7ff ff1f 	bl	800438c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3301      	adds	r3, #1
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4293      	cmp	r3, r2
 800455e:	d3c8      	bcc.n	80044f2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3301      	adds	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	461a      	mov	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4293      	cmp	r3, r2
 8004570:	d3ad      	bcc.n	80044ce <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <SSD1306_Putc+0xfc>)
 8004574:	881a      	ldrh	r2, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	4413      	add	r3, r2
 800457e:	b29a      	uxth	r2, r3
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <SSD1306_Putc+0xfc>)
 8004582:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8004584:	79fb      	ldrb	r3, [r7, #7]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2000052c 	.word	0x2000052c

08004594 <size_int>:

uint8_t size_int(int data){
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <size_int+0x14>
		size = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e01b      	b.n	80045e0 <size_int+0x4c>
	}
	else {
		size = floor(log10(data))+1;
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fb ff23 	bl	80003f4 <__aeabi_i2d>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	4618      	mov	r0, r3
 80045b4:	4621      	mov	r1, r4
 80045b6:	f001 fa87 	bl	8005ac8 <log10>
 80045ba:	4603      	mov	r3, r0
 80045bc:	460c      	mov	r4, r1
 80045be:	4618      	mov	r0, r3
 80045c0:	4621      	mov	r1, r4
 80045c2:	f001 f8d5 	bl	8005770 <floor>
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <size_int+0x58>)
 80045cc:	f7fb fdc6 	bl	800015c <__adddf3>
 80045d0:	4603      	mov	r3, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	4618      	mov	r0, r3
 80045d6:	4621      	mov	r1, r4
 80045d8:	f7fc fa4e 	bl	8000a78 <__aeabi_d2uiz>
 80045dc:	4603      	mov	r3, r0
 80045de:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	bf00      	nop
 80045ec:	3ff00000 	.word	0x3ff00000

080045f0 <double_str>:
	SSD1306_GotoXY (x_slot+11,y_slot);
	SSD1306_Puts (data_char, &Font_11x18, 1);
//	SSD1306_UpdateScreen();
}

char* double_str(double data, uint8_t decimales){
 80045f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f4:	b095      	sub	sp, #84	; 0x54
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
 8004600:	466b      	mov	r3, sp
 8004602:	461e      	mov	r6, r3
	char negativo = ' ';
 8004604:	2320      	movs	r3, #32
 8004606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (data < 0) {
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004616:	f7fc f9c9 	bl	80009ac <__aeabi_dcmplt>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <double_str+0x42>
		data = -data;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800462a:	60fb      	str	r3, [r7, #12]
		negativo = '-';
 800462c:	232d      	movs	r3, #45	; 0x2d
 800462e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	int potencia_10 = pow(10, decimales);
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb fecd 	bl	80003d4 <__aeabi_ui2d>
 800463a:	4603      	mov	r3, r0
 800463c:	460c      	mov	r4, r1
 800463e:	461a      	mov	r2, r3
 8004640:	4623      	mov	r3, r4
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	4999      	ldr	r1, [pc, #612]	; (80048ac <double_str+0x2bc>)
 8004648:	f001 fab8 	bl	8005bbc <pow>
 800464c:	4603      	mov	r3, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4618      	mov	r0, r3
 8004652:	4621      	mov	r1, r4
 8004654:	f7fc f9e8 	bl	8000a28 <__aeabi_d2iz>
 8004658:	4603      	mov	r3, r0
 800465a:	643b      	str	r3, [r7, #64]	; 0x40
	double p_entera_f = trunc(data);
 800465c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004660:	f001 f98a 	bl	8005978 <trunc>
 8004664:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	double p_decimal_f = data*potencia_10 - p_entera_f*potencia_10;
 8004668:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800466a:	f7fb fec3 	bl	80003f4 <__aeabi_i2d>
 800466e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004672:	f7fb ff29 	bl	80004c8 <__aeabi_dmul>
 8004676:	4603      	mov	r3, r0
 8004678:	460c      	mov	r4, r1
 800467a:	4625      	mov	r5, r4
 800467c:	461c      	mov	r4, r3
 800467e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004680:	f7fb feb8 	bl	80003f4 <__aeabi_i2d>
 8004684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004688:	f7fb ff1e 	bl	80004c8 <__aeabi_dmul>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4620      	mov	r0, r4
 8004692:	4629      	mov	r1, r5
 8004694:	f7fb fd60 	bl	8000158 <__aeabi_dsub>
 8004698:	4603      	mov	r3, r0
 800469a:	460c      	mov	r4, r1
 800469c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int p_entera = p_entera_f;
 80046a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80046a4:	f7fc f9c0 	bl	8000a28 <__aeabi_d2iz>
 80046a8:	4603      	mov	r3, r0
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	int p_decimal = p_decimal_f;
 80046ac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046b0:	f7fc f9ba 	bl	8000a28 <__aeabi_d2iz>
 80046b4:	4603      	mov	r3, r0
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48

	int size = size_int(p_entera);
 80046b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046ba:	f7ff ff6b 	bl	8004594 <size_int>
 80046be:	4603      	mov	r3, r0
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
	char p_entera_char[size];		// String de chars
 80046c2:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80046c4:	1e6b      	subs	r3, r5, #1
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	462b      	mov	r3, r5
 80046ca:	4619      	mov	r1, r3
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	f04f 0400 	mov.w	r4, #0
 80046d8:	00d4      	lsls	r4, r2, #3
 80046da:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	462b      	mov	r3, r5
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	00d4      	lsls	r4, r2, #3
 80046f2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80046f6:	00cb      	lsls	r3, r1, #3
 80046f8:	462b      	mov	r3, r5
 80046fa:	3307      	adds	r3, #7
 80046fc:	08db      	lsrs	r3, r3, #3
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	ebad 0d03 	sub.w	sp, sp, r3
 8004704:	466b      	mov	r3, sp
 8004706:	3300      	adds	r3, #0
 8004708:	623b      	str	r3, [r7, #32]
	sprintf(p_entera_char,"%d", p_entera);	// Cada numero del int en un char
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470e:	4968      	ldr	r1, [pc, #416]	; (80048b0 <double_str+0x2c0>)
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fbef 	bl	8004ef4 <siprintf>

	char p_decimal_char[decimales];
 8004716:	79f8      	ldrb	r0, [r7, #7]
 8004718:	4603      	mov	r3, r0
 800471a:	3b01      	subs	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	b2c1      	uxtb	r1, r0
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	f04f 0400 	mov.w	r4, #0
 800472c:	00d4      	lsls	r4, r2, #3
 800472e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004732:	00cb      	lsls	r3, r1, #3
 8004734:	b2c1      	uxtb	r1, r0
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	f04f 0400 	mov.w	r4, #0
 8004742:	00d4      	lsls	r4, r2, #3
 8004744:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004748:	00cb      	lsls	r3, r1, #3
 800474a:	4603      	mov	r3, r0
 800474c:	3307      	adds	r3, #7
 800474e:	08db      	lsrs	r3, r3, #3
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	ebad 0d03 	sub.w	sp, sp, r3
 8004756:	466b      	mov	r3, sp
 8004758:	3300      	adds	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
	size = size_int(p_decimal);
 800475c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800475e:	f7ff ff19 	bl	8004594 <size_int>
 8004762:	4603      	mov	r3, r0
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
	if (decimales>size){
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800476a:	429a      	cmp	r2, r3
 800476c:	da22      	bge.n	80047b4 <double_str+0x1c4>
		p_decimal = p_decimal + pow(10,decimales-1);
 800476e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004770:	f7fb fe40 	bl	80003f4 <__aeabi_i2d>
 8004774:	4680      	mov	r8, r0
 8004776:	4689      	mov	r9, r1
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	3b01      	subs	r3, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb fe39 	bl	80003f4 <__aeabi_i2d>
 8004782:	4603      	mov	r3, r0
 8004784:	460c      	mov	r4, r1
 8004786:	461a      	mov	r2, r3
 8004788:	4623      	mov	r3, r4
 800478a:	f04f 0000 	mov.w	r0, #0
 800478e:	4947      	ldr	r1, [pc, #284]	; (80048ac <double_str+0x2bc>)
 8004790:	f001 fa14 	bl	8005bbc <pow>
 8004794:	4603      	mov	r3, r0
 8004796:	460c      	mov	r4, r1
 8004798:	461a      	mov	r2, r3
 800479a:	4623      	mov	r3, r4
 800479c:	4640      	mov	r0, r8
 800479e:	4649      	mov	r1, r9
 80047a0:	f7fb fcdc 	bl	800015c <__adddf3>
 80047a4:	4603      	mov	r3, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	4618      	mov	r0, r3
 80047aa:	4621      	mov	r1, r4
 80047ac:	f7fc f93c 	bl	8000a28 <__aeabi_d2iz>
 80047b0:	4603      	mov	r3, r0
 80047b2:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	sprintf(p_decimal_char,"%d", p_decimal);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b8:	493d      	ldr	r1, [pc, #244]	; (80048b0 <double_str+0x2c0>)
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fb9a 	bl	8004ef4 <siprintf>
	for(uint8_t i=0; i<(decimales-size);i++){
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80047c6:	e009      	b.n	80047dc <double_str+0x1ec>
		p_decimal_char[i] = '0';
 80047c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	2130      	movs	r1, #48	; 0x30
 80047d0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<(decimales-size);i++){
 80047d2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80047d6:	3301      	adds	r3, #1
 80047d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80047dc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80047e0:	79f9      	ldrb	r1, [r7, #7]
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	1acb      	subs	r3, r1, r3
 80047e6:	429a      	cmp	r2, r3
 80047e8:	dbee      	blt.n	80047c8 <double_str+0x1d8>
	}

	uint8_t total_size = sizeof(p_entera_char)+decimales+2;
 80047ea:	b2ea      	uxtb	r2, r5
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	4413      	add	r3, r2
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	3302      	adds	r3, #2
 80047f4:	75fb      	strb	r3, [r7, #23]
	static char float_str[10];

	for(uint8_t i= 0; i<11; i++){
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80047fc:	e04b      	b.n	8004896 <double_str+0x2a6>
		if (i==0){
 80047fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <double_str+0x224>
			float_str[i] = negativo;
 8004806:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800480a:	492a      	ldr	r1, [pc, #168]	; (80048b4 <double_str+0x2c4>)
 800480c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004810:	54ca      	strb	r2, [r1, r3]
 8004812:	e03b      	b.n	800488c <double_str+0x29c>
		} else if((i>0) && (i<sizeof(p_entera_char)+1)){
 8004814:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00f      	beq.n	800483c <double_str+0x24c>
 800481c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004820:	462b      	mov	r3, r5
 8004822:	3301      	adds	r3, #1
 8004824:	429a      	cmp	r2, r3
 8004826:	d209      	bcs.n	800483c <double_str+0x24c>
			float_str[i] = p_entera_char[i-1];
 8004828:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004832:	6a39      	ldr	r1, [r7, #32]
 8004834:	5c89      	ldrb	r1, [r1, r2]
 8004836:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <double_str+0x2c4>)
 8004838:	54d1      	strb	r1, [r2, r3]
 800483a:	e027      	b.n	800488c <double_str+0x29c>
		} else if (i == sizeof(p_entera_char)+1){
 800483c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004840:	462b      	mov	r3, r5
 8004842:	3301      	adds	r3, #1
 8004844:	429a      	cmp	r2, r3
 8004846:	d105      	bne.n	8004854 <double_str+0x264>
			float_str[i] = '.';
 8004848:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <double_str+0x2c4>)
 800484e:	212e      	movs	r1, #46	; 0x2e
 8004850:	54d1      	strb	r1, [r2, r3]
 8004852:	e01b      	b.n	800488c <double_str+0x29c>
		} else if ((i> sizeof(p_entera_char)+1) && (i<total_size)){
 8004854:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004858:	462b      	mov	r3, r5
 800485a:	3301      	adds	r3, #1
 800485c:	429a      	cmp	r2, r3
 800485e:	d910      	bls.n	8004882 <double_str+0x292>
 8004860:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	429a      	cmp	r2, r3
 8004868:	d20b      	bcs.n	8004882 <double_str+0x292>
			float_str[i] = p_decimal_char[i-(sizeof(p_entera_char)+2)];
 800486a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800486e:	462a      	mov	r2, r5
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	1e9a      	subs	r2, r3, #2
 8004874:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	5c89      	ldrb	r1, [r1, r2]
 800487c:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <double_str+0x2c4>)
 800487e:	54d1      	strb	r1, [r2, r3]
 8004880:	e004      	b.n	800488c <double_str+0x29c>
		} else {float_str[i] = ' ';}
 8004882:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004886:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <double_str+0x2c4>)
 8004888:	2120      	movs	r1, #32
 800488a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i= 0; i<11; i++){
 800488c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004890:	3301      	adds	r3, #1
 8004892:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004896:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800489a:	2b0a      	cmp	r3, #10
 800489c:	d9af      	bls.n	80047fe <double_str+0x20e>
	}
	return float_str;
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <double_str+0x2c4>)
 80048a0:	46b5      	mov	sp, r6
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3754      	adds	r7, #84	; 0x54
 80048a6:	46bd      	mov	sp, r7
 80048a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048ac:	40240000 	.word	0x40240000
 80048b0:	080080f0 	.word	0x080080f0
 80048b4:	20000534 	.word	0x20000534

080048b8 <SSD1306_Putdouble>:

void SSD1306_Putdouble(float data, uint8_t decimales, uint8_t slot) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
 80048c4:	4613      	mov	r3, r2
 80048c6:	70bb      	strb	r3, [r7, #2]
	char* float_str = double_str(data, decimales);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fb fda5 	bl	8000418 <__aeabi_f2d>
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	461a      	mov	r2, r3
 80048d2:	f7ff fe8d 	bl	80045f0 <double_str>
 80048d6:	60f8      	str	r0, [r7, #12]

	uint16_t x_slot = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	82fb      	strh	r3, [r7, #22]
	uint16_t y_slot = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	82bb      	strh	r3, [r7, #20]
	uint8_t slot_mini = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	74fb      	strb	r3, [r7, #19]
	switch (slot) {
 80048e4:	78bb      	ldrb	r3, [r7, #2]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d82a      	bhi.n	8004942 <SSD1306_Putdouble+0x8a>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <SSD1306_Putdouble+0x3c>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004909 	.word	0x08004909
 80048f8:	08004913 	.word	0x08004913
 80048fc:	0800491d 	.word	0x0800491d
 8004900:	08004927 	.word	0x08004927
 8004904:	08004935 	.word	0x08004935
	case 1:
		x_slot = 2;
 8004908:	2302      	movs	r3, #2
 800490a:	82fb      	strh	r3, [r7, #22]
		y_slot = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	82bb      	strh	r3, [r7, #20]
		break;
 8004910:	e017      	b.n	8004942 <SSD1306_Putdouble+0x8a>
	case 2:
		x_slot = 2;
 8004912:	2302      	movs	r3, #2
 8004914:	82fb      	strh	r3, [r7, #22]
		y_slot = 17;
 8004916:	2311      	movs	r3, #17
 8004918:	82bb      	strh	r3, [r7, #20]
		break;
 800491a:	e012      	b.n	8004942 <SSD1306_Putdouble+0x8a>
	case 3:
		x_slot = 2;
 800491c:	2302      	movs	r3, #2
 800491e:	82fb      	strh	r3, [r7, #22]
		y_slot = 35;
 8004920:	2323      	movs	r3, #35	; 0x23
 8004922:	82bb      	strh	r3, [r7, #20]
		break;
 8004924:	e00d      	b.n	8004942 <SSD1306_Putdouble+0x8a>
	case 4:
		x_slot = 2;
 8004926:	2302      	movs	r3, #2
 8004928:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 800492a:	2335      	movs	r3, #53	; 0x35
 800492c:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 800492e:	2301      	movs	r3, #1
 8004930:	74fb      	strb	r3, [r7, #19]
		break;
 8004932:	e006      	b.n	8004942 <SSD1306_Putdouble+0x8a>
	case 5:
		x_slot = 60;
 8004934:	233c      	movs	r3, #60	; 0x3c
 8004936:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 8004938:	2335      	movs	r3, #53	; 0x35
 800493a:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 800493c:	2301      	movs	r3, #1
 800493e:	74fb      	strb	r3, [r7, #19]
		break;
 8004940:	bf00      	nop
	}
	if (slot_mini == 1){
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d116      	bne.n	8004976 <SSD1306_Putdouble+0xbe>
		SSD1306_GotoXY (x_slot,y_slot);				// Select x and y from the selected slot
 8004948:	8aba      	ldrh	r2, [r7, #20]
 800494a:	8afb      	ldrh	r3, [r7, #22]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fd8a 	bl	8004468 <SSD1306_GotoXY>
		SSD1306_Puts ("       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 8004954:	2201      	movs	r2, #1
 8004956:	4914      	ldr	r1, [pc, #80]	; (80049a8 <SSD1306_Putdouble+0xf0>)
 8004958:	4814      	ldr	r0, [pc, #80]	; (80049ac <SSD1306_Putdouble+0xf4>)
 800495a:	f000 f82d 	bl	80049b8 <SSD1306_Puts>
		SSD1306_GotoXY (x_slot,y_slot);				// Come back to the initial position
 800495e:	8aba      	ldrh	r2, [r7, #20]
 8004960:	8afb      	ldrh	r3, [r7, #22]
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fd7f 	bl	8004468 <SSD1306_GotoXY>
		SSD1306_Puts (float_str, &Font_7x10, 1);	// Write the value
 800496a:	2201      	movs	r2, #1
 800496c:	490e      	ldr	r1, [pc, #56]	; (80049a8 <SSD1306_Putdouble+0xf0>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f822 	bl	80049b8 <SSD1306_Puts>
//		SSD1306_UpdateScreen();						// Update the screen
		return;
 8004974:	e015      	b.n	80049a2 <SSD1306_Putdouble+0xea>
	}
	SSD1306_GotoXY (x_slot,y_slot);
 8004976:	8aba      	ldrh	r2, [r7, #20]
 8004978:	8afb      	ldrh	r3, [r7, #22]
 800497a:	4611      	mov	r1, r2
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fd73 	bl	8004468 <SSD1306_GotoXY>
	SSD1306_Puts ("         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 8004982:	2201      	movs	r2, #1
 8004984:	490a      	ldr	r1, [pc, #40]	; (80049b0 <SSD1306_Putdouble+0xf8>)
 8004986:	480b      	ldr	r0, [pc, #44]	; (80049b4 <SSD1306_Putdouble+0xfc>)
 8004988:	f000 f816 	bl	80049b8 <SSD1306_Puts>
	SSD1306_GotoXY (x_slot,y_slot);
 800498c:	8aba      	ldrh	r2, [r7, #20]
 800498e:	8afb      	ldrh	r3, [r7, #22]
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fd68 	bl	8004468 <SSD1306_GotoXY>
	SSD1306_Puts (float_str, &Font_11x18, 1);
 8004998:	2201      	movs	r2, #1
 800499a:	4905      	ldr	r1, [pc, #20]	; (80049b0 <SSD1306_Putdouble+0xf8>)
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f80b 	bl	80049b8 <SSD1306_Puts>
//	SSD1306_UpdateScreen();
}
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20000008 	.word	0x20000008
 80049ac:	080080f4 	.word	0x080080f4
 80049b0:	20000010 	.word	0x20000010
 80049b4:	080080fc 	.word	0x080080fc

080049b8 <SSD1306_Puts>:



char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80049c6:	e012      	b.n	80049ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	79fa      	ldrb	r2, [r7, #7]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fd5f 	bl	8004494 <SSD1306_Putc>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d002      	beq.n	80049e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	e008      	b.n	80049fa <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e8      	bne.n	80049c8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	781b      	ldrb	r3, [r3, #0]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <ssd1306_sel_I2C>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_sel_I2C(I2C_HandleTypeDef *hi2c) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	hi2c_current = *hi2c;
 8004a0c:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <ssd1306_sel_I2C+0x20>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	2354      	movs	r3, #84	; 0x54
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fa58 	bl	8004ecc <memcpy>
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	200007e4 	.word	0x200007e4

08004a28 <ssd1306_I2C_WriteMulti>:
//	//while(p>0)
//	//	p--;
//	//MX_I2C1_Init();
//}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004a28:	b5b0      	push	{r4, r5, r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	603a      	str	r2, [r7, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
 8004a36:	460b      	mov	r3, r1
 8004a38:	71bb      	strb	r3, [r7, #6]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80bb      	strh	r3, [r7, #4]
 8004a3e:	466b      	mov	r3, sp
 8004a40:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8004a42:	88bb      	ldrh	r3, [r7, #4]
 8004a44:	1c58      	adds	r0, r3, #1
 8004a46:	1e43      	subs	r3, r0, #1
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	f04f 0400 	mov.w	r4, #0
 8004a5a:	00d4      	lsls	r4, r2, #3
 8004a5c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004a60:	00cb      	lsls	r3, r1, #3
 8004a62:	4603      	mov	r3, r0
 8004a64:	4619      	mov	r1, r3
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	f04f 0400 	mov.w	r4, #0
 8004a72:	00d4      	lsls	r4, r2, #3
 8004a74:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004a78:	00cb      	lsls	r3, r1, #3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	3307      	adds	r3, #7
 8004a7e:	08db      	lsrs	r3, r3, #3
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	ebad 0d03 	sub.w	sp, sp, r3
 8004a86:	ab02      	add	r3, sp, #8
 8004a88:	3300      	adds	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	79ba      	ldrb	r2, [r7, #6]
 8004a90:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
 8004a96:	e00a      	b.n	8004aae <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	7811      	ldrb	r1, [r2, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	88ba      	ldrh	r2, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d2ef      	bcs.n	8004a98 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, count, 10);
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	b299      	uxth	r1, r3
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	88b8      	ldrh	r0, [r7, #4]
 8004ac0:	230a      	movs	r3, #10
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <ssd1306_I2C_WriteMulti+0xb0>)
 8004ac8:	f7fd f8a4 	bl	8001c14 <HAL_I2C_Master_Transmit>
 8004acc:	46ad      	mov	sp, r5
}
 8004ace:	bf00      	nop
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200007e4 	.word	0x200007e4

08004adc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	71bb      	strb	r3, [r7, #6]
 8004aea:	4613      	mov	r3, r2
 8004aec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004aee:	79bb      	ldrb	r3, [r7, #6]
 8004af0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004af2:	797b      	ldrb	r3, [r7, #5]
 8004af4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, 2, 10);
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	b299      	uxth	r1, r3
 8004afa:	f107 020c 	add.w	r2, r7, #12
 8004afe:	230a      	movs	r3, #10
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2302      	movs	r3, #2
 8004b04:	4803      	ldr	r0, [pc, #12]	; (8004b14 <ssd1306_I2C_Write+0x38>)
 8004b06:	f7fd f885 	bl	8001c14 <HAL_I2C_Master_Transmit>
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200007e4 	.word	0x200007e4

08004b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_MspInit+0x5c>)
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <HAL_MspInit+0x5c>)
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6193      	str	r3, [r2, #24]
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_MspInit+0x5c>)
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <HAL_MspInit+0x5c>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <HAL_MspInit+0x5c>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	61d3      	str	r3, [r2, #28]
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <HAL_MspInit+0x5c>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_MspInit+0x60>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <HAL_MspInit+0x60>)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40010000 	.word	0x40010000

08004b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b84:	f107 0310 	add.w	r3, r7, #16
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <HAL_ADC_MspInit+0x6c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d121      	bne.n	8004be0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_ADC_MspInit+0x70>)
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_ADC_MspInit+0x70>)
 8004ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ba6:	6193      	str	r3, [r2, #24]
 8004ba8:	4b10      	ldr	r3, [pc, #64]	; (8004bec <HAL_ADC_MspInit+0x70>)
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <HAL_ADC_MspInit+0x70>)
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <HAL_ADC_MspInit+0x70>)
 8004bba:	f043 0304 	orr.w	r3, r3, #4
 8004bbe:	6193      	str	r3, [r2, #24]
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_ADC_MspInit+0x70>)
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd4:	f107 0310 	add.w	r3, r7, #16
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <HAL_ADC_MspInit+0x74>)
 8004bdc:	f7fc fd68 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004be0:	bf00      	nop
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40012400 	.word	0x40012400
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40010800 	.word	0x40010800

08004bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfc:	f107 0310 	add.w	r3, r7, #16
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <HAL_I2C_MspInit+0x70>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d123      	bne.n	8004c5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <HAL_I2C_MspInit+0x74>)
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <HAL_I2C_MspInit+0x74>)
 8004c1a:	f043 0308 	orr.w	r3, r3, #8
 8004c1e:	6193      	str	r3, [r2, #24]
 8004c20:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <HAL_I2C_MspInit+0x74>)
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c2c:	23c0      	movs	r3, #192	; 0xc0
 8004c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c30:	2312      	movs	r3, #18
 8004c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c34:	2303      	movs	r3, #3
 8004c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	480b      	ldr	r0, [pc, #44]	; (8004c6c <HAL_I2C_MspInit+0x78>)
 8004c40:	f7fc fd36 	bl	80016b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_I2C_MspInit+0x74>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <HAL_I2C_MspInit+0x74>)
 8004c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c4e:	61d3      	str	r3, [r2, #28]
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_I2C_MspInit+0x74>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c5c:	bf00      	nop
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40005400 	.word	0x40005400
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40010c00 	.word	0x40010c00

08004c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d114      	bne.n	8004cac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_TIM_Base_MspInit+0x78>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIM_Base_MspInit+0x78>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	61d3      	str	r3, [r2, #28]
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <HAL_TIM_Base_MspInit+0x78>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	201c      	movs	r0, #28
 8004ca0:	f7fc fccf 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ca4:	201c      	movs	r0, #28
 8004ca6:	f7fc fce8 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004caa:	e018      	b.n	8004cde <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_TIM_Base_MspInit+0x7c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d113      	bne.n	8004cde <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <HAL_TIM_Base_MspInit+0x78>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <HAL_TIM_Base_MspInit+0x78>)
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	61d3      	str	r3, [r2, #28]
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_TIM_Base_MspInit+0x78>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	201d      	movs	r0, #29
 8004cd4:	f7fc fcb5 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cd8:	201d      	movs	r0, #29
 8004cda:	f7fc fcce 	bl	800167a <HAL_NVIC_EnableIRQ>
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40000400 	.word	0x40000400

08004cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d00:	e7fe      	b.n	8004d00 <HardFault_Handler+0x4>

08004d02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d06:	e7fe      	b.n	8004d06 <MemManage_Handler+0x4>

08004d08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d0c:	e7fe      	b.n	8004d0c <BusFault_Handler+0x4>

08004d0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d12:	e7fe      	b.n	8004d12 <UsageFault_Handler+0x4>

08004d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d3c:	f7fb ff52 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d40:	bf00      	nop
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d48:	4802      	ldr	r0, [pc, #8]	; (8004d54 <TIM2_IRQHandler+0x10>)
 8004d4a:	f7fe f95b 	bl	8003004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200007a4 	.word	0x200007a4

08004d58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d5c:	4802      	ldr	r0, [pc, #8]	; (8004d68 <TIM3_IRQHandler+0x10>)
 8004d5e:	f7fe f951 	bl	8003004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000734 	.word	0x20000734

08004d6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <_sbrk+0x50>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <_sbrk+0x16>
		heap_end = &end;
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <_sbrk+0x50>)
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <_sbrk+0x54>)
 8004d80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <_sbrk+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <_sbrk+0x50>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	466a      	mov	r2, sp
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d907      	bls.n	8004da6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004d96:	f000 f86f 	bl	8004e78 <__errno>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295
 8004da4:	e006      	b.n	8004db4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <_sbrk+0x50>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	4a03      	ldr	r2, [pc, #12]	; (8004dbc <_sbrk+0x50>)
 8004db0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000540 	.word	0x20000540
 8004dc0:	20000840 	.word	0x20000840

08004dc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <SystemInit+0x5c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <SystemInit+0x5c>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004dd4:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <SystemInit+0x5c>)
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	4911      	ldr	r1, [pc, #68]	; (8004e20 <SystemInit+0x5c>)
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <SystemInit+0x60>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <SystemInit+0x5c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <SystemInit+0x5c>)
 8004de6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <SystemInit+0x5c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <SystemInit+0x5c>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <SystemInit+0x5c>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <SystemInit+0x5c>)
 8004e02:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004e06:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <SystemInit+0x5c>)
 8004e0a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004e0e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <SystemInit+0x64>)
 8004e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e16:	609a      	str	r2, [r3, #8]
#endif 
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr
 8004e20:	40021000 	.word	0x40021000
 8004e24:	f8ff0000 	.word	0xf8ff0000
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004e2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004e2e:	e003      	b.n	8004e38 <LoopCopyDataInit>

08004e30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004e32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004e34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004e36:	3104      	adds	r1, #4

08004e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004e38:	480a      	ldr	r0, [pc, #40]	; (8004e64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004e3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004e3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004e40:	d3f6      	bcc.n	8004e30 <CopyDataInit>
  ldr r2, =_sbss
 8004e42:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004e44:	e002      	b.n	8004e4c <LoopFillZerobss>

08004e46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004e46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004e48:	f842 3b04 	str.w	r3, [r2], #4

08004e4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004e4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004e50:	d3f9      	bcc.n	8004e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e52:	f7ff ffb7 	bl	8004dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e56:	f000 f815 	bl	8004e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e5a:	f7fe fc05 	bl	8003668 <main>
  bx lr
 8004e5e:	4770      	bx	lr
  ldr r3, =_sidata
 8004e60:	08009880 	.word	0x08009880
  ldr r0, =_sdata
 8004e64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004e68:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8004e6c:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8004e70:	20000840 	.word	0x20000840

08004e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e74:	e7fe      	b.n	8004e74 <ADC1_2_IRQHandler>
	...

08004e78 <__errno>:
 8004e78:	4b01      	ldr	r3, [pc, #4]	; (8004e80 <__errno+0x8>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	2000001c 	.word	0x2000001c

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	2500      	movs	r5, #0
 8004e88:	4e0c      	ldr	r6, [pc, #48]	; (8004ebc <__libc_init_array+0x38>)
 8004e8a:	4c0d      	ldr	r4, [pc, #52]	; (8004ec0 <__libc_init_array+0x3c>)
 8004e8c:	1ba4      	subs	r4, r4, r6
 8004e8e:	10a4      	asrs	r4, r4, #2
 8004e90:	42a5      	cmp	r5, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	f003 f90c 	bl	80080b0 <_init>
 8004e98:	2500      	movs	r5, #0
 8004e9a:	4e0a      	ldr	r6, [pc, #40]	; (8004ec4 <__libc_init_array+0x40>)
 8004e9c:	4c0a      	ldr	r4, [pc, #40]	; (8004ec8 <__libc_init_array+0x44>)
 8004e9e:	1ba4      	subs	r4, r4, r6
 8004ea0:	10a4      	asrs	r4, r4, #2
 8004ea2:	42a5      	cmp	r5, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eac:	4798      	blx	r3
 8004eae:	3501      	adds	r5, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eb6:	4798      	blx	r3
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	08009878 	.word	0x08009878
 8004ec0:	08009878 	.word	0x08009878
 8004ec4:	08009878 	.word	0x08009878
 8004ec8:	0800987c 	.word	0x0800987c

08004ecc <memcpy>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	1e43      	subs	r3, r0, #1
 8004ed0:	440a      	add	r2, r1
 8004ed2:	4291      	cmp	r1, r2
 8004ed4:	d100      	bne.n	8004ed8 <memcpy+0xc>
 8004ed6:	bd10      	pop	{r4, pc}
 8004ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee0:	e7f7      	b.n	8004ed2 <memcpy+0x6>

08004ee2 <memset>:
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4402      	add	r2, r0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d100      	bne.n	8004eec <memset+0xa>
 8004eea:	4770      	bx	lr
 8004eec:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef0:	e7f9      	b.n	8004ee6 <memset+0x4>
	...

08004ef4 <siprintf>:
 8004ef4:	b40e      	push	{r1, r2, r3}
 8004ef6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004efa:	b500      	push	{lr}
 8004efc:	b09c      	sub	sp, #112	; 0x70
 8004efe:	ab1d      	add	r3, sp, #116	; 0x74
 8004f00:	9002      	str	r0, [sp, #8]
 8004f02:	9006      	str	r0, [sp, #24]
 8004f04:	9107      	str	r1, [sp, #28]
 8004f06:	9104      	str	r1, [sp, #16]
 8004f08:	4808      	ldr	r0, [pc, #32]	; (8004f2c <siprintf+0x38>)
 8004f0a:	4909      	ldr	r1, [pc, #36]	; (8004f30 <siprintf+0x3c>)
 8004f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f10:	9105      	str	r1, [sp, #20]
 8004f12:	6800      	ldr	r0, [r0, #0]
 8004f14:	a902      	add	r1, sp, #8
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	f000 f866 	bl	8004fe8 <_svfiprintf_r>
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	9b02      	ldr	r3, [sp, #8]
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	b01c      	add	sp, #112	; 0x70
 8004f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f28:	b003      	add	sp, #12
 8004f2a:	4770      	bx	lr
 8004f2c:	2000001c 	.word	0x2000001c
 8004f30:	ffff0208 	.word	0xffff0208

08004f34 <__ssputs_r>:
 8004f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f38:	688e      	ldr	r6, [r1, #8]
 8004f3a:	4682      	mov	sl, r0
 8004f3c:	429e      	cmp	r6, r3
 8004f3e:	460c      	mov	r4, r1
 8004f40:	4690      	mov	r8, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	d837      	bhi.n	8004fb6 <__ssputs_r+0x82>
 8004f46:	898a      	ldrh	r2, [r1, #12]
 8004f48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f4c:	d031      	beq.n	8004fb2 <__ssputs_r+0x7e>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	6825      	ldr	r5, [r4, #0]
 8004f52:	6909      	ldr	r1, [r1, #16]
 8004f54:	1a6f      	subs	r7, r5, r1
 8004f56:	6965      	ldr	r5, [r4, #20]
 8004f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f60:	f109 0301 	add.w	r3, r9, #1
 8004f64:	443b      	add	r3, r7
 8004f66:	429d      	cmp	r5, r3
 8004f68:	bf38      	it	cc
 8004f6a:	461d      	movcc	r5, r3
 8004f6c:	0553      	lsls	r3, r2, #21
 8004f6e:	d530      	bpl.n	8004fd2 <__ssputs_r+0x9e>
 8004f70:	4629      	mov	r1, r5
 8004f72:	f000 fb2d 	bl	80055d0 <_malloc_r>
 8004f76:	4606      	mov	r6, r0
 8004f78:	b950      	cbnz	r0, 8004f90 <__ssputs_r+0x5c>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	f8ca 3000 	str.w	r3, [sl]
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8a:	81a3      	strh	r3, [r4, #12]
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	463a      	mov	r2, r7
 8004f92:	6921      	ldr	r1, [r4, #16]
 8004f94:	f7ff ff9a 	bl	8004ecc <memcpy>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	6126      	str	r6, [r4, #16]
 8004fa6:	443e      	add	r6, r7
 8004fa8:	6026      	str	r6, [r4, #0]
 8004faa:	464e      	mov	r6, r9
 8004fac:	6165      	str	r5, [r4, #20]
 8004fae:	1bed      	subs	r5, r5, r7
 8004fb0:	60a5      	str	r5, [r4, #8]
 8004fb2:	454e      	cmp	r6, r9
 8004fb4:	d900      	bls.n	8004fb8 <__ssputs_r+0x84>
 8004fb6:	464e      	mov	r6, r9
 8004fb8:	4632      	mov	r2, r6
 8004fba:	4641      	mov	r1, r8
 8004fbc:	6820      	ldr	r0, [r4, #0]
 8004fbe:	f000 faa1 	bl	8005504 <memmove>
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	1b9b      	subs	r3, r3, r6
 8004fc8:	60a3      	str	r3, [r4, #8]
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	441e      	add	r6, r3
 8004fce:	6026      	str	r6, [r4, #0]
 8004fd0:	e7dc      	b.n	8004f8c <__ssputs_r+0x58>
 8004fd2:	462a      	mov	r2, r5
 8004fd4:	f000 fb56 	bl	8005684 <_realloc_r>
 8004fd8:	4606      	mov	r6, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d1e2      	bne.n	8004fa4 <__ssputs_r+0x70>
 8004fde:	6921      	ldr	r1, [r4, #16]
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	f000 faa9 	bl	8005538 <_free_r>
 8004fe6:	e7c8      	b.n	8004f7a <__ssputs_r+0x46>

08004fe8 <_svfiprintf_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	461d      	mov	r5, r3
 8004fee:	898b      	ldrh	r3, [r1, #12]
 8004ff0:	b09d      	sub	sp, #116	; 0x74
 8004ff2:	061f      	lsls	r7, r3, #24
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	d50f      	bpl.n	800501c <_svfiprintf_r+0x34>
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	b96b      	cbnz	r3, 800501c <_svfiprintf_r+0x34>
 8005000:	2140      	movs	r1, #64	; 0x40
 8005002:	f000 fae5 	bl	80055d0 <_malloc_r>
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	6120      	str	r0, [r4, #16]
 800500a:	b928      	cbnz	r0, 8005018 <_svfiprintf_r+0x30>
 800500c:	230c      	movs	r3, #12
 800500e:	f8c8 3000 	str.w	r3, [r8]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	e0c8      	b.n	80051aa <_svfiprintf_r+0x1c2>
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	6163      	str	r3, [r4, #20]
 800501c:	2300      	movs	r3, #0
 800501e:	9309      	str	r3, [sp, #36]	; 0x24
 8005020:	2320      	movs	r3, #32
 8005022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005026:	2330      	movs	r3, #48	; 0x30
 8005028:	f04f 0b01 	mov.w	fp, #1
 800502c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005030:	9503      	str	r5, [sp, #12]
 8005032:	4637      	mov	r7, r6
 8005034:	463d      	mov	r5, r7
 8005036:	f815 3b01 	ldrb.w	r3, [r5], #1
 800503a:	b10b      	cbz	r3, 8005040 <_svfiprintf_r+0x58>
 800503c:	2b25      	cmp	r3, #37	; 0x25
 800503e:	d13e      	bne.n	80050be <_svfiprintf_r+0xd6>
 8005040:	ebb7 0a06 	subs.w	sl, r7, r6
 8005044:	d00b      	beq.n	800505e <_svfiprintf_r+0x76>
 8005046:	4653      	mov	r3, sl
 8005048:	4632      	mov	r2, r6
 800504a:	4621      	mov	r1, r4
 800504c:	4640      	mov	r0, r8
 800504e:	f7ff ff71 	bl	8004f34 <__ssputs_r>
 8005052:	3001      	adds	r0, #1
 8005054:	f000 80a4 	beq.w	80051a0 <_svfiprintf_r+0x1b8>
 8005058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505a:	4453      	add	r3, sl
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	783b      	ldrb	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 809d 	beq.w	80051a0 <_svfiprintf_r+0x1b8>
 8005066:	2300      	movs	r3, #0
 8005068:	f04f 32ff 	mov.w	r2, #4294967295
 800506c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005078:	931a      	str	r3, [sp, #104]	; 0x68
 800507a:	462f      	mov	r7, r5
 800507c:	2205      	movs	r2, #5
 800507e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005082:	4850      	ldr	r0, [pc, #320]	; (80051c4 <_svfiprintf_r+0x1dc>)
 8005084:	f000 fa30 	bl	80054e8 <memchr>
 8005088:	9b04      	ldr	r3, [sp, #16]
 800508a:	b9d0      	cbnz	r0, 80050c2 <_svfiprintf_r+0xda>
 800508c:	06d9      	lsls	r1, r3, #27
 800508e:	bf44      	itt	mi
 8005090:	2220      	movmi	r2, #32
 8005092:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005096:	071a      	lsls	r2, r3, #28
 8005098:	bf44      	itt	mi
 800509a:	222b      	movmi	r2, #43	; 0x2b
 800509c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050a0:	782a      	ldrb	r2, [r5, #0]
 80050a2:	2a2a      	cmp	r2, #42	; 0x2a
 80050a4:	d015      	beq.n	80050d2 <_svfiprintf_r+0xea>
 80050a6:	462f      	mov	r7, r5
 80050a8:	2000      	movs	r0, #0
 80050aa:	250a      	movs	r5, #10
 80050ac:	9a07      	ldr	r2, [sp, #28]
 80050ae:	4639      	mov	r1, r7
 80050b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b4:	3b30      	subs	r3, #48	; 0x30
 80050b6:	2b09      	cmp	r3, #9
 80050b8:	d94d      	bls.n	8005156 <_svfiprintf_r+0x16e>
 80050ba:	b1b8      	cbz	r0, 80050ec <_svfiprintf_r+0x104>
 80050bc:	e00f      	b.n	80050de <_svfiprintf_r+0xf6>
 80050be:	462f      	mov	r7, r5
 80050c0:	e7b8      	b.n	8005034 <_svfiprintf_r+0x4c>
 80050c2:	4a40      	ldr	r2, [pc, #256]	; (80051c4 <_svfiprintf_r+0x1dc>)
 80050c4:	463d      	mov	r5, r7
 80050c6:	1a80      	subs	r0, r0, r2
 80050c8:	fa0b f000 	lsl.w	r0, fp, r0
 80050cc:	4318      	orrs	r0, r3
 80050ce:	9004      	str	r0, [sp, #16]
 80050d0:	e7d3      	b.n	800507a <_svfiprintf_r+0x92>
 80050d2:	9a03      	ldr	r2, [sp, #12]
 80050d4:	1d11      	adds	r1, r2, #4
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	9103      	str	r1, [sp, #12]
 80050da:	2a00      	cmp	r2, #0
 80050dc:	db01      	blt.n	80050e2 <_svfiprintf_r+0xfa>
 80050de:	9207      	str	r2, [sp, #28]
 80050e0:	e004      	b.n	80050ec <_svfiprintf_r+0x104>
 80050e2:	4252      	negs	r2, r2
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	9207      	str	r2, [sp, #28]
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	783b      	ldrb	r3, [r7, #0]
 80050ee:	2b2e      	cmp	r3, #46	; 0x2e
 80050f0:	d10c      	bne.n	800510c <_svfiprintf_r+0x124>
 80050f2:	787b      	ldrb	r3, [r7, #1]
 80050f4:	2b2a      	cmp	r3, #42	; 0x2a
 80050f6:	d133      	bne.n	8005160 <_svfiprintf_r+0x178>
 80050f8:	9b03      	ldr	r3, [sp, #12]
 80050fa:	3702      	adds	r7, #2
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	9203      	str	r2, [sp, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfb8      	it	lt
 8005106:	f04f 33ff 	movlt.w	r3, #4294967295
 800510a:	9305      	str	r3, [sp, #20]
 800510c:	4d2e      	ldr	r5, [pc, #184]	; (80051c8 <_svfiprintf_r+0x1e0>)
 800510e:	2203      	movs	r2, #3
 8005110:	7839      	ldrb	r1, [r7, #0]
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f9e8 	bl	80054e8 <memchr>
 8005118:	b138      	cbz	r0, 800512a <_svfiprintf_r+0x142>
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	1b40      	subs	r0, r0, r5
 800511e:	fa03 f000 	lsl.w	r0, r3, r0
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	3701      	adds	r7, #1
 8005126:	4303      	orrs	r3, r0
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	7839      	ldrb	r1, [r7, #0]
 800512c:	2206      	movs	r2, #6
 800512e:	4827      	ldr	r0, [pc, #156]	; (80051cc <_svfiprintf_r+0x1e4>)
 8005130:	1c7e      	adds	r6, r7, #1
 8005132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005136:	f000 f9d7 	bl	80054e8 <memchr>
 800513a:	2800      	cmp	r0, #0
 800513c:	d038      	beq.n	80051b0 <_svfiprintf_r+0x1c8>
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <_svfiprintf_r+0x1e8>)
 8005140:	bb13      	cbnz	r3, 8005188 <_svfiprintf_r+0x1a0>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	3307      	adds	r3, #7
 8005146:	f023 0307 	bic.w	r3, r3, #7
 800514a:	3308      	adds	r3, #8
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005150:	444b      	add	r3, r9
 8005152:	9309      	str	r3, [sp, #36]	; 0x24
 8005154:	e76d      	b.n	8005032 <_svfiprintf_r+0x4a>
 8005156:	fb05 3202 	mla	r2, r5, r2, r3
 800515a:	2001      	movs	r0, #1
 800515c:	460f      	mov	r7, r1
 800515e:	e7a6      	b.n	80050ae <_svfiprintf_r+0xc6>
 8005160:	2300      	movs	r3, #0
 8005162:	250a      	movs	r5, #10
 8005164:	4619      	mov	r1, r3
 8005166:	3701      	adds	r7, #1
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	4638      	mov	r0, r7
 800516c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005170:	3a30      	subs	r2, #48	; 0x30
 8005172:	2a09      	cmp	r2, #9
 8005174:	d903      	bls.n	800517e <_svfiprintf_r+0x196>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0c8      	beq.n	800510c <_svfiprintf_r+0x124>
 800517a:	9105      	str	r1, [sp, #20]
 800517c:	e7c6      	b.n	800510c <_svfiprintf_r+0x124>
 800517e:	fb05 2101 	mla	r1, r5, r1, r2
 8005182:	2301      	movs	r3, #1
 8005184:	4607      	mov	r7, r0
 8005186:	e7f0      	b.n	800516a <_svfiprintf_r+0x182>
 8005188:	ab03      	add	r3, sp, #12
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4622      	mov	r2, r4
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <_svfiprintf_r+0x1ec>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	4640      	mov	r0, r8
 8005194:	f3af 8000 	nop.w
 8005198:	f1b0 3fff 	cmp.w	r0, #4294967295
 800519c:	4681      	mov	r9, r0
 800519e:	d1d6      	bne.n	800514e <_svfiprintf_r+0x166>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	065b      	lsls	r3, r3, #25
 80051a4:	f53f af35 	bmi.w	8005012 <_svfiprintf_r+0x2a>
 80051a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051aa:	b01d      	add	sp, #116	; 0x74
 80051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b0:	ab03      	add	r3, sp, #12
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4622      	mov	r2, r4
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <_svfiprintf_r+0x1ec>)
 80051b8:	a904      	add	r1, sp, #16
 80051ba:	4640      	mov	r0, r8
 80051bc:	f000 f882 	bl	80052c4 <_printf_i>
 80051c0:	e7ea      	b.n	8005198 <_svfiprintf_r+0x1b0>
 80051c2:	bf00      	nop
 80051c4:	080095e8 	.word	0x080095e8
 80051c8:	080095ee 	.word	0x080095ee
 80051cc:	080095f2 	.word	0x080095f2
 80051d0:	00000000 	.word	0x00000000
 80051d4:	08004f35 	.word	0x08004f35

080051d8 <_printf_common>:
 80051d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	4691      	mov	r9, r2
 80051de:	461f      	mov	r7, r3
 80051e0:	688a      	ldr	r2, [r1, #8]
 80051e2:	690b      	ldr	r3, [r1, #16]
 80051e4:	4606      	mov	r6, r0
 80051e6:	4293      	cmp	r3, r2
 80051e8:	bfb8      	it	lt
 80051ea:	4613      	movlt	r3, r2
 80051ec:	f8c9 3000 	str.w	r3, [r9]
 80051f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051f4:	460c      	mov	r4, r1
 80051f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051fa:	b112      	cbz	r2, 8005202 <_printf_common+0x2a>
 80051fc:	3301      	adds	r3, #1
 80051fe:	f8c9 3000 	str.w	r3, [r9]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	0699      	lsls	r1, r3, #26
 8005206:	bf42      	ittt	mi
 8005208:	f8d9 3000 	ldrmi.w	r3, [r9]
 800520c:	3302      	addmi	r3, #2
 800520e:	f8c9 3000 	strmi.w	r3, [r9]
 8005212:	6825      	ldr	r5, [r4, #0]
 8005214:	f015 0506 	ands.w	r5, r5, #6
 8005218:	d107      	bne.n	800522a <_printf_common+0x52>
 800521a:	f104 0a19 	add.w	sl, r4, #25
 800521e:	68e3      	ldr	r3, [r4, #12]
 8005220:	f8d9 2000 	ldr.w	r2, [r9]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	42ab      	cmp	r3, r5
 8005228:	dc29      	bgt.n	800527e <_printf_common+0xa6>
 800522a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	3300      	adds	r3, #0
 8005232:	bf18      	it	ne
 8005234:	2301      	movne	r3, #1
 8005236:	0692      	lsls	r2, r2, #26
 8005238:	d42e      	bmi.n	8005298 <_printf_common+0xc0>
 800523a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800523e:	4639      	mov	r1, r7
 8005240:	4630      	mov	r0, r6
 8005242:	47c0      	blx	r8
 8005244:	3001      	adds	r0, #1
 8005246:	d021      	beq.n	800528c <_printf_common+0xb4>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	68e5      	ldr	r5, [r4, #12]
 800524c:	f003 0306 	and.w	r3, r3, #6
 8005250:	2b04      	cmp	r3, #4
 8005252:	bf18      	it	ne
 8005254:	2500      	movne	r5, #0
 8005256:	f8d9 2000 	ldr.w	r2, [r9]
 800525a:	f04f 0900 	mov.w	r9, #0
 800525e:	bf08      	it	eq
 8005260:	1aad      	subeq	r5, r5, r2
 8005262:	68a3      	ldr	r3, [r4, #8]
 8005264:	6922      	ldr	r2, [r4, #16]
 8005266:	bf08      	it	eq
 8005268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800526c:	4293      	cmp	r3, r2
 800526e:	bfc4      	itt	gt
 8005270:	1a9b      	subgt	r3, r3, r2
 8005272:	18ed      	addgt	r5, r5, r3
 8005274:	341a      	adds	r4, #26
 8005276:	454d      	cmp	r5, r9
 8005278:	d11a      	bne.n	80052b0 <_printf_common+0xd8>
 800527a:	2000      	movs	r0, #0
 800527c:	e008      	b.n	8005290 <_printf_common+0xb8>
 800527e:	2301      	movs	r3, #1
 8005280:	4652      	mov	r2, sl
 8005282:	4639      	mov	r1, r7
 8005284:	4630      	mov	r0, r6
 8005286:	47c0      	blx	r8
 8005288:	3001      	adds	r0, #1
 800528a:	d103      	bne.n	8005294 <_printf_common+0xbc>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005294:	3501      	adds	r5, #1
 8005296:	e7c2      	b.n	800521e <_printf_common+0x46>
 8005298:	2030      	movs	r0, #48	; 0x30
 800529a:	18e1      	adds	r1, r4, r3
 800529c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a6:	4422      	add	r2, r4
 80052a8:	3302      	adds	r3, #2
 80052aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ae:	e7c4      	b.n	800523a <_printf_common+0x62>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4622      	mov	r2, r4
 80052b4:	4639      	mov	r1, r7
 80052b6:	4630      	mov	r0, r6
 80052b8:	47c0      	blx	r8
 80052ba:	3001      	adds	r0, #1
 80052bc:	d0e6      	beq.n	800528c <_printf_common+0xb4>
 80052be:	f109 0901 	add.w	r9, r9, #1
 80052c2:	e7d8      	b.n	8005276 <_printf_common+0x9e>

080052c4 <_printf_i>:
 80052c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052cc:	460c      	mov	r4, r1
 80052ce:	7e09      	ldrb	r1, [r1, #24]
 80052d0:	b085      	sub	sp, #20
 80052d2:	296e      	cmp	r1, #110	; 0x6e
 80052d4:	4617      	mov	r7, r2
 80052d6:	4606      	mov	r6, r0
 80052d8:	4698      	mov	r8, r3
 80052da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052dc:	f000 80b3 	beq.w	8005446 <_printf_i+0x182>
 80052e0:	d822      	bhi.n	8005328 <_printf_i+0x64>
 80052e2:	2963      	cmp	r1, #99	; 0x63
 80052e4:	d036      	beq.n	8005354 <_printf_i+0x90>
 80052e6:	d80a      	bhi.n	80052fe <_printf_i+0x3a>
 80052e8:	2900      	cmp	r1, #0
 80052ea:	f000 80b9 	beq.w	8005460 <_printf_i+0x19c>
 80052ee:	2958      	cmp	r1, #88	; 0x58
 80052f0:	f000 8083 	beq.w	80053fa <_printf_i+0x136>
 80052f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80052fc:	e032      	b.n	8005364 <_printf_i+0xa0>
 80052fe:	2964      	cmp	r1, #100	; 0x64
 8005300:	d001      	beq.n	8005306 <_printf_i+0x42>
 8005302:	2969      	cmp	r1, #105	; 0x69
 8005304:	d1f6      	bne.n	80052f4 <_printf_i+0x30>
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	6813      	ldr	r3, [r2, #0]
 800530a:	0605      	lsls	r5, r0, #24
 800530c:	f103 0104 	add.w	r1, r3, #4
 8005310:	d52a      	bpl.n	8005368 <_printf_i+0xa4>
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	da03      	bge.n	8005322 <_printf_i+0x5e>
 800531a:	222d      	movs	r2, #45	; 0x2d
 800531c:	425b      	negs	r3, r3
 800531e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005322:	486f      	ldr	r0, [pc, #444]	; (80054e0 <_printf_i+0x21c>)
 8005324:	220a      	movs	r2, #10
 8005326:	e039      	b.n	800539c <_printf_i+0xd8>
 8005328:	2973      	cmp	r1, #115	; 0x73
 800532a:	f000 809d 	beq.w	8005468 <_printf_i+0x1a4>
 800532e:	d808      	bhi.n	8005342 <_printf_i+0x7e>
 8005330:	296f      	cmp	r1, #111	; 0x6f
 8005332:	d020      	beq.n	8005376 <_printf_i+0xb2>
 8005334:	2970      	cmp	r1, #112	; 0x70
 8005336:	d1dd      	bne.n	80052f4 <_printf_i+0x30>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	f043 0320 	orr.w	r3, r3, #32
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	e003      	b.n	800534a <_printf_i+0x86>
 8005342:	2975      	cmp	r1, #117	; 0x75
 8005344:	d017      	beq.n	8005376 <_printf_i+0xb2>
 8005346:	2978      	cmp	r1, #120	; 0x78
 8005348:	d1d4      	bne.n	80052f4 <_printf_i+0x30>
 800534a:	2378      	movs	r3, #120	; 0x78
 800534c:	4865      	ldr	r0, [pc, #404]	; (80054e4 <_printf_i+0x220>)
 800534e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005352:	e055      	b.n	8005400 <_printf_i+0x13c>
 8005354:	6813      	ldr	r3, [r2, #0]
 8005356:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800535a:	1d19      	adds	r1, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6011      	str	r1, [r2, #0]
 8005360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005364:	2301      	movs	r3, #1
 8005366:	e08c      	b.n	8005482 <_printf_i+0x1be>
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800536e:	6011      	str	r1, [r2, #0]
 8005370:	bf18      	it	ne
 8005372:	b21b      	sxthne	r3, r3
 8005374:	e7cf      	b.n	8005316 <_printf_i+0x52>
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	6825      	ldr	r5, [r4, #0]
 800537a:	1d18      	adds	r0, r3, #4
 800537c:	6010      	str	r0, [r2, #0]
 800537e:	0628      	lsls	r0, r5, #24
 8005380:	d501      	bpl.n	8005386 <_printf_i+0xc2>
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	e002      	b.n	800538c <_printf_i+0xc8>
 8005386:	0668      	lsls	r0, r5, #25
 8005388:	d5fb      	bpl.n	8005382 <_printf_i+0xbe>
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	296f      	cmp	r1, #111	; 0x6f
 800538e:	bf14      	ite	ne
 8005390:	220a      	movne	r2, #10
 8005392:	2208      	moveq	r2, #8
 8005394:	4852      	ldr	r0, [pc, #328]	; (80054e0 <_printf_i+0x21c>)
 8005396:	2100      	movs	r1, #0
 8005398:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539c:	6865      	ldr	r5, [r4, #4]
 800539e:	2d00      	cmp	r5, #0
 80053a0:	60a5      	str	r5, [r4, #8]
 80053a2:	f2c0 8095 	blt.w	80054d0 <_printf_i+0x20c>
 80053a6:	6821      	ldr	r1, [r4, #0]
 80053a8:	f021 0104 	bic.w	r1, r1, #4
 80053ac:	6021      	str	r1, [r4, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d13d      	bne.n	800542e <_printf_i+0x16a>
 80053b2:	2d00      	cmp	r5, #0
 80053b4:	f040 808e 	bne.w	80054d4 <_printf_i+0x210>
 80053b8:	4665      	mov	r5, ip
 80053ba:	2a08      	cmp	r2, #8
 80053bc:	d10b      	bne.n	80053d6 <_printf_i+0x112>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	07db      	lsls	r3, r3, #31
 80053c2:	d508      	bpl.n	80053d6 <_printf_i+0x112>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	6862      	ldr	r2, [r4, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	bfde      	ittt	le
 80053cc:	2330      	movle	r3, #48	; 0x30
 80053ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053d6:	ebac 0305 	sub.w	r3, ip, r5
 80053da:	6123      	str	r3, [r4, #16]
 80053dc:	f8cd 8000 	str.w	r8, [sp]
 80053e0:	463b      	mov	r3, r7
 80053e2:	aa03      	add	r2, sp, #12
 80053e4:	4621      	mov	r1, r4
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7ff fef6 	bl	80051d8 <_printf_common>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d14d      	bne.n	800548c <_printf_i+0x1c8>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	b005      	add	sp, #20
 80053f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053fa:	4839      	ldr	r0, [pc, #228]	; (80054e0 <_printf_i+0x21c>)
 80053fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	6821      	ldr	r1, [r4, #0]
 8005404:	1d1d      	adds	r5, r3, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6015      	str	r5, [r2, #0]
 800540a:	060a      	lsls	r2, r1, #24
 800540c:	d50b      	bpl.n	8005426 <_printf_i+0x162>
 800540e:	07ca      	lsls	r2, r1, #31
 8005410:	bf44      	itt	mi
 8005412:	f041 0120 	orrmi.w	r1, r1, #32
 8005416:	6021      	strmi	r1, [r4, #0]
 8005418:	b91b      	cbnz	r3, 8005422 <_printf_i+0x15e>
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	f022 0220 	bic.w	r2, r2, #32
 8005420:	6022      	str	r2, [r4, #0]
 8005422:	2210      	movs	r2, #16
 8005424:	e7b7      	b.n	8005396 <_printf_i+0xd2>
 8005426:	064d      	lsls	r5, r1, #25
 8005428:	bf48      	it	mi
 800542a:	b29b      	uxthmi	r3, r3
 800542c:	e7ef      	b.n	800540e <_printf_i+0x14a>
 800542e:	4665      	mov	r5, ip
 8005430:	fbb3 f1f2 	udiv	r1, r3, r2
 8005434:	fb02 3311 	mls	r3, r2, r1, r3
 8005438:	5cc3      	ldrb	r3, [r0, r3]
 800543a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800543e:	460b      	mov	r3, r1
 8005440:	2900      	cmp	r1, #0
 8005442:	d1f5      	bne.n	8005430 <_printf_i+0x16c>
 8005444:	e7b9      	b.n	80053ba <_printf_i+0xf6>
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	6825      	ldr	r5, [r4, #0]
 800544a:	1d18      	adds	r0, r3, #4
 800544c:	6961      	ldr	r1, [r4, #20]
 800544e:	6010      	str	r0, [r2, #0]
 8005450:	0628      	lsls	r0, r5, #24
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	d501      	bpl.n	800545a <_printf_i+0x196>
 8005456:	6019      	str	r1, [r3, #0]
 8005458:	e002      	b.n	8005460 <_printf_i+0x19c>
 800545a:	066a      	lsls	r2, r5, #25
 800545c:	d5fb      	bpl.n	8005456 <_printf_i+0x192>
 800545e:	8019      	strh	r1, [r3, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	4665      	mov	r5, ip
 8005464:	6123      	str	r3, [r4, #16]
 8005466:	e7b9      	b.n	80053dc <_printf_i+0x118>
 8005468:	6813      	ldr	r3, [r2, #0]
 800546a:	1d19      	adds	r1, r3, #4
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	681d      	ldr	r5, [r3, #0]
 8005470:	6862      	ldr	r2, [r4, #4]
 8005472:	2100      	movs	r1, #0
 8005474:	4628      	mov	r0, r5
 8005476:	f000 f837 	bl	80054e8 <memchr>
 800547a:	b108      	cbz	r0, 8005480 <_printf_i+0x1bc>
 800547c:	1b40      	subs	r0, r0, r5
 800547e:	6060      	str	r0, [r4, #4]
 8005480:	6863      	ldr	r3, [r4, #4]
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	2300      	movs	r3, #0
 8005486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800548a:	e7a7      	b.n	80053dc <_printf_i+0x118>
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	462a      	mov	r2, r5
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d0aa      	beq.n	80053f0 <_printf_i+0x12c>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	079b      	lsls	r3, r3, #30
 800549e:	d413      	bmi.n	80054c8 <_printf_i+0x204>
 80054a0:	68e0      	ldr	r0, [r4, #12]
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	4298      	cmp	r0, r3
 80054a6:	bfb8      	it	lt
 80054a8:	4618      	movlt	r0, r3
 80054aa:	e7a3      	b.n	80053f4 <_printf_i+0x130>
 80054ac:	2301      	movs	r3, #1
 80054ae:	464a      	mov	r2, r9
 80054b0:	4639      	mov	r1, r7
 80054b2:	4630      	mov	r0, r6
 80054b4:	47c0      	blx	r8
 80054b6:	3001      	adds	r0, #1
 80054b8:	d09a      	beq.n	80053f0 <_printf_i+0x12c>
 80054ba:	3501      	adds	r5, #1
 80054bc:	68e3      	ldr	r3, [r4, #12]
 80054be:	9a03      	ldr	r2, [sp, #12]
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	42ab      	cmp	r3, r5
 80054c4:	dcf2      	bgt.n	80054ac <_printf_i+0x1e8>
 80054c6:	e7eb      	b.n	80054a0 <_printf_i+0x1dc>
 80054c8:	2500      	movs	r5, #0
 80054ca:	f104 0919 	add.w	r9, r4, #25
 80054ce:	e7f5      	b.n	80054bc <_printf_i+0x1f8>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ac      	bne.n	800542e <_printf_i+0x16a>
 80054d4:	7803      	ldrb	r3, [r0, #0]
 80054d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054de:	e76c      	b.n	80053ba <_printf_i+0xf6>
 80054e0:	080095f9 	.word	0x080095f9
 80054e4:	0800960a 	.word	0x0800960a

080054e8 <memchr>:
 80054e8:	b510      	push	{r4, lr}
 80054ea:	b2c9      	uxtb	r1, r1
 80054ec:	4402      	add	r2, r0
 80054ee:	4290      	cmp	r0, r2
 80054f0:	4603      	mov	r3, r0
 80054f2:	d101      	bne.n	80054f8 <memchr+0x10>
 80054f4:	2300      	movs	r3, #0
 80054f6:	e003      	b.n	8005500 <memchr+0x18>
 80054f8:	781c      	ldrb	r4, [r3, #0]
 80054fa:	3001      	adds	r0, #1
 80054fc:	428c      	cmp	r4, r1
 80054fe:	d1f6      	bne.n	80054ee <memchr+0x6>
 8005500:	4618      	mov	r0, r3
 8005502:	bd10      	pop	{r4, pc}

08005504 <memmove>:
 8005504:	4288      	cmp	r0, r1
 8005506:	b510      	push	{r4, lr}
 8005508:	eb01 0302 	add.w	r3, r1, r2
 800550c:	d807      	bhi.n	800551e <memmove+0x1a>
 800550e:	1e42      	subs	r2, r0, #1
 8005510:	4299      	cmp	r1, r3
 8005512:	d00a      	beq.n	800552a <memmove+0x26>
 8005514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005518:	f802 4f01 	strb.w	r4, [r2, #1]!
 800551c:	e7f8      	b.n	8005510 <memmove+0xc>
 800551e:	4283      	cmp	r3, r0
 8005520:	d9f5      	bls.n	800550e <memmove+0xa>
 8005522:	1881      	adds	r1, r0, r2
 8005524:	1ad2      	subs	r2, r2, r3
 8005526:	42d3      	cmn	r3, r2
 8005528:	d100      	bne.n	800552c <memmove+0x28>
 800552a:	bd10      	pop	{r4, pc}
 800552c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005530:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005534:	e7f7      	b.n	8005526 <memmove+0x22>
	...

08005538 <_free_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4605      	mov	r5, r0
 800553c:	2900      	cmp	r1, #0
 800553e:	d043      	beq.n	80055c8 <_free_r+0x90>
 8005540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005544:	1f0c      	subs	r4, r1, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	bfb8      	it	lt
 800554a:	18e4      	addlt	r4, r4, r3
 800554c:	f000 f8d0 	bl	80056f0 <__malloc_lock>
 8005550:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <_free_r+0x94>)
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	4610      	mov	r0, r2
 8005556:	b933      	cbnz	r3, 8005566 <_free_r+0x2e>
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	6014      	str	r4, [r2, #0]
 800555c:	4628      	mov	r0, r5
 800555e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005562:	f000 b8c6 	b.w	80056f2 <__malloc_unlock>
 8005566:	42a3      	cmp	r3, r4
 8005568:	d90b      	bls.n	8005582 <_free_r+0x4a>
 800556a:	6821      	ldr	r1, [r4, #0]
 800556c:	1862      	adds	r2, r4, r1
 800556e:	4293      	cmp	r3, r2
 8005570:	bf01      	itttt	eq
 8005572:	681a      	ldreq	r2, [r3, #0]
 8005574:	685b      	ldreq	r3, [r3, #4]
 8005576:	1852      	addeq	r2, r2, r1
 8005578:	6022      	streq	r2, [r4, #0]
 800557a:	6063      	str	r3, [r4, #4]
 800557c:	6004      	str	r4, [r0, #0]
 800557e:	e7ed      	b.n	800555c <_free_r+0x24>
 8005580:	4613      	mov	r3, r2
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	b10a      	cbz	r2, 800558a <_free_r+0x52>
 8005586:	42a2      	cmp	r2, r4
 8005588:	d9fa      	bls.n	8005580 <_free_r+0x48>
 800558a:	6819      	ldr	r1, [r3, #0]
 800558c:	1858      	adds	r0, r3, r1
 800558e:	42a0      	cmp	r0, r4
 8005590:	d10b      	bne.n	80055aa <_free_r+0x72>
 8005592:	6820      	ldr	r0, [r4, #0]
 8005594:	4401      	add	r1, r0
 8005596:	1858      	adds	r0, r3, r1
 8005598:	4282      	cmp	r2, r0
 800559a:	6019      	str	r1, [r3, #0]
 800559c:	d1de      	bne.n	800555c <_free_r+0x24>
 800559e:	6810      	ldr	r0, [r2, #0]
 80055a0:	6852      	ldr	r2, [r2, #4]
 80055a2:	4401      	add	r1, r0
 80055a4:	6019      	str	r1, [r3, #0]
 80055a6:	605a      	str	r2, [r3, #4]
 80055a8:	e7d8      	b.n	800555c <_free_r+0x24>
 80055aa:	d902      	bls.n	80055b2 <_free_r+0x7a>
 80055ac:	230c      	movs	r3, #12
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	e7d4      	b.n	800555c <_free_r+0x24>
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	1821      	adds	r1, r4, r0
 80055b6:	428a      	cmp	r2, r1
 80055b8:	bf01      	itttt	eq
 80055ba:	6811      	ldreq	r1, [r2, #0]
 80055bc:	6852      	ldreq	r2, [r2, #4]
 80055be:	1809      	addeq	r1, r1, r0
 80055c0:	6021      	streq	r1, [r4, #0]
 80055c2:	6062      	str	r2, [r4, #4]
 80055c4:	605c      	str	r4, [r3, #4]
 80055c6:	e7c9      	b.n	800555c <_free_r+0x24>
 80055c8:	bd38      	pop	{r3, r4, r5, pc}
 80055ca:	bf00      	nop
 80055cc:	20000544 	.word	0x20000544

080055d0 <_malloc_r>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	1ccd      	adds	r5, r1, #3
 80055d4:	f025 0503 	bic.w	r5, r5, #3
 80055d8:	3508      	adds	r5, #8
 80055da:	2d0c      	cmp	r5, #12
 80055dc:	bf38      	it	cc
 80055de:	250c      	movcc	r5, #12
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	4606      	mov	r6, r0
 80055e4:	db01      	blt.n	80055ea <_malloc_r+0x1a>
 80055e6:	42a9      	cmp	r1, r5
 80055e8:	d903      	bls.n	80055f2 <_malloc_r+0x22>
 80055ea:	230c      	movs	r3, #12
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	2000      	movs	r0, #0
 80055f0:	bd70      	pop	{r4, r5, r6, pc}
 80055f2:	f000 f87d 	bl	80056f0 <__malloc_lock>
 80055f6:	4a21      	ldr	r2, [pc, #132]	; (800567c <_malloc_r+0xac>)
 80055f8:	6814      	ldr	r4, [r2, #0]
 80055fa:	4621      	mov	r1, r4
 80055fc:	b991      	cbnz	r1, 8005624 <_malloc_r+0x54>
 80055fe:	4c20      	ldr	r4, [pc, #128]	; (8005680 <_malloc_r+0xb0>)
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	b91b      	cbnz	r3, 800560c <_malloc_r+0x3c>
 8005604:	4630      	mov	r0, r6
 8005606:	f000 f863 	bl	80056d0 <_sbrk_r>
 800560a:	6020      	str	r0, [r4, #0]
 800560c:	4629      	mov	r1, r5
 800560e:	4630      	mov	r0, r6
 8005610:	f000 f85e 	bl	80056d0 <_sbrk_r>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d124      	bne.n	8005662 <_malloc_r+0x92>
 8005618:	230c      	movs	r3, #12
 800561a:	4630      	mov	r0, r6
 800561c:	6033      	str	r3, [r6, #0]
 800561e:	f000 f868 	bl	80056f2 <__malloc_unlock>
 8005622:	e7e4      	b.n	80055ee <_malloc_r+0x1e>
 8005624:	680b      	ldr	r3, [r1, #0]
 8005626:	1b5b      	subs	r3, r3, r5
 8005628:	d418      	bmi.n	800565c <_malloc_r+0x8c>
 800562a:	2b0b      	cmp	r3, #11
 800562c:	d90f      	bls.n	800564e <_malloc_r+0x7e>
 800562e:	600b      	str	r3, [r1, #0]
 8005630:	18cc      	adds	r4, r1, r3
 8005632:	50cd      	str	r5, [r1, r3]
 8005634:	4630      	mov	r0, r6
 8005636:	f000 f85c 	bl	80056f2 <__malloc_unlock>
 800563a:	f104 000b 	add.w	r0, r4, #11
 800563e:	1d23      	adds	r3, r4, #4
 8005640:	f020 0007 	bic.w	r0, r0, #7
 8005644:	1ac3      	subs	r3, r0, r3
 8005646:	d0d3      	beq.n	80055f0 <_malloc_r+0x20>
 8005648:	425a      	negs	r2, r3
 800564a:	50e2      	str	r2, [r4, r3]
 800564c:	e7d0      	b.n	80055f0 <_malloc_r+0x20>
 800564e:	684b      	ldr	r3, [r1, #4]
 8005650:	428c      	cmp	r4, r1
 8005652:	bf16      	itet	ne
 8005654:	6063      	strne	r3, [r4, #4]
 8005656:	6013      	streq	r3, [r2, #0]
 8005658:	460c      	movne	r4, r1
 800565a:	e7eb      	b.n	8005634 <_malloc_r+0x64>
 800565c:	460c      	mov	r4, r1
 800565e:	6849      	ldr	r1, [r1, #4]
 8005660:	e7cc      	b.n	80055fc <_malloc_r+0x2c>
 8005662:	1cc4      	adds	r4, r0, #3
 8005664:	f024 0403 	bic.w	r4, r4, #3
 8005668:	42a0      	cmp	r0, r4
 800566a:	d005      	beq.n	8005678 <_malloc_r+0xa8>
 800566c:	1a21      	subs	r1, r4, r0
 800566e:	4630      	mov	r0, r6
 8005670:	f000 f82e 	bl	80056d0 <_sbrk_r>
 8005674:	3001      	adds	r0, #1
 8005676:	d0cf      	beq.n	8005618 <_malloc_r+0x48>
 8005678:	6025      	str	r5, [r4, #0]
 800567a:	e7db      	b.n	8005634 <_malloc_r+0x64>
 800567c:	20000544 	.word	0x20000544
 8005680:	20000548 	.word	0x20000548

08005684 <_realloc_r>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	4607      	mov	r7, r0
 8005688:	4614      	mov	r4, r2
 800568a:	460e      	mov	r6, r1
 800568c:	b921      	cbnz	r1, 8005698 <_realloc_r+0x14>
 800568e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005692:	4611      	mov	r1, r2
 8005694:	f7ff bf9c 	b.w	80055d0 <_malloc_r>
 8005698:	b922      	cbnz	r2, 80056a4 <_realloc_r+0x20>
 800569a:	f7ff ff4d 	bl	8005538 <_free_r>
 800569e:	4625      	mov	r5, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a4:	f000 f826 	bl	80056f4 <_malloc_usable_size_r>
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d20f      	bcs.n	80056cc <_realloc_r+0x48>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4638      	mov	r0, r7
 80056b0:	f7ff ff8e 	bl	80055d0 <_malloc_r>
 80056b4:	4605      	mov	r5, r0
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d0f2      	beq.n	80056a0 <_realloc_r+0x1c>
 80056ba:	4631      	mov	r1, r6
 80056bc:	4622      	mov	r2, r4
 80056be:	f7ff fc05 	bl	8004ecc <memcpy>
 80056c2:	4631      	mov	r1, r6
 80056c4:	4638      	mov	r0, r7
 80056c6:	f7ff ff37 	bl	8005538 <_free_r>
 80056ca:	e7e9      	b.n	80056a0 <_realloc_r+0x1c>
 80056cc:	4635      	mov	r5, r6
 80056ce:	e7e7      	b.n	80056a0 <_realloc_r+0x1c>

080056d0 <_sbrk_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	2300      	movs	r3, #0
 80056d4:	4c05      	ldr	r4, [pc, #20]	; (80056ec <_sbrk_r+0x1c>)
 80056d6:	4605      	mov	r5, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	f7ff fb46 	bl	8004d6c <_sbrk>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_sbrk_r+0x1a>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_sbrk_r+0x1a>
 80056e8:	602b      	str	r3, [r5, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	2000083c 	.word	0x2000083c

080056f0 <__malloc_lock>:
 80056f0:	4770      	bx	lr

080056f2 <__malloc_unlock>:
 80056f2:	4770      	bx	lr

080056f4 <_malloc_usable_size_r>:
 80056f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f8:	1f18      	subs	r0, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfbc      	itt	lt
 80056fe:	580b      	ldrlt	r3, [r1, r0]
 8005700:	18c0      	addlt	r0, r0, r3
 8005702:	4770      	bx	lr

08005704 <cos>:
 8005704:	b530      	push	{r4, r5, lr}
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <cos+0x64>)
 8005708:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800570c:	4293      	cmp	r3, r2
 800570e:	b087      	sub	sp, #28
 8005710:	dc04      	bgt.n	800571c <cos+0x18>
 8005712:	2200      	movs	r2, #0
 8005714:	2300      	movs	r3, #0
 8005716:	f001 fd43 	bl	80071a0 <__kernel_cos>
 800571a:	e006      	b.n	800572a <cos+0x26>
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <cos+0x68>)
 800571e:	4293      	cmp	r3, r2
 8005720:	dd05      	ble.n	800572e <cos+0x2a>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	f7fa fd17 	bl	8000158 <__aeabi_dsub>
 800572a:	b007      	add	sp, #28
 800572c:	bd30      	pop	{r4, r5, pc}
 800572e:	aa02      	add	r2, sp, #8
 8005730:	f001 fa9a 	bl	8006c68 <__ieee754_rem_pio2>
 8005734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005738:	f000 0403 	and.w	r4, r0, #3
 800573c:	2c01      	cmp	r4, #1
 800573e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005742:	d008      	beq.n	8005756 <cos+0x52>
 8005744:	2c02      	cmp	r4, #2
 8005746:	d00c      	beq.n	8005762 <cos+0x5e>
 8005748:	2c00      	cmp	r4, #0
 800574a:	d0e4      	beq.n	8005716 <cos+0x12>
 800574c:	2401      	movs	r4, #1
 800574e:	9400      	str	r4, [sp, #0]
 8005750:	f002 f92e 	bl	80079b0 <__kernel_sin>
 8005754:	e7e9      	b.n	800572a <cos+0x26>
 8005756:	9400      	str	r4, [sp, #0]
 8005758:	f002 f92a 	bl	80079b0 <__kernel_sin>
 800575c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005760:	e7e3      	b.n	800572a <cos+0x26>
 8005762:	f001 fd1d 	bl	80071a0 <__kernel_cos>
 8005766:	e7f9      	b.n	800575c <cos+0x58>
 8005768:	3fe921fb 	.word	0x3fe921fb
 800576c:	7fefffff 	.word	0x7fefffff

08005770 <floor>:
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005778:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800577c:	2e13      	cmp	r6, #19
 800577e:	4607      	mov	r7, r0
 8005780:	460b      	mov	r3, r1
 8005782:	460c      	mov	r4, r1
 8005784:	4605      	mov	r5, r0
 8005786:	dc35      	bgt.n	80057f4 <floor+0x84>
 8005788:	2e00      	cmp	r6, #0
 800578a:	da16      	bge.n	80057ba <floor+0x4a>
 800578c:	a336      	add	r3, pc, #216	; (adr r3, 8005868 <floor+0xf8>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa fce3 	bl	800015c <__adddf3>
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	f7fb f925 	bl	80009e8 <__aeabi_dcmpgt>
 800579e:	b148      	cbz	r0, 80057b4 <floor+0x44>
 80057a0:	2c00      	cmp	r4, #0
 80057a2:	da5b      	bge.n	800585c <floor+0xec>
 80057a4:	2500      	movs	r5, #0
 80057a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80057aa:	4a31      	ldr	r2, [pc, #196]	; (8005870 <floor+0x100>)
 80057ac:	433b      	orrs	r3, r7
 80057ae:	42ab      	cmp	r3, r5
 80057b0:	bf18      	it	ne
 80057b2:	4614      	movne	r4, r2
 80057b4:	4623      	mov	r3, r4
 80057b6:	462f      	mov	r7, r5
 80057b8:	e026      	b.n	8005808 <floor+0x98>
 80057ba:	4a2e      	ldr	r2, [pc, #184]	; (8005874 <floor+0x104>)
 80057bc:	fa42 f806 	asr.w	r8, r2, r6
 80057c0:	ea01 0208 	and.w	r2, r1, r8
 80057c4:	4302      	orrs	r2, r0
 80057c6:	d01f      	beq.n	8005808 <floor+0x98>
 80057c8:	a327      	add	r3, pc, #156	; (adr r3, 8005868 <floor+0xf8>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa fcc5 	bl	800015c <__adddf3>
 80057d2:	2200      	movs	r2, #0
 80057d4:	2300      	movs	r3, #0
 80057d6:	f7fb f907 	bl	80009e8 <__aeabi_dcmpgt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d0ea      	beq.n	80057b4 <floor+0x44>
 80057de:	2c00      	cmp	r4, #0
 80057e0:	bfbe      	ittt	lt
 80057e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80057e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80057ea:	19a4      	addlt	r4, r4, r6
 80057ec:	ea24 0408 	bic.w	r4, r4, r8
 80057f0:	2500      	movs	r5, #0
 80057f2:	e7df      	b.n	80057b4 <floor+0x44>
 80057f4:	2e33      	cmp	r6, #51	; 0x33
 80057f6:	dd0b      	ble.n	8005810 <floor+0xa0>
 80057f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80057fc:	d104      	bne.n	8005808 <floor+0x98>
 80057fe:	4602      	mov	r2, r0
 8005800:	f7fa fcac 	bl	800015c <__adddf3>
 8005804:	4607      	mov	r7, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4638      	mov	r0, r7
 800580a:	4619      	mov	r1, r3
 800580c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005818:	fa22 f808 	lsr.w	r8, r2, r8
 800581c:	ea18 0f00 	tst.w	r8, r0
 8005820:	d0f2      	beq.n	8005808 <floor+0x98>
 8005822:	a311      	add	r3, pc, #68	; (adr r3, 8005868 <floor+0xf8>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fc98 	bl	800015c <__adddf3>
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	f7fb f8da 	bl	80009e8 <__aeabi_dcmpgt>
 8005834:	2800      	cmp	r0, #0
 8005836:	d0bd      	beq.n	80057b4 <floor+0x44>
 8005838:	2c00      	cmp	r4, #0
 800583a:	da02      	bge.n	8005842 <floor+0xd2>
 800583c:	2e14      	cmp	r6, #20
 800583e:	d103      	bne.n	8005848 <floor+0xd8>
 8005840:	3401      	adds	r4, #1
 8005842:	ea25 0508 	bic.w	r5, r5, r8
 8005846:	e7b5      	b.n	80057b4 <floor+0x44>
 8005848:	2301      	movs	r3, #1
 800584a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800584e:	fa03 f606 	lsl.w	r6, r3, r6
 8005852:	4435      	add	r5, r6
 8005854:	42bd      	cmp	r5, r7
 8005856:	bf38      	it	cc
 8005858:	18e4      	addcc	r4, r4, r3
 800585a:	e7f2      	b.n	8005842 <floor+0xd2>
 800585c:	2500      	movs	r5, #0
 800585e:	462c      	mov	r4, r5
 8005860:	e7a8      	b.n	80057b4 <floor+0x44>
 8005862:	bf00      	nop
 8005864:	f3af 8000 	nop.w
 8005868:	8800759c 	.word	0x8800759c
 800586c:	7e37e43c 	.word	0x7e37e43c
 8005870:	bff00000 	.word	0xbff00000
 8005874:	000fffff 	.word	0x000fffff

08005878 <round>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800587e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8005882:	2c13      	cmp	r4, #19
 8005884:	4606      	mov	r6, r0
 8005886:	460d      	mov	r5, r1
 8005888:	460b      	mov	r3, r1
 800588a:	468c      	mov	ip, r1
 800588c:	4602      	mov	r2, r0
 800588e:	dc17      	bgt.n	80058c0 <round+0x48>
 8005890:	2c00      	cmp	r4, #0
 8005892:	da09      	bge.n	80058a8 <round+0x30>
 8005894:	3401      	adds	r4, #1
 8005896:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800589a:	d103      	bne.n	80058a4 <round+0x2c>
 800589c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80058a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058a4:	2200      	movs	r2, #0
 80058a6:	e028      	b.n	80058fa <round+0x82>
 80058a8:	4915      	ldr	r1, [pc, #84]	; (8005900 <round+0x88>)
 80058aa:	4121      	asrs	r1, r4
 80058ac:	420d      	tst	r5, r1
 80058ae:	d100      	bne.n	80058b2 <round+0x3a>
 80058b0:	b178      	cbz	r0, 80058d2 <round+0x5a>
 80058b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058b6:	4123      	asrs	r3, r4
 80058b8:	4463      	add	r3, ip
 80058ba:	ea23 0301 	bic.w	r3, r3, r1
 80058be:	e7f1      	b.n	80058a4 <round+0x2c>
 80058c0:	2c33      	cmp	r4, #51	; 0x33
 80058c2:	dd09      	ble.n	80058d8 <round+0x60>
 80058c4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80058c8:	d103      	bne.n	80058d2 <round+0x5a>
 80058ca:	f7fa fc47 	bl	800015c <__adddf3>
 80058ce:	4606      	mov	r6, r0
 80058d0:	460d      	mov	r5, r1
 80058d2:	4630      	mov	r0, r6
 80058d4:	4629      	mov	r1, r5
 80058d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80058e0:	40f8      	lsrs	r0, r7
 80058e2:	4206      	tst	r6, r0
 80058e4:	d0f5      	beq.n	80058d2 <round+0x5a>
 80058e6:	2101      	movs	r1, #1
 80058e8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80058ec:	fa01 f404 	lsl.w	r4, r1, r4
 80058f0:	1932      	adds	r2, r6, r4
 80058f2:	bf28      	it	cs
 80058f4:	185b      	addcs	r3, r3, r1
 80058f6:	ea22 0200 	bic.w	r2, r2, r0
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	e7e6      	b.n	80058ce <round+0x56>
 8005900:	000fffff 	.word	0x000fffff

08005904 <sin>:
 8005904:	b530      	push	{r4, r5, lr}
 8005906:	4a1a      	ldr	r2, [pc, #104]	; (8005970 <sin+0x6c>)
 8005908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800590c:	4293      	cmp	r3, r2
 800590e:	b087      	sub	sp, #28
 8005910:	dc06      	bgt.n	8005920 <sin+0x1c>
 8005912:	2300      	movs	r3, #0
 8005914:	2200      	movs	r2, #0
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2300      	movs	r3, #0
 800591a:	f002 f849 	bl	80079b0 <__kernel_sin>
 800591e:	e006      	b.n	800592e <sin+0x2a>
 8005920:	4a14      	ldr	r2, [pc, #80]	; (8005974 <sin+0x70>)
 8005922:	4293      	cmp	r3, r2
 8005924:	dd05      	ble.n	8005932 <sin+0x2e>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	f7fa fc15 	bl	8000158 <__aeabi_dsub>
 800592e:	b007      	add	sp, #28
 8005930:	bd30      	pop	{r4, r5, pc}
 8005932:	aa02      	add	r2, sp, #8
 8005934:	f001 f998 	bl	8006c68 <__ieee754_rem_pio2>
 8005938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800593c:	f000 0403 	and.w	r4, r0, #3
 8005940:	2c01      	cmp	r4, #1
 8005942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005946:	d005      	beq.n	8005954 <sin+0x50>
 8005948:	2c02      	cmp	r4, #2
 800594a:	d006      	beq.n	800595a <sin+0x56>
 800594c:	b964      	cbnz	r4, 8005968 <sin+0x64>
 800594e:	2401      	movs	r4, #1
 8005950:	9400      	str	r4, [sp, #0]
 8005952:	e7e2      	b.n	800591a <sin+0x16>
 8005954:	f001 fc24 	bl	80071a0 <__kernel_cos>
 8005958:	e7e9      	b.n	800592e <sin+0x2a>
 800595a:	2401      	movs	r4, #1
 800595c:	9400      	str	r4, [sp, #0]
 800595e:	f002 f827 	bl	80079b0 <__kernel_sin>
 8005962:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005966:	e7e2      	b.n	800592e <sin+0x2a>
 8005968:	f001 fc1a 	bl	80071a0 <__kernel_cos>
 800596c:	e7f9      	b.n	8005962 <sin+0x5e>
 800596e:	bf00      	nop
 8005970:	3fe921fb 	.word	0x3fe921fb
 8005974:	7fefffff 	.word	0x7fefffff

08005978 <trunc>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800597e:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8005982:	2a13      	cmp	r2, #19
 8005984:	4603      	mov	r3, r0
 8005986:	460c      	mov	r4, r1
 8005988:	dc10      	bgt.n	80059ac <trunc+0x34>
 800598a:	2a00      	cmp	r2, #0
 800598c:	bfb3      	iteet	lt
 800598e:	2000      	movlt	r0, #0
 8005990:	2000      	movge	r0, #0
 8005992:	4b10      	ldrge	r3, [pc, #64]	; (80059d4 <trunc+0x5c>)
 8005994:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8005998:	bfa4      	itt	ge
 800599a:	fa43 f202 	asrge.w	r2, r3, r2
 800599e:	ea24 0102 	bicge.w	r1, r4, r2
 80059a2:	4603      	mov	r3, r0
 80059a4:	460c      	mov	r4, r1
 80059a6:	4618      	mov	r0, r3
 80059a8:	4621      	mov	r1, r4
 80059aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ac:	2a33      	cmp	r2, #51	; 0x33
 80059ae:	dd07      	ble.n	80059c0 <trunc+0x48>
 80059b0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80059b4:	d1f7      	bne.n	80059a6 <trunc+0x2e>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	f7fa fbcf 	bl	800015c <__adddf3>
 80059be:	e7f0      	b.n	80059a2 <trunc+0x2a>
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295
 80059c4:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80059c8:	fa22 f505 	lsr.w	r5, r2, r5
 80059cc:	ea20 0005 	bic.w	r0, r0, r5
 80059d0:	e7e7      	b.n	80059a2 <trunc+0x2a>
 80059d2:	bf00      	nop
 80059d4:	000fffff 	.word	0x000fffff

080059d8 <exp>:
 80059d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059dc:	b08b      	sub	sp, #44	; 0x2c
 80059de:	4604      	mov	r4, r0
 80059e0:	460d      	mov	r5, r1
 80059e2:	f000 fa49 	bl	8005e78 <__ieee754_exp>
 80059e6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8005ac4 <exp+0xec>
 80059ea:	4606      	mov	r6, r0
 80059ec:	f998 3000 	ldrsb.w	r3, [r8]
 80059f0:	460f      	mov	r7, r1
 80059f2:	3301      	adds	r3, #1
 80059f4:	d02c      	beq.n	8005a50 <exp+0x78>
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f002 f893 	bl	8007b24 <finite>
 80059fe:	b338      	cbz	r0, 8005a50 <exp+0x78>
 8005a00:	a329      	add	r3, pc, #164	; (adr r3, 8005aa8 <exp+0xd0>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f7fa ffed 	bl	80009e8 <__aeabi_dcmpgt>
 8005a0e:	4681      	mov	r9, r0
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d02d      	beq.n	8005a70 <exp+0x98>
 8005a14:	2303      	movs	r3, #3
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <exp+0xe0>)
 8005a1a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9308      	str	r3, [sp, #32]
 8005a24:	f998 3000 	ldrsb.w	r3, [r8]
 8005a28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005a2c:	b9ab      	cbnz	r3, 8005a5a <exp+0x82>
 8005a2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <exp+0xe4>)
 8005a34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a38:	4668      	mov	r0, sp
 8005a3a:	f002 f879 	bl	8007b30 <matherr>
 8005a3e:	b190      	cbz	r0, 8005a66 <exp+0x8e>
 8005a40:	9b08      	ldr	r3, [sp, #32]
 8005a42:	b11b      	cbz	r3, 8005a4c <exp+0x74>
 8005a44:	f7ff fa18 	bl	8004e78 <__errno>
 8005a48:	9b08      	ldr	r3, [sp, #32]
 8005a4a:	6003      	str	r3, [r0, #0]
 8005a4c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8005a50:	4630      	mov	r0, r6
 8005a52:	4639      	mov	r1, r7
 8005a54:	b00b      	add	sp, #44	; 0x2c
 8005a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	4918      	ldr	r1, [pc, #96]	; (8005ac0 <exp+0xe8>)
 8005a5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d1e8      	bne.n	8005a38 <exp+0x60>
 8005a66:	f7ff fa07 	bl	8004e78 <__errno>
 8005a6a:	2322      	movs	r3, #34	; 0x22
 8005a6c:	6003      	str	r3, [r0, #0]
 8005a6e:	e7e7      	b.n	8005a40 <exp+0x68>
 8005a70:	a30f      	add	r3, pc, #60	; (adr r3, 8005ab0 <exp+0xd8>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	4620      	mov	r0, r4
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f7fa ff97 	bl	80009ac <__aeabi_dcmplt>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d0e6      	beq.n	8005a50 <exp+0x78>
 8005a82:	2304      	movs	r3, #4
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <exp+0xe0>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a96:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005a9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005a9e:	f998 3000 	ldrsb.w	r3, [r8]
 8005aa2:	e7de      	b.n	8005a62 <exp+0x8a>
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	fefa39ef 	.word	0xfefa39ef
 8005aac:	40862e42 	.word	0x40862e42
 8005ab0:	d52d3051 	.word	0xd52d3051
 8005ab4:	c0874910 	.word	0xc0874910
 8005ab8:	0800961b 	.word	0x0800961b
 8005abc:	47efffff 	.word	0x47efffff
 8005ac0:	7ff00000 	.word	0x7ff00000
 8005ac4:	20000080 	.word	0x20000080

08005ac8 <log10>:
 8005ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005acc:	b08b      	sub	sp, #44	; 0x2c
 8005ace:	4604      	mov	r4, r0
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	f000 fb39 	bl	8006148 <__ieee754_log10>
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <log10+0xe0>)
 8005ad8:	4680      	mov	r8, r0
 8005ada:	f993 6000 	ldrsb.w	r6, [r3]
 8005ade:	4689      	mov	r9, r1
 8005ae0:	1c73      	adds	r3, r6, #1
 8005ae2:	d05c      	beq.n	8005b9e <log10+0xd6>
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7fa ff86 	bl	80009fc <__aeabi_dcmpun>
 8005af0:	4607      	mov	r7, r0
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d153      	bne.n	8005b9e <log10+0xd6>
 8005af6:	2200      	movs	r2, #0
 8005af8:	2300      	movs	r3, #0
 8005afa:	4620      	mov	r0, r4
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7fa ff5f 	bl	80009c0 <__aeabi_dcmple>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d04b      	beq.n	8005b9e <log10+0xd6>
 8005b06:	4b29      	ldr	r3, [pc, #164]	; (8005bac <log10+0xe4>)
 8005b08:	9708      	str	r7, [sp, #32]
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005b10:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005b14:	b9a6      	cbnz	r6, 8005b40 <log10+0x78>
 8005b16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005b1a:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <log10+0xe8>)
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b22:	4629      	mov	r1, r5
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	f7fa ff36 	bl	8000998 <__aeabi_dcmpeq>
 8005b2c:	bb40      	cbnz	r0, 8005b80 <log10+0xb8>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	2e02      	cmp	r6, #2
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	d119      	bne.n	8005b6a <log10+0xa2>
 8005b36:	f7ff f99f 	bl	8004e78 <__errno>
 8005b3a:	2321      	movs	r3, #33	; 0x21
 8005b3c:	6003      	str	r3, [r0, #0]
 8005b3e:	e019      	b.n	8005b74 <log10+0xac>
 8005b40:	2200      	movs	r2, #0
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <log10+0xec>)
 8005b44:	4620      	mov	r0, r4
 8005b46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f7fa ff22 	bl	8000998 <__aeabi_dcmpeq>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d0ea      	beq.n	8005b2e <log10+0x66>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	429e      	cmp	r6, r3
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	d111      	bne.n	8005b84 <log10+0xbc>
 8005b60:	f7ff f98a 	bl	8004e78 <__errno>
 8005b64:	2322      	movs	r3, #34	; 0x22
 8005b66:	6003      	str	r3, [r0, #0]
 8005b68:	e011      	b.n	8005b8e <log10+0xc6>
 8005b6a:	4668      	mov	r0, sp
 8005b6c:	f001 ffe0 	bl	8007b30 <matherr>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d0e0      	beq.n	8005b36 <log10+0x6e>
 8005b74:	4810      	ldr	r0, [pc, #64]	; (8005bb8 <log10+0xf0>)
 8005b76:	f001 ffdd 	bl	8007b34 <nan>
 8005b7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b7e:	e006      	b.n	8005b8e <log10+0xc6>
 8005b80:	2302      	movs	r3, #2
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	4668      	mov	r0, sp
 8005b86:	f001 ffd3 	bl	8007b30 <matherr>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d0e8      	beq.n	8005b60 <log10+0x98>
 8005b8e:	9b08      	ldr	r3, [sp, #32]
 8005b90:	b11b      	cbz	r3, 8005b9a <log10+0xd2>
 8005b92:	f7ff f971 	bl	8004e78 <__errno>
 8005b96:	9b08      	ldr	r3, [sp, #32]
 8005b98:	6003      	str	r3, [r0, #0]
 8005b9a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	b00b      	add	sp, #44	; 0x2c
 8005ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ba8:	20000080 	.word	0x20000080
 8005bac:	0800961f 	.word	0x0800961f
 8005bb0:	c7efffff 	.word	0xc7efffff
 8005bb4:	fff00000 	.word	0xfff00000
 8005bb8:	080095ed 	.word	0x080095ed

08005bbc <pow>:
 8005bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	b08f      	sub	sp, #60	; 0x3c
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	f000 fb41 	bl	8006250 <__ieee754_pow>
 8005bce:	4fa1      	ldr	r7, [pc, #644]	; (8005e54 <pow+0x298>)
 8005bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8005bd4:	f997 3000 	ldrsb.w	r3, [r7]
 8005bd8:	463e      	mov	r6, r7
 8005bda:	9302      	str	r3, [sp, #8]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	d05f      	beq.n	8005ca0 <pow+0xe4>
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7fa ff08 	bl	80009fc <__aeabi_dcmpun>
 8005bec:	4682      	mov	sl, r0
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d156      	bne.n	8005ca0 <pow+0xe4>
 8005bf2:	4642      	mov	r2, r8
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	f7fa feff 	bl	80009fc <__aeabi_dcmpun>
 8005bfe:	9003      	str	r0, [sp, #12]
 8005c00:	b1e8      	cbz	r0, 8005c3e <pow+0x82>
 8005c02:	2200      	movs	r2, #0
 8005c04:	2300      	movs	r3, #0
 8005c06:	4620      	mov	r0, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7fa fec5 	bl	8000998 <__aeabi_dcmpeq>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d046      	beq.n	8005ca0 <pow+0xe4>
 8005c12:	2301      	movs	r3, #1
 8005c14:	2200      	movs	r2, #0
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	4b8f      	ldr	r3, [pc, #572]	; (8005e58 <pow+0x29c>)
 8005c1a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005c1e:	9305      	str	r3, [sp, #20]
 8005c20:	4b8e      	ldr	r3, [pc, #568]	; (8005e5c <pow+0x2a0>)
 8005c22:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c2a:	9b02      	ldr	r3, [sp, #8]
 8005c2c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d031      	beq.n	8005c98 <pow+0xdc>
 8005c34:	a804      	add	r0, sp, #16
 8005c36:	f001 ff7b 	bl	8007b30 <matherr>
 8005c3a:	bb38      	cbnz	r0, 8005c8c <pow+0xd0>
 8005c3c:	e058      	b.n	8005cf0 <pow+0x134>
 8005c3e:	f04f 0a00 	mov.w	sl, #0
 8005c42:	f04f 0b00 	mov.w	fp, #0
 8005c46:	4652      	mov	r2, sl
 8005c48:	465b      	mov	r3, fp
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fea3 	bl	8000998 <__aeabi_dcmpeq>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d051      	beq.n	8005cfa <pow+0x13e>
 8005c56:	4652      	mov	r2, sl
 8005c58:	465b      	mov	r3, fp
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fa fe9b 	bl	8000998 <__aeabi_dcmpeq>
 8005c62:	4606      	mov	r6, r0
 8005c64:	b308      	cbz	r0, 8005caa <pow+0xee>
 8005c66:	2301      	movs	r3, #1
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	4b7b      	ldr	r3, [pc, #492]	; (8005e58 <pow+0x29c>)
 8005c6c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c70:	9305      	str	r3, [sp, #20]
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005c78:	930c      	str	r3, [sp, #48]	; 0x30
 8005c7a:	9b02      	ldr	r3, [sp, #8]
 8005c7c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0d7      	beq.n	8005c34 <pow+0x78>
 8005c84:	2200      	movs	r2, #0
 8005c86:	4b75      	ldr	r3, [pc, #468]	; (8005e5c <pow+0x2a0>)
 8005c88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c8e:	b11b      	cbz	r3, 8005c98 <pow+0xdc>
 8005c90:	f7ff f8f2 	bl	8004e78 <__errno>
 8005c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c96:	6003      	str	r3, [r0, #0]
 8005c98:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005c9c:	e9cd 3400 	strd	r3, r4, [sp]
 8005ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ca4:	b00f      	add	sp, #60	; 0x3c
 8005ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f001 ff39 	bl	8007b24 <finite>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d0f4      	beq.n	8005ca0 <pow+0xe4>
 8005cb6:	4652      	mov	r2, sl
 8005cb8:	465b      	mov	r3, fp
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa fe75 	bl	80009ac <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d0ec      	beq.n	8005ca0 <pow+0xe4>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	4b63      	ldr	r3, [pc, #396]	; (8005e58 <pow+0x29c>)
 8005ccc:	960c      	str	r6, [sp, #48]	; 0x30
 8005cce:	9305      	str	r3, [sp, #20]
 8005cd0:	f997 3000 	ldrsb.w	r3, [r7]
 8005cd4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005cd8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005cdc:	b913      	cbnz	r3, 8005ce4 <pow+0x128>
 8005cde:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005ce2:	e7a7      	b.n	8005c34 <pow+0x78>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	495e      	ldr	r1, [pc, #376]	; (8005e60 <pow+0x2a4>)
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cee:	d1a1      	bne.n	8005c34 <pow+0x78>
 8005cf0:	f7ff f8c2 	bl	8004e78 <__errno>
 8005cf4:	2321      	movs	r3, #33	; 0x21
 8005cf6:	6003      	str	r3, [r0, #0]
 8005cf8:	e7c8      	b.n	8005c8c <pow+0xd0>
 8005cfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cfe:	f001 ff11 	bl	8007b24 <finite>
 8005d02:	9002      	str	r0, [sp, #8]
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d177      	bne.n	8005df8 <pow+0x23c>
 8005d08:	4640      	mov	r0, r8
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	f001 ff0a 	bl	8007b24 <finite>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d071      	beq.n	8005df8 <pow+0x23c>
 8005d14:	4620      	mov	r0, r4
 8005d16:	4629      	mov	r1, r5
 8005d18:	f001 ff04 	bl	8007b24 <finite>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d06b      	beq.n	8005df8 <pow+0x23c>
 8005d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f7fa fe68 	bl	80009fc <__aeabi_dcmpun>
 8005d2c:	f997 7000 	ldrsb.w	r7, [r7]
 8005d30:	4b49      	ldr	r3, [pc, #292]	; (8005e58 <pow+0x29c>)
 8005d32:	b1a0      	cbz	r0, 8005d5e <pow+0x1a2>
 8005d34:	2201      	movs	r2, #1
 8005d36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d3a:	9b02      	ldr	r3, [sp, #8]
 8005d3c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d40:	930c      	str	r3, [sp, #48]	; 0x30
 8005d42:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005d46:	2f00      	cmp	r7, #0
 8005d48:	d0c9      	beq.n	8005cde <pow+0x122>
 8005d4a:	4652      	mov	r2, sl
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	4650      	mov	r0, sl
 8005d50:	4659      	mov	r1, fp
 8005d52:	f7fa fce3 	bl	800071c <__aeabi_ddiv>
 8005d56:	2f02      	cmp	r7, #2
 8005d58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d5c:	e7c7      	b.n	8005cee <pow+0x132>
 8005d5e:	2203      	movs	r2, #3
 8005d60:	900c      	str	r0, [sp, #48]	; 0x30
 8005d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4b3d      	ldr	r3, [pc, #244]	; (8005e64 <pow+0x2a8>)
 8005d6e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005d72:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d76:	f7fa fba7 	bl	80004c8 <__aeabi_dmul>
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	bb17      	cbnz	r7, 8005dc6 <pow+0x20a>
 8005d80:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005d84:	4b38      	ldr	r3, [pc, #224]	; (8005e68 <pow+0x2ac>)
 8005d86:	4640      	mov	r0, r8
 8005d88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	4652      	mov	r2, sl
 8005d90:	465b      	mov	r3, fp
 8005d92:	f7fa fe0b 	bl	80009ac <__aeabi_dcmplt>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d054      	beq.n	8005e44 <pow+0x288>
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f001 fecf 	bl	8007b40 <rint>
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	f7fa fdf7 	bl	8000998 <__aeabi_dcmpeq>
 8005daa:	b920      	cbnz	r0, 8005db6 <pow+0x1fa>
 8005dac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005db0:	4b2e      	ldr	r3, [pc, #184]	; (8005e6c <pow+0x2b0>)
 8005db2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005db6:	f996 3000 	ldrsb.w	r3, [r6]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d142      	bne.n	8005e44 <pow+0x288>
 8005dbe:	f7ff f85b 	bl	8004e78 <__errno>
 8005dc2:	2322      	movs	r3, #34	; 0x22
 8005dc4:	e797      	b.n	8005cf6 <pow+0x13a>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <pow+0x2b4>)
 8005dca:	4640      	mov	r0, r8
 8005dcc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4652      	mov	r2, sl
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	f7fa fde9 	bl	80009ac <__aeabi_dcmplt>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d0eb      	beq.n	8005db6 <pow+0x1fa>
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	f001 fead 	bl	8007b40 <rint>
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	f7fa fdd5 	bl	8000998 <__aeabi_dcmpeq>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d1e1      	bne.n	8005db6 <pow+0x1fa>
 8005df2:	2200      	movs	r2, #0
 8005df4:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <pow+0x2a4>)
 8005df6:	e7dc      	b.n	8005db2 <pow+0x1f6>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f7fa fdca 	bl	8000998 <__aeabi_dcmpeq>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f43f af4b 	beq.w	8005ca0 <pow+0xe4>
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f001 fe89 	bl	8007b24 <finite>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f43f af44 	beq.w	8005ca0 <pow+0xe4>
 8005e18:	4620      	mov	r0, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f001 fe82 	bl	8007b24 <finite>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f43f af3d 	beq.w	8005ca0 <pow+0xe4>
 8005e26:	2304      	movs	r3, #4
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <pow+0x29c>)
 8005e2c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	2300      	movs	r3, #0
 8005e34:	2400      	movs	r4, #0
 8005e36:	930c      	str	r3, [sp, #48]	; 0x30
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005e3e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005e42:	e7b8      	b.n	8005db6 <pow+0x1fa>
 8005e44:	a804      	add	r0, sp, #16
 8005e46:	f001 fe73 	bl	8007b30 <matherr>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	f47f af1e 	bne.w	8005c8c <pow+0xd0>
 8005e50:	e7b5      	b.n	8005dbe <pow+0x202>
 8005e52:	bf00      	nop
 8005e54:	20000080 	.word	0x20000080
 8005e58:	08009625 	.word	0x08009625
 8005e5c:	3ff00000 	.word	0x3ff00000
 8005e60:	fff00000 	.word	0xfff00000
 8005e64:	3fe00000 	.word	0x3fe00000
 8005e68:	47efffff 	.word	0x47efffff
 8005e6c:	c7efffff 	.word	0xc7efffff
 8005e70:	7ff00000 	.word	0x7ff00000
 8005e74:	00000000 	.word	0x00000000

08005e78 <__ieee754_exp>:
 8005e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4aa8      	ldr	r2, [pc, #672]	; (8006120 <__ieee754_exp+0x2a8>)
 8005e7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e82:	4296      	cmp	r6, r2
 8005e84:	4605      	mov	r5, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005e8c:	d92c      	bls.n	8005ee8 <__ieee754_exp+0x70>
 8005e8e:	4aa5      	ldr	r2, [pc, #660]	; (8006124 <__ieee754_exp+0x2ac>)
 8005e90:	4296      	cmp	r6, r2
 8005e92:	d910      	bls.n	8005eb6 <__ieee754_exp+0x3e>
 8005e94:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8005e98:	4303      	orrs	r3, r0
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	d005      	beq.n	8005eaa <__ieee754_exp+0x32>
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	f7fa f95c 	bl	800015c <__adddf3>
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	e000      	b.n	8005eac <__ieee754_exp+0x34>
 8005eaa:	b9d7      	cbnz	r7, 8005ee2 <__ieee754_exp+0x6a>
 8005eac:	4628      	mov	r0, r5
 8005eae:	4621      	mov	r1, r4
 8005eb0:	b004      	add	sp, #16
 8005eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb6:	a384      	add	r3, pc, #528	; (adr r3, 80060c8 <__ieee754_exp+0x250>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f7fa fd94 	bl	80009e8 <__aeabi_dcmpgt>
 8005ec0:	b138      	cbz	r0, 8005ed2 <__ieee754_exp+0x5a>
 8005ec2:	a383      	add	r3, pc, #524	; (adr r3, 80060d0 <__ieee754_exp+0x258>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f7fa fafc 	bl	80004c8 <__aeabi_dmul>
 8005ed0:	e7e8      	b.n	8005ea4 <__ieee754_exp+0x2c>
 8005ed2:	a381      	add	r3, pc, #516	; (adr r3, 80060d8 <__ieee754_exp+0x260>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	4628      	mov	r0, r5
 8005eda:	4621      	mov	r1, r4
 8005edc:	f7fa fd66 	bl	80009ac <__aeabi_dcmplt>
 8005ee0:	b130      	cbz	r0, 8005ef0 <__ieee754_exp+0x78>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	462c      	mov	r4, r5
 8005ee6:	e7e1      	b.n	8005eac <__ieee754_exp+0x34>
 8005ee8:	4b8f      	ldr	r3, [pc, #572]	; (8006128 <__ieee754_exp+0x2b0>)
 8005eea:	429e      	cmp	r6, r3
 8005eec:	f240 80a6 	bls.w	800603c <__ieee754_exp+0x1c4>
 8005ef0:	4b8e      	ldr	r3, [pc, #568]	; (800612c <__ieee754_exp+0x2b4>)
 8005ef2:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8005ef6:	429e      	cmp	r6, r3
 8005ef8:	d875      	bhi.n	8005fe6 <__ieee754_exp+0x16e>
 8005efa:	4b8d      	ldr	r3, [pc, #564]	; (8006130 <__ieee754_exp+0x2b8>)
 8005efc:	4628      	mov	r0, r5
 8005efe:	4443      	add	r3, r8
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	4621      	mov	r1, r4
 8005f06:	f7fa f927 	bl	8000158 <__aeabi_dsub>
 8005f0a:	4e8a      	ldr	r6, [pc, #552]	; (8006134 <__ieee754_exp+0x2bc>)
 8005f0c:	e9cd 0100 	strd	r0, r1, [sp]
 8005f10:	f1c7 0a01 	rsb	sl, r7, #1
 8005f14:	4446      	add	r6, r8
 8005f16:	ebaa 0a07 	sub.w	sl, sl, r7
 8005f1a:	e9d6 8900 	ldrd	r8, r9, [r6]
 8005f1e:	4642      	mov	r2, r8
 8005f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f24:	464b      	mov	r3, r9
 8005f26:	f7fa f917 	bl	8000158 <__aeabi_dsub>
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4623      	mov	r3, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	4621      	mov	r1, r4
 8005f36:	f7fa fac7 	bl	80004c8 <__aeabi_dmul>
 8005f3a:	a369      	add	r3, pc, #420	; (adr r3, 80060e0 <__ieee754_exp+0x268>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	4606      	mov	r6, r0
 8005f42:	460f      	mov	r7, r1
 8005f44:	f7fa fac0 	bl	80004c8 <__aeabi_dmul>
 8005f48:	a367      	add	r3, pc, #412	; (adr r3, 80060e8 <__ieee754_exp+0x270>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa f903 	bl	8000158 <__aeabi_dsub>
 8005f52:	4632      	mov	r2, r6
 8005f54:	463b      	mov	r3, r7
 8005f56:	f7fa fab7 	bl	80004c8 <__aeabi_dmul>
 8005f5a:	a365      	add	r3, pc, #404	; (adr r3, 80060f0 <__ieee754_exp+0x278>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f8fc 	bl	800015c <__adddf3>
 8005f64:	4632      	mov	r2, r6
 8005f66:	463b      	mov	r3, r7
 8005f68:	f7fa faae 	bl	80004c8 <__aeabi_dmul>
 8005f6c:	a362      	add	r3, pc, #392	; (adr r3, 80060f8 <__ieee754_exp+0x280>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f8f1 	bl	8000158 <__aeabi_dsub>
 8005f76:	4632      	mov	r2, r6
 8005f78:	463b      	mov	r3, r7
 8005f7a:	f7fa faa5 	bl	80004c8 <__aeabi_dmul>
 8005f7e:	a360      	add	r3, pc, #384	; (adr r3, 8006100 <__ieee754_exp+0x288>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa f8ea 	bl	800015c <__adddf3>
 8005f88:	4632      	mov	r2, r6
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	f7fa fa9c 	bl	80004c8 <__aeabi_dmul>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4628      	mov	r0, r5
 8005f96:	4621      	mov	r1, r4
 8005f98:	f7fa f8de 	bl	8000158 <__aeabi_dsub>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	460f      	mov	r7, r1
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	f7fa fa8e 	bl	80004c8 <__aeabi_dmul>
 8005fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb0:	f1ba 0f00 	cmp.w	sl, #0
 8005fb4:	d159      	bne.n	800606a <__ieee754_exp+0x1f2>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa f8ca 	bl	8000158 <__aeabi_dsub>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fcc:	f7fa fba6 	bl	800071c <__aeabi_ddiv>
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	f7fa f8c0 	bl	8000158 <__aeabi_dsub>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4956      	ldr	r1, [pc, #344]	; (8006138 <__ieee754_exp+0x2c0>)
 8005fe0:	f7fa f8ba 	bl	8000158 <__aeabi_dsub>
 8005fe4:	e75e      	b.n	8005ea4 <__ieee754_exp+0x2c>
 8005fe6:	4e55      	ldr	r6, [pc, #340]	; (800613c <__ieee754_exp+0x2c4>)
 8005fe8:	a347      	add	r3, pc, #284	; (adr r3, 8006108 <__ieee754_exp+0x290>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	4446      	add	r6, r8
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	f7fa fa68 	bl	80004c8 <__aeabi_dmul>
 8005ff8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ffc:	f7fa f8ae 	bl	800015c <__adddf3>
 8006000:	f7fa fd12 	bl	8000a28 <__aeabi_d2iz>
 8006004:	4682      	mov	sl, r0
 8006006:	f7fa f9f5 	bl	80003f4 <__aeabi_i2d>
 800600a:	a341      	add	r3, pc, #260	; (adr r3, 8006110 <__ieee754_exp+0x298>)
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	4606      	mov	r6, r0
 8006012:	460f      	mov	r7, r1
 8006014:	f7fa fa58 	bl	80004c8 <__aeabi_dmul>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4628      	mov	r0, r5
 800601e:	4621      	mov	r1, r4
 8006020:	f7fa f89a 	bl	8000158 <__aeabi_dsub>
 8006024:	a33c      	add	r3, pc, #240	; (adr r3, 8006118 <__ieee754_exp+0x2a0>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	e9cd 0100 	strd	r0, r1, [sp]
 800602e:	4630      	mov	r0, r6
 8006030:	4639      	mov	r1, r7
 8006032:	f7fa fa49 	bl	80004c8 <__aeabi_dmul>
 8006036:	4680      	mov	r8, r0
 8006038:	4689      	mov	r9, r1
 800603a:	e770      	b.n	8005f1e <__ieee754_exp+0xa6>
 800603c:	4b40      	ldr	r3, [pc, #256]	; (8006140 <__ieee754_exp+0x2c8>)
 800603e:	429e      	cmp	r6, r3
 8006040:	d80e      	bhi.n	8006060 <__ieee754_exp+0x1e8>
 8006042:	a323      	add	r3, pc, #140	; (adr r3, 80060d0 <__ieee754_exp+0x258>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f888 	bl	800015c <__adddf3>
 800604c:	2200      	movs	r2, #0
 800604e:	4b3a      	ldr	r3, [pc, #232]	; (8006138 <__ieee754_exp+0x2c0>)
 8006050:	f7fa fcca 	bl	80009e8 <__aeabi_dcmpgt>
 8006054:	b138      	cbz	r0, 8006066 <__ieee754_exp+0x1ee>
 8006056:	2200      	movs	r2, #0
 8006058:	4b37      	ldr	r3, [pc, #220]	; (8006138 <__ieee754_exp+0x2c0>)
 800605a:	4628      	mov	r0, r5
 800605c:	4621      	mov	r1, r4
 800605e:	e71f      	b.n	8005ea0 <__ieee754_exp+0x28>
 8006060:	f04f 0a00 	mov.w	sl, #0
 8006064:	e763      	b.n	8005f2e <__ieee754_exp+0xb6>
 8006066:	4682      	mov	sl, r0
 8006068:	e761      	b.n	8005f2e <__ieee754_exp+0xb6>
 800606a:	4632      	mov	r2, r6
 800606c:	463b      	mov	r3, r7
 800606e:	2000      	movs	r0, #0
 8006070:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006074:	f7fa f870 	bl	8000158 <__aeabi_dsub>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006080:	f7fa fb4c 	bl	800071c <__aeabi_ddiv>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	f7fa f864 	bl	8000158 <__aeabi_dsub>
 8006090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006094:	f7fa f860 	bl	8000158 <__aeabi_dsub>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	2000      	movs	r0, #0
 800609e:	4926      	ldr	r1, [pc, #152]	; (8006138 <__ieee754_exp+0x2c0>)
 80060a0:	f7fa f85a 	bl	8000158 <__aeabi_dsub>
 80060a4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80060a8:	4592      	cmp	sl, r2
 80060aa:	db02      	blt.n	80060b2 <__ieee754_exp+0x23a>
 80060ac:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80060b0:	e6f8      	b.n	8005ea4 <__ieee754_exp+0x2c>
 80060b2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80060b6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80060ba:	2200      	movs	r2, #0
 80060bc:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80060c0:	e704      	b.n	8005ecc <__ieee754_exp+0x54>
 80060c2:	bf00      	nop
 80060c4:	f3af 8000 	nop.w
 80060c8:	fefa39ef 	.word	0xfefa39ef
 80060cc:	40862e42 	.word	0x40862e42
 80060d0:	8800759c 	.word	0x8800759c
 80060d4:	7e37e43c 	.word	0x7e37e43c
 80060d8:	d52d3051 	.word	0xd52d3051
 80060dc:	c0874910 	.word	0xc0874910
 80060e0:	72bea4d0 	.word	0x72bea4d0
 80060e4:	3e663769 	.word	0x3e663769
 80060e8:	c5d26bf1 	.word	0xc5d26bf1
 80060ec:	3ebbbd41 	.word	0x3ebbbd41
 80060f0:	af25de2c 	.word	0xaf25de2c
 80060f4:	3f11566a 	.word	0x3f11566a
 80060f8:	16bebd93 	.word	0x16bebd93
 80060fc:	3f66c16c 	.word	0x3f66c16c
 8006100:	5555553e 	.word	0x5555553e
 8006104:	3fc55555 	.word	0x3fc55555
 8006108:	652b82fe 	.word	0x652b82fe
 800610c:	3ff71547 	.word	0x3ff71547
 8006110:	fee00000 	.word	0xfee00000
 8006114:	3fe62e42 	.word	0x3fe62e42
 8006118:	35793c76 	.word	0x35793c76
 800611c:	3dea39ef 	.word	0x3dea39ef
 8006120:	40862e41 	.word	0x40862e41
 8006124:	7fefffff 	.word	0x7fefffff
 8006128:	3fd62e42 	.word	0x3fd62e42
 800612c:	3ff0a2b1 	.word	0x3ff0a2b1
 8006130:	08009640 	.word	0x08009640
 8006134:	08009650 	.word	0x08009650
 8006138:	3ff00000 	.word	0x3ff00000
 800613c:	08009630 	.word	0x08009630
 8006140:	3e2fffff 	.word	0x3e2fffff
 8006144:	00000000 	.word	0x00000000

08006148 <__ieee754_log10>:
 8006148:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006150:	4604      	mov	r4, r0
 8006152:	460d      	mov	r5, r1
 8006154:	460b      	mov	r3, r1
 8006156:	da26      	bge.n	80061a6 <__ieee754_log10+0x5e>
 8006158:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800615c:	4302      	orrs	r2, r0
 800615e:	d107      	bne.n	8006170 <__ieee754_log10+0x28>
 8006160:	2200      	movs	r2, #0
 8006162:	2300      	movs	r3, #0
 8006164:	2000      	movs	r0, #0
 8006166:	4936      	ldr	r1, [pc, #216]	; (8006240 <__ieee754_log10+0xf8>)
 8006168:	f7fa fad8 	bl	800071c <__aeabi_ddiv>
 800616c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006170:	2900      	cmp	r1, #0
 8006172:	da05      	bge.n	8006180 <__ieee754_log10+0x38>
 8006174:	4602      	mov	r2, r0
 8006176:	f7f9 ffef 	bl	8000158 <__aeabi_dsub>
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	e7f3      	b.n	8006168 <__ieee754_log10+0x20>
 8006180:	2200      	movs	r2, #0
 8006182:	4b30      	ldr	r3, [pc, #192]	; (8006244 <__ieee754_log10+0xfc>)
 8006184:	f7fa f9a0 	bl	80004c8 <__aeabi_dmul>
 8006188:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800618c:	4604      	mov	r4, r0
 800618e:	460d      	mov	r5, r1
 8006190:	460b      	mov	r3, r1
 8006192:	492d      	ldr	r1, [pc, #180]	; (8006248 <__ieee754_log10+0x100>)
 8006194:	428b      	cmp	r3, r1
 8006196:	dd08      	ble.n	80061aa <__ieee754_log10+0x62>
 8006198:	4622      	mov	r2, r4
 800619a:	462b      	mov	r3, r5
 800619c:	4620      	mov	r0, r4
 800619e:	4629      	mov	r1, r5
 80061a0:	f7f9 ffdc 	bl	800015c <__adddf3>
 80061a4:	e7e2      	b.n	800616c <__ieee754_log10+0x24>
 80061a6:	2200      	movs	r2, #0
 80061a8:	e7f3      	b.n	8006192 <__ieee754_log10+0x4a>
 80061aa:	1518      	asrs	r0, r3, #20
 80061ac:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80061b0:	4410      	add	r0, r2
 80061b2:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80061b6:	4448      	add	r0, r9
 80061b8:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80061bc:	f7fa f91a 	bl	80003f4 <__aeabi_i2d>
 80061c0:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80061c4:	3303      	adds	r3, #3
 80061c6:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f001 fdb1 	bl	8007d38 <__ieee754_log>
 80061d6:	a314      	add	r3, pc, #80	; (adr r3, 8006228 <__ieee754_log10+0xe0>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	4680      	mov	r8, r0
 80061de:	4689      	mov	r9, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7fa f970 	bl	80004c8 <__aeabi_dmul>
 80061e8:	a311      	add	r3, pc, #68	; (adr r3, 8006230 <__ieee754_log10+0xe8>)
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	4604      	mov	r4, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa f967 	bl	80004c8 <__aeabi_dmul>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7f9 ffab 	bl	800015c <__adddf3>
 8006206:	a30c      	add	r3, pc, #48	; (adr r3, 8006238 <__ieee754_log10+0xf0>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	4630      	mov	r0, r6
 8006212:	4639      	mov	r1, r7
 8006214:	f7fa f958 	bl	80004c8 <__aeabi_dmul>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4620      	mov	r0, r4
 800621e:	4629      	mov	r1, r5
 8006220:	e7be      	b.n	80061a0 <__ieee754_log10+0x58>
 8006222:	bf00      	nop
 8006224:	f3af 8000 	nop.w
 8006228:	11f12b36 	.word	0x11f12b36
 800622c:	3d59fef3 	.word	0x3d59fef3
 8006230:	1526e50e 	.word	0x1526e50e
 8006234:	3fdbcb7b 	.word	0x3fdbcb7b
 8006238:	509f6000 	.word	0x509f6000
 800623c:	3fd34413 	.word	0x3fd34413
 8006240:	c3500000 	.word	0xc3500000
 8006244:	43500000 	.word	0x43500000
 8006248:	7fefffff 	.word	0x7fefffff
 800624c:	00000000 	.word	0x00000000

08006250 <__ieee754_pow>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	b091      	sub	sp, #68	; 0x44
 8006256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800625a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800625e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006262:	ea55 0302 	orrs.w	r3, r5, r2
 8006266:	4607      	mov	r7, r0
 8006268:	4688      	mov	r8, r1
 800626a:	f000 84b7 	beq.w	8006bdc <__ieee754_pow+0x98c>
 800626e:	4b80      	ldr	r3, [pc, #512]	; (8006470 <__ieee754_pow+0x220>)
 8006270:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006274:	429c      	cmp	r4, r3
 8006276:	4689      	mov	r9, r1
 8006278:	4682      	mov	sl, r0
 800627a:	dc09      	bgt.n	8006290 <__ieee754_pow+0x40>
 800627c:	d103      	bne.n	8006286 <__ieee754_pow+0x36>
 800627e:	b938      	cbnz	r0, 8006290 <__ieee754_pow+0x40>
 8006280:	42a5      	cmp	r5, r4
 8006282:	dc0d      	bgt.n	80062a0 <__ieee754_pow+0x50>
 8006284:	e001      	b.n	800628a <__ieee754_pow+0x3a>
 8006286:	429d      	cmp	r5, r3
 8006288:	dc02      	bgt.n	8006290 <__ieee754_pow+0x40>
 800628a:	429d      	cmp	r5, r3
 800628c:	d10e      	bne.n	80062ac <__ieee754_pow+0x5c>
 800628e:	b16a      	cbz	r2, 80062ac <__ieee754_pow+0x5c>
 8006290:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006294:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006298:	ea54 030a 	orrs.w	r3, r4, sl
 800629c:	f000 849e 	beq.w	8006bdc <__ieee754_pow+0x98c>
 80062a0:	4874      	ldr	r0, [pc, #464]	; (8006474 <__ieee754_pow+0x224>)
 80062a2:	b011      	add	sp, #68	; 0x44
 80062a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	f001 bc44 	b.w	8007b34 <nan>
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	da53      	bge.n	800635a <__ieee754_pow+0x10a>
 80062b2:	4b71      	ldr	r3, [pc, #452]	; (8006478 <__ieee754_pow+0x228>)
 80062b4:	429d      	cmp	r5, r3
 80062b6:	dc4e      	bgt.n	8006356 <__ieee754_pow+0x106>
 80062b8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80062bc:	429d      	cmp	r5, r3
 80062be:	dd4c      	ble.n	800635a <__ieee754_pow+0x10a>
 80062c0:	152b      	asrs	r3, r5, #20
 80062c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062c6:	2b14      	cmp	r3, #20
 80062c8:	dd28      	ble.n	800631c <__ieee754_pow+0xcc>
 80062ca:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80062ce:	fa22 f103 	lsr.w	r1, r2, r3
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d13f      	bne.n	800635a <__ieee754_pow+0x10a>
 80062da:	f001 0101 	and.w	r1, r1, #1
 80062de:	f1c1 0302 	rsb	r3, r1, #2
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	d15c      	bne.n	80063a2 <__ieee754_pow+0x152>
 80062e8:	4b61      	ldr	r3, [pc, #388]	; (8006470 <__ieee754_pow+0x220>)
 80062ea:	429d      	cmp	r5, r3
 80062ec:	d126      	bne.n	800633c <__ieee754_pow+0xec>
 80062ee:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80062f2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80062f6:	ea53 030a 	orrs.w	r3, r3, sl
 80062fa:	f000 846f 	beq.w	8006bdc <__ieee754_pow+0x98c>
 80062fe:	4b5f      	ldr	r3, [pc, #380]	; (800647c <__ieee754_pow+0x22c>)
 8006300:	429c      	cmp	r4, r3
 8006302:	dd2c      	ble.n	800635e <__ieee754_pow+0x10e>
 8006304:	2e00      	cmp	r6, #0
 8006306:	f280 846f 	bge.w	8006be8 <__ieee754_pow+0x998>
 800630a:	f04f 0b00 	mov.w	fp, #0
 800630e:	f04f 0c00 	mov.w	ip, #0
 8006312:	4658      	mov	r0, fp
 8006314:	4661      	mov	r1, ip
 8006316:	b011      	add	sp, #68	; 0x44
 8006318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631c:	2a00      	cmp	r2, #0
 800631e:	d13e      	bne.n	800639e <__ieee754_pow+0x14e>
 8006320:	f1c3 0314 	rsb	r3, r3, #20
 8006324:	fa45 f103 	asr.w	r1, r5, r3
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	42ab      	cmp	r3, r5
 800632e:	f040 8463 	bne.w	8006bf8 <__ieee754_pow+0x9a8>
 8006332:	f001 0101 	and.w	r1, r1, #1
 8006336:	f1c1 0302 	rsb	r3, r1, #2
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4b50      	ldr	r3, [pc, #320]	; (8006480 <__ieee754_pow+0x230>)
 800633e:	429d      	cmp	r5, r3
 8006340:	d114      	bne.n	800636c <__ieee754_pow+0x11c>
 8006342:	2e00      	cmp	r6, #0
 8006344:	f280 8454 	bge.w	8006bf0 <__ieee754_pow+0x9a0>
 8006348:	463a      	mov	r2, r7
 800634a:	4643      	mov	r3, r8
 800634c:	2000      	movs	r0, #0
 800634e:	494c      	ldr	r1, [pc, #304]	; (8006480 <__ieee754_pow+0x230>)
 8006350:	f7fa f9e4 	bl	800071c <__aeabi_ddiv>
 8006354:	e013      	b.n	800637e <__ieee754_pow+0x12e>
 8006356:	2302      	movs	r3, #2
 8006358:	e7c3      	b.n	80062e2 <__ieee754_pow+0x92>
 800635a:	2300      	movs	r3, #0
 800635c:	e7c1      	b.n	80062e2 <__ieee754_pow+0x92>
 800635e:	2e00      	cmp	r6, #0
 8006360:	dad3      	bge.n	800630a <__ieee754_pow+0xba>
 8006362:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006366:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800636a:	e7d2      	b.n	8006312 <__ieee754_pow+0xc2>
 800636c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006370:	d108      	bne.n	8006384 <__ieee754_pow+0x134>
 8006372:	463a      	mov	r2, r7
 8006374:	4643      	mov	r3, r8
 8006376:	4638      	mov	r0, r7
 8006378:	4641      	mov	r1, r8
 800637a:	f7fa f8a5 	bl	80004c8 <__aeabi_dmul>
 800637e:	4683      	mov	fp, r0
 8006380:	468c      	mov	ip, r1
 8006382:	e7c6      	b.n	8006312 <__ieee754_pow+0xc2>
 8006384:	4b3f      	ldr	r3, [pc, #252]	; (8006484 <__ieee754_pow+0x234>)
 8006386:	429e      	cmp	r6, r3
 8006388:	d10b      	bne.n	80063a2 <__ieee754_pow+0x152>
 800638a:	f1b9 0f00 	cmp.w	r9, #0
 800638e:	db08      	blt.n	80063a2 <__ieee754_pow+0x152>
 8006390:	4638      	mov	r0, r7
 8006392:	4641      	mov	r1, r8
 8006394:	b011      	add	sp, #68	; 0x44
 8006396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	f000 be55 	b.w	8007048 <__ieee754_sqrt>
 800639e:	2300      	movs	r3, #0
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	4638      	mov	r0, r7
 80063a4:	4641      	mov	r1, r8
 80063a6:	f001 fbb9 	bl	8007b1c <fabs>
 80063aa:	4683      	mov	fp, r0
 80063ac:	468c      	mov	ip, r1
 80063ae:	f1ba 0f00 	cmp.w	sl, #0
 80063b2:	d12b      	bne.n	800640c <__ieee754_pow+0x1bc>
 80063b4:	b124      	cbz	r4, 80063c0 <__ieee754_pow+0x170>
 80063b6:	4b32      	ldr	r3, [pc, #200]	; (8006480 <__ieee754_pow+0x230>)
 80063b8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80063bc:	429a      	cmp	r2, r3
 80063be:	d125      	bne.n	800640c <__ieee754_pow+0x1bc>
 80063c0:	2e00      	cmp	r6, #0
 80063c2:	da07      	bge.n	80063d4 <__ieee754_pow+0x184>
 80063c4:	465a      	mov	r2, fp
 80063c6:	4663      	mov	r3, ip
 80063c8:	2000      	movs	r0, #0
 80063ca:	492d      	ldr	r1, [pc, #180]	; (8006480 <__ieee754_pow+0x230>)
 80063cc:	f7fa f9a6 	bl	800071c <__aeabi_ddiv>
 80063d0:	4683      	mov	fp, r0
 80063d2:	468c      	mov	ip, r1
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	da9b      	bge.n	8006312 <__ieee754_pow+0xc2>
 80063da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80063de:	9b00      	ldr	r3, [sp, #0]
 80063e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80063e4:	4323      	orrs	r3, r4
 80063e6:	d108      	bne.n	80063fa <__ieee754_pow+0x1aa>
 80063e8:	465a      	mov	r2, fp
 80063ea:	4663      	mov	r3, ip
 80063ec:	4658      	mov	r0, fp
 80063ee:	4661      	mov	r1, ip
 80063f0:	f7f9 feb2 	bl	8000158 <__aeabi_dsub>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	e7aa      	b.n	8006350 <__ieee754_pow+0x100>
 80063fa:	9b00      	ldr	r3, [sp, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d188      	bne.n	8006312 <__ieee754_pow+0xc2>
 8006400:	4658      	mov	r0, fp
 8006402:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006406:	4683      	mov	fp, r0
 8006408:	469c      	mov	ip, r3
 800640a:	e782      	b.n	8006312 <__ieee754_pow+0xc2>
 800640c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006410:	f109 33ff 	add.w	r3, r9, #4294967295
 8006414:	930d      	str	r3, [sp, #52]	; 0x34
 8006416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006418:	9b00      	ldr	r3, [sp, #0]
 800641a:	4313      	orrs	r3, r2
 800641c:	d104      	bne.n	8006428 <__ieee754_pow+0x1d8>
 800641e:	463a      	mov	r2, r7
 8006420:	4643      	mov	r3, r8
 8006422:	4638      	mov	r0, r7
 8006424:	4641      	mov	r1, r8
 8006426:	e7e3      	b.n	80063f0 <__ieee754_pow+0x1a0>
 8006428:	4b17      	ldr	r3, [pc, #92]	; (8006488 <__ieee754_pow+0x238>)
 800642a:	429d      	cmp	r5, r3
 800642c:	f340 80fe 	ble.w	800662c <__ieee754_pow+0x3dc>
 8006430:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006434:	429d      	cmp	r5, r3
 8006436:	dd0b      	ble.n	8006450 <__ieee754_pow+0x200>
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <__ieee754_pow+0x22c>)
 800643a:	429c      	cmp	r4, r3
 800643c:	dc0e      	bgt.n	800645c <__ieee754_pow+0x20c>
 800643e:	2e00      	cmp	r6, #0
 8006440:	f6bf af63 	bge.w	800630a <__ieee754_pow+0xba>
 8006444:	a308      	add	r3, pc, #32	; (adr r3, 8006468 <__ieee754_pow+0x218>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	4610      	mov	r0, r2
 800644c:	4619      	mov	r1, r3
 800644e:	e794      	b.n	800637a <__ieee754_pow+0x12a>
 8006450:	4b0e      	ldr	r3, [pc, #56]	; (800648c <__ieee754_pow+0x23c>)
 8006452:	429c      	cmp	r4, r3
 8006454:	ddf3      	ble.n	800643e <__ieee754_pow+0x1ee>
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <__ieee754_pow+0x230>)
 8006458:	429c      	cmp	r4, r3
 800645a:	dd19      	ble.n	8006490 <__ieee754_pow+0x240>
 800645c:	2e00      	cmp	r6, #0
 800645e:	dcf1      	bgt.n	8006444 <__ieee754_pow+0x1f4>
 8006460:	e753      	b.n	800630a <__ieee754_pow+0xba>
 8006462:	bf00      	nop
 8006464:	f3af 8000 	nop.w
 8006468:	8800759c 	.word	0x8800759c
 800646c:	7e37e43c 	.word	0x7e37e43c
 8006470:	7ff00000 	.word	0x7ff00000
 8006474:	080095ed 	.word	0x080095ed
 8006478:	433fffff 	.word	0x433fffff
 800647c:	3fefffff 	.word	0x3fefffff
 8006480:	3ff00000 	.word	0x3ff00000
 8006484:	3fe00000 	.word	0x3fe00000
 8006488:	41e00000 	.word	0x41e00000
 800648c:	3feffffe 	.word	0x3feffffe
 8006490:	4661      	mov	r1, ip
 8006492:	2200      	movs	r2, #0
 8006494:	4b60      	ldr	r3, [pc, #384]	; (8006618 <__ieee754_pow+0x3c8>)
 8006496:	4658      	mov	r0, fp
 8006498:	f7f9 fe5e 	bl	8000158 <__aeabi_dsub>
 800649c:	a354      	add	r3, pc, #336	; (adr r3, 80065f0 <__ieee754_pow+0x3a0>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	4604      	mov	r4, r0
 80064a4:	460d      	mov	r5, r1
 80064a6:	f7fa f80f 	bl	80004c8 <__aeabi_dmul>
 80064aa:	a353      	add	r3, pc, #332	; (adr r3, 80065f8 <__ieee754_pow+0x3a8>)
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	4606      	mov	r6, r0
 80064b2:	460f      	mov	r7, r1
 80064b4:	4620      	mov	r0, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7fa f806 	bl	80004c8 <__aeabi_dmul>
 80064bc:	2200      	movs	r2, #0
 80064be:	4682      	mov	sl, r0
 80064c0:	468b      	mov	fp, r1
 80064c2:	4b56      	ldr	r3, [pc, #344]	; (800661c <__ieee754_pow+0x3cc>)
 80064c4:	4620      	mov	r0, r4
 80064c6:	4629      	mov	r1, r5
 80064c8:	f7f9 fffe 	bl	80004c8 <__aeabi_dmul>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	a14b      	add	r1, pc, #300	; (adr r1, 8006600 <__ieee754_pow+0x3b0>)
 80064d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d6:	f7f9 fe3f 	bl	8000158 <__aeabi_dsub>
 80064da:	4622      	mov	r2, r4
 80064dc:	462b      	mov	r3, r5
 80064de:	f7f9 fff3 	bl	80004c8 <__aeabi_dmul>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	2000      	movs	r0, #0
 80064e8:	494d      	ldr	r1, [pc, #308]	; (8006620 <__ieee754_pow+0x3d0>)
 80064ea:	f7f9 fe35 	bl	8000158 <__aeabi_dsub>
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	4680      	mov	r8, r0
 80064f4:	4689      	mov	r9, r1
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7f9 ffe5 	bl	80004c8 <__aeabi_dmul>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4640      	mov	r0, r8
 8006504:	4649      	mov	r1, r9
 8006506:	f7f9 ffdf 	bl	80004c8 <__aeabi_dmul>
 800650a:	a33f      	add	r3, pc, #252	; (adr r3, 8006608 <__ieee754_pow+0x3b8>)
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f7f9 ffda 	bl	80004c8 <__aeabi_dmul>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4650      	mov	r0, sl
 800651a:	4659      	mov	r1, fp
 800651c:	f7f9 fe1c 	bl	8000158 <__aeabi_dsub>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4604      	mov	r4, r0
 8006526:	460d      	mov	r5, r1
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 fe16 	bl	800015c <__adddf3>
 8006530:	2000      	movs	r0, #0
 8006532:	468b      	mov	fp, r1
 8006534:	4682      	mov	sl, r0
 8006536:	4632      	mov	r2, r6
 8006538:	463b      	mov	r3, r7
 800653a:	f7f9 fe0d 	bl	8000158 <__aeabi_dsub>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4620      	mov	r0, r4
 8006544:	4629      	mov	r1, r5
 8006546:	f7f9 fe07 	bl	8000158 <__aeabi_dsub>
 800654a:	9b00      	ldr	r3, [sp, #0]
 800654c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800654e:	3b01      	subs	r3, #1
 8006550:	4313      	orrs	r3, r2
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	bf0c      	ite	eq
 8006558:	4c32      	ldreq	r4, [pc, #200]	; (8006624 <__ieee754_pow+0x3d4>)
 800655a:	4c2f      	ldrne	r4, [pc, #188]	; (8006618 <__ieee754_pow+0x3c8>)
 800655c:	4606      	mov	r6, r0
 800655e:	e9cd 3400 	strd	r3, r4, [sp]
 8006562:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006566:	2400      	movs	r4, #0
 8006568:	460f      	mov	r7, r1
 800656a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800656e:	4622      	mov	r2, r4
 8006570:	462b      	mov	r3, r5
 8006572:	f7f9 fdf1 	bl	8000158 <__aeabi_dsub>
 8006576:	4652      	mov	r2, sl
 8006578:	465b      	mov	r3, fp
 800657a:	f7f9 ffa5 	bl	80004c8 <__aeabi_dmul>
 800657e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006582:	4680      	mov	r8, r0
 8006584:	4689      	mov	r9, r1
 8006586:	4630      	mov	r0, r6
 8006588:	4639      	mov	r1, r7
 800658a:	f7f9 ff9d 	bl	80004c8 <__aeabi_dmul>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7f9 fde1 	bl	800015c <__adddf3>
 800659a:	4622      	mov	r2, r4
 800659c:	462b      	mov	r3, r5
 800659e:	4680      	mov	r8, r0
 80065a0:	4689      	mov	r9, r1
 80065a2:	4650      	mov	r0, sl
 80065a4:	4659      	mov	r1, fp
 80065a6:	f7f9 ff8f 	bl	80004c8 <__aeabi_dmul>
 80065aa:	4604      	mov	r4, r0
 80065ac:	460d      	mov	r5, r1
 80065ae:	460b      	mov	r3, r1
 80065b0:	4602      	mov	r2, r0
 80065b2:	4649      	mov	r1, r9
 80065b4:	4640      	mov	r0, r8
 80065b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80065ba:	f7f9 fdcf 	bl	800015c <__adddf3>
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <__ieee754_pow+0x3d8>)
 80065c0:	4682      	mov	sl, r0
 80065c2:	4299      	cmp	r1, r3
 80065c4:	460f      	mov	r7, r1
 80065c6:	460e      	mov	r6, r1
 80065c8:	f340 82e1 	ble.w	8006b8e <__ieee754_pow+0x93e>
 80065cc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80065d0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80065d4:	4303      	orrs	r3, r0
 80065d6:	f000 81db 	beq.w	8006990 <__ieee754_pow+0x740>
 80065da:	a30d      	add	r3, pc, #52	; (adr r3, 8006610 <__ieee754_pow+0x3c0>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065e4:	f7f9 ff70 	bl	80004c8 <__aeabi_dmul>
 80065e8:	a309      	add	r3, pc, #36	; (adr r3, 8006610 <__ieee754_pow+0x3c0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	e6c4      	b.n	800637a <__ieee754_pow+0x12a>
 80065f0:	60000000 	.word	0x60000000
 80065f4:	3ff71547 	.word	0x3ff71547
 80065f8:	f85ddf44 	.word	0xf85ddf44
 80065fc:	3e54ae0b 	.word	0x3e54ae0b
 8006600:	55555555 	.word	0x55555555
 8006604:	3fd55555 	.word	0x3fd55555
 8006608:	652b82fe 	.word	0x652b82fe
 800660c:	3ff71547 	.word	0x3ff71547
 8006610:	8800759c 	.word	0x8800759c
 8006614:	7e37e43c 	.word	0x7e37e43c
 8006618:	3ff00000 	.word	0x3ff00000
 800661c:	3fd00000 	.word	0x3fd00000
 8006620:	3fe00000 	.word	0x3fe00000
 8006624:	bff00000 	.word	0xbff00000
 8006628:	408fffff 	.word	0x408fffff
 800662c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	da08      	bge.n	8006648 <__ieee754_pow+0x3f8>
 8006636:	4658      	mov	r0, fp
 8006638:	4bcd      	ldr	r3, [pc, #820]	; (8006970 <__ieee754_pow+0x720>)
 800663a:	4661      	mov	r1, ip
 800663c:	f7f9 ff44 	bl	80004c8 <__aeabi_dmul>
 8006640:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006644:	4683      	mov	fp, r0
 8006646:	460c      	mov	r4, r1
 8006648:	1523      	asrs	r3, r4, #20
 800664a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800664e:	4413      	add	r3, r2
 8006650:	930c      	str	r3, [sp, #48]	; 0x30
 8006652:	4bc8      	ldr	r3, [pc, #800]	; (8006974 <__ieee754_pow+0x724>)
 8006654:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006658:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800665c:	429c      	cmp	r4, r3
 800665e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006662:	dd08      	ble.n	8006676 <__ieee754_pow+0x426>
 8006664:	4bc4      	ldr	r3, [pc, #784]	; (8006978 <__ieee754_pow+0x728>)
 8006666:	429c      	cmp	r4, r3
 8006668:	f340 815b 	ble.w	8006922 <__ieee754_pow+0x6d2>
 800666c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800666e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006672:	3301      	adds	r3, #1
 8006674:	930c      	str	r3, [sp, #48]	; 0x30
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	4658      	mov	r0, fp
 800667c:	4629      	mov	r1, r5
 800667e:	4bbf      	ldr	r3, [pc, #764]	; (800697c <__ieee754_pow+0x72c>)
 8006680:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006684:	444b      	add	r3, r9
 8006686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800668a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800668e:	461a      	mov	r2, r3
 8006690:	4623      	mov	r3, r4
 8006692:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006696:	f7f9 fd5f 	bl	8000158 <__aeabi_dsub>
 800669a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800669e:	4606      	mov	r6, r0
 80066a0:	460f      	mov	r7, r1
 80066a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066a6:	f7f9 fd59 	bl	800015c <__adddf3>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	2000      	movs	r0, #0
 80066b0:	49b3      	ldr	r1, [pc, #716]	; (8006980 <__ieee754_pow+0x730>)
 80066b2:	f7fa f833 	bl	800071c <__aeabi_ddiv>
 80066b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4630      	mov	r0, r6
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7f9 ff01 	bl	80004c8 <__aeabi_dmul>
 80066c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066ca:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80066ce:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066d2:	2300      	movs	r3, #0
 80066d4:	2200      	movs	r2, #0
 80066d6:	106d      	asrs	r5, r5, #1
 80066d8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80066dc:	9304      	str	r3, [sp, #16]
 80066de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80066e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80066e6:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80066ea:	4650      	mov	r0, sl
 80066ec:	4659      	mov	r1, fp
 80066ee:	4614      	mov	r4, r2
 80066f0:	461d      	mov	r5, r3
 80066f2:	f7f9 fee9 	bl	80004c8 <__aeabi_dmul>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4630      	mov	r0, r6
 80066fc:	4639      	mov	r1, r7
 80066fe:	f7f9 fd2b 	bl	8000158 <__aeabi_dsub>
 8006702:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006706:	4606      	mov	r6, r0
 8006708:	460f      	mov	r7, r1
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7f9 fd23 	bl	8000158 <__aeabi_dsub>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800671a:	f7f9 fd1d 	bl	8000158 <__aeabi_dsub>
 800671e:	4652      	mov	r2, sl
 8006720:	465b      	mov	r3, fp
 8006722:	f7f9 fed1 	bl	80004c8 <__aeabi_dmul>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 fd13 	bl	8000158 <__aeabi_dsub>
 8006732:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006736:	f7f9 fec7 	bl	80004c8 <__aeabi_dmul>
 800673a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800673e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	f7f9 febf 	bl	80004c8 <__aeabi_dmul>
 800674a:	a377      	add	r3, pc, #476	; (adr r3, 8006928 <__ieee754_pow+0x6d8>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	4604      	mov	r4, r0
 8006752:	460d      	mov	r5, r1
 8006754:	f7f9 feb8 	bl	80004c8 <__aeabi_dmul>
 8006758:	a375      	add	r3, pc, #468	; (adr r3, 8006930 <__ieee754_pow+0x6e0>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fcfd 	bl	800015c <__adddf3>
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	f7f9 feaf 	bl	80004c8 <__aeabi_dmul>
 800676a:	a373      	add	r3, pc, #460	; (adr r3, 8006938 <__ieee754_pow+0x6e8>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fcf4 	bl	800015c <__adddf3>
 8006774:	4622      	mov	r2, r4
 8006776:	462b      	mov	r3, r5
 8006778:	f7f9 fea6 	bl	80004c8 <__aeabi_dmul>
 800677c:	a370      	add	r3, pc, #448	; (adr r3, 8006940 <__ieee754_pow+0x6f0>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f7f9 fceb 	bl	800015c <__adddf3>
 8006786:	4622      	mov	r2, r4
 8006788:	462b      	mov	r3, r5
 800678a:	f7f9 fe9d 	bl	80004c8 <__aeabi_dmul>
 800678e:	a36e      	add	r3, pc, #440	; (adr r3, 8006948 <__ieee754_pow+0x6f8>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f7f9 fce2 	bl	800015c <__adddf3>
 8006798:	4622      	mov	r2, r4
 800679a:	462b      	mov	r3, r5
 800679c:	f7f9 fe94 	bl	80004c8 <__aeabi_dmul>
 80067a0:	a36b      	add	r3, pc, #428	; (adr r3, 8006950 <__ieee754_pow+0x700>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f7f9 fcd9 	bl	800015c <__adddf3>
 80067aa:	4622      	mov	r2, r4
 80067ac:	4606      	mov	r6, r0
 80067ae:	460f      	mov	r7, r1
 80067b0:	462b      	mov	r3, r5
 80067b2:	4620      	mov	r0, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	f7f9 fe87 	bl	80004c8 <__aeabi_dmul>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	f7f9 fe81 	bl	80004c8 <__aeabi_dmul>
 80067c6:	4604      	mov	r4, r0
 80067c8:	460d      	mov	r5, r1
 80067ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ce:	4652      	mov	r2, sl
 80067d0:	465b      	mov	r3, fp
 80067d2:	f7f9 fcc3 	bl	800015c <__adddf3>
 80067d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067da:	f7f9 fe75 	bl	80004c8 <__aeabi_dmul>
 80067de:	4622      	mov	r2, r4
 80067e0:	462b      	mov	r3, r5
 80067e2:	f7f9 fcbb 	bl	800015c <__adddf3>
 80067e6:	4652      	mov	r2, sl
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	465b      	mov	r3, fp
 80067ee:	4650      	mov	r0, sl
 80067f0:	4659      	mov	r1, fp
 80067f2:	f7f9 fe69 	bl	80004c8 <__aeabi_dmul>
 80067f6:	2200      	movs	r2, #0
 80067f8:	4b62      	ldr	r3, [pc, #392]	; (8006984 <__ieee754_pow+0x734>)
 80067fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067fe:	f7f9 fcad 	bl	800015c <__adddf3>
 8006802:	4632      	mov	r2, r6
 8006804:	463b      	mov	r3, r7
 8006806:	f7f9 fca9 	bl	800015c <__adddf3>
 800680a:	9804      	ldr	r0, [sp, #16]
 800680c:	460d      	mov	r5, r1
 800680e:	4604      	mov	r4, r0
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4650      	mov	r0, sl
 8006816:	4659      	mov	r1, fp
 8006818:	f7f9 fe56 	bl	80004c8 <__aeabi_dmul>
 800681c:	2200      	movs	r2, #0
 800681e:	4682      	mov	sl, r0
 8006820:	468b      	mov	fp, r1
 8006822:	4b58      	ldr	r3, [pc, #352]	; (8006984 <__ieee754_pow+0x734>)
 8006824:	4620      	mov	r0, r4
 8006826:	4629      	mov	r1, r5
 8006828:	f7f9 fc96 	bl	8000158 <__aeabi_dsub>
 800682c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006830:	f7f9 fc92 	bl	8000158 <__aeabi_dsub>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4630      	mov	r0, r6
 800683a:	4639      	mov	r1, r7
 800683c:	f7f9 fc8c 	bl	8000158 <__aeabi_dsub>
 8006840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006844:	f7f9 fe40 	bl	80004c8 <__aeabi_dmul>
 8006848:	4622      	mov	r2, r4
 800684a:	4606      	mov	r6, r0
 800684c:	460f      	mov	r7, r1
 800684e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006852:	462b      	mov	r3, r5
 8006854:	f7f9 fe38 	bl	80004c8 <__aeabi_dmul>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7f9 fc7c 	bl	800015c <__adddf3>
 8006864:	4606      	mov	r6, r0
 8006866:	460f      	mov	r7, r1
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4650      	mov	r0, sl
 800686e:	4659      	mov	r1, fp
 8006870:	f7f9 fc74 	bl	800015c <__adddf3>
 8006874:	a338      	add	r3, pc, #224	; (adr r3, 8006958 <__ieee754_pow+0x708>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	9804      	ldr	r0, [sp, #16]
 800687c:	460d      	mov	r5, r1
 800687e:	4604      	mov	r4, r0
 8006880:	f7f9 fe22 	bl	80004c8 <__aeabi_dmul>
 8006884:	4652      	mov	r2, sl
 8006886:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800688a:	465b      	mov	r3, fp
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7f9 fc62 	bl	8000158 <__aeabi_dsub>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7f9 fc5c 	bl	8000158 <__aeabi_dsub>
 80068a0:	a32f      	add	r3, pc, #188	; (adr r3, 8006960 <__ieee754_pow+0x710>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	f7f9 fe0f 	bl	80004c8 <__aeabi_dmul>
 80068aa:	a32f      	add	r3, pc, #188	; (adr r3, 8006968 <__ieee754_pow+0x718>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 fe06 	bl	80004c8 <__aeabi_dmul>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4630      	mov	r0, r6
 80068c2:	4639      	mov	r1, r7
 80068c4:	f7f9 fc4a 	bl	800015c <__adddf3>
 80068c8:	4b2f      	ldr	r3, [pc, #188]	; (8006988 <__ieee754_pow+0x738>)
 80068ca:	444b      	add	r3, r9
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fc44 	bl	800015c <__adddf3>
 80068d4:	4604      	mov	r4, r0
 80068d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80068d8:	460d      	mov	r5, r1
 80068da:	f7f9 fd8b 	bl	80003f4 <__aeabi_i2d>
 80068de:	4606      	mov	r6, r0
 80068e0:	460f      	mov	r7, r1
 80068e2:	4b2a      	ldr	r3, [pc, #168]	; (800698c <__ieee754_pow+0x73c>)
 80068e4:	4622      	mov	r2, r4
 80068e6:	444b      	add	r3, r9
 80068e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068ec:	462b      	mov	r3, r5
 80068ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f2:	f7f9 fc33 	bl	800015c <__adddf3>
 80068f6:	4642      	mov	r2, r8
 80068f8:	464b      	mov	r3, r9
 80068fa:	f7f9 fc2f 	bl	800015c <__adddf3>
 80068fe:	4632      	mov	r2, r6
 8006900:	463b      	mov	r3, r7
 8006902:	f7f9 fc2b 	bl	800015c <__adddf3>
 8006906:	9804      	ldr	r0, [sp, #16]
 8006908:	4632      	mov	r2, r6
 800690a:	463b      	mov	r3, r7
 800690c:	4682      	mov	sl, r0
 800690e:	468b      	mov	fp, r1
 8006910:	f7f9 fc22 	bl	8000158 <__aeabi_dsub>
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	f7f9 fc1e 	bl	8000158 <__aeabi_dsub>
 800691c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006920:	e60b      	b.n	800653a <__ieee754_pow+0x2ea>
 8006922:	f04f 0801 	mov.w	r8, #1
 8006926:	e6a8      	b.n	800667a <__ieee754_pow+0x42a>
 8006928:	4a454eef 	.word	0x4a454eef
 800692c:	3fca7e28 	.word	0x3fca7e28
 8006930:	93c9db65 	.word	0x93c9db65
 8006934:	3fcd864a 	.word	0x3fcd864a
 8006938:	a91d4101 	.word	0xa91d4101
 800693c:	3fd17460 	.word	0x3fd17460
 8006940:	518f264d 	.word	0x518f264d
 8006944:	3fd55555 	.word	0x3fd55555
 8006948:	db6fabff 	.word	0xdb6fabff
 800694c:	3fdb6db6 	.word	0x3fdb6db6
 8006950:	33333303 	.word	0x33333303
 8006954:	3fe33333 	.word	0x3fe33333
 8006958:	e0000000 	.word	0xe0000000
 800695c:	3feec709 	.word	0x3feec709
 8006960:	dc3a03fd 	.word	0xdc3a03fd
 8006964:	3feec709 	.word	0x3feec709
 8006968:	145b01f5 	.word	0x145b01f5
 800696c:	be3e2fe0 	.word	0xbe3e2fe0
 8006970:	43400000 	.word	0x43400000
 8006974:	0003988e 	.word	0x0003988e
 8006978:	000bb679 	.word	0x000bb679
 800697c:	08009660 	.word	0x08009660
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	40080000 	.word	0x40080000
 8006988:	08009680 	.word	0x08009680
 800698c:	08009670 	.word	0x08009670
 8006990:	a39b      	add	r3, pc, #620	; (adr r3, 8006c00 <__ieee754_pow+0x9b0>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	4640      	mov	r0, r8
 8006998:	4649      	mov	r1, r9
 800699a:	f7f9 fbdf 	bl	800015c <__adddf3>
 800699e:	4622      	mov	r2, r4
 80069a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a4:	462b      	mov	r3, r5
 80069a6:	4650      	mov	r0, sl
 80069a8:	4639      	mov	r1, r7
 80069aa:	f7f9 fbd5 	bl	8000158 <__aeabi_dsub>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069b6:	f7fa f817 	bl	80009e8 <__aeabi_dcmpgt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f47f ae0d 	bne.w	80065da <__ieee754_pow+0x38a>
 80069c0:	4aa3      	ldr	r2, [pc, #652]	; (8006c50 <__ieee754_pow+0xa00>)
 80069c2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80069c6:	4293      	cmp	r3, r2
 80069c8:	f340 8103 	ble.w	8006bd2 <__ieee754_pow+0x982>
 80069cc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80069d0:	2000      	movs	r0, #0
 80069d2:	151b      	asrs	r3, r3, #20
 80069d4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80069d8:	fa4a f303 	asr.w	r3, sl, r3
 80069dc:	4433      	add	r3, r6
 80069de:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80069e2:	4f9c      	ldr	r7, [pc, #624]	; (8006c54 <__ieee754_pow+0xa04>)
 80069e4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80069e8:	4117      	asrs	r7, r2
 80069ea:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80069ee:	ea23 0107 	bic.w	r1, r3, r7
 80069f2:	f1c2 0214 	rsb	r2, r2, #20
 80069f6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80069fa:	fa4a fa02 	asr.w	sl, sl, r2
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4620      	mov	r0, r4
 8006a06:	4629      	mov	r1, r5
 8006a08:	bfb8      	it	lt
 8006a0a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006a0e:	f7f9 fba3 	bl	8000158 <__aeabi_dsub>
 8006a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1a:	4642      	mov	r2, r8
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	f7f9 fb9d 	bl	800015c <__adddf3>
 8006a22:	a379      	add	r3, pc, #484	; (adr r3, 8006c08 <__ieee754_pow+0x9b8>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	2000      	movs	r0, #0
 8006a2a:	460d      	mov	r5, r1
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	f7f9 fd4b 	bl	80004c8 <__aeabi_dmul>
 8006a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a36:	4606      	mov	r6, r0
 8006a38:	460f      	mov	r7, r1
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	f7f9 fb8b 	bl	8000158 <__aeabi_dsub>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7f9 fb85 	bl	8000158 <__aeabi_dsub>
 8006a4e:	a370      	add	r3, pc, #448	; (adr r3, 8006c10 <__ieee754_pow+0x9c0>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7f9 fd38 	bl	80004c8 <__aeabi_dmul>
 8006a58:	a36f      	add	r3, pc, #444	; (adr r3, 8006c18 <__ieee754_pow+0x9c8>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4689      	mov	r9, r1
 8006a62:	4620      	mov	r0, r4
 8006a64:	4629      	mov	r1, r5
 8006a66:	f7f9 fd2f 	bl	80004c8 <__aeabi_dmul>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4649      	mov	r1, r9
 8006a72:	f7f9 fb73 	bl	800015c <__adddf3>
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4630      	mov	r0, r6
 8006a80:	4639      	mov	r1, r7
 8006a82:	f7f9 fb6b 	bl	800015c <__adddf3>
 8006a86:	4632      	mov	r2, r6
 8006a88:	463b      	mov	r3, r7
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	4689      	mov	r9, r1
 8006a8e:	f7f9 fb63 	bl	8000158 <__aeabi_dsub>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7f9 fb5d 	bl	8000158 <__aeabi_dsub>
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	460f      	mov	r7, r1
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	f7f9 fd0d 	bl	80004c8 <__aeabi_dmul>
 8006aae:	a35c      	add	r3, pc, #368	; (adr r3, 8006c20 <__ieee754_pow+0x9d0>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	f7f9 fd06 	bl	80004c8 <__aeabi_dmul>
 8006abc:	a35a      	add	r3, pc, #360	; (adr r3, 8006c28 <__ieee754_pow+0x9d8>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fb49 	bl	8000158 <__aeabi_dsub>
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	462b      	mov	r3, r5
 8006aca:	f7f9 fcfd 	bl	80004c8 <__aeabi_dmul>
 8006ace:	a358      	add	r3, pc, #352	; (adr r3, 8006c30 <__ieee754_pow+0x9e0>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7f9 fb42 	bl	800015c <__adddf3>
 8006ad8:	4622      	mov	r2, r4
 8006ada:	462b      	mov	r3, r5
 8006adc:	f7f9 fcf4 	bl	80004c8 <__aeabi_dmul>
 8006ae0:	a355      	add	r3, pc, #340	; (adr r3, 8006c38 <__ieee754_pow+0x9e8>)
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f7f9 fb37 	bl	8000158 <__aeabi_dsub>
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	f7f9 fceb 	bl	80004c8 <__aeabi_dmul>
 8006af2:	a353      	add	r3, pc, #332	; (adr r3, 8006c40 <__ieee754_pow+0x9f0>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fb30 	bl	800015c <__adddf3>
 8006afc:	4622      	mov	r2, r4
 8006afe:	462b      	mov	r3, r5
 8006b00:	f7f9 fce2 	bl	80004c8 <__aeabi_dmul>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4640      	mov	r0, r8
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	f7f9 fb24 	bl	8000158 <__aeabi_dsub>
 8006b10:	4604      	mov	r4, r0
 8006b12:	460d      	mov	r5, r1
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	f7f9 fcd4 	bl	80004c8 <__aeabi_dmul>
 8006b20:	2200      	movs	r2, #0
 8006b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fb13 	bl	8000158 <__aeabi_dsub>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b3a:	f7f9 fdef 	bl	800071c <__aeabi_ddiv>
 8006b3e:	4632      	mov	r2, r6
 8006b40:	4604      	mov	r4, r0
 8006b42:	460d      	mov	r5, r1
 8006b44:	463b      	mov	r3, r7
 8006b46:	4640      	mov	r0, r8
 8006b48:	4649      	mov	r1, r9
 8006b4a:	f7f9 fcbd 	bl	80004c8 <__aeabi_dmul>
 8006b4e:	4632      	mov	r2, r6
 8006b50:	463b      	mov	r3, r7
 8006b52:	f7f9 fb03 	bl	800015c <__adddf3>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 fafb 	bl	8000158 <__aeabi_dsub>
 8006b62:	4642      	mov	r2, r8
 8006b64:	464b      	mov	r3, r9
 8006b66:	f7f9 faf7 	bl	8000158 <__aeabi_dsub>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	2000      	movs	r0, #0
 8006b70:	4939      	ldr	r1, [pc, #228]	; (8006c58 <__ieee754_pow+0xa08>)
 8006b72:	f7f9 faf1 	bl	8000158 <__aeabi_dsub>
 8006b76:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006b7a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006b7e:	da2b      	bge.n	8006bd8 <__ieee754_pow+0x988>
 8006b80:	4652      	mov	r2, sl
 8006b82:	f001 f869 	bl	8007c58 <scalbn>
 8006b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b8a:	f7ff bbf6 	b.w	800637a <__ieee754_pow+0x12a>
 8006b8e:	4b33      	ldr	r3, [pc, #204]	; (8006c5c <__ieee754_pow+0xa0c>)
 8006b90:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006b94:	429f      	cmp	r7, r3
 8006b96:	f77f af13 	ble.w	80069c0 <__ieee754_pow+0x770>
 8006b9a:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <__ieee754_pow+0xa10>)
 8006b9c:	440b      	add	r3, r1
 8006b9e:	4303      	orrs	r3, r0
 8006ba0:	d00b      	beq.n	8006bba <__ieee754_pow+0x96a>
 8006ba2:	a329      	add	r3, pc, #164	; (adr r3, 8006c48 <__ieee754_pow+0x9f8>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bac:	f7f9 fc8c 	bl	80004c8 <__aeabi_dmul>
 8006bb0:	a325      	add	r3, pc, #148	; (adr r3, 8006c48 <__ieee754_pow+0x9f8>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f7ff bbe0 	b.w	800637a <__ieee754_pow+0x12a>
 8006bba:	4622      	mov	r2, r4
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	f7f9 facb 	bl	8000158 <__aeabi_dsub>
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	f7f9 ff05 	bl	80009d4 <__aeabi_dcmpge>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f43f aef8 	beq.w	80069c0 <__ieee754_pow+0x770>
 8006bd0:	e7e7      	b.n	8006ba2 <__ieee754_pow+0x952>
 8006bd2:	f04f 0a00 	mov.w	sl, #0
 8006bd6:	e71e      	b.n	8006a16 <__ieee754_pow+0x7c6>
 8006bd8:	4621      	mov	r1, r4
 8006bda:	e7d4      	b.n	8006b86 <__ieee754_pow+0x936>
 8006bdc:	f04f 0b00 	mov.w	fp, #0
 8006be0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006c58 <__ieee754_pow+0xa08>
 8006be4:	f7ff bb95 	b.w	8006312 <__ieee754_pow+0xc2>
 8006be8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006bec:	f7ff bb91 	b.w	8006312 <__ieee754_pow+0xc2>
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	4641      	mov	r1, r8
 8006bf4:	f7ff bbc3 	b.w	800637e <__ieee754_pow+0x12e>
 8006bf8:	9200      	str	r2, [sp, #0]
 8006bfa:	f7ff bb9f 	b.w	800633c <__ieee754_pow+0xec>
 8006bfe:	bf00      	nop
 8006c00:	652b82fe 	.word	0x652b82fe
 8006c04:	3c971547 	.word	0x3c971547
 8006c08:	00000000 	.word	0x00000000
 8006c0c:	3fe62e43 	.word	0x3fe62e43
 8006c10:	fefa39ef 	.word	0xfefa39ef
 8006c14:	3fe62e42 	.word	0x3fe62e42
 8006c18:	0ca86c39 	.word	0x0ca86c39
 8006c1c:	be205c61 	.word	0xbe205c61
 8006c20:	72bea4d0 	.word	0x72bea4d0
 8006c24:	3e663769 	.word	0x3e663769
 8006c28:	c5d26bf1 	.word	0xc5d26bf1
 8006c2c:	3ebbbd41 	.word	0x3ebbbd41
 8006c30:	af25de2c 	.word	0xaf25de2c
 8006c34:	3f11566a 	.word	0x3f11566a
 8006c38:	16bebd93 	.word	0x16bebd93
 8006c3c:	3f66c16c 	.word	0x3f66c16c
 8006c40:	5555553e 	.word	0x5555553e
 8006c44:	3fc55555 	.word	0x3fc55555
 8006c48:	c2f8f359 	.word	0xc2f8f359
 8006c4c:	01a56e1f 	.word	0x01a56e1f
 8006c50:	3fe00000 	.word	0x3fe00000
 8006c54:	000fffff 	.word	0x000fffff
 8006c58:	3ff00000 	.word	0x3ff00000
 8006c5c:	4090cbff 	.word	0x4090cbff
 8006c60:	3f6f3400 	.word	0x3f6f3400
 8006c64:	00000000 	.word	0x00000000

08006c68 <__ieee754_rem_pio2>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	4ac2      	ldr	r2, [pc, #776]	; (8006f78 <__ieee754_rem_pio2+0x310>)
 8006c70:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006c74:	4592      	cmp	sl, r2
 8006c76:	b08d      	sub	sp, #52	; 0x34
 8006c78:	468b      	mov	fp, r1
 8006c7a:	dc07      	bgt.n	8006c8c <__ieee754_rem_pio2+0x24>
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e9c4 0100 	strd	r0, r1, [r4]
 8006c84:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006c88:	2500      	movs	r5, #0
 8006c8a:	e023      	b.n	8006cd4 <__ieee754_rem_pio2+0x6c>
 8006c8c:	4abb      	ldr	r2, [pc, #748]	; (8006f7c <__ieee754_rem_pio2+0x314>)
 8006c8e:	4592      	cmp	sl, r2
 8006c90:	dc71      	bgt.n	8006d76 <__ieee754_rem_pio2+0x10e>
 8006c92:	a3ab      	add	r3, pc, #684	; (adr r3, 8006f40 <__ieee754_rem_pio2+0x2d8>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	4db9      	ldr	r5, [pc, #740]	; (8006f80 <__ieee754_rem_pio2+0x318>)
 8006c9c:	dd36      	ble.n	8006d0c <__ieee754_rem_pio2+0xa4>
 8006c9e:	f7f9 fa5b 	bl	8000158 <__aeabi_dsub>
 8006ca2:	45aa      	cmp	sl, r5
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	d018      	beq.n	8006cdc <__ieee754_rem_pio2+0x74>
 8006caa:	a3a7      	add	r3, pc, #668	; (adr r3, 8006f48 <__ieee754_rem_pio2+0x2e0>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fa52 	bl	8000158 <__aeabi_dsub>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4630      	mov	r0, r6
 8006cba:	e9c4 2300 	strd	r2, r3, [r4]
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 fa4a 	bl	8000158 <__aeabi_dsub>
 8006cc4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006f48 <__ieee754_rem_pio2+0x2e0>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f7f9 fa45 	bl	8000158 <__aeabi_dsub>
 8006cce:	2501      	movs	r5, #1
 8006cd0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	b00d      	add	sp, #52	; 0x34
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	a39c      	add	r3, pc, #624	; (adr r3, 8006f50 <__ieee754_rem_pio2+0x2e8>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fa39 	bl	8000158 <__aeabi_dsub>
 8006ce6:	a39c      	add	r3, pc, #624	; (adr r3, 8006f58 <__ieee754_rem_pio2+0x2f0>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	4606      	mov	r6, r0
 8006cee:	460f      	mov	r7, r1
 8006cf0:	f7f9 fa32 	bl	8000158 <__aeabi_dsub>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	e9c4 2300 	strd	r2, r3, [r4]
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f7f9 fa2a 	bl	8000158 <__aeabi_dsub>
 8006d04:	a394      	add	r3, pc, #592	; (adr r3, 8006f58 <__ieee754_rem_pio2+0x2f0>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	e7de      	b.n	8006cca <__ieee754_rem_pio2+0x62>
 8006d0c:	f7f9 fa26 	bl	800015c <__adddf3>
 8006d10:	45aa      	cmp	sl, r5
 8006d12:	4606      	mov	r6, r0
 8006d14:	460f      	mov	r7, r1
 8006d16:	d016      	beq.n	8006d46 <__ieee754_rem_pio2+0xde>
 8006d18:	a38b      	add	r3, pc, #556	; (adr r3, 8006f48 <__ieee754_rem_pio2+0x2e0>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fa1d 	bl	800015c <__adddf3>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4630      	mov	r0, r6
 8006d28:	e9c4 2300 	strd	r2, r3, [r4]
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 fa13 	bl	8000158 <__aeabi_dsub>
 8006d32:	a385      	add	r3, pc, #532	; (adr r3, 8006f48 <__ieee754_rem_pio2+0x2e0>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fa10 	bl	800015c <__adddf3>
 8006d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d44:	e7c6      	b.n	8006cd4 <__ieee754_rem_pio2+0x6c>
 8006d46:	a382      	add	r3, pc, #520	; (adr r3, 8006f50 <__ieee754_rem_pio2+0x2e8>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f7f9 fa06 	bl	800015c <__adddf3>
 8006d50:	a381      	add	r3, pc, #516	; (adr r3, 8006f58 <__ieee754_rem_pio2+0x2f0>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	4606      	mov	r6, r0
 8006d58:	460f      	mov	r7, r1
 8006d5a:	f7f9 f9ff 	bl	800015c <__adddf3>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4630      	mov	r0, r6
 8006d64:	e9c4 2300 	strd	r2, r3, [r4]
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 f9f5 	bl	8000158 <__aeabi_dsub>
 8006d6e:	a37a      	add	r3, pc, #488	; (adr r3, 8006f58 <__ieee754_rem_pio2+0x2f0>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	e7e0      	b.n	8006d38 <__ieee754_rem_pio2+0xd0>
 8006d76:	4a83      	ldr	r2, [pc, #524]	; (8006f84 <__ieee754_rem_pio2+0x31c>)
 8006d78:	4592      	cmp	sl, r2
 8006d7a:	f300 80d2 	bgt.w	8006f22 <__ieee754_rem_pio2+0x2ba>
 8006d7e:	f000 fecd 	bl	8007b1c <fabs>
 8006d82:	a377      	add	r3, pc, #476	; (adr r3, 8006f60 <__ieee754_rem_pio2+0x2f8>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	f7f9 fb9c 	bl	80004c8 <__aeabi_dmul>
 8006d90:	2200      	movs	r2, #0
 8006d92:	4b7d      	ldr	r3, [pc, #500]	; (8006f88 <__ieee754_rem_pio2+0x320>)
 8006d94:	f7f9 f9e2 	bl	800015c <__adddf3>
 8006d98:	f7f9 fe46 	bl	8000a28 <__aeabi_d2iz>
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	f7f9 fb29 	bl	80003f4 <__aeabi_i2d>
 8006da2:	a367      	add	r3, pc, #412	; (adr r3, 8006f40 <__ieee754_rem_pio2+0x2d8>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dac:	f7f9 fb8c 	bl	80004c8 <__aeabi_dmul>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4630      	mov	r0, r6
 8006db6:	4639      	mov	r1, r7
 8006db8:	f7f9 f9ce 	bl	8000158 <__aeabi_dsub>
 8006dbc:	a362      	add	r3, pc, #392	; (adr r3, 8006f48 <__ieee754_rem_pio2+0x2e0>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dca:	f7f9 fb7d 	bl	80004c8 <__aeabi_dmul>
 8006dce:	2d1f      	cmp	r5, #31
 8006dd0:	4680      	mov	r8, r0
 8006dd2:	4689      	mov	r9, r1
 8006dd4:	dc0e      	bgt.n	8006df4 <__ieee754_rem_pio2+0x18c>
 8006dd6:	4b6d      	ldr	r3, [pc, #436]	; (8006f8c <__ieee754_rem_pio2+0x324>)
 8006dd8:	1e6a      	subs	r2, r5, #1
 8006dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dde:	4553      	cmp	r3, sl
 8006de0:	d008      	beq.n	8006df4 <__ieee754_rem_pio2+0x18c>
 8006de2:	4642      	mov	r2, r8
 8006de4:	464b      	mov	r3, r9
 8006de6:	4630      	mov	r0, r6
 8006de8:	4639      	mov	r1, r7
 8006dea:	f7f9 f9b5 	bl	8000158 <__aeabi_dsub>
 8006dee:	e9c4 0100 	strd	r0, r1, [r4]
 8006df2:	e011      	b.n	8006e18 <__ieee754_rem_pio2+0x1b0>
 8006df4:	464b      	mov	r3, r9
 8006df6:	4642      	mov	r2, r8
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	f7f9 f9ac 	bl	8000158 <__aeabi_dsub>
 8006e00:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006e04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e08:	ebaa 0303 	sub.w	r3, sl, r3
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	dc1f      	bgt.n	8006e50 <__ieee754_rem_pio2+0x1e8>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	e9c4 2300 	strd	r2, r3, [r4]
 8006e18:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	4653      	mov	r3, sl
 8006e20:	4639      	mov	r1, r7
 8006e22:	f7f9 f999 	bl	8000158 <__aeabi_dsub>
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	f7f9 f995 	bl	8000158 <__aeabi_dsub>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	f1bb 0f00 	cmp.w	fp, #0
 8006e36:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006e3a:	f6bf af4b 	bge.w	8006cd4 <__ieee754_rem_pio2+0x6c>
 8006e3e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006e42:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8006e46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006e4a:	60e1      	str	r1, [r4, #12]
 8006e4c:	426d      	negs	r5, r5
 8006e4e:	e741      	b.n	8006cd4 <__ieee754_rem_pio2+0x6c>
 8006e50:	a33f      	add	r3, pc, #252	; (adr r3, 8006f50 <__ieee754_rem_pio2+0x2e8>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e5a:	f7f9 fb35 	bl	80004c8 <__aeabi_dmul>
 8006e5e:	4680      	mov	r8, r0
 8006e60:	4689      	mov	r9, r1
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4630      	mov	r0, r6
 8006e68:	4639      	mov	r1, r7
 8006e6a:	f7f9 f975 	bl	8000158 <__aeabi_dsub>
 8006e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 f96d 	bl	8000158 <__aeabi_dsub>
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	f7f9 f969 	bl	8000158 <__aeabi_dsub>
 8006e86:	a334      	add	r3, pc, #208	; (adr r3, 8006f58 <__ieee754_rem_pio2+0x2f0>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e94:	f7f9 fb18 	bl	80004c8 <__aeabi_dmul>
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	f7f9 f95c 	bl	8000158 <__aeabi_dsub>
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eac:	f7f9 f954 	bl	8000158 <__aeabi_dsub>
 8006eb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006eb4:	ebaa 0a03 	sub.w	sl, sl, r3
 8006eb8:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8006ebc:	dc06      	bgt.n	8006ecc <__ieee754_rem_pio2+0x264>
 8006ebe:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	e9c4 2300 	strd	r2, r3, [r4]
 8006eca:	e7a5      	b.n	8006e18 <__ieee754_rem_pio2+0x1b0>
 8006ecc:	a326      	add	r3, pc, #152	; (adr r3, 8006f68 <__ieee754_rem_pio2+0x300>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed6:	f7f9 faf7 	bl	80004c8 <__aeabi_dmul>
 8006eda:	4680      	mov	r8, r0
 8006edc:	4689      	mov	r9, r1
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee6:	f7f9 f937 	bl	8000158 <__aeabi_dsub>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ef6:	f7f9 f92f 	bl	8000158 <__aeabi_dsub>
 8006efa:	4642      	mov	r2, r8
 8006efc:	464b      	mov	r3, r9
 8006efe:	f7f9 f92b 	bl	8000158 <__aeabi_dsub>
 8006f02:	a31b      	add	r3, pc, #108	; (adr r3, 8006f70 <__ieee754_rem_pio2+0x308>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	4680      	mov	r8, r0
 8006f0a:	4689      	mov	r9, r1
 8006f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f10:	f7f9 fada 	bl	80004c8 <__aeabi_dmul>
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	f7f9 f91e 	bl	8000158 <__aeabi_dsub>
 8006f1c:	4680      	mov	r8, r0
 8006f1e:	4689      	mov	r9, r1
 8006f20:	e75f      	b.n	8006de2 <__ieee754_rem_pio2+0x17a>
 8006f22:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <__ieee754_rem_pio2+0x328>)
 8006f24:	4592      	cmp	sl, r2
 8006f26:	dd35      	ble.n	8006f94 <__ieee754_rem_pio2+0x32c>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	f7f9 f914 	bl	8000158 <__aeabi_dsub>
 8006f30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f34:	e9c4 0100 	strd	r0, r1, [r4]
 8006f38:	e6a6      	b.n	8006c88 <__ieee754_rem_pio2+0x20>
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w
 8006f40:	54400000 	.word	0x54400000
 8006f44:	3ff921fb 	.word	0x3ff921fb
 8006f48:	1a626331 	.word	0x1a626331
 8006f4c:	3dd0b461 	.word	0x3dd0b461
 8006f50:	1a600000 	.word	0x1a600000
 8006f54:	3dd0b461 	.word	0x3dd0b461
 8006f58:	2e037073 	.word	0x2e037073
 8006f5c:	3ba3198a 	.word	0x3ba3198a
 8006f60:	6dc9c883 	.word	0x6dc9c883
 8006f64:	3fe45f30 	.word	0x3fe45f30
 8006f68:	2e000000 	.word	0x2e000000
 8006f6c:	3ba3198a 	.word	0x3ba3198a
 8006f70:	252049c1 	.word	0x252049c1
 8006f74:	397b839a 	.word	0x397b839a
 8006f78:	3fe921fb 	.word	0x3fe921fb
 8006f7c:	4002d97b 	.word	0x4002d97b
 8006f80:	3ff921fb 	.word	0x3ff921fb
 8006f84:	413921fb 	.word	0x413921fb
 8006f88:	3fe00000 	.word	0x3fe00000
 8006f8c:	08009690 	.word	0x08009690
 8006f90:	7fefffff 	.word	0x7fefffff
 8006f94:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006f98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006f9c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	f7f9 fd40 	bl	8000a28 <__aeabi_d2iz>
 8006fa8:	f7f9 fa24 	bl	80003f4 <__aeabi_i2d>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fb8:	f7f9 f8ce 	bl	8000158 <__aeabi_dsub>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4b20      	ldr	r3, [pc, #128]	; (8007040 <__ieee754_rem_pio2+0x3d8>)
 8006fc0:	f7f9 fa82 	bl	80004c8 <__aeabi_dmul>
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	f7f9 fd2e 	bl	8000a28 <__aeabi_d2iz>
 8006fcc:	f7f9 fa12 	bl	80003f4 <__aeabi_i2d>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fdc:	f7f9 f8bc 	bl	8000158 <__aeabi_dsub>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4b17      	ldr	r3, [pc, #92]	; (8007040 <__ieee754_rem_pio2+0x3d8>)
 8006fe4:	f7f9 fa70 	bl	80004c8 <__aeabi_dmul>
 8006fe8:	f04f 0803 	mov.w	r8, #3
 8006fec:	2600      	movs	r6, #0
 8006fee:	2700      	movs	r7, #0
 8006ff0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ff4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006ff8:	4632      	mov	r2, r6
 8006ffa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006ffe:	463b      	mov	r3, r7
 8007000:	f108 3aff 	add.w	sl, r8, #4294967295
 8007004:	f7f9 fcc8 	bl	8000998 <__aeabi_dcmpeq>
 8007008:	b9b8      	cbnz	r0, 800703a <__ieee754_rem_pio2+0x3d2>
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <__ieee754_rem_pio2+0x3dc>)
 800700c:	462a      	mov	r2, r5
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2302      	movs	r3, #2
 8007012:	4621      	mov	r1, r4
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	a806      	add	r0, sp, #24
 8007018:	4643      	mov	r3, r8
 800701a:	f000 f97f 	bl	800731c <__kernel_rem_pio2>
 800701e:	f1bb 0f00 	cmp.w	fp, #0
 8007022:	4605      	mov	r5, r0
 8007024:	f6bf ae56 	bge.w	8006cd4 <__ieee754_rem_pio2+0x6c>
 8007028:	6863      	ldr	r3, [r4, #4]
 800702a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800702e:	6063      	str	r3, [r4, #4]
 8007030:	68e3      	ldr	r3, [r4, #12]
 8007032:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007036:	60e3      	str	r3, [r4, #12]
 8007038:	e708      	b.n	8006e4c <__ieee754_rem_pio2+0x1e4>
 800703a:	46d0      	mov	r8, sl
 800703c:	e7dc      	b.n	8006ff8 <__ieee754_rem_pio2+0x390>
 800703e:	bf00      	nop
 8007040:	41700000 	.word	0x41700000
 8007044:	08009710 	.word	0x08009710

08007048 <__ieee754_sqrt>:
 8007048:	4b54      	ldr	r3, [pc, #336]	; (800719c <__ieee754_sqrt+0x154>)
 800704a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704e:	438b      	bics	r3, r1
 8007050:	4606      	mov	r6, r0
 8007052:	460d      	mov	r5, r1
 8007054:	460a      	mov	r2, r1
 8007056:	460c      	mov	r4, r1
 8007058:	d10f      	bne.n	800707a <__ieee754_sqrt+0x32>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	f7f9 fa33 	bl	80004c8 <__aeabi_dmul>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4630      	mov	r0, r6
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 f877 	bl	800015c <__adddf3>
 800706e:	4606      	mov	r6, r0
 8007070:	460d      	mov	r5, r1
 8007072:	4630      	mov	r0, r6
 8007074:	4629      	mov	r1, r5
 8007076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800707a:	2900      	cmp	r1, #0
 800707c:	4607      	mov	r7, r0
 800707e:	4603      	mov	r3, r0
 8007080:	dc0e      	bgt.n	80070a0 <__ieee754_sqrt+0x58>
 8007082:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007086:	ea5c 0707 	orrs.w	r7, ip, r7
 800708a:	d0f2      	beq.n	8007072 <__ieee754_sqrt+0x2a>
 800708c:	b141      	cbz	r1, 80070a0 <__ieee754_sqrt+0x58>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	f7f9 f861 	bl	8000158 <__aeabi_dsub>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	f7f9 fb3f 	bl	800071c <__aeabi_ddiv>
 800709e:	e7e6      	b.n	800706e <__ieee754_sqrt+0x26>
 80070a0:	1512      	asrs	r2, r2, #20
 80070a2:	d074      	beq.n	800718e <__ieee754_sqrt+0x146>
 80070a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80070a8:	07d5      	lsls	r5, r2, #31
 80070aa:	f04f 0500 	mov.w	r5, #0
 80070ae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070b2:	bf48      	it	mi
 80070b4:	0fd9      	lsrmi	r1, r3, #31
 80070b6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80070ba:	bf44      	itt	mi
 80070bc:	005b      	lslmi	r3, r3, #1
 80070be:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80070c2:	1051      	asrs	r1, r2, #1
 80070c4:	0fda      	lsrs	r2, r3, #31
 80070c6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80070ca:	4628      	mov	r0, r5
 80070cc:	2216      	movs	r2, #22
 80070ce:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	1987      	adds	r7, r0, r6
 80070d6:	42a7      	cmp	r7, r4
 80070d8:	bfde      	ittt	le
 80070da:	19b8      	addle	r0, r7, r6
 80070dc:	1be4      	suble	r4, r4, r7
 80070de:	19ad      	addle	r5, r5, r6
 80070e0:	0fdf      	lsrs	r7, r3, #31
 80070e2:	3a01      	subs	r2, #1
 80070e4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80070e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80070f0:	d1f0      	bne.n	80070d4 <__ieee754_sqrt+0x8c>
 80070f2:	f04f 0c20 	mov.w	ip, #32
 80070f6:	4696      	mov	lr, r2
 80070f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80070fc:	4284      	cmp	r4, r0
 80070fe:	eb06 070e 	add.w	r7, r6, lr
 8007102:	dc02      	bgt.n	800710a <__ieee754_sqrt+0xc2>
 8007104:	d112      	bne.n	800712c <__ieee754_sqrt+0xe4>
 8007106:	429f      	cmp	r7, r3
 8007108:	d810      	bhi.n	800712c <__ieee754_sqrt+0xe4>
 800710a:	2f00      	cmp	r7, #0
 800710c:	eb07 0e06 	add.w	lr, r7, r6
 8007110:	da42      	bge.n	8007198 <__ieee754_sqrt+0x150>
 8007112:	f1be 0f00 	cmp.w	lr, #0
 8007116:	db3f      	blt.n	8007198 <__ieee754_sqrt+0x150>
 8007118:	f100 0801 	add.w	r8, r0, #1
 800711c:	1a24      	subs	r4, r4, r0
 800711e:	4640      	mov	r0, r8
 8007120:	429f      	cmp	r7, r3
 8007122:	bf88      	it	hi
 8007124:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8007128:	1bdb      	subs	r3, r3, r7
 800712a:	4432      	add	r2, r6
 800712c:	0064      	lsls	r4, r4, #1
 800712e:	f1bc 0c01 	subs.w	ip, ip, #1
 8007132:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007136:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800713a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800713e:	d1dd      	bne.n	80070fc <__ieee754_sqrt+0xb4>
 8007140:	4323      	orrs	r3, r4
 8007142:	d006      	beq.n	8007152 <__ieee754_sqrt+0x10a>
 8007144:	1c54      	adds	r4, r2, #1
 8007146:	bf0b      	itete	eq
 8007148:	4662      	moveq	r2, ip
 800714a:	3201      	addne	r2, #1
 800714c:	3501      	addeq	r5, #1
 800714e:	f022 0201 	bicne.w	r2, r2, #1
 8007152:	106b      	asrs	r3, r5, #1
 8007154:	0852      	lsrs	r2, r2, #1
 8007156:	07e8      	lsls	r0, r5, #31
 8007158:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800715c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007160:	bf48      	it	mi
 8007162:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007166:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800716a:	4616      	mov	r6, r2
 800716c:	e781      	b.n	8007072 <__ieee754_sqrt+0x2a>
 800716e:	0adc      	lsrs	r4, r3, #11
 8007170:	3915      	subs	r1, #21
 8007172:	055b      	lsls	r3, r3, #21
 8007174:	2c00      	cmp	r4, #0
 8007176:	d0fa      	beq.n	800716e <__ieee754_sqrt+0x126>
 8007178:	02e6      	lsls	r6, r4, #11
 800717a:	d50a      	bpl.n	8007192 <__ieee754_sqrt+0x14a>
 800717c:	f1c2 0020 	rsb	r0, r2, #32
 8007180:	fa23 f000 	lsr.w	r0, r3, r0
 8007184:	1e55      	subs	r5, r2, #1
 8007186:	4093      	lsls	r3, r2
 8007188:	4304      	orrs	r4, r0
 800718a:	1b4a      	subs	r2, r1, r5
 800718c:	e78a      	b.n	80070a4 <__ieee754_sqrt+0x5c>
 800718e:	4611      	mov	r1, r2
 8007190:	e7f0      	b.n	8007174 <__ieee754_sqrt+0x12c>
 8007192:	0064      	lsls	r4, r4, #1
 8007194:	3201      	adds	r2, #1
 8007196:	e7ef      	b.n	8007178 <__ieee754_sqrt+0x130>
 8007198:	4680      	mov	r8, r0
 800719a:	e7bf      	b.n	800711c <__ieee754_sqrt+0xd4>
 800719c:	7ff00000 	.word	0x7ff00000

080071a0 <__kernel_cos>:
 80071a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80071a8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80071ac:	4680      	mov	r8, r0
 80071ae:	460f      	mov	r7, r1
 80071b0:	e9cd 2300 	strd	r2, r3, [sp]
 80071b4:	da04      	bge.n	80071c0 <__kernel_cos+0x20>
 80071b6:	f7f9 fc37 	bl	8000a28 <__aeabi_d2iz>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	f000 8086 	beq.w	80072cc <__kernel_cos+0x12c>
 80071c0:	4642      	mov	r2, r8
 80071c2:	463b      	mov	r3, r7
 80071c4:	4640      	mov	r0, r8
 80071c6:	4639      	mov	r1, r7
 80071c8:	f7f9 f97e 	bl	80004c8 <__aeabi_dmul>
 80071cc:	2200      	movs	r2, #0
 80071ce:	4b4e      	ldr	r3, [pc, #312]	; (8007308 <__kernel_cos+0x168>)
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	f7f9 f978 	bl	80004c8 <__aeabi_dmul>
 80071d8:	a33f      	add	r3, pc, #252	; (adr r3, 80072d8 <__kernel_cos+0x138>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	4682      	mov	sl, r0
 80071e0:	468b      	mov	fp, r1
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 f96f 	bl	80004c8 <__aeabi_dmul>
 80071ea:	a33d      	add	r3, pc, #244	; (adr r3, 80072e0 <__kernel_cos+0x140>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f8 ffb4 	bl	800015c <__adddf3>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 f966 	bl	80004c8 <__aeabi_dmul>
 80071fc:	a33a      	add	r3, pc, #232	; (adr r3, 80072e8 <__kernel_cos+0x148>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f8 ffa9 	bl	8000158 <__aeabi_dsub>
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	f7f9 f95d 	bl	80004c8 <__aeabi_dmul>
 800720e:	a338      	add	r3, pc, #224	; (adr r3, 80072f0 <__kernel_cos+0x150>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f8 ffa2 	bl	800015c <__adddf3>
 8007218:	4622      	mov	r2, r4
 800721a:	462b      	mov	r3, r5
 800721c:	f7f9 f954 	bl	80004c8 <__aeabi_dmul>
 8007220:	a335      	add	r3, pc, #212	; (adr r3, 80072f8 <__kernel_cos+0x158>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f8 ff97 	bl	8000158 <__aeabi_dsub>
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	f7f9 f94b 	bl	80004c8 <__aeabi_dmul>
 8007232:	a333      	add	r3, pc, #204	; (adr r3, 8007300 <__kernel_cos+0x160>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f8 ff90 	bl	800015c <__adddf3>
 800723c:	4622      	mov	r2, r4
 800723e:	462b      	mov	r3, r5
 8007240:	f7f9 f942 	bl	80004c8 <__aeabi_dmul>
 8007244:	4622      	mov	r2, r4
 8007246:	462b      	mov	r3, r5
 8007248:	f7f9 f93e 	bl	80004c8 <__aeabi_dmul>
 800724c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007250:	4604      	mov	r4, r0
 8007252:	460d      	mov	r5, r1
 8007254:	4640      	mov	r0, r8
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 f936 	bl	80004c8 <__aeabi_dmul>
 800725c:	460b      	mov	r3, r1
 800725e:	4602      	mov	r2, r0
 8007260:	4629      	mov	r1, r5
 8007262:	4620      	mov	r0, r4
 8007264:	f7f8 ff78 	bl	8000158 <__aeabi_dsub>
 8007268:	4b28      	ldr	r3, [pc, #160]	; (800730c <__kernel_cos+0x16c>)
 800726a:	4680      	mov	r8, r0
 800726c:	429e      	cmp	r6, r3
 800726e:	4689      	mov	r9, r1
 8007270:	dc0e      	bgt.n	8007290 <__kernel_cos+0xf0>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4650      	mov	r0, sl
 8007278:	4659      	mov	r1, fp
 800727a:	f7f8 ff6d 	bl	8000158 <__aeabi_dsub>
 800727e:	4602      	mov	r2, r0
 8007280:	2000      	movs	r0, #0
 8007282:	460b      	mov	r3, r1
 8007284:	4922      	ldr	r1, [pc, #136]	; (8007310 <__kernel_cos+0x170>)
 8007286:	f7f8 ff67 	bl	8000158 <__aeabi_dsub>
 800728a:	b003      	add	sp, #12
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	2400      	movs	r4, #0
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <__kernel_cos+0x174>)
 8007294:	4622      	mov	r2, r4
 8007296:	429e      	cmp	r6, r3
 8007298:	bfcc      	ite	gt
 800729a:	4d1f      	ldrgt	r5, [pc, #124]	; (8007318 <__kernel_cos+0x178>)
 800729c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80072a0:	462b      	mov	r3, r5
 80072a2:	2000      	movs	r0, #0
 80072a4:	491a      	ldr	r1, [pc, #104]	; (8007310 <__kernel_cos+0x170>)
 80072a6:	f7f8 ff57 	bl	8000158 <__aeabi_dsub>
 80072aa:	4622      	mov	r2, r4
 80072ac:	4606      	mov	r6, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	462b      	mov	r3, r5
 80072b2:	4650      	mov	r0, sl
 80072b4:	4659      	mov	r1, fp
 80072b6:	f7f8 ff4f 	bl	8000158 <__aeabi_dsub>
 80072ba:	4642      	mov	r2, r8
 80072bc:	464b      	mov	r3, r9
 80072be:	f7f8 ff4b 	bl	8000158 <__aeabi_dsub>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4630      	mov	r0, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	e7dc      	b.n	8007286 <__kernel_cos+0xe6>
 80072cc:	2000      	movs	r0, #0
 80072ce:	4910      	ldr	r1, [pc, #64]	; (8007310 <__kernel_cos+0x170>)
 80072d0:	e7db      	b.n	800728a <__kernel_cos+0xea>
 80072d2:	bf00      	nop
 80072d4:	f3af 8000 	nop.w
 80072d8:	be8838d4 	.word	0xbe8838d4
 80072dc:	bda8fae9 	.word	0xbda8fae9
 80072e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80072e4:	3e21ee9e 	.word	0x3e21ee9e
 80072e8:	809c52ad 	.word	0x809c52ad
 80072ec:	3e927e4f 	.word	0x3e927e4f
 80072f0:	19cb1590 	.word	0x19cb1590
 80072f4:	3efa01a0 	.word	0x3efa01a0
 80072f8:	16c15177 	.word	0x16c15177
 80072fc:	3f56c16c 	.word	0x3f56c16c
 8007300:	5555554c 	.word	0x5555554c
 8007304:	3fa55555 	.word	0x3fa55555
 8007308:	3fe00000 	.word	0x3fe00000
 800730c:	3fd33332 	.word	0x3fd33332
 8007310:	3ff00000 	.word	0x3ff00000
 8007314:	3fe90000 	.word	0x3fe90000
 8007318:	3fd20000 	.word	0x3fd20000

0800731c <__kernel_rem_pio2>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	9104      	str	r1, [sp, #16]
 8007328:	4bbf      	ldr	r3, [pc, #764]	; (8007628 <__kernel_rem_pio2+0x30c>)
 800732a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800732c:	1ed4      	subs	r4, r2, #3
 800732e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007332:	2500      	movs	r5, #0
 8007334:	9302      	str	r3, [sp, #8]
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	9008      	str	r0, [sp, #32]
 800733a:	3b01      	subs	r3, #1
 800733c:	9306      	str	r3, [sp, #24]
 800733e:	2318      	movs	r3, #24
 8007340:	fb94 f4f3 	sdiv	r4, r4, r3
 8007344:	f06f 0317 	mvn.w	r3, #23
 8007348:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800734c:	fb04 3303 	mla	r3, r4, r3, r3
 8007350:	eb03 0a02 	add.w	sl, r3, r2
 8007354:	9a06      	ldr	r2, [sp, #24]
 8007356:	9b02      	ldr	r3, [sp, #8]
 8007358:	1aa7      	subs	r7, r4, r2
 800735a:	eb03 0802 	add.w	r8, r3, r2
 800735e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007360:	2200      	movs	r2, #0
 8007362:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007366:	2300      	movs	r3, #0
 8007368:	ae1e      	add	r6, sp, #120	; 0x78
 800736a:	4545      	cmp	r5, r8
 800736c:	dd14      	ble.n	8007398 <__kernel_rem_pio2+0x7c>
 800736e:	2600      	movs	r6, #0
 8007370:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8007374:	9b02      	ldr	r3, [sp, #8]
 8007376:	429e      	cmp	r6, r3
 8007378:	dc39      	bgt.n	80073ee <__kernel_rem_pio2+0xd2>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	f04f 0800 	mov.w	r8, #0
 8007380:	3b08      	subs	r3, #8
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	f04f 0900 	mov.w	r9, #0
 800738a:	199d      	adds	r5, r3, r6
 800738c:	ab20      	add	r3, sp, #128	; 0x80
 800738e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	2700      	movs	r7, #0
 8007396:	e023      	b.n	80073e0 <__kernel_rem_pio2+0xc4>
 8007398:	42ef      	cmn	r7, r5
 800739a:	d40b      	bmi.n	80073b4 <__kernel_rem_pio2+0x98>
 800739c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80073a0:	e9cd 2300 	strd	r2, r3, [sp]
 80073a4:	f7f9 f826 	bl	80003f4 <__aeabi_i2d>
 80073a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ac:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80073b0:	3501      	adds	r5, #1
 80073b2:	e7da      	b.n	800736a <__kernel_rem_pio2+0x4e>
 80073b4:	4610      	mov	r0, r2
 80073b6:	4619      	mov	r1, r3
 80073b8:	e7f8      	b.n	80073ac <__kernel_rem_pio2+0x90>
 80073ba:	9905      	ldr	r1, [sp, #20]
 80073bc:	9d00      	ldr	r5, [sp, #0]
 80073be:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80073c2:	9105      	str	r1, [sp, #20]
 80073c4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80073c8:	9500      	str	r5, [sp, #0]
 80073ca:	f7f9 f87d 	bl	80004c8 <__aeabi_dmul>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4640      	mov	r0, r8
 80073d4:	4649      	mov	r1, r9
 80073d6:	f7f8 fec1 	bl	800015c <__adddf3>
 80073da:	4680      	mov	r8, r0
 80073dc:	4689      	mov	r9, r1
 80073de:	3701      	adds	r7, #1
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	429f      	cmp	r7, r3
 80073e4:	dde9      	ble.n	80073ba <__kernel_rem_pio2+0x9e>
 80073e6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80073ea:	3601      	adds	r6, #1
 80073ec:	e7c2      	b.n	8007374 <__kernel_rem_pio2+0x58>
 80073ee:	9b02      	ldr	r3, [sp, #8]
 80073f0:	aa0c      	add	r2, sp, #48	; 0x30
 80073f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80073fa:	9f02      	ldr	r7, [sp, #8]
 80073fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007400:	930a      	str	r3, [sp, #40]	; 0x28
 8007402:	2600      	movs	r6, #0
 8007404:	ab98      	add	r3, sp, #608	; 0x260
 8007406:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800740a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800740e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007412:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007416:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800741a:	ab98      	add	r3, sp, #608	; 0x260
 800741c:	445b      	add	r3, fp
 800741e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8007422:	1bbb      	subs	r3, r7, r6
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc71      	bgt.n	800750c <__kernel_rem_pio2+0x1f0>
 8007428:	4652      	mov	r2, sl
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	f000 fc13 	bl	8007c58 <scalbn>
 8007432:	2200      	movs	r2, #0
 8007434:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007438:	4604      	mov	r4, r0
 800743a:	460d      	mov	r5, r1
 800743c:	f7f9 f844 	bl	80004c8 <__aeabi_dmul>
 8007440:	f7fe f996 	bl	8005770 <floor>
 8007444:	2200      	movs	r2, #0
 8007446:	4b79      	ldr	r3, [pc, #484]	; (800762c <__kernel_rem_pio2+0x310>)
 8007448:	f7f9 f83e 	bl	80004c8 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4620      	mov	r0, r4
 8007452:	4629      	mov	r1, r5
 8007454:	f7f8 fe80 	bl	8000158 <__aeabi_dsub>
 8007458:	460d      	mov	r5, r1
 800745a:	4604      	mov	r4, r0
 800745c:	f7f9 fae4 	bl	8000a28 <__aeabi_d2iz>
 8007460:	9005      	str	r0, [sp, #20]
 8007462:	f7f8 ffc7 	bl	80003f4 <__aeabi_i2d>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4620      	mov	r0, r4
 800746c:	4629      	mov	r1, r5
 800746e:	f7f8 fe73 	bl	8000158 <__aeabi_dsub>
 8007472:	f1ba 0f00 	cmp.w	sl, #0
 8007476:	4680      	mov	r8, r0
 8007478:	4689      	mov	r9, r1
 800747a:	dd6c      	ble.n	8007556 <__kernel_rem_pio2+0x23a>
 800747c:	1e7a      	subs	r2, r7, #1
 800747e:	ab0c      	add	r3, sp, #48	; 0x30
 8007480:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007484:	f1ca 0118 	rsb	r1, sl, #24
 8007488:	9c05      	ldr	r4, [sp, #20]
 800748a:	fa40 f301 	asr.w	r3, r0, r1
 800748e:	441c      	add	r4, r3
 8007490:	408b      	lsls	r3, r1
 8007492:	1ac0      	subs	r0, r0, r3
 8007494:	ab0c      	add	r3, sp, #48	; 0x30
 8007496:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800749a:	f1ca 0317 	rsb	r3, sl, #23
 800749e:	9405      	str	r4, [sp, #20]
 80074a0:	fa40 f303 	asr.w	r3, r0, r3
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	9b00      	ldr	r3, [sp, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dd62      	ble.n	8007572 <__kernel_rem_pio2+0x256>
 80074ac:	2200      	movs	r2, #0
 80074ae:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80074b2:	4614      	mov	r4, r2
 80074b4:	9b05      	ldr	r3, [sp, #20]
 80074b6:	3301      	adds	r3, #1
 80074b8:	9305      	str	r3, [sp, #20]
 80074ba:	4297      	cmp	r7, r2
 80074bc:	f300 809f 	bgt.w	80075fe <__kernel_rem_pio2+0x2e2>
 80074c0:	f1ba 0f00 	cmp.w	sl, #0
 80074c4:	dd07      	ble.n	80074d6 <__kernel_rem_pio2+0x1ba>
 80074c6:	f1ba 0f01 	cmp.w	sl, #1
 80074ca:	f000 80bb 	beq.w	8007644 <__kernel_rem_pio2+0x328>
 80074ce:	f1ba 0f02 	cmp.w	sl, #2
 80074d2:	f000 80c1 	beq.w	8007658 <__kernel_rem_pio2+0x33c>
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d14a      	bne.n	8007572 <__kernel_rem_pio2+0x256>
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	2000      	movs	r0, #0
 80074e2:	4953      	ldr	r1, [pc, #332]	; (8007630 <__kernel_rem_pio2+0x314>)
 80074e4:	f7f8 fe38 	bl	8000158 <__aeabi_dsub>
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	2c00      	cmp	r4, #0
 80074ee:	d040      	beq.n	8007572 <__kernel_rem_pio2+0x256>
 80074f0:	4652      	mov	r2, sl
 80074f2:	2000      	movs	r0, #0
 80074f4:	494e      	ldr	r1, [pc, #312]	; (8007630 <__kernel_rem_pio2+0x314>)
 80074f6:	f000 fbaf 	bl	8007c58 <scalbn>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f7f8 fe29 	bl	8000158 <__aeabi_dsub>
 8007506:	4680      	mov	r8, r0
 8007508:	4689      	mov	r9, r1
 800750a:	e032      	b.n	8007572 <__kernel_rem_pio2+0x256>
 800750c:	2200      	movs	r2, #0
 800750e:	4b49      	ldr	r3, [pc, #292]	; (8007634 <__kernel_rem_pio2+0x318>)
 8007510:	4640      	mov	r0, r8
 8007512:	4649      	mov	r1, r9
 8007514:	f7f8 ffd8 	bl	80004c8 <__aeabi_dmul>
 8007518:	f7f9 fa86 	bl	8000a28 <__aeabi_d2iz>
 800751c:	f7f8 ff6a 	bl	80003f4 <__aeabi_i2d>
 8007520:	2200      	movs	r2, #0
 8007522:	4b45      	ldr	r3, [pc, #276]	; (8007638 <__kernel_rem_pio2+0x31c>)
 8007524:	e9cd 0100 	strd	r0, r1, [sp]
 8007528:	f7f8 ffce 	bl	80004c8 <__aeabi_dmul>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4640      	mov	r0, r8
 8007532:	4649      	mov	r1, r9
 8007534:	f7f8 fe10 	bl	8000158 <__aeabi_dsub>
 8007538:	f7f9 fa76 	bl	8000a28 <__aeabi_d2iz>
 800753c:	ab0c      	add	r3, sp, #48	; 0x30
 800753e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007542:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800754a:	f7f8 fe07 	bl	800015c <__adddf3>
 800754e:	3601      	adds	r6, #1
 8007550:	4680      	mov	r8, r0
 8007552:	4689      	mov	r9, r1
 8007554:	e765      	b.n	8007422 <__kernel_rem_pio2+0x106>
 8007556:	d105      	bne.n	8007564 <__kernel_rem_pio2+0x248>
 8007558:	1e7b      	subs	r3, r7, #1
 800755a:	aa0c      	add	r2, sp, #48	; 0x30
 800755c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007560:	15c3      	asrs	r3, r0, #23
 8007562:	e79f      	b.n	80074a4 <__kernel_rem_pio2+0x188>
 8007564:	2200      	movs	r2, #0
 8007566:	4b35      	ldr	r3, [pc, #212]	; (800763c <__kernel_rem_pio2+0x320>)
 8007568:	f7f9 fa34 	bl	80009d4 <__aeabi_dcmpge>
 800756c:	2800      	cmp	r0, #0
 800756e:	d143      	bne.n	80075f8 <__kernel_rem_pio2+0x2dc>
 8007570:	9000      	str	r0, [sp, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f9 fa0d 	bl	8000998 <__aeabi_dcmpeq>
 800757e:	2800      	cmp	r0, #0
 8007580:	f000 80c3 	beq.w	800770a <__kernel_rem_pio2+0x3ee>
 8007584:	1e7c      	subs	r4, r7, #1
 8007586:	4623      	mov	r3, r4
 8007588:	2200      	movs	r2, #0
 800758a:	9902      	ldr	r1, [sp, #8]
 800758c:	428b      	cmp	r3, r1
 800758e:	da6a      	bge.n	8007666 <__kernel_rem_pio2+0x34a>
 8007590:	2a00      	cmp	r2, #0
 8007592:	f000 8084 	beq.w	800769e <__kernel_rem_pio2+0x382>
 8007596:	ab0c      	add	r3, sp, #48	; 0x30
 8007598:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800759c:	f1aa 0a18 	sub.w	sl, sl, #24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 80b0 	beq.w	8007706 <__kernel_rem_pio2+0x3ea>
 80075a6:	4652      	mov	r2, sl
 80075a8:	2000      	movs	r0, #0
 80075aa:	4921      	ldr	r1, [pc, #132]	; (8007630 <__kernel_rem_pio2+0x314>)
 80075ac:	f000 fb54 	bl	8007c58 <scalbn>
 80075b0:	4625      	mov	r5, r4
 80075b2:	4606      	mov	r6, r0
 80075b4:	460f      	mov	r7, r1
 80075b6:	f04f 0a00 	mov.w	sl, #0
 80075ba:	00e3      	lsls	r3, r4, #3
 80075bc:	aa98      	add	r2, sp, #608	; 0x260
 80075be:	eb02 0803 	add.w	r8, r2, r3
 80075c2:	f8df b070 	ldr.w	fp, [pc, #112]	; 8007634 <__kernel_rem_pio2+0x318>
 80075c6:	9306      	str	r3, [sp, #24]
 80075c8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	f280 80d2 	bge.w	8007776 <__kernel_rem_pio2+0x45a>
 80075d2:	2500      	movs	r5, #0
 80075d4:	9a06      	ldr	r2, [sp, #24]
 80075d6:	ab98      	add	r3, sp, #608	; 0x260
 80075d8:	189e      	adds	r6, r3, r2
 80075da:	3ea8      	subs	r6, #168	; 0xa8
 80075dc:	1b63      	subs	r3, r4, r5
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f2c0 80f9 	blt.w	80077d6 <__kernel_rem_pio2+0x4ba>
 80075e4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8007640 <__kernel_rem_pio2+0x324>
 80075e8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 80075ec:	f04f 0a00 	mov.w	sl, #0
 80075f0:	f04f 0b00 	mov.w	fp, #0
 80075f4:	2700      	movs	r7, #0
 80075f6:	e0e2      	b.n	80077be <__kernel_rem_pio2+0x4a2>
 80075f8:	2302      	movs	r3, #2
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	e756      	b.n	80074ac <__kernel_rem_pio2+0x190>
 80075fe:	ab0c      	add	r3, sp, #48	; 0x30
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	b94c      	cbnz	r4, 800761a <__kernel_rem_pio2+0x2fe>
 8007606:	b12b      	cbz	r3, 8007614 <__kernel_rem_pio2+0x2f8>
 8007608:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800760c:	a80c      	add	r0, sp, #48	; 0x30
 800760e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007612:	2301      	movs	r3, #1
 8007614:	3201      	adds	r2, #1
 8007616:	461c      	mov	r4, r3
 8007618:	e74f      	b.n	80074ba <__kernel_rem_pio2+0x19e>
 800761a:	1acb      	subs	r3, r1, r3
 800761c:	a80c      	add	r0, sp, #48	; 0x30
 800761e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007622:	4623      	mov	r3, r4
 8007624:	e7f6      	b.n	8007614 <__kernel_rem_pio2+0x2f8>
 8007626:	bf00      	nop
 8007628:	08009858 	.word	0x08009858
 800762c:	40200000 	.word	0x40200000
 8007630:	3ff00000 	.word	0x3ff00000
 8007634:	3e700000 	.word	0x3e700000
 8007638:	41700000 	.word	0x41700000
 800763c:	3fe00000 	.word	0x3fe00000
 8007640:	08009810 	.word	0x08009810
 8007644:	1e7a      	subs	r2, r7, #1
 8007646:	ab0c      	add	r3, sp, #48	; 0x30
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007650:	a90c      	add	r1, sp, #48	; 0x30
 8007652:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007656:	e73e      	b.n	80074d6 <__kernel_rem_pio2+0x1ba>
 8007658:	1e7a      	subs	r2, r7, #1
 800765a:	ab0c      	add	r3, sp, #48	; 0x30
 800765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007660:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007664:	e7f4      	b.n	8007650 <__kernel_rem_pio2+0x334>
 8007666:	a90c      	add	r1, sp, #48	; 0x30
 8007668:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800766c:	3b01      	subs	r3, #1
 800766e:	430a      	orrs	r2, r1
 8007670:	e78b      	b.n	800758a <__kernel_rem_pio2+0x26e>
 8007672:	3401      	adds	r4, #1
 8007674:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007678:	2a00      	cmp	r2, #0
 800767a:	d0fa      	beq.n	8007672 <__kernel_rem_pio2+0x356>
 800767c:	ab98      	add	r3, sp, #608	; 0x260
 800767e:	449b      	add	fp, r3
 8007680:	9b07      	ldr	r3, [sp, #28]
 8007682:	1c7e      	adds	r6, r7, #1
 8007684:	19dd      	adds	r5, r3, r7
 8007686:	ab98      	add	r3, sp, #608	; 0x260
 8007688:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800768c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8007690:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8007694:	443c      	add	r4, r7
 8007696:	42b4      	cmp	r4, r6
 8007698:	da04      	bge.n	80076a4 <__kernel_rem_pio2+0x388>
 800769a:	4627      	mov	r7, r4
 800769c:	e6b1      	b.n	8007402 <__kernel_rem_pio2+0xe6>
 800769e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a0:	2401      	movs	r4, #1
 80076a2:	e7e7      	b.n	8007674 <__kernel_rem_pio2+0x358>
 80076a4:	f105 0308 	add.w	r3, r5, #8
 80076a8:	9309      	str	r3, [sp, #36]	; 0x24
 80076aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ac:	2700      	movs	r7, #0
 80076ae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80076b2:	f7f8 fe9f 	bl	80003f4 <__aeabi_i2d>
 80076b6:	f04f 0800 	mov.w	r8, #0
 80076ba:	f04f 0900 	mov.w	r9, #0
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80076c4:	3b08      	subs	r3, #8
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	f105 0310 	add.w	r3, r5, #16
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	9b06      	ldr	r3, [sp, #24]
 80076d0:	429f      	cmp	r7, r3
 80076d2:	dd04      	ble.n	80076de <__kernel_rem_pio2+0x3c2>
 80076d4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80076d8:	3601      	adds	r6, #1
 80076da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076dc:	e7db      	b.n	8007696 <__kernel_rem_pio2+0x37a>
 80076de:	9905      	ldr	r1, [sp, #20]
 80076e0:	9d00      	ldr	r5, [sp, #0]
 80076e2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80076e6:	9105      	str	r1, [sp, #20]
 80076e8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80076ec:	9500      	str	r5, [sp, #0]
 80076ee:	f7f8 feeb 	bl	80004c8 <__aeabi_dmul>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4640      	mov	r0, r8
 80076f8:	4649      	mov	r1, r9
 80076fa:	f7f8 fd2f 	bl	800015c <__adddf3>
 80076fe:	3701      	adds	r7, #1
 8007700:	4680      	mov	r8, r0
 8007702:	4689      	mov	r9, r1
 8007704:	e7e3      	b.n	80076ce <__kernel_rem_pio2+0x3b2>
 8007706:	3c01      	subs	r4, #1
 8007708:	e745      	b.n	8007596 <__kernel_rem_pio2+0x27a>
 800770a:	f1ca 0200 	rsb	r2, sl, #0
 800770e:	4640      	mov	r0, r8
 8007710:	4649      	mov	r1, r9
 8007712:	f000 faa1 	bl	8007c58 <scalbn>
 8007716:	2200      	movs	r2, #0
 8007718:	4ba3      	ldr	r3, [pc, #652]	; (80079a8 <__kernel_rem_pio2+0x68c>)
 800771a:	4604      	mov	r4, r0
 800771c:	460d      	mov	r5, r1
 800771e:	f7f9 f959 	bl	80009d4 <__aeabi_dcmpge>
 8007722:	b1f8      	cbz	r0, 8007764 <__kernel_rem_pio2+0x448>
 8007724:	2200      	movs	r2, #0
 8007726:	4ba1      	ldr	r3, [pc, #644]	; (80079ac <__kernel_rem_pio2+0x690>)
 8007728:	4620      	mov	r0, r4
 800772a:	4629      	mov	r1, r5
 800772c:	f7f8 fecc 	bl	80004c8 <__aeabi_dmul>
 8007730:	f7f9 f97a 	bl	8000a28 <__aeabi_d2iz>
 8007734:	4606      	mov	r6, r0
 8007736:	f7f8 fe5d 	bl	80003f4 <__aeabi_i2d>
 800773a:	2200      	movs	r2, #0
 800773c:	4b9a      	ldr	r3, [pc, #616]	; (80079a8 <__kernel_rem_pio2+0x68c>)
 800773e:	f7f8 fec3 	bl	80004c8 <__aeabi_dmul>
 8007742:	460b      	mov	r3, r1
 8007744:	4602      	mov	r2, r0
 8007746:	4629      	mov	r1, r5
 8007748:	4620      	mov	r0, r4
 800774a:	f7f8 fd05 	bl	8000158 <__aeabi_dsub>
 800774e:	f7f9 f96b 	bl	8000a28 <__aeabi_d2iz>
 8007752:	1c7c      	adds	r4, r7, #1
 8007754:	ab0c      	add	r3, sp, #48	; 0x30
 8007756:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800775a:	f10a 0a18 	add.w	sl, sl, #24
 800775e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8007762:	e720      	b.n	80075a6 <__kernel_rem_pio2+0x28a>
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f9 f95e 	bl	8000a28 <__aeabi_d2iz>
 800776c:	ab0c      	add	r3, sp, #48	; 0x30
 800776e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007772:	463c      	mov	r4, r7
 8007774:	e717      	b.n	80075a6 <__kernel_rem_pio2+0x28a>
 8007776:	ab0c      	add	r3, sp, #48	; 0x30
 8007778:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800777c:	f7f8 fe3a 	bl	80003f4 <__aeabi_i2d>
 8007780:	4632      	mov	r2, r6
 8007782:	463b      	mov	r3, r7
 8007784:	f7f8 fea0 	bl	80004c8 <__aeabi_dmul>
 8007788:	4652      	mov	r2, sl
 800778a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800778e:	465b      	mov	r3, fp
 8007790:	4630      	mov	r0, r6
 8007792:	4639      	mov	r1, r7
 8007794:	f7f8 fe98 	bl	80004c8 <__aeabi_dmul>
 8007798:	3d01      	subs	r5, #1
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	e715      	b.n	80075cc <__kernel_rem_pio2+0x2b0>
 80077a0:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80077a4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80077a8:	f7f8 fe8e 	bl	80004c8 <__aeabi_dmul>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4650      	mov	r0, sl
 80077b2:	4659      	mov	r1, fp
 80077b4:	f7f8 fcd2 	bl	800015c <__adddf3>
 80077b8:	4682      	mov	sl, r0
 80077ba:	468b      	mov	fp, r1
 80077bc:	3701      	adds	r7, #1
 80077be:	9b02      	ldr	r3, [sp, #8]
 80077c0:	429f      	cmp	r7, r3
 80077c2:	dc01      	bgt.n	80077c8 <__kernel_rem_pio2+0x4ac>
 80077c4:	42bd      	cmp	r5, r7
 80077c6:	daeb      	bge.n	80077a0 <__kernel_rem_pio2+0x484>
 80077c8:	ab48      	add	r3, sp, #288	; 0x120
 80077ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80077ce:	e9c3 ab00 	strd	sl, fp, [r3]
 80077d2:	3501      	adds	r5, #1
 80077d4:	e702      	b.n	80075dc <__kernel_rem_pio2+0x2c0>
 80077d6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d86c      	bhi.n	80078b6 <__kernel_rem_pio2+0x59a>
 80077dc:	e8df f003 	tbb	[pc, r3]
 80077e0:	022f2f59 	.word	0x022f2f59
 80077e4:	9a06      	ldr	r2, [sp, #24]
 80077e6:	ab48      	add	r3, sp, #288	; 0x120
 80077e8:	189d      	adds	r5, r3, r2
 80077ea:	46aa      	mov	sl, r5
 80077ec:	46a3      	mov	fp, r4
 80077ee:	f1bb 0f00 	cmp.w	fp, #0
 80077f2:	f300 8087 	bgt.w	8007904 <__kernel_rem_pio2+0x5e8>
 80077f6:	46a2      	mov	sl, r4
 80077f8:	f1ba 0f01 	cmp.w	sl, #1
 80077fc:	f300 809f 	bgt.w	800793e <__kernel_rem_pio2+0x622>
 8007800:	2700      	movs	r7, #0
 8007802:	463e      	mov	r6, r7
 8007804:	9d06      	ldr	r5, [sp, #24]
 8007806:	ab48      	add	r3, sp, #288	; 0x120
 8007808:	3508      	adds	r5, #8
 800780a:	441d      	add	r5, r3
 800780c:	2c01      	cmp	r4, #1
 800780e:	f300 80b3 	bgt.w	8007978 <__kernel_rem_pio2+0x65c>
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8007816:	9849      	ldr	r0, [sp, #292]	; 0x124
 8007818:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800781a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 80b5 	bne.w	800798c <__kernel_rem_pio2+0x670>
 8007822:	4603      	mov	r3, r0
 8007824:	462a      	mov	r2, r5
 8007826:	9804      	ldr	r0, [sp, #16]
 8007828:	e9c0 2300 	strd	r2, r3, [r0]
 800782c:	4622      	mov	r2, r4
 800782e:	460b      	mov	r3, r1
 8007830:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007834:	463a      	mov	r2, r7
 8007836:	4633      	mov	r3, r6
 8007838:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800783c:	e03b      	b.n	80078b6 <__kernel_rem_pio2+0x59a>
 800783e:	f04f 0c00 	mov.w	ip, #0
 8007842:	4626      	mov	r6, r4
 8007844:	4667      	mov	r7, ip
 8007846:	9d06      	ldr	r5, [sp, #24]
 8007848:	ab48      	add	r3, sp, #288	; 0x120
 800784a:	3508      	adds	r5, #8
 800784c:	441d      	add	r5, r3
 800784e:	2e00      	cmp	r6, #0
 8007850:	da42      	bge.n	80078d8 <__kernel_rem_pio2+0x5bc>
 8007852:	9b00      	ldr	r3, [sp, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d049      	beq.n	80078ec <__kernel_rem_pio2+0x5d0>
 8007858:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800785c:	4662      	mov	r2, ip
 800785e:	460b      	mov	r3, r1
 8007860:	9904      	ldr	r1, [sp, #16]
 8007862:	2601      	movs	r6, #1
 8007864:	e9c1 2300 	strd	r2, r3, [r1]
 8007868:	a948      	add	r1, sp, #288	; 0x120
 800786a:	463b      	mov	r3, r7
 800786c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007870:	f7f8 fc72 	bl	8000158 <__aeabi_dsub>
 8007874:	4684      	mov	ip, r0
 8007876:	460f      	mov	r7, r1
 8007878:	ad48      	add	r5, sp, #288	; 0x120
 800787a:	42b4      	cmp	r4, r6
 800787c:	da38      	bge.n	80078f0 <__kernel_rem_pio2+0x5d4>
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	b10b      	cbz	r3, 8007886 <__kernel_rem_pio2+0x56a>
 8007882:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007886:	4662      	mov	r2, ip
 8007888:	463b      	mov	r3, r7
 800788a:	9904      	ldr	r1, [sp, #16]
 800788c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007890:	e011      	b.n	80078b6 <__kernel_rem_pio2+0x59a>
 8007892:	2700      	movs	r7, #0
 8007894:	463d      	mov	r5, r7
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	aa98      	add	r2, sp, #608	; 0x260
 800789a:	4413      	add	r3, r2
 800789c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80078a0:	2c00      	cmp	r4, #0
 80078a2:	da0f      	bge.n	80078c4 <__kernel_rem_pio2+0x5a8>
 80078a4:	9b00      	ldr	r3, [sp, #0]
 80078a6:	b10b      	cbz	r3, 80078ac <__kernel_rem_pio2+0x590>
 80078a8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80078ac:	463a      	mov	r2, r7
 80078ae:	462b      	mov	r3, r5
 80078b0:	9904      	ldr	r1, [sp, #16]
 80078b2:	e9c1 2300 	strd	r2, r3, [r1]
 80078b6:	9b05      	ldr	r3, [sp, #20]
 80078b8:	f003 0007 	and.w	r0, r3, #7
 80078bc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80078c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c4:	4638      	mov	r0, r7
 80078c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80078ca:	4629      	mov	r1, r5
 80078cc:	f7f8 fc46 	bl	800015c <__adddf3>
 80078d0:	3c01      	subs	r4, #1
 80078d2:	4607      	mov	r7, r0
 80078d4:	460d      	mov	r5, r1
 80078d6:	e7e3      	b.n	80078a0 <__kernel_rem_pio2+0x584>
 80078d8:	4660      	mov	r0, ip
 80078da:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f8 fc3c 	bl	800015c <__adddf3>
 80078e4:	3e01      	subs	r6, #1
 80078e6:	4684      	mov	ip, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	e7b0      	b.n	800784e <__kernel_rem_pio2+0x532>
 80078ec:	4639      	mov	r1, r7
 80078ee:	e7b5      	b.n	800785c <__kernel_rem_pio2+0x540>
 80078f0:	4660      	mov	r0, ip
 80078f2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f8 fc30 	bl	800015c <__adddf3>
 80078fc:	3601      	adds	r6, #1
 80078fe:	4684      	mov	ip, r0
 8007900:	460f      	mov	r7, r1
 8007902:	e7ba      	b.n	800787a <__kernel_rem_pio2+0x55e>
 8007904:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8007908:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007914:	f7f8 fc22 	bl	800015c <__adddf3>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f8 fc18 	bl	8000158 <__aeabi_dsub>
 8007928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800792c:	f7f8 fc16 	bl	800015c <__adddf3>
 8007930:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007934:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007938:	e9ca 6700 	strd	r6, r7, [sl]
 800793c:	e757      	b.n	80077ee <__kernel_rem_pio2+0x4d2>
 800793e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8007942:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800794e:	f7f8 fc05 	bl	800015c <__adddf3>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4680      	mov	r8, r0
 8007958:	4689      	mov	r9, r1
 800795a:	4630      	mov	r0, r6
 800795c:	4639      	mov	r1, r7
 800795e:	f7f8 fbfb 	bl	8000158 <__aeabi_dsub>
 8007962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007966:	f7f8 fbf9 	bl	800015c <__adddf3>
 800796a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800796e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007972:	e9c5 8900 	strd	r8, r9, [r5]
 8007976:	e73f      	b.n	80077f8 <__kernel_rem_pio2+0x4dc>
 8007978:	4638      	mov	r0, r7
 800797a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800797e:	4631      	mov	r1, r6
 8007980:	f7f8 fbec 	bl	800015c <__adddf3>
 8007984:	3c01      	subs	r4, #1
 8007986:	4607      	mov	r7, r0
 8007988:	460e      	mov	r6, r1
 800798a:	e73f      	b.n	800780c <__kernel_rem_pio2+0x4f0>
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007992:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007996:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800799a:	601d      	str	r5, [r3, #0]
 800799c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80079a0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80079a4:	615e      	str	r6, [r3, #20]
 80079a6:	e786      	b.n	80078b6 <__kernel_rem_pio2+0x59a>
 80079a8:	41700000 	.word	0x41700000
 80079ac:	3e700000 	.word	0x3e700000

080079b0 <__kernel_sin>:
 80079b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	b086      	sub	sp, #24
 80079b6:	e9cd 2300 	strd	r2, r3, [sp]
 80079ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80079c2:	4682      	mov	sl, r0
 80079c4:	460c      	mov	r4, r1
 80079c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80079c8:	da03      	bge.n	80079d2 <__kernel_sin+0x22>
 80079ca:	f7f9 f82d 	bl	8000a28 <__aeabi_d2iz>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d050      	beq.n	8007a74 <__kernel_sin+0xc4>
 80079d2:	4652      	mov	r2, sl
 80079d4:	4623      	mov	r3, r4
 80079d6:	4650      	mov	r0, sl
 80079d8:	4621      	mov	r1, r4
 80079da:	f7f8 fd75 	bl	80004c8 <__aeabi_dmul>
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4650      	mov	r0, sl
 80079e8:	4621      	mov	r1, r4
 80079ea:	f7f8 fd6d 	bl	80004c8 <__aeabi_dmul>
 80079ee:	a33e      	add	r3, pc, #248	; (adr r3, 8007ae8 <__kernel_sin+0x138>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	4680      	mov	r8, r0
 80079f6:	4689      	mov	r9, r1
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f8 fd64 	bl	80004c8 <__aeabi_dmul>
 8007a00:	a33b      	add	r3, pc, #236	; (adr r3, 8007af0 <__kernel_sin+0x140>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f8 fba7 	bl	8000158 <__aeabi_dsub>
 8007a0a:	4632      	mov	r2, r6
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	f7f8 fd5b 	bl	80004c8 <__aeabi_dmul>
 8007a12:	a339      	add	r3, pc, #228	; (adr r3, 8007af8 <__kernel_sin+0x148>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f7f8 fba0 	bl	800015c <__adddf3>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	f7f8 fd52 	bl	80004c8 <__aeabi_dmul>
 8007a24:	a336      	add	r3, pc, #216	; (adr r3, 8007b00 <__kernel_sin+0x150>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 fb95 	bl	8000158 <__aeabi_dsub>
 8007a2e:	4632      	mov	r2, r6
 8007a30:	463b      	mov	r3, r7
 8007a32:	f7f8 fd49 	bl	80004c8 <__aeabi_dmul>
 8007a36:	a334      	add	r3, pc, #208	; (adr r3, 8007b08 <__kernel_sin+0x158>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f8 fb8e 	bl	800015c <__adddf3>
 8007a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a44:	b9dd      	cbnz	r5, 8007a7e <__kernel_sin+0xce>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fd3b 	bl	80004c8 <__aeabi_dmul>
 8007a52:	a32f      	add	r3, pc, #188	; (adr r3, 8007b10 <__kernel_sin+0x160>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fb7e 	bl	8000158 <__aeabi_dsub>
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	f7f8 fd32 	bl	80004c8 <__aeabi_dmul>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4650      	mov	r0, sl
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7f8 fb76 	bl	800015c <__adddf3>
 8007a70:	4682      	mov	sl, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	4650      	mov	r0, sl
 8007a76:	4621      	mov	r1, r4
 8007a78:	b006      	add	sp, #24
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	2200      	movs	r2, #0
 8007a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a84:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <__kernel_sin+0x168>)
 8007a86:	f7f8 fd1f 	bl	80004c8 <__aeabi_dmul>
 8007a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f8 fd17 	bl	80004c8 <__aeabi_dmul>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa2:	f7f8 fb59 	bl	8000158 <__aeabi_dsub>
 8007aa6:	4632      	mov	r2, r6
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	f7f8 fd0d 	bl	80004c8 <__aeabi_dmul>
 8007aae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ab2:	f7f8 fb51 	bl	8000158 <__aeabi_dsub>
 8007ab6:	a316      	add	r3, pc, #88	; (adr r3, 8007b10 <__kernel_sin+0x160>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	4606      	mov	r6, r0
 8007abe:	460f      	mov	r7, r1
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	f7f8 fd00 	bl	80004c8 <__aeabi_dmul>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f8 fb44 	bl	800015c <__adddf3>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4650      	mov	r0, sl
 8007ada:	4621      	mov	r1, r4
 8007adc:	f7f8 fb3c 	bl	8000158 <__aeabi_dsub>
 8007ae0:	e7c6      	b.n	8007a70 <__kernel_sin+0xc0>
 8007ae2:	bf00      	nop
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	5acfd57c 	.word	0x5acfd57c
 8007aec:	3de5d93a 	.word	0x3de5d93a
 8007af0:	8a2b9ceb 	.word	0x8a2b9ceb
 8007af4:	3e5ae5e6 	.word	0x3e5ae5e6
 8007af8:	57b1fe7d 	.word	0x57b1fe7d
 8007afc:	3ec71de3 	.word	0x3ec71de3
 8007b00:	19c161d5 	.word	0x19c161d5
 8007b04:	3f2a01a0 	.word	0x3f2a01a0
 8007b08:	1110f8a6 	.word	0x1110f8a6
 8007b0c:	3f811111 	.word	0x3f811111
 8007b10:	55555549 	.word	0x55555549
 8007b14:	3fc55555 	.word	0x3fc55555
 8007b18:	3fe00000 	.word	0x3fe00000

08007b1c <fabs>:
 8007b1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b20:	4619      	mov	r1, r3
 8007b22:	4770      	bx	lr

08007b24 <finite>:
 8007b24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007b28:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007b2c:	0fc0      	lsrs	r0, r0, #31
 8007b2e:	4770      	bx	lr

08007b30 <matherr>:
 8007b30:	2000      	movs	r0, #0
 8007b32:	4770      	bx	lr

08007b34 <nan>:
 8007b34:	2000      	movs	r0, #0
 8007b36:	4901      	ldr	r1, [pc, #4]	; (8007b3c <nan+0x8>)
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	7ff80000 	.word	0x7ff80000

08007b40 <rint>:
 8007b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b46:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8007b4a:	f1bc 0f13 	cmp.w	ip, #19
 8007b4e:	4604      	mov	r4, r0
 8007b50:	460d      	mov	r5, r1
 8007b52:	460b      	mov	r3, r1
 8007b54:	4606      	mov	r6, r0
 8007b56:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8007b5a:	dc5a      	bgt.n	8007c12 <rint+0xd2>
 8007b5c:	f1bc 0f00 	cmp.w	ip, #0
 8007b60:	da2b      	bge.n	8007bba <rint+0x7a>
 8007b62:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007b66:	4302      	orrs	r2, r0
 8007b68:	d023      	beq.n	8007bb2 <rint+0x72>
 8007b6a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007b6e:	4302      	orrs	r2, r0
 8007b70:	4256      	negs	r6, r2
 8007b72:	4316      	orrs	r6, r2
 8007b74:	0c4b      	lsrs	r3, r1, #17
 8007b76:	0b36      	lsrs	r6, r6, #12
 8007b78:	4934      	ldr	r1, [pc, #208]	; (8007c4c <rint+0x10c>)
 8007b7a:	045b      	lsls	r3, r3, #17
 8007b7c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007b80:	ea46 0503 	orr.w	r5, r6, r3
 8007b84:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8007b88:	4602      	mov	r2, r0
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007b90:	4620      	mov	r0, r4
 8007b92:	4629      	mov	r1, r5
 8007b94:	f7f8 fae2 	bl	800015c <__adddf3>
 8007b98:	e9cd 0100 	strd	r0, r1, [sp]
 8007b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	f7f8 fad8 	bl	8000158 <__aeabi_dsub>
 8007ba8:	4604      	mov	r4, r0
 8007baa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bae:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	b003      	add	sp, #12
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bba:	4a25      	ldr	r2, [pc, #148]	; (8007c50 <rint+0x110>)
 8007bbc:	fa42 f20c 	asr.w	r2, r2, ip
 8007bc0:	4011      	ands	r1, r2
 8007bc2:	4301      	orrs	r1, r0
 8007bc4:	d0f5      	beq.n	8007bb2 <rint+0x72>
 8007bc6:	0852      	lsrs	r2, r2, #1
 8007bc8:	ea05 0102 	and.w	r1, r5, r2
 8007bcc:	ea50 0601 	orrs.w	r6, r0, r1
 8007bd0:	d00c      	beq.n	8007bec <rint+0xac>
 8007bd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007bd6:	f1bc 0f13 	cmp.w	ip, #19
 8007bda:	bf0c      	ite	eq
 8007bdc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007be0:	2600      	movne	r6, #0
 8007be2:	ea25 0202 	bic.w	r2, r5, r2
 8007be6:	fa43 f30c 	asr.w	r3, r3, ip
 8007bea:	4313      	orrs	r3, r2
 8007bec:	4917      	ldr	r1, [pc, #92]	; (8007c4c <rint+0x10c>)
 8007bee:	4632      	mov	r2, r6
 8007bf0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8007bf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f7f8 faae 	bl	800015c <__adddf3>
 8007c00:	e9cd 0100 	strd	r0, r1, [sp]
 8007c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c08:	4622      	mov	r2, r4
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	f7f8 faa4 	bl	8000158 <__aeabi_dsub>
 8007c10:	e008      	b.n	8007c24 <rint+0xe4>
 8007c12:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8007c16:	dd08      	ble.n	8007c2a <rint+0xea>
 8007c18:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8007c1c:	d1c9      	bne.n	8007bb2 <rint+0x72>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	f7f8 fa9c 	bl	800015c <__adddf3>
 8007c24:	4604      	mov	r4, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	e7c3      	b.n	8007bb2 <rint+0x72>
 8007c2a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c32:	40ca      	lsrs	r2, r1
 8007c34:	4210      	tst	r0, r2
 8007c36:	d0bc      	beq.n	8007bb2 <rint+0x72>
 8007c38:	0852      	lsrs	r2, r2, #1
 8007c3a:	4210      	tst	r0, r2
 8007c3c:	bf1f      	itttt	ne
 8007c3e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8007c42:	ea20 0202 	bicne.w	r2, r0, r2
 8007c46:	410e      	asrne	r6, r1
 8007c48:	4316      	orrne	r6, r2
 8007c4a:	e7cf      	b.n	8007bec <rint+0xac>
 8007c4c:	08009868 	.word	0x08009868
 8007c50:	000fffff 	.word	0x000fffff
 8007c54:	00000000 	.word	0x00000000

08007c58 <scalbn>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	4616      	mov	r6, r2
 8007c5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c60:	4604      	mov	r4, r0
 8007c62:	460d      	mov	r5, r1
 8007c64:	460b      	mov	r3, r1
 8007c66:	b982      	cbnz	r2, 8007c8a <scalbn+0x32>
 8007c68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c6c:	4303      	orrs	r3, r0
 8007c6e:	d034      	beq.n	8007cda <scalbn+0x82>
 8007c70:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <scalbn+0xd0>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	f7f8 fc28 	bl	80004c8 <__aeabi_dmul>
 8007c78:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <scalbn+0xd4>)
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	429e      	cmp	r6, r3
 8007c7e:	460d      	mov	r5, r1
 8007c80:	da0d      	bge.n	8007c9e <scalbn+0x46>
 8007c82:	a325      	add	r3, pc, #148	; (adr r3, 8007d18 <scalbn+0xc0>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	e01c      	b.n	8007cc4 <scalbn+0x6c>
 8007c8a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007c8e:	42ba      	cmp	r2, r7
 8007c90:	d109      	bne.n	8007ca6 <scalbn+0x4e>
 8007c92:	4602      	mov	r2, r0
 8007c94:	f7f8 fa62 	bl	800015c <__adddf3>
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	e01d      	b.n	8007cda <scalbn+0x82>
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ca4:	3a36      	subs	r2, #54	; 0x36
 8007ca6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007caa:	4432      	add	r2, r6
 8007cac:	428a      	cmp	r2, r1
 8007cae:	dd0c      	ble.n	8007cca <scalbn+0x72>
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	a11a      	add	r1, pc, #104	; (adr r1, 8007d20 <scalbn+0xc8>)
 8007cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cba:	f000 f9ef 	bl	800809c <copysign>
 8007cbe:	a318      	add	r3, pc, #96	; (adr r3, 8007d20 <scalbn+0xc8>)
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f7f8 fc00 	bl	80004c8 <__aeabi_dmul>
 8007cc8:	e7e6      	b.n	8007c98 <scalbn+0x40>
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	dd08      	ble.n	8007ce0 <scalbn+0x88>
 8007cce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cd6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cda:	4620      	mov	r0, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007ce4:	da0b      	bge.n	8007cfe <scalbn+0xa6>
 8007ce6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cea:	429e      	cmp	r6, r3
 8007cec:	4622      	mov	r2, r4
 8007cee:	462b      	mov	r3, r5
 8007cf0:	dce0      	bgt.n	8007cb4 <scalbn+0x5c>
 8007cf2:	a109      	add	r1, pc, #36	; (adr r1, 8007d18 <scalbn+0xc0>)
 8007cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf8:	f000 f9d0 	bl	800809c <copysign>
 8007cfc:	e7c1      	b.n	8007c82 <scalbn+0x2a>
 8007cfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d02:	3236      	adds	r2, #54	; 0x36
 8007d04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	2200      	movs	r2, #0
 8007d12:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <scalbn+0xd8>)
 8007d14:	e7d6      	b.n	8007cc4 <scalbn+0x6c>
 8007d16:	bf00      	nop
 8007d18:	c2f8f359 	.word	0xc2f8f359
 8007d1c:	01a56e1f 	.word	0x01a56e1f
 8007d20:	8800759c 	.word	0x8800759c
 8007d24:	7e37e43c 	.word	0x7e37e43c
 8007d28:	43500000 	.word	0x43500000
 8007d2c:	ffff3cb0 	.word	0xffff3cb0
 8007d30:	3c900000 	.word	0x3c900000
 8007d34:	00000000 	.word	0x00000000

08007d38 <__ieee754_log>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007d40:	b087      	sub	sp, #28
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	460d      	mov	r5, r1
 8007d48:	da24      	bge.n	8007d94 <__ieee754_log+0x5c>
 8007d4a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007d4e:	4304      	orrs	r4, r0
 8007d50:	d108      	bne.n	8007d64 <__ieee754_log+0x2c>
 8007d52:	2200      	movs	r2, #0
 8007d54:	2300      	movs	r3, #0
 8007d56:	2000      	movs	r0, #0
 8007d58:	49cb      	ldr	r1, [pc, #812]	; (8008088 <__ieee754_log+0x350>)
 8007d5a:	f7f8 fcdf 	bl	800071c <__aeabi_ddiv>
 8007d5e:	b007      	add	sp, #28
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	2900      	cmp	r1, #0
 8007d66:	da04      	bge.n	8007d72 <__ieee754_log+0x3a>
 8007d68:	f7f8 f9f6 	bl	8000158 <__aeabi_dsub>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e7f3      	b.n	8007d5a <__ieee754_log+0x22>
 8007d72:	2200      	movs	r2, #0
 8007d74:	4bc5      	ldr	r3, [pc, #788]	; (800808c <__ieee754_log+0x354>)
 8007d76:	f7f8 fba7 	bl	80004c8 <__aeabi_dmul>
 8007d7a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	460d      	mov	r5, r1
 8007d84:	49c2      	ldr	r1, [pc, #776]	; (8008090 <__ieee754_log+0x358>)
 8007d86:	428d      	cmp	r5, r1
 8007d88:	dd06      	ble.n	8007d98 <__ieee754_log+0x60>
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f7f8 f9e5 	bl	800015c <__adddf3>
 8007d92:	e7e4      	b.n	8007d5e <__ieee754_log+0x26>
 8007d94:	2600      	movs	r6, #0
 8007d96:	e7f5      	b.n	8007d84 <__ieee754_log+0x4c>
 8007d98:	152c      	asrs	r4, r5, #20
 8007d9a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007d9e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8007da2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007da6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8007daa:	4426      	add	r6, r4
 8007dac:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8007db0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8007db4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8007db8:	ea41 0305 	orr.w	r3, r1, r5
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4bb4      	ldr	r3, [pc, #720]	; (8008094 <__ieee754_log+0x35c>)
 8007dc4:	f7f8 f9c8 	bl	8000158 <__aeabi_dsub>
 8007dc8:	1cab      	adds	r3, r5, #2
 8007dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8007dd4:	4682      	mov	sl, r0
 8007dd6:	468b      	mov	fp, r1
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	dc53      	bgt.n	8007e86 <__ieee754_log+0x14e>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f7f8 fdda 	bl	8000998 <__aeabi_dcmpeq>
 8007de4:	b1d0      	cbz	r0, 8007e1c <__ieee754_log+0xe4>
 8007de6:	2c00      	cmp	r4, #0
 8007de8:	f000 8120 	beq.w	800802c <__ieee754_log+0x2f4>
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7f8 fb01 	bl	80003f4 <__aeabi_i2d>
 8007df2:	a391      	add	r3, pc, #580	; (adr r3, 8008038 <__ieee754_log+0x300>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	4606      	mov	r6, r0
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	f7f8 fb64 	bl	80004c8 <__aeabi_dmul>
 8007e00:	a38f      	add	r3, pc, #572	; (adr r3, 8008040 <__ieee754_log+0x308>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	4604      	mov	r4, r0
 8007e08:	460d      	mov	r5, r1
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	f7f8 fb5b 	bl	80004c8 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	e7b8      	b.n	8007d8e <__ieee754_log+0x56>
 8007e1c:	a38a      	add	r3, pc, #552	; (adr r3, 8008048 <__ieee754_log+0x310>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	4650      	mov	r0, sl
 8007e24:	4659      	mov	r1, fp
 8007e26:	f7f8 fb4f 	bl	80004c8 <__aeabi_dmul>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	2000      	movs	r0, #0
 8007e30:	4999      	ldr	r1, [pc, #612]	; (8008098 <__ieee754_log+0x360>)
 8007e32:	f7f8 f991 	bl	8000158 <__aeabi_dsub>
 8007e36:	4652      	mov	r2, sl
 8007e38:	4606      	mov	r6, r0
 8007e3a:	460f      	mov	r7, r1
 8007e3c:	465b      	mov	r3, fp
 8007e3e:	4650      	mov	r0, sl
 8007e40:	4659      	mov	r1, fp
 8007e42:	f7f8 fb41 	bl	80004c8 <__aeabi_dmul>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	f7f8 fb3b 	bl	80004c8 <__aeabi_dmul>
 8007e52:	4606      	mov	r6, r0
 8007e54:	460f      	mov	r7, r1
 8007e56:	b914      	cbnz	r4, 8007e5e <__ieee754_log+0x126>
 8007e58:	4632      	mov	r2, r6
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	e0a0      	b.n	8007fa0 <__ieee754_log+0x268>
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7f8 fac8 	bl	80003f4 <__aeabi_i2d>
 8007e64:	a374      	add	r3, pc, #464	; (adr r3, 8008038 <__ieee754_log+0x300>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	f7f8 fb2b 	bl	80004c8 <__aeabi_dmul>
 8007e72:	a373      	add	r3, pc, #460	; (adr r3, 8008040 <__ieee754_log+0x308>)
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	4604      	mov	r4, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4649      	mov	r1, r9
 8007e80:	f7f8 fb22 	bl	80004c8 <__aeabi_dmul>
 8007e84:	e0a5      	b.n	8007fd2 <__ieee754_log+0x29a>
 8007e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e8a:	f7f8 f967 	bl	800015c <__adddf3>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4650      	mov	r0, sl
 8007e94:	4659      	mov	r1, fp
 8007e96:	f7f8 fc41 	bl	800071c <__aeabi_ddiv>
 8007e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f7f8 faa8 	bl	80003f4 <__aeabi_i2d>
 8007ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eac:	4610      	mov	r0, r2
 8007eae:	4619      	mov	r1, r3
 8007eb0:	f7f8 fb0a 	bl	80004c8 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ebc:	f7f8 fb04 	bl	80004c8 <__aeabi_dmul>
 8007ec0:	a363      	add	r3, pc, #396	; (adr r3, 8008050 <__ieee754_log+0x318>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	4689      	mov	r9, r1
 8007eca:	f7f8 fafd 	bl	80004c8 <__aeabi_dmul>
 8007ece:	a362      	add	r3, pc, #392	; (adr r3, 8008058 <__ieee754_log+0x320>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 f942 	bl	800015c <__adddf3>
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	f7f8 faf4 	bl	80004c8 <__aeabi_dmul>
 8007ee0:	a35f      	add	r3, pc, #380	; (adr r3, 8008060 <__ieee754_log+0x328>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 f939 	bl	800015c <__adddf3>
 8007eea:	4642      	mov	r2, r8
 8007eec:	464b      	mov	r3, r9
 8007eee:	f7f8 faeb 	bl	80004c8 <__aeabi_dmul>
 8007ef2:	a35d      	add	r3, pc, #372	; (adr r3, 8008068 <__ieee754_log+0x330>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f930 	bl	800015c <__adddf3>
 8007efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f00:	f7f8 fae2 	bl	80004c8 <__aeabi_dmul>
 8007f04:	a35a      	add	r3, pc, #360	; (adr r3, 8008070 <__ieee754_log+0x338>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 fad9 	bl	80004c8 <__aeabi_dmul>
 8007f16:	a358      	add	r3, pc, #352	; (adr r3, 8008078 <__ieee754_log+0x340>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f91e 	bl	800015c <__adddf3>
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	f7f8 fad0 	bl	80004c8 <__aeabi_dmul>
 8007f28:	a355      	add	r3, pc, #340	; (adr r3, 8008080 <__ieee754_log+0x348>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f7f8 f915 	bl	800015c <__adddf3>
 8007f32:	4642      	mov	r2, r8
 8007f34:	464b      	mov	r3, r9
 8007f36:	f7f8 fac7 	bl	80004c8 <__aeabi_dmul>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f42:	f7f8 f90b 	bl	800015c <__adddf3>
 8007f46:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8007f4a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007f4e:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8007f52:	3551      	adds	r5, #81	; 0x51
 8007f54:	4335      	orrs	r5, r6
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4689      	mov	r9, r1
 8007f5c:	dd48      	ble.n	8007ff0 <__ieee754_log+0x2b8>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4b4d      	ldr	r3, [pc, #308]	; (8008098 <__ieee754_log+0x360>)
 8007f62:	4650      	mov	r0, sl
 8007f64:	4659      	mov	r1, fp
 8007f66:	f7f8 faaf 	bl	80004c8 <__aeabi_dmul>
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	465b      	mov	r3, fp
 8007f6e:	f7f8 faab 	bl	80004c8 <__aeabi_dmul>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4606      	mov	r6, r0
 8007f78:	460f      	mov	r7, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f8ed 	bl	800015c <__adddf3>
 8007f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f86:	f7f8 fa9f 	bl	80004c8 <__aeabi_dmul>
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	4689      	mov	r9, r1
 8007f8e:	b964      	cbnz	r4, 8007faa <__ieee754_log+0x272>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 f8de 	bl	8000158 <__aeabi_dsub>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	f7f8 f8d8 	bl	8000158 <__aeabi_dsub>
 8007fa8:	e6d9      	b.n	8007d5e <__ieee754_log+0x26>
 8007faa:	a323      	add	r3, pc, #140	; (adr r3, 8008038 <__ieee754_log+0x300>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb4:	f7f8 fa88 	bl	80004c8 <__aeabi_dmul>
 8007fb8:	a321      	add	r3, pc, #132	; (adr r3, 8008040 <__ieee754_log+0x308>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc6:	f7f8 fa7f 	bl	80004c8 <__aeabi_dmul>
 8007fca:	4642      	mov	r2, r8
 8007fcc:	464b      	mov	r3, r9
 8007fce:	f7f8 f8c5 	bl	800015c <__adddf3>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	4639      	mov	r1, r7
 8007fda:	f7f8 f8bd 	bl	8000158 <__aeabi_dsub>
 8007fde:	4652      	mov	r2, sl
 8007fe0:	465b      	mov	r3, fp
 8007fe2:	f7f8 f8b9 	bl	8000158 <__aeabi_dsub>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4620      	mov	r0, r4
 8007fec:	4629      	mov	r1, r5
 8007fee:	e7d9      	b.n	8007fa4 <__ieee754_log+0x26c>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4650      	mov	r0, sl
 8007ff6:	4659      	mov	r1, fp
 8007ff8:	f7f8 f8ae 	bl	8000158 <__aeabi_dsub>
 8007ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008000:	f7f8 fa62 	bl	80004c8 <__aeabi_dmul>
 8008004:	4606      	mov	r6, r0
 8008006:	460f      	mov	r7, r1
 8008008:	2c00      	cmp	r4, #0
 800800a:	f43f af25 	beq.w	8007e58 <__ieee754_log+0x120>
 800800e:	a30a      	add	r3, pc, #40	; (adr r3, 8008038 <__ieee754_log+0x300>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008018:	f7f8 fa56 	bl	80004c8 <__aeabi_dmul>
 800801c:	a308      	add	r3, pc, #32	; (adr r3, 8008040 <__ieee754_log+0x308>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	4604      	mov	r4, r0
 8008024:	460d      	mov	r5, r1
 8008026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800802a:	e729      	b.n	8007e80 <__ieee754_log+0x148>
 800802c:	2000      	movs	r0, #0
 800802e:	2100      	movs	r1, #0
 8008030:	e695      	b.n	8007d5e <__ieee754_log+0x26>
 8008032:	bf00      	nop
 8008034:	f3af 8000 	nop.w
 8008038:	fee00000 	.word	0xfee00000
 800803c:	3fe62e42 	.word	0x3fe62e42
 8008040:	35793c76 	.word	0x35793c76
 8008044:	3dea39ef 	.word	0x3dea39ef
 8008048:	55555555 	.word	0x55555555
 800804c:	3fd55555 	.word	0x3fd55555
 8008050:	df3e5244 	.word	0xdf3e5244
 8008054:	3fc2f112 	.word	0x3fc2f112
 8008058:	96cb03de 	.word	0x96cb03de
 800805c:	3fc74664 	.word	0x3fc74664
 8008060:	94229359 	.word	0x94229359
 8008064:	3fd24924 	.word	0x3fd24924
 8008068:	55555593 	.word	0x55555593
 800806c:	3fe55555 	.word	0x3fe55555
 8008070:	d078c69f 	.word	0xd078c69f
 8008074:	3fc39a09 	.word	0x3fc39a09
 8008078:	1d8e78af 	.word	0x1d8e78af
 800807c:	3fcc71c5 	.word	0x3fcc71c5
 8008080:	9997fa04 	.word	0x9997fa04
 8008084:	3fd99999 	.word	0x3fd99999
 8008088:	c3500000 	.word	0xc3500000
 800808c:	43500000 	.word	0x43500000
 8008090:	7fefffff 	.word	0x7fefffff
 8008094:	3ff00000 	.word	0x3ff00000
 8008098:	3fe00000 	.word	0x3fe00000

0800809c <copysign>:
 800809c:	b530      	push	{r4, r5, lr}
 800809e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80080a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080a6:	ea42 0503 	orr.w	r5, r2, r3
 80080aa:	4629      	mov	r1, r5
 80080ac:	bd30      	pop	{r4, r5, pc}
	...

080080b0 <_init>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr

080080bc <_fini>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr
