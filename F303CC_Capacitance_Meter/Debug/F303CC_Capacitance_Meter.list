
F303CC_Capacitance_Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002de4  08002de4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de4  08002de4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000018  08002e04  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e04  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd28  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b3f  00000000  00000000  0002cd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195ac  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009df7  00000000  00000000  00049684  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094da1  00000000  00000000  0005347b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e821c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003454  00000000  00000000  000e8298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d9c 	.word	0x08002d9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002d9c 	.word	0x08002d9c

080001c8 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/* MAIN CODE */
	
	
	while(1){
 80001cc:	e7fe      	b.n	80001cc <main_s+0x4>

080001ce <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief  Period elapsed callback.
  * @retval none
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001ce:	b480      	push	{r7}
 80001d0:	b083      	sub	sp, #12
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]
	/* TIM CALLBACK CODE */
	
}
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
	...

080001e4 <HAL_GPIO_EXTI_Callback>:

/**
  * @brief  EXTI line detection callbacks.
  * @retval none
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
	/* GPIO CALLBACK CODE */
	if (GPIO_Pin == PIN_Button){
 80001ee:	4b08      	ldr	r3, [pc, #32]	; (8000210 <HAL_GPIO_EXTI_Callback+0x2c>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	88fa      	ldrh	r2, [r7, #6]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d107      	bne.n	8000208 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_GPIO_TogglePin(PORT_LED, PIN_LED);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <HAL_GPIO_EXTI_Callback+0x30>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <HAL_GPIO_EXTI_Callback+0x34>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	4619      	mov	r1, r3
 8000202:	4610      	mov	r0, r2
 8000204:	f000 fdb4 	bl	8000d70 <HAL_GPIO_TogglePin>
	}
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	20000004 	.word	0x20000004
 8000218:	20000008 	.word	0x20000008

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa9c 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f809 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8ee 	bl	8000408 <MX_GPIO_Init>
  MX_I2C2_Init();
 800022c:	f000 f862 	bl	80002f4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000230:	f000 f89e 	bl	8000370 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 8000234:	f7ff ffc8 	bl	80001c8 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b09e      	sub	sp, #120	; 0x78
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f002 fd9f 	bl	8002d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025e:	463b      	mov	r3, r7
 8000260:	223c      	movs	r2, #60	; 0x3c
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f002 fd91 	bl	8002d8c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800026a:	2303      	movs	r3, #3
 800026c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2310      	movs	r3, #16
 800027e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fec3 	bl	8001020 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002a0:	f000 f93c 	bl	800051c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002be:	2102      	movs	r1, #2
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fdb5 	bl	8001e30 <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002cc:	f000 f926 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80002d0:	2340      	movs	r3, #64	; 0x40
 80002d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 ff8e 	bl	80021fc <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002e6:	f000 f919 	bl	800051c <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3778      	adds	r7, #120	; 0x78
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_I2C2_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	; (800036c <MX_I2C2_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_I2C2_Init+0x74>)
 8000300:	f240 220b 	movw	r2, #523	; 0x20b
 8000304:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_I2C2_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <MX_I2C2_Init+0x74>)
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_I2C2_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_I2C2_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_I2C2_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_I2C2_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_I2C2_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <MX_I2C2_Init+0x74>)
 8000332:	f000 fd4f 	bl	8000dd4 <HAL_I2C_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800033c:	f000 f8ee 	bl	800051c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000340:	2100      	movs	r1, #0
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <MX_I2C2_Init+0x74>)
 8000344:	f000 fdd5 	bl	8000ef2 <HAL_I2CEx_ConfigAnalogFilter>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800034e:	f000 f8e5 	bl	800051c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000352:	2100      	movs	r1, #0
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <MX_I2C2_Init+0x74>)
 8000356:	f000 fe17 	bl	8000f88 <HAL_I2CEx_ConfigDigitalFilter>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000360:	f000 f8dc 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000034 	.word	0x20000034
 800036c:	40005800 	.word	0x40005800

08000370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <MX_TIM2_Init+0x94>)
 8000390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_TIM2_Init+0x94>)
 8000398:	2201      	movs	r2, #1
 800039a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_TIM2_Init+0x94>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 35;
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_TIM2_Init+0x94>)
 80003a4:	2223      	movs	r2, #35	; 0x23
 80003a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <MX_TIM2_Init+0x94>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_TIM2_Init+0x94>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b4:	4813      	ldr	r0, [pc, #76]	; (8000404 <MX_TIM2_Init+0x94>)
 80003b6:	f002 f8d1 	bl	800255c <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003c0:	f000 f8ac 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_TIM2_Init+0x94>)
 80003d2:	f002 fa0d 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003dc:	f000 f89e 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_TIM2_Init+0x94>)
 80003ee:	f002 fc0b 	bl	8002c08 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003f8:	f000 f890 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000080 	.word	0x20000080

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 030c 	add.w	r3, r7, #12
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b3c      	ldr	r3, [pc, #240]	; (8000510 <MX_GPIO_Init+0x108>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a3b      	ldr	r2, [pc, #236]	; (8000510 <MX_GPIO_Init+0x108>)
 8000424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b39      	ldr	r3, [pc, #228]	; (8000510 <MX_GPIO_Init+0x108>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <MX_GPIO_Init+0x108>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a35      	ldr	r2, [pc, #212]	; (8000510 <MX_GPIO_Init+0x108>)
 800043c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b33      	ldr	r3, [pc, #204]	; (8000510 <MX_GPIO_Init+0x108>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b30      	ldr	r3, [pc, #192]	; (8000510 <MX_GPIO_Init+0x108>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a2f      	ldr	r2, [pc, #188]	; (8000510 <MX_GPIO_Init+0x108>)
 8000454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <MX_GPIO_Init+0x108>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5 
 8000466:	2200      	movs	r2, #0
 8000468:	f248 71f0 	movw	r1, #34800	; 0x87f0
 800046c:	4829      	ldr	r0, [pc, #164]	; (8000514 <MX_GPIO_Init+0x10c>)
 800046e:	f000 fc67 	bl	8000d40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	f107 030c 	add.w	r3, r7, #12
 8000488:	4619      	mov	r1, r3
 800048a:	4822      	ldr	r0, [pc, #136]	; (8000514 <MX_GPIO_Init+0x10c>)
 800048c:	f000 fade 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8000490:	f248 33f0 	movw	r3, #33776	; 0x83f0
 8000494:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	4619      	mov	r1, r3
 80004a8:	481a      	ldr	r0, [pc, #104]	; (8000514 <MX_GPIO_Init+0x10c>)
 80004aa:	f000 facf 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <MX_GPIO_Init+0x110>)
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4619      	mov	r1, r3
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c6:	f000 fac1 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80004ca:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80004ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_GPIO_Init+0x110>)
 80004d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 030c 	add.w	r3, r7, #12
 80004dc:	4619      	mov	r1, r3
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 fab3 	bl	8000a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2017      	movs	r0, #23
 80004ec:	f000 fa77 	bl	80009de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004f0:	2017      	movs	r0, #23
 80004f2:	f000 fa90 	bl	8000a16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	2028      	movs	r0, #40	; 0x28
 80004fc:	f000 fa6f 	bl	80009de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000500:	2028      	movs	r0, #40	; 0x28
 8000502:	f000 fa88 	bl	8000a16 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	48000400 	.word	0x48000400
 8000518:	10110000 	.word	0x10110000

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x44>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_MspInit+0x44>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x44>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_MspInit+0x44>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <HAL_MspInit+0x44>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_MspInit+0x44>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <HAL_I2C_MspInit+0x80>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d129      	bne.n	80005ea <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <HAL_I2C_MspInit+0x84>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <HAL_I2C_MspInit+0x84>)
 800059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_I2C_MspInit+0x84>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b4:	2312      	movs	r3, #18
 80005b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	2303      	movs	r3, #3
 80005be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005c0:	2304      	movs	r3, #4
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 fa3d 	bl	8000a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_I2C_MspInit+0x84>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_I2C_MspInit+0x84>)
 80005d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_I2C_MspInit+0x84>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40005800 	.word	0x40005800
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800060c:	d113      	bne.n	8000636 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_TIM_Base_MspInit+0x44>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <HAL_TIM_Base_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	201c      	movs	r0, #28
 800062c:	f000 f9d7 	bl	80009de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000630:	201c      	movs	r0, #28
 8000632:	f000 f9f0 	bl	8000a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f8a6 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80006a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006a8:	f000 fb7c 	bl	8000da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <TIM2_IRQHandler+0x10>)
 80006b6:	f001 ff7c 	bl	80025b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000080 	.word	0x20000080

080006c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80006c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006cc:	f000 fb6a 	bl	8000da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80006d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006d4:	f000 fb66 	bl	8000da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <SystemInit+0x28>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e6:	4a07      	ldr	r2, [pc, #28]	; (8000704 <SystemInit+0x28>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <SystemInit+0x28>)
 80006f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006f6:	609a      	str	r2, [r3, #8]
#endif
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800070c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800070e:	e003      	b.n	8000718 <LoopCopyDataInit>

08000710 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000712:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000714:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000716:	3104      	adds	r1, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <LoopForever+0xa>)
	ldr	r3, =_edata
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <LoopForever+0xe>)
	adds	r2, r0, r1
 800071c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800071e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000720:	d3f6      	bcc.n	8000710 <CopyDataInit>
	ldr	r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000724:	e002      	b.n	800072c <LoopFillZerobss>

08000726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000726:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000728:	f842 3b04 	str.w	r3, [r2], #4

0800072c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <LoopForever+0x16>)
	cmp	r2, r3
 800072e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000730:	d3f9      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000732:	f7ff ffd3 	bl	80006dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f002 fb05 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073a:	f7ff fd6f 	bl	800021c <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000744:	08002dec 	.word	0x08002dec
	ldr	r0, =_sdata
 8000748:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800074c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000750:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000754:	200000c4 	.word	0x200000c4

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f92b 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff fed8 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f943 	bl	8000a32 <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f90b 	bl	80009de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000000c 	.word	0x2000000c
 80007e0:	20000014 	.word	0x20000014
 80007e4:	20000010 	.word	0x20000010

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000014 	.word	0x20000014
 800080c:	200000c0 	.word	0x200000c0

08000810 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;  
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200000c0 	.word	0x200000c0

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	; (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000994:	d301      	bcc.n	800099a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2301      	movs	r3, #1
 8000998:	e00f      	b.n	80009ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <SysTick_Config+0x40>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a2:	210f      	movs	r1, #15
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f7ff ff8e 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SysTick_Config+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Config+0x40>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff29 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff3e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ff8e 	bl	800091c <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff31 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffa2 	bl	8000984 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e154      	b.n	8000d06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8146 	beq.w	8000d00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x38>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b12      	cmp	r3, #18
 8000a82:	d123      	bne.n	8000acc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	08da      	lsrs	r2, r3, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3208      	adds	r2, #8
 8000a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	691a      	ldr	r2, [r3, #16]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	6939      	ldr	r1, [r7, #16]
 8000ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0203 	and.w	r2, r3, #3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d00b      	beq.n	8000b20 <HAL_GPIO_Init+0xd4>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d007      	beq.n	8000b20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b14:	2b11      	cmp	r3, #17
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b12      	cmp	r3, #18
 8000b1e:	d130      	bne.n	8000b82 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b56:	2201      	movs	r2, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	f003 0201 	and.w	r2, r3, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80a0 	beq.w	8000d00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a57      	ldr	r2, [pc, #348]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b55      	ldr	r3, [pc, #340]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd8:	4a53      	ldr	r2, [pc, #332]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c02:	d019      	beq.n	8000c38 <HAL_GPIO_Init+0x1ec>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d013      	beq.n	8000c34 <HAL_GPIO_Init+0x1e8>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_GPIO_Init+0x2e4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d00d      	beq.n	8000c30 <HAL_GPIO_Init+0x1e4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <HAL_GPIO_Init+0x2e8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0x1e0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <HAL_GPIO_Init+0x2ec>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d101      	bne.n	8000c28 <HAL_GPIO_Init+0x1dc>
 8000c24:	2304      	movs	r3, #4
 8000c26:	e008      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c28:	2305      	movs	r3, #5
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e004      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	f002 0203 	and.w	r2, r2, #3
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c4a:	4937      	ldr	r1, [pc, #220]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c7c:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f47f aea3 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d16:	bf00      	nop
 8000d18:	371c      	adds	r7, #28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000c00 	.word	0x48000c00
 8000d38:	48001000 	.word	0x48001000
 8000d3c:	40010400 	.word	0x40010400

08000d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d50:	787b      	ldrb	r3, [r7, #1]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d56:	887a      	ldrh	r2, [r7, #2]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	041a      	lsls	r2, r3, #16
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	619a      	str	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d006      	beq.n	8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fa0e 	bl	80001e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e081      	b.n	8000eea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d106      	bne.n	8000e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fbba 	bl	8000574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2224      	movs	r2, #36	; 0x24
 8000e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d107      	bne.n	8000e4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	e006      	b.n	8000e5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d104      	bne.n	8000e6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	ea42 0103 	orr.w	r1, r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	021a      	lsls	r2, r3, #8
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69d9      	ldr	r1, [r3, #28]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d138      	bne.n	8000f7a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e032      	b.n	8000f7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2224      	movs	r2, #36	; 0x24
 8000f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0201 	bic.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f44:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0201 	orr.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2220      	movs	r2, #32
 8000f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f7a:	2302      	movs	r3, #2
  }
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d139      	bne.n	8001012 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e033      	b.n	8001014 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2224      	movs	r2, #36	; 0x24
 8000fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2220      	movs	r2, #32
 8001002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001012:	2302      	movs	r3, #2
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001026:	af00      	add	r7, sp, #0
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	f000 bef4 	b.w	8001e22 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 816a 	beq.w	800131e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800104a:	4bb3      	ldr	r3, [pc, #716]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b04      	cmp	r3, #4
 8001054:	d00c      	beq.n	8001070 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001056:	4bb0      	ldr	r3, [pc, #704]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b08      	cmp	r3, #8
 8001060:	d159      	bne.n	8001116 <HAL_RCC_OscConfig+0xf6>
 8001062:	4bad      	ldr	r3, [pc, #692]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d152      	bne.n	8001116 <HAL_RCC_OscConfig+0xf6>
 8001070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001074:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001084:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	fab3 f383 	clz	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <HAL_RCC_OscConfig+0x82>
 800109c:	4b9e      	ldr	r3, [pc, #632]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0xae>
 80010a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010ca:	4b93      	ldr	r3, [pc, #588]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010da:	fa92 f2a2 	rbit	r2, r2
 80010de:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	f042 0220 	orr.w	r2, r2, #32
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f002 021f 	and.w	r2, r2, #31
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 810c 	beq.w	800131c <HAL_RCC_OscConfig+0x2fc>
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 8106 	bne.w	800131c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	f000 be86 	b.w	8001e22 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d106      	bne.n	8001130 <HAL_RCC_OscConfig+0x110>
 8001122:	4b7d      	ldr	r3, [pc, #500]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a7c      	ldr	r2, [pc, #496]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e030      	b.n	8001192 <HAL_RCC_OscConfig+0x172>
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x134>
 800113a:	4b77      	ldr	r3, [pc, #476]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a76      	ldr	r2, [pc, #472]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b74      	ldr	r3, [pc, #464]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a73      	ldr	r2, [pc, #460]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800114c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e01e      	b.n	8001192 <HAL_RCC_OscConfig+0x172>
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115e:	d10c      	bne.n	800117a <HAL_RCC_OscConfig+0x15a>
 8001160:	4b6d      	ldr	r3, [pc, #436]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a6c      	ldr	r2, [pc, #432]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b6a      	ldr	r3, [pc, #424]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a69      	ldr	r2, [pc, #420]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e00b      	b.n	8001192 <HAL_RCC_OscConfig+0x172>
 800117a:	4b67      	ldr	r3, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a66      	ldr	r2, [pc, #408]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b64      	ldr	r3, [pc, #400]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a63      	ldr	r2, [pc, #396]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800118c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001192:	4b61      	ldr	r3, [pc, #388]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	f023 020f 	bic.w	r2, r3, #15
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	495d      	ldr	r1, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d059      	beq.n	8001264 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fb2e 	bl	8000810 <HAL_GetTick>
 80011b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ba:	f7ff fb29 	bl	8000810 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d902      	bls.n	80011d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f000 be29 	b.w	8001e22 <HAL_RCC_OscConfig+0xe02>
 80011d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d102      	bne.n	8001202 <HAL_RCC_OscConfig+0x1e2>
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x20e>
 8001202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001206:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800121e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001232:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001236:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800123a:	fa92 f2a2 	rbit	r2, r2
 800123e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001242:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001246:	fab2 f282 	clz	r2, r2
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	f042 0220 	orr.w	r2, r2, #32
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f002 021f 	and.w	r2, r2, #31
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0ab      	beq.n	80011ba <HAL_RCC_OscConfig+0x19a>
 8001262:	e05c      	b.n	800131e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fad4 	bl	8000810 <HAL_GetTick>
 8001268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126e:	f7ff facf 	bl	8000810 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d902      	bls.n	8001284 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	f000 bdcf 	b.w	8001e22 <HAL_RCC_OscConfig+0xe02>
 8001284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001288:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001298:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d102      	bne.n	80012b6 <HAL_RCC_OscConfig+0x296>
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x2c2>
 80012b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_RCC_OscConfig+0x2f8>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012ee:	fa92 f2a2 	rbit	r2, r2
 80012f2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012fa:	fab2 f282 	clz	r2, r2
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 021f 	and.w	r2, r2, #31
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ab      	bne.n	800126e <HAL_RCC_OscConfig+0x24e>
 8001316:	e002      	b.n	800131e <HAL_RCC_OscConfig+0x2fe>
 8001318:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 816f 	beq.w	800160c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800132e:	4bd0      	ldr	r3, [pc, #832]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800133a:	4bcd      	ldr	r3, [pc, #820]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b08      	cmp	r3, #8
 8001344:	d16c      	bne.n	8001420 <HAL_RCC_OscConfig+0x400>
 8001346:	4bca      	ldr	r3, [pc, #808]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d166      	bne.n	8001420 <HAL_RCC_OscConfig+0x400>
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001364:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <HAL_RCC_OscConfig+0x362>
 800137c:	4bbc      	ldr	r3, [pc, #752]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	e013      	b.n	80013aa <HAL_RCC_OscConfig+0x38a>
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800139a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013a6:	4bb2      	ldr	r3, [pc, #712]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	2202      	movs	r2, #2
 80013ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80013b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013b4:	fa92 f2a2 	rbit	r2, r2
 80013b8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013c0:	fab2 f282 	clz	r2, r2
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f002 021f 	and.w	r2, r2, #31
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_RCC_OscConfig+0x3cc>
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f000 bd1b 	b.w	8001e22 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	21f8      	movs	r1, #248	; 0xf8
 80013fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001404:	fa91 f1a1 	rbit	r1, r1
 8001408:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800140c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001410:	fab1 f181 	clz	r1, r1
 8001414:	b2c9      	uxtb	r1, r1
 8001416:	408b      	lsls	r3, r1
 8001418:	4995      	ldr	r1, [pc, #596]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e0f5      	b.n	800160c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8085 	beq.w	8001536 <HAL_RCC_OscConfig+0x516>
 800142c:	2301      	movs	r3, #1
 800142e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800143e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800144c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	461a      	mov	r2, r3
 8001454:	2301      	movs	r3, #1
 8001456:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff f9da 	bl	8000810 <HAL_GetTick>
 800145c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff f9d5 	bl	8000810 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d902      	bls.n	8001478 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	f000 bcd5 	b.w	8001e22 <HAL_RCC_OscConfig+0xe02>
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800148a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	095b      	lsrs	r3, r3, #5
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d102      	bne.n	80014a8 <HAL_RCC_OscConfig+0x488>
 80014a2:	4b73      	ldr	r3, [pc, #460]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	e013      	b.n	80014d0 <HAL_RCC_OscConfig+0x4b0>
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2202      	movs	r2, #2
 80014d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014da:	fa92 f2a2 	rbit	r2, r2
 80014de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014e6:	fab2 f282 	clz	r2, r2
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	f042 0220 	orr.w	r2, r2, #32
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	f002 021f 	and.w	r2, r2, #31
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0af      	beq.n	8001462 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b5b      	ldr	r3, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	21f8      	movs	r1, #248	; 0xf8
 8001512:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800151a:	fa91 f1a1 	rbit	r1, r1
 800151e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001522:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001526:	fab1 f181 	clz	r1, r1
 800152a:	b2c9      	uxtb	r1, r1
 800152c:	408b      	lsls	r3, r1
 800152e:	4950      	ldr	r1, [pc, #320]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e06a      	b.n	800160c <HAL_RCC_OscConfig+0x5ec>
 8001536:	2301      	movs	r3, #1
 8001538:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001548:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154c:	fab3 f383 	clz	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001556:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	2300      	movs	r3, #0
 8001560:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f955 	bl	8000810 <HAL_GetTick>
 8001566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff f950 	bl	8000810 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d902      	bls.n	8001582 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	f000 bc50 	b.w	8001e22 <HAL_RCC_OscConfig+0xe02>
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_OscConfig+0x592>
 80015ac:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	e013      	b.n	80015da <HAL_RCC_OscConfig+0x5ba>
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_RCC_OscConfig+0x650>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2202      	movs	r2, #2
 80015dc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015e4:	fa92 f2a2 	rbit	r2, r2
 80015e8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015f0:	fab2 f282 	clz	r2, r2
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	f042 0220 	orr.w	r2, r2, #32
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	f002 021f 	and.w	r2, r2, #31
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1af      	bne.n	800156c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80da 	beq.w	80017d0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d069      	beq.n	80016fa <HAL_RCC_OscConfig+0x6da>
 8001626:	2301      	movs	r3, #1
 8001628:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x654>)
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	461a      	mov	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff f8de 	bl	8000810 <HAL_GetTick>
 8001654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	e00e      	b.n	8001678 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff f8d9 	bl	8000810 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d906      	bls.n	8001678 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e3d9      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	10908120 	.word	0x10908120
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800168a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	fa93 f2a3 	rbit	r2, r3
 800169c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016a6:	2202      	movs	r2, #2
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f2a3 	rbit	r2, r3
 80016b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	4ba5      	ldr	r3, [pc, #660]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80016bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016c2:	2102      	movs	r1, #2
 80016c4:	6019      	str	r1, [r3, #0]
 80016c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f1a3 	rbit	r1, r3
 80016d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016d4:	6019      	str	r1, [r3, #0]
  return result;
 80016d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0b0      	beq.n	800165a <HAL_RCC_OscConfig+0x63a>
 80016f8:	e06a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7b0>
 80016fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	fa93 f2a3 	rbit	r2, r3
 800170c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001710:	601a      	str	r2, [r3, #0]
  return result;
 8001712:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001716:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x934>)
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	461a      	mov	r2, r3
 8001728:	2300      	movs	r3, #0
 800172a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172c:	f7ff f870 	bl	8000810 <HAL_GetTick>
 8001730:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e009      	b.n	800174a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff f86b 	bl	8000810 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e36b      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
 800174a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001790:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001792:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 8001794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001796:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800179a:	2102      	movs	r1, #2
 800179c:	6019      	str	r1, [r3, #0]
 800179e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f1a3 	rbit	r1, r3
 80017a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017ac:	6019      	str	r1, [r3, #0]
  return result;
 80017ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1b2      	bne.n	8001736 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8158 	beq.w	8001a90 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b5a      	ldr	r3, [pc, #360]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d112      	bne.n	8001818 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b57      	ldr	r3, [pc, #348]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a56      	ldr	r2, [pc, #344]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b54      	ldr	r3, [pc, #336]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b4f      	ldr	r3, [pc, #316]	; (8001958 <HAL_RCC_OscConfig+0x938>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11a      	bne.n	800185a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x938>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a4b      	ldr	r2, [pc, #300]	; (8001958 <HAL_RCC_OscConfig+0x938>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001830:	f7fe ffee 	bl	8000810 <HAL_GetTick>
 8001834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	e009      	b.n	800184e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7fe ffe9 	bl	8000810 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e2e9      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <HAL_RCC_OscConfig+0x938>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0ef      	beq.n	800183a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x852>
 8001864:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a39      	ldr	r2, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e02f      	b.n	80018d2 <HAL_RCC_OscConfig+0x8b2>
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x876>
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a30      	ldr	r2, [pc, #192]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e01d      	b.n	80018d2 <HAL_RCC_OscConfig+0x8b2>
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x89a>
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	e00b      	b.n	80018d2 <HAL_RCC_OscConfig+0x8b2>
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a21      	ldr	r2, [pc, #132]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d06b      	beq.n	80019b4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7fe ff98 	bl	8000810 <HAL_GetTick>
 80018e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	e00b      	b.n	80018fe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7fe ff93 	bl	8000810 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e291      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
 80018fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fa93 f2a3 	rbit	r2, r3
 8001910:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800191a:	2202      	movs	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800192c:	601a      	str	r2, [r3, #0]
  return result;
 800192e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001932:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d109      	bne.n	800195c <HAL_RCC_OscConfig+0x93c>
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <HAL_RCC_OscConfig+0x930>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	e014      	b.n	8001978 <HAL_RCC_OscConfig+0x958>
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	10908120 	.word	0x10908120
 8001958:	40007000 	.word	0x40007000
 800195c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4bbb      	ldr	r3, [pc, #748]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800197c:	2102      	movs	r1, #2
 800197e:	6011      	str	r1, [r2, #0]
 8001980:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	fa92 f1a2 	rbit	r1, r2
 800198a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800198e:	6011      	str	r1, [r2, #0]
  return result;
 8001990:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	fab2 f282 	clz	r2, r2
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f002 021f 	and.w	r2, r2, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d099      	beq.n	80018e6 <HAL_RCC_OscConfig+0x8c6>
 80019b2:	e063      	b.n	8001a7c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7fe ff2c 	bl	8000810 <HAL_GetTick>
 80019b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7fe ff27 	bl	8000810 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e225      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
 80019d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019da:	2202      	movs	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a04:	601a      	str	r2, [r3, #0]
  return result;
 8001a06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d102      	bne.n	8001a26 <HAL_RCC_OscConfig+0xa06>
 8001a20:	4b90      	ldr	r3, [pc, #576]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	e00d      	b.n	8001a42 <HAL_RCC_OscConfig+0xa22>
 8001a26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b89      	ldr	r3, [pc, #548]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a46:	2102      	movs	r1, #2
 8001a48:	6011      	str	r1, [r2, #0]
 8001a4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fa92 f1a2 	rbit	r1, r2
 8001a54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a58:	6011      	str	r1, [r2, #0]
  return result;
 8001a5a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1a0      	bne.n	80019be <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a84:	4b77      	ldr	r3, [pc, #476]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	4a76      	ldr	r2, [pc, #472]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 81c2 	beq.w	8001e20 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4b71      	ldr	r3, [pc, #452]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	f000 819c 	beq.w	8001de2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	f040 8114 	bne.w	8001cde <HAL_RCC_OscConfig+0xcbe>
 8001ab6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ace:	601a      	str	r2, [r3, #0]
  return result;
 8001ad0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ad4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7fe fe90 	bl	8000810 <HAL_GetTick>
 8001af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe fe8b 	bl	8000810 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e18b      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
 8001b0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b22:	601a      	str	r2, [r3, #0]
  return result;
 8001b24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <HAL_RCC_OscConfig+0xb24>
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	e01b      	b.n	8001b7c <HAL_RCC_OscConfig+0xb5c>
 8001b44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b84:	6011      	str	r1, [r2, #0]
 8001b86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	fa92 f1a2 	rbit	r1, r2
 8001b90:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b94:	6011      	str	r1, [r2, #0]
  return result;
 8001b96:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f042 0220 	orr.w	r2, r2, #32
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f002 021f 	and.w	r2, r2, #31
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d19e      	bne.n	8001af6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	4925      	ldr	r1, [pc, #148]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bec:	601a      	str	r2, [r3, #0]
  return result;
 8001bee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bf2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	461a      	mov	r2, r3
 8001c06:	2301      	movs	r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fe01 	bl	8000810 <HAL_GetTick>
 8001c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c12:	e009      	b.n	8001c28 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fdfc 	bl	8000810 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0fc      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
 8001c28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0xc48>
 8001c5c:	4b01      	ldr	r3, [pc, #4]	; (8001c64 <HAL_RCC_OscConfig+0xc44>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	e01e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xc80>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <HAL_RCC_OscConfig+0xe0c>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ca4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca8:	6011      	str	r1, [r2, #0]
 8001caa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	fa92 f1a2 	rbit	r1, r2
 8001cb4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001cb8:	6011      	str	r1, [r2, #0]
  return result;
 8001cba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f042 0220 	orr.w	r2, r2, #32
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f002 021f 	and.w	r2, r2, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d09b      	beq.n	8001c14 <HAL_RCC_OscConfig+0xbf4>
 8001cdc:	e0a0      	b.n	8001e20 <HAL_RCC_OscConfig+0xe00>
 8001cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	601a      	str	r2, [r3, #0]
  return result;
 8001cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe fd7c 	bl	8000810 <HAL_GetTick>
 8001d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe fd77 	bl	8000810 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e077      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
 8001d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	601a      	str	r2, [r3, #0]
  return result;
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_OscConfig+0xd4c>
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_RCC_OscConfig+0xe0c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	e01b      	b.n	8001da4 <HAL_RCC_OscConfig+0xd84>
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_RCC_OscConfig+0xe0c>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f107 0210 	add.w	r2, r7, #16
 8001da8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dac:	6011      	str	r1, [r2, #0]
 8001dae:	f107 0210 	add.w	r2, r7, #16
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	fa92 f1a2 	rbit	r1, r2
 8001db8:	f107 020c 	add.w	r2, r7, #12
 8001dbc:	6011      	str	r1, [r2, #0]
  return result;
 8001dbe:	f107 020c 	add.w	r2, r7, #12
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	fab2 f282 	clz	r2, r2
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f042 0220 	orr.w	r2, r2, #32
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f002 021f 	and.w	r2, r2, #31
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d19e      	bne.n	8001d1e <HAL_RCC_OscConfig+0xcfe>
 8001de0:	e01e      	b.n	8001e20 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e018      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_RCC_OscConfig+0xe0c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001df8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b09e      	sub	sp, #120	; 0x78
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e162      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b90      	ldr	r3, [pc, #576]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d910      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b8d      	ldr	r3, [pc, #564]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	498b      	ldr	r1, [pc, #556]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e14a      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b82      	ldr	r3, [pc, #520]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	497f      	ldr	r1, [pc, #508]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80dc 	beq.w	800205c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d13c      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xf6>
 8001eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xa6>
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e00f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0xc6>
 8001ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001efa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001efe:	fa92 f2a2 	rbit	r2, r2
 8001f02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f06:	fab2 f282 	clz	r2, r2
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f042 0220 	orr.w	r2, r2, #32
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f002 021f 	and.w	r2, r2, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d17b      	bne.n	800201a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0f3      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d13c      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x178>
 8001f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x128>
 8001f52:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e00f      	b.n	8001f78 <HAL_RCC_ClockConfig+0x148>
 8001f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	647b      	str	r3, [r7, #68]	; 0x44
 8001f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f80:	fa92 f2a2 	rbit	r2, r2
 8001f84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f002 021f 	and.w	r2, r2, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d13a      	bne.n	800201a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b2      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e00d      	b.n	8001fec <HAL_RCC_ClockConfig+0x1bc>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	61ba      	str	r2, [r7, #24]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	fa92 f2a2 	rbit	r2, r2
 8001ff6:	617a      	str	r2, [r7, #20]
  return result;
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f002 021f 	and.w	r2, r2, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e079      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	491a      	ldr	r1, [pc, #104]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7fe fbf0 	bl	8000810 <HAL_GetTick>
 8002030:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7fe fbec 	bl	8000810 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e061      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d214      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4906      	ldr	r1, [pc, #24]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e040      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	491a      	ldr	r1, [pc, #104]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4912      	ldr	r1, [pc, #72]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020d2:	f000 f829 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e0:	22f0      	movs	r2, #240	; 0xf0
 80020e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	fa92 f2a2 	rbit	r2, r2
 80020ea:	60fa      	str	r2, [r7, #12]
  return result;
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	fab2 f282 	clz	r2, r2
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	40d3      	lsrs	r3, r2
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x2ec>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	fa21 f303 	lsr.w	r3, r1, r3
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_RCC_ClockConfig+0x2f0>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_RCC_ClockConfig+0x2f4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fb3e 	bl	8000788 <HAL_InitTick>
  
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3778      	adds	r7, #120	; 0x78
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	08002db4 	.word	0x08002db4
 8002120:	2000000c 	.word	0x2000000c
 8002124:	20000010 	.word	0x20000010

08002128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d002      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x30>
 8002152:	2b08      	cmp	r3, #8
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x36>
 8002156:	e03c      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	e03c      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002164:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002168:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	607a      	str	r2, [r7, #4]
  return result;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	40d3      	lsrs	r3, r2
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	220f      	movs	r2, #15
 800218c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	60fa      	str	r2, [r7, #12]
  return result;
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	40d3      	lsrs	r3, r2
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
 80021c0:	e004      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	623b      	str	r3, [r7, #32]
      break;
 80021d0:	e002      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80021d4:	623b      	str	r3, [r7, #32]
      break;
 80021d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d8:	6a3b      	ldr	r3, [r7, #32]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	372c      	adds	r7, #44	; 0x2c
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	08002dc4 	.word	0x08002dc4
 80021f4:	08002dd4 	.word	0x08002dd4
 80021f8:	003d0900 	.word	0x003d0900

080021fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b092      	sub	sp, #72	; 0x48
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80d7 	beq.w	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002220:	4b4e      	ldr	r3, [pc, #312]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10e      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4a4a      	ldr	r2, [pc, #296]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	61d3      	str	r3, [r2, #28]
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002244:	2301      	movs	r3, #1
 8002246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002256:	4b42      	ldr	r3, [pc, #264]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a41      	ldr	r2, [pc, #260]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002262:	f7fe fad5 	bl	8000810 <HAL_GetTick>
 8002266:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	e008      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe fad1 	bl	8000810 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	; 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e169      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002288:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002290:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8084 	beq.w	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d07c      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	461a      	mov	r2, r3
 80022d2:	2301      	movs	r3, #1
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2300      	movs	r3, #0
 80022f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022fa:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d04b      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe fa81 	bl	8000810 <HAL_GetTick>
 800230e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fa7d 	bl	8000810 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e113      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002328:	2302      	movs	r3, #2
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
 8002334:	2302      	movs	r3, #2
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	61fb      	str	r3, [r7, #28]
  return result;
 8002340:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d108      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002356:	4b01      	ldr	r3, [pc, #4]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	e00d      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	10908100 	.word	0x10908100
 8002368:	2302      	movs	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2202      	movs	r2, #2
 800237a:	613a      	str	r2, [r7, #16]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	60fa      	str	r2, [r7, #12]
  return result;
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f002 021f 	and.w	r2, r2, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f202 	lsl.w	r2, r1, r2
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0b7      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	496a      	ldr	r1, [pc, #424]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023bc:	4b66      	ldr	r3, [pc, #408]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	4a65      	ldr	r2, [pc, #404]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f023 0203 	bic.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	495d      	ldr	r1, [pc, #372]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f2:	4b59      	ldr	r3, [pc, #356]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4956      	ldr	r1, [pc, #344]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002400:	4313      	orrs	r3, r2
 8002402:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002410:	4b51      	ldr	r3, [pc, #324]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	494e      	ldr	r1, [pc, #312]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f023 0210 	bic.w	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4947      	ldr	r1, [pc, #284]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	493f      	ldr	r1, [pc, #252]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800246a:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f023 0220 	bic.w	r2, r3, #32
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4938      	ldr	r1, [pc, #224]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002488:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	4930      	ldr	r1, [pc, #192]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4929      	ldr	r1, [pc, #164]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	4921      	ldr	r1, [pc, #132]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	491a      	ldr	r1, [pc, #104]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	4912      	ldr	r1, [pc, #72]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250e:	4313      	orrs	r3, r2
 8002510:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	490b      	ldr	r1, [pc, #44]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	4903      	ldr	r1, [pc, #12]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3748      	adds	r7, #72	; 0x48
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e01d      	b.n	80025aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe f83a 	bl	80005fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f000 fa0a 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d122      	bne.n	800260e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d11b      	bne.n	800260e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0202 	mvn.w	r2, #2
 80025de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f9be 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 80025fa:	e005      	b.n	8002608 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9b0 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f9c1 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b04      	cmp	r3, #4
 800261a:	d122      	bne.n	8002662 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b04      	cmp	r3, #4
 8002628:	d11b      	bne.n	8002662 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f06f 0204 	mvn.w	r2, #4
 8002632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f994 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 800264e:	e005      	b.n	800265c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f986 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f997 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b08      	cmp	r3, #8
 800266e:	d122      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11b      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f06f 0208 	mvn.w	r2, #8
 8002686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f96a 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 80026a2:	e005      	b.n	80026b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f95c 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f96d 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d122      	bne.n	800270a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d11b      	bne.n	800270a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0210 	mvn.w	r2, #16
 80026da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2208      	movs	r2, #8
 80026e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f940 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 80026f6:	e005      	b.n	8002704 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f932 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f943 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10e      	bne.n	8002736 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f06f 0201 	mvn.w	r2, #1
 800272e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7fd fd4c 	bl	80001ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d10e      	bne.n	8002762 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d107      	bne.n	8002762 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800275a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fadd 	bl	8002d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fad0 	bl	8002d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8f1 	bl	800299e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0220 	mvn.w	r2, #32
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fa90 	bl	8002d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x18>
 8002804:	2302      	movs	r3, #2
 8002806:	e0a8      	b.n	800295a <HAL_TIM_ConfigClockSource+0x16a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800282a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d067      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x124>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d80b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x70>
 8002848:	2b10      	cmp	r3, #16
 800284a:	d073      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x144>
 800284c:	2b10      	cmp	r3, #16
 800284e:	d802      	bhi.n	8002856 <HAL_TIM_ConfigClockSource+0x66>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d06f      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002854:	e078      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002856:	2b20      	cmp	r3, #32
 8002858:	d06c      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x144>
 800285a:	2b30      	cmp	r3, #48	; 0x30
 800285c:	d06a      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800285e:	e073      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d00d      	beq.n	8002880 <HAL_TIM_ConfigClockSource+0x90>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d804      	bhi.n	8002872 <HAL_TIM_ConfigClockSource+0x82>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d033      	beq.n	80028d4 <HAL_TIM_ConfigClockSource+0xe4>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d041      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002870:	e06a      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002876:	d066      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x156>
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d017      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800287e:	e063      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f000 f99a 	bl	8002bc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]
      break;
 80028ac:	e04c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f000 f983 	bl	8002bc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d0:	609a      	str	r2, [r3, #8]
      break;
 80028d2:	e039      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f000 f8f7 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2150      	movs	r1, #80	; 0x50
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f950 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 80028f2:	e029      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	461a      	mov	r2, r3
 8002902:	f000 f916 	bl	8002b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2160      	movs	r1, #96	; 0x60
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f940 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 8002912:	e019      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	461a      	mov	r2, r3
 8002922:	f000 f8d7 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f930 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 8002932:	e009      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f000 f927 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 8002944:	e000      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3c      	ldr	r2, [pc, #240]	; (8002ab8 <TIM_Base_SetConfig+0x104>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00f      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d00b      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a39      	ldr	r2, [pc, #228]	; (8002abc <TIM_Base_SetConfig+0x108>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a38      	ldr	r2, [pc, #224]	; (8002ac0 <TIM_Base_SetConfig+0x10c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a37      	ldr	r2, [pc, #220]	; (8002ac4 <TIM_Base_SetConfig+0x110>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d108      	bne.n	80029fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2d      	ldr	r2, [pc, #180]	; (8002ab8 <TIM_Base_SetConfig+0x104>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01b      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d017      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <TIM_Base_SetConfig+0x108>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <TIM_Base_SetConfig+0x10c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <TIM_Base_SetConfig+0x110>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <TIM_Base_SetConfig+0x118>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <TIM_Base_SetConfig+0x104>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00f      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <TIM_Base_SetConfig+0x110>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <TIM_Base_SetConfig+0x118>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40013400 	.word	0x40013400
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40014400 	.word	0x40014400
 8002ad0:	40014800 	.word	0x40014800

08002ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 030a 	bic.w	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0210 	bic.w	r2, r3, #16
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f043 0307 	orr.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	021a      	lsls	r2, r3, #8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e063      	b.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2b      	ldr	r2, [pc, #172]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d018      	beq.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d013      	beq.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d10c      	bne.n	8002cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40013400 	.word	0x40013400
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800
 8002d04:	40014000 	.word	0x40014000

08002d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	4e0d      	ldr	r6, [pc, #52]	; (8002d7c <__libc_init_array+0x38>)
 8002d48:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4a:	1ba4      	subs	r4, r4, r6
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	2500      	movs	r5, #0
 8002d50:	42a5      	cmp	r5, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	4e0b      	ldr	r6, [pc, #44]	; (8002d84 <__libc_init_array+0x40>)
 8002d56:	4c0c      	ldr	r4, [pc, #48]	; (8002d88 <__libc_init_array+0x44>)
 8002d58:	f000 f820 	bl	8002d9c <_init>
 8002d5c:	1ba4      	subs	r4, r4, r6
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	2500      	movs	r5, #0
 8002d62:	42a5      	cmp	r5, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d6c:	4798      	blx	r3
 8002d6e:	3501      	adds	r5, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d76:	4798      	blx	r3
 8002d78:	3501      	adds	r5, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	08002de4 	.word	0x08002de4
 8002d80:	08002de4 	.word	0x08002de4
 8002d84:	08002de4 	.word	0x08002de4
 8002d88:	08002de8 	.word	0x08002de8

08002d8c <memset>:
 8002d8c:	4402      	add	r2, r0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memset+0xa>
 8002d94:	4770      	bx	lr
 8002d96:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9a:	e7f9      	b.n	8002d90 <memset+0x4>

08002d9c <_init>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr

08002da8 <_fini>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr
