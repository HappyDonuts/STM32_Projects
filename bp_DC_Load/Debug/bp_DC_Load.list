
bp_DC_Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a0  08006fe0  08006fe0  00016fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008580  08008580  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08008580  08008580  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008580  08008580  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000098  0800861c  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800861c  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feb3  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022d7  00000000  00000000  0002ff70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00032248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001542f  00000000  00000000  00033b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab72  00000000  00000000  00048fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072f00  00000000  00000000  00053b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6a31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f48  00000000  00000000  000c6aac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fc8 	.word	0x08006fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08006fc8 	.word	0x08006fc8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b74:	f1a2 0201 	sub.w	r2, r2, #1
 8000b78:	d1ed      	bne.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2uiz>:
 8000f74:	0042      	lsls	r2, r0, #1
 8000f76:	d20e      	bcs.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30b      	bcc.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d409      	bmi.n	8000f9c <__aeabi_f2uiz+0x28>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	fa23 f002 	lsr.w	r0, r3, r2
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2uiz+0x32>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d102      	bne.n	8000fac <__aeabi_f2uiz+0x38>
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	4770      	bx	lr
 8000fac:	f04f 0000 	mov.w	r0, #0
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <ads_new>:
 * @brief  Creates new ads_t variable corresponding to a ads module
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval ads_t variable corresponding to the ads module
 */
ads_t* ads_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
	ads_t* ads = malloc(sizeof(*ads));
 8000fc0:	200c      	movs	r0, #12
 8000fc2:	f004 f83b 	bl	800503c <malloc>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60fb      	str	r3, [r7, #12]
	ads_init(ads, hi2c, addr);
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f805 	bl	8000fe0 <ads_init>
	return ads;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <ads_init>:
 * @param  *ads: ads variable corresponding to the module targeted
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval None
 */
void ads_init(ads_t *ads, I2C_HandleTypeDef *hi2c, uint8_t addr){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	71fb      	strb	r3, [r7, #7]
	ads->hi2c = hi2c;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	605a      	str	r2, [r3, #4]
	ads->addr = addr;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	701a      	strb	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <ads_write>:
 * @brief  Configures the ads module register before reading (mux and gain)
 * 		   sending 3 bytes using I2C
 * @param  *ads: variable corresponding to the module targeted
 * @retval None
 */
void ads_write(ads_t *ads){
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	6078      	str	r0, [r7, #4]
	uint8_t adsWrite[3];
	adsWrite[0] = 0x01;
 800100c:	2301      	movs	r3, #1
 800100e:	733b      	strb	r3, [r7, #12]
	adsWrite[1] = 0x80 + (ads->mux<<4) + (ads->gain<<1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7a5b      	ldrb	r3, [r3, #9]
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7a1b      	ldrb	r3, [r3, #8]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	4413      	add	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3b80      	subs	r3, #128	; 0x80
 8001026:	b2db      	uxtb	r3, r3
 8001028:	737b      	strb	r3, [r7, #13]
	adsWrite[2] = 0x83;
 800102a:	2383      	movs	r3, #131	; 0x83
 800102c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, adsWrite, 3, 100);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6858      	ldr	r0, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	b299      	uxth	r1, r3
 800103c:	f107 020c 	add.w	r2, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2303      	movs	r3, #3
 8001046:	f002 f809 	bl	800305c <HAL_I2C_Master_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <ads_voltageConv>:
 * @brief  Auxiliary function. Converts a raw ADC reading to a voltage reading in mV
 * @param  reading: raw ADC reading
 * @param  gain: gain of the internal amplifier chosen
 * @retval Voltage reading in mV
 */
uint16_t ads_voltageConv(uint16_t reading, uint8_t gain){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	717b      	strb	r3, [r7, #5]
	float factor;
	switch (gain){
 8001064:	797b      	ldrb	r3, [r7, #5]
 8001066:	2b04      	cmp	r3, #4
 8001068:	d81f      	bhi.n	80010aa <ads_voltageConv+0x56>
 800106a:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <ads_voltageConv+0x1c>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	08001085 	.word	0x08001085
 8001074:	0800108b 	.word	0x0800108b
 8001078:	08001093 	.word	0x08001093
 800107c:	0800109b 	.word	0x0800109b
 8001080:	080010a3 	.word	0x080010a3
		case 0: factor = 6144; break;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <ads_voltageConv+0x94>)
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e013      	b.n	80010b2 <ads_voltageConv+0x5e>
		case 1: factor = 4096; break;
 800108a:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e00f      	b.n	80010b2 <ads_voltageConv+0x5e>
		case 2: factor = 2048; break;
 8001092:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e00b      	b.n	80010b2 <ads_voltageConv+0x5e>
		case 3: factor = 1024; break;
 800109a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e007      	b.n	80010b2 <ads_voltageConv+0x5e>
		case 4: factor = 512; break;
 80010a2:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e003      	b.n	80010b2 <ads_voltageConv+0x5e>
		default: factor = 256; break;
 80010aa:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	bf00      	nop
	}
	factor = factor*reading/32768;
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fdb9 	bl	8000c2c <__aeabi_i2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	68f9      	ldr	r1, [r7, #12]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe08 	bl	8000cd4 <__aeabi_fmul>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff feb6 	bl	8000e3c <__aeabi_fdiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	60fb      	str	r3, [r7, #12]
	return (uint16_t) factor;
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f7ff ff4d 	bl	8000f74 <__aeabi_f2uiz>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29b      	uxth	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	45c00000 	.word	0x45c00000

080010ec <ads_read>:
 * 			0: +-6144 mV	1: +-4096 mV
 * 			2: +-2048 mV	3: +-1024 mV
 * 			4: +-512 mV		5, 6, 7: +-256 mV
 * @retval Voltage read by the module (mV)
 */
uint16_t ads_read(ads_t *ads, uint8_t mux, uint8_t gain){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	70bb      	strb	r3, [r7, #2]
	if ((ads->mux != mux) | (ads->gain != gain)){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7a5b      	ldrb	r3, [r3, #9]
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	429a      	cmp	r2, r3
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2da      	uxtb	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	78b9      	ldrb	r1, [r7, #2]
 8001112:	4299      	cmp	r1, r3
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <ads_read+0x4a>
		ads->mux = mux;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	78fa      	ldrb	r2, [r7, #3]
 8001128:	725a      	strb	r2, [r3, #9]
		ads->gain = gain;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	78ba      	ldrb	r2, [r7, #2]
 800112e:	721a      	strb	r2, [r3, #8]
		ads_write(ads);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff67 	bl	8001004 <ads_write>
	}

	uint8_t adsRead[2];
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, 0x00, 1, 100);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6858      	ldr	r0, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b299      	uxth	r1, r3
 8001144:	2364      	movs	r3, #100	; 0x64
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	2200      	movs	r2, #0
 800114c:	f001 ff86 	bl	800305c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ads->hi2c, ads->addr<<1, adsRead, 2, 100);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6858      	ldr	r0, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	b299      	uxth	r1, r3
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	f002 f876 	bl	8003258 <HAL_I2C_Master_Receive>
	int16_t reading = (adsRead[0] << 8 | adsRead[1]);
 800116c:	7b3b      	ldrb	r3, [r7, #12]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	81fb      	strh	r3, [r7, #14]
	if (reading < 0){
 800117a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da01      	bge.n	8001186 <ads_read+0x9a>
	  reading = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	81fb      	strh	r3, [r7, #14]
	}
	return ads_voltageConv(reading, gain);
 8001186:	89fb      	ldrh	r3, [r7, #14]
 8001188:	78ba      	ldrb	r2, [r7, #2]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff61 	bl	8001054 <ads_voltageConv>
 8001192:	4603      	mov	r3, r0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	0000      	movs	r0, r0
	...

080011a0 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 80011a0:	b598      	push	{r3, r4, r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	/* MAIN CODE */
	mcp_1 = mcp_new(i2c, 0xC0); //0xC4 - other address
 80011a4:	4b62      	ldr	r3, [pc, #392]	; (8001330 <main_s+0x190>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	21c0      	movs	r1, #192	; 0xc0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fc06 	bl	80019bc <mcp_new>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b60      	ldr	r3, [pc, #384]	; (8001334 <main_s+0x194>)
 80011b4:	601a      	str	r2, [r3, #0]
	ads_1 = ads_new(i2c, 0x48);
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <main_s+0x190>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2148      	movs	r1, #72	; 0x48
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fef9 	bl	8000fb4 <ads_new>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4b5c      	ldr	r3, [pc, #368]	; (8001338 <main_s+0x198>)
 80011c6:	601a      	str	r2, [r3, #0]
	ads_2 = ads_new(i2c, 0x49);
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <main_s+0x190>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2149      	movs	r1, #73	; 0x49
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fef0 	bl	8000fb4 <ads_new>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b59      	ldr	r3, [pc, #356]	; (800133c <main_s+0x19c>)
 80011d8:	601a      	str	r2, [r3, #0]
	ssd1306_1 = ssd1306_new(i2c, 0x79);
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <main_s+0x190>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2179      	movs	r1, #121	; 0x79
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fc42 	bl	8001a6a <ssd1306_new>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b55      	ldr	r3, [pc, #340]	; (8001340 <main_s+0x1a0>)
 80011ea:	601a      	str	r2, [r3, #0]


	HAL_TIM_Base_Start_IT(tim_sense);
 80011ec:	4b55      	ldr	r3, [pc, #340]	; (8001344 <main_s+0x1a4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fabc 	bl	800476e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(tim_oled);
 80011f6:	4b54      	ldr	r3, [pc, #336]	; (8001348 <main_s+0x1a8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fab7 	bl	800476e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(tim_encoder, TIM_CHANNEL_2);
 8001200:	4b52      	ldr	r3, [pc, #328]	; (800134c <main_s+0x1ac>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2104      	movs	r1, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fb62 	bl	80048d0 <HAL_TIM_Encoder_Start>

	while(1){
		/* WHILE CODE */
		n_pulse = (TIM4->CNT);
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <main_s+0x1b0>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b50      	ldr	r3, [pc, #320]	; (8001354 <main_s+0x1b4>)
 8001214:	801a      	strh	r2, [r3, #0]
		n_pulse = n_pulse/4;
 8001216:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <main_s+0x1b4>)
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121c:	2b00      	cmp	r3, #0
 800121e:	da00      	bge.n	8001222 <main_s+0x82>
 8001220:	3303      	adds	r3, #3
 8001222:	109b      	asrs	r3, r3, #2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b4b      	ldr	r3, [pc, #300]	; (8001354 <main_s+0x1b4>)
 8001228:	801a      	strh	r2, [r3, #0]
		if(n_pulse < 0){
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <main_s+0x1b4>)
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	da05      	bge.n	8001240 <main_s+0xa0>
			n_pulse = 0;
 8001234:	4b47      	ldr	r3, [pc, #284]	; (8001354 <main_s+0x1b4>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
			TIM4->CNT = 0;
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <main_s+0x1b0>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (n_pulse > 50){
 8001240:	4b44      	ldr	r3, [pc, #272]	; (8001354 <main_s+0x1b4>)
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	2b32      	cmp	r3, #50	; 0x32
 8001248:	dd05      	ble.n	8001256 <main_s+0xb6>
			n_pulse = 50;
 800124a:	4b42      	ldr	r3, [pc, #264]	; (8001354 <main_s+0x1b4>)
 800124c:	2232      	movs	r2, #50	; 0x32
 800124e:	801a      	strh	r2, [r3, #0]
			TIM4->CNT = 200;
 8001250:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <main_s+0x1b0>)
 8001252:	22c8      	movs	r2, #200	; 0xc8
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
		}

		HAL_Delay(50);
 8001256:	2032      	movs	r0, #50	; 0x32
 8001258:	f001 fb4e 	bl	80028f8 <HAL_Delay>
		i_set = n_pulse*100;
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <main_s+0x1b4>)
 800125e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001262:	461a      	mov	r2, r3
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	fb03 f302 	mul.w	r3, r3, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f8c2 	bl	80003f4 <__aeabi_i2d>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4a38      	ldr	r2, [pc, #224]	; (8001358 <main_s+0x1b8>)
 8001276:	e9c2 3400 	strd	r3, r4, [r2]
		v_in = i_set*divider*rsens/factor;
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <main_s+0x1b8>)
 800127c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001280:	a421      	add	r4, pc, #132	; (adr r4, 8001308 <main_s+0x168>)
 8001282:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001286:	461a      	mov	r2, r3
 8001288:	4623      	mov	r3, r4
 800128a:	f7ff f91d 	bl	80004c8 <__aeabi_dmul>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	4618      	mov	r0, r3
 8001294:	4621      	mov	r1, r4
 8001296:	a41e      	add	r4, pc, #120	; (adr r4, 8001310 <main_s+0x170>)
 8001298:	e9d4 3400 	ldrd	r3, r4, [r4]
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	f7ff f912 	bl	80004c8 <__aeabi_dmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	4618      	mov	r0, r3
 80012aa:	4621      	mov	r1, r4
 80012ac:	a41a      	add	r4, pc, #104	; (adr r4, 8001318 <main_s+0x178>)
 80012ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4623      	mov	r3, r4
 80012b6:	f7ff fa31 	bl	800071c <__aeabi_ddiv>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	4a27      	ldr	r2, [pc, #156]	; (800135c <main_s+0x1bc>)
 80012c0:	e9c2 3400 	strd	r3, r4, [r2]
		mcp_write(mcp_1, v_in*4095/3300, 1);
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <main_s+0x194>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <main_s+0x1bc>)
 80012ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ce:	a314      	add	r3, pc, #80	; (adr r3, 8001320 <main_s+0x180>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f8f8 	bl	80004c8 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	a311      	add	r3, pc, #68	; (adr r3, 8001328 <main_s+0x188>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff fa19 	bl	800071c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fbc1 	bl	8000a78 <__aeabi_d2uiz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fb84 	bl	8001a0c <mcp_write>
		n_pulse = (TIM4->CNT);
 8001304:	e782      	b.n	800120c <main_s+0x6c>
 8001306:	bf00      	nop
 8001308:	71de69ad 	.word	0x71de69ad
 800130c:	40242e8a 	.word	0x40242e8a
 8001310:	e6080735 	.word	0xe6080735
 8001314:	3fabf1e8 	.word	0x3fabf1e8
 8001318:	5c28f5c3 	.word	0x5c28f5c3
 800131c:	3ff1c28f 	.word	0x3ff1c28f
 8001320:	00000000 	.word	0x00000000
 8001324:	40affe00 	.word	0x40affe00
 8001328:	00000000 	.word	0x00000000
 800132c:	40a9c800 	.word	0x40a9c800
 8001330:	20000000 	.word	0x20000000
 8001334:	20000258 	.word	0x20000258
 8001338:	20000248 	.word	0x20000248
 800133c:	20000238 	.word	0x20000238
 8001340:	20000220 	.word	0x20000220
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004
 800134c:	2000000c 	.word	0x2000000c
 8001350:	40000800 	.word	0x40000800
 8001354:	200000b4 	.word	0x200000b4
 8001358:	20000228 	.word	0x20000228
 800135c:	20000250 	.word	0x20000250

08001360 <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief  Period elapsed callback.
  * @retval none
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b090      	sub	sp, #64	; 0x40
 8001364:	af04      	add	r7, sp, #16
 8001366:	6078      	str	r0, [r7, #4]
	/* TIM CALLBACK CODE */
	if (htim == tim_oled){
 8001368:	4b9d      	ldr	r3, [pc, #628]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	d152      	bne.n	8001418 <HAL_TIM_PeriodElapsedCallback+0xb8>
		SSD1306_Putint(ssd1306_1, i_set, MA, 1);
 8001372:	4b9c      	ldr	r3, [pc, #624]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001374:	681d      	ldr	r5, [r3, #0]
 8001376:	4b9c      	ldr	r3, [pc, #624]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001378:	cb18      	ldmia	r3, {r3, r4}
 800137a:	4618      	mov	r0, r3
 800137c:	4621      	mov	r1, r4
 800137e:	f7ff fb53 	bl	8000a28 <__aeabi_d2iz>
 8001382:	4601      	mov	r1, r0
 8001384:	2301      	movs	r3, #1
 8001386:	4a99      	ldr	r2, [pc, #612]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001388:	4628      	mov	r0, r5
 800138a:	f000 fe17 	bl	8001fbc <SSD1306_Putint>
		SSD1306_Putint(ssd1306_1, i_load, MA, 2);
 800138e:	4b95      	ldr	r3, [pc, #596]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001390:	681d      	ldr	r5, [r3, #0]
 8001392:	4b97      	ldr	r3, [pc, #604]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001394:	cb18      	ldmia	r3, {r3, r4}
 8001396:	4618      	mov	r0, r3
 8001398:	4621      	mov	r1, r4
 800139a:	f7ff fb45 	bl	8000a28 <__aeabi_d2iz>
 800139e:	4601      	mov	r1, r0
 80013a0:	2302      	movs	r3, #2
 80013a2:	4a92      	ldr	r2, [pc, #584]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80013a4:	4628      	mov	r0, r5
 80013a6:	f000 fe09 	bl	8001fbc <SSD1306_Putint>
		SSD1306_Putdouble(ssd1306_1, i_load*v_load/1000, 2, " W", 3);
 80013aa:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013ac:	681d      	ldr	r5, [r3, #0]
 80013ae:	4b90      	ldr	r3, [pc, #576]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80013b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b4:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80013b6:	cb18      	ldmia	r3, {r3, r4}
 80013b8:	461a      	mov	r2, r3
 80013ba:	4623      	mov	r3, r4
 80013bc:	f7ff f884 	bl	80004c8 <__aeabi_dmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	4618      	mov	r0, r3
 80013c6:	4621      	mov	r1, r4
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b8a      	ldr	r3, [pc, #552]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80013ce:	f7ff f9a5 	bl	800071c <__aeabi_ddiv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	4619      	mov	r1, r3
 80013d8:	4622      	mov	r2, r4
 80013da:	2303      	movs	r3, #3
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	4b87      	ldr	r3, [pc, #540]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2302      	movs	r3, #2
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4613      	mov	r3, r2
 80013e8:	460a      	mov	r2, r1
 80013ea:	4628      	mov	r0, r5
 80013ec:	f000 ff26 	bl	800223c <SSD1306_Putdouble>
		SSD1306_Putdouble(ssd1306_1, v_load, 2, V, 4);
 80013f0:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	4b7f      	ldr	r3, [pc, #508]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80013f6:	cb18      	ldmia	r3, {r3, r4}
 80013f8:	2204      	movs	r2, #4
 80013fa:	9202      	str	r2, [sp, #8]
 80013fc:	4a80      	ldr	r2, [pc, #512]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013fe:	9201      	str	r2, [sp, #4]
 8001400:	2202      	movs	r2, #2
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4623      	mov	r3, r4
 8001408:	4608      	mov	r0, r1
 800140a:	f000 ff17 	bl	800223c <SSD1306_Putdouble>
//		SSD1306_Putint(ssd1306_1, v_sens, MV, 5);
		SSD1306_UpdateScreen(ssd1306_1);
 800140e:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fc05 	bl	8001c22 <SSD1306_UpdateScreen>
	}
	if (htim == tim_sense){
 8001418:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	f040 80cc 	bne.w	80015bc <HAL_TIM_PeriodElapsedCallback+0x25c>
		static uint8_t index_adc = 0 ;
		v_amplified[index_adc] = ads_read(ads_1, 5, 1);
 8001424:	4b78      	ldr	r3, [pc, #480]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	2105      	movs	r1, #5
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe5d 	bl	80010ec <ads_read>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b75      	ldr	r3, [pc, #468]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461d      	mov	r5, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7fe ffc9 	bl	80003d4 <__aeabi_ui2d>
 8001442:	4603      	mov	r3, r0
 8001444:	460c      	mov	r4, r1
 8001446:	4972      	ldr	r1, [pc, #456]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001448:	00ea      	lsls	r2, r5, #3
 800144a:	440a      	add	r2, r1
 800144c:	e9c2 3400 	strd	r3, r4, [r2]
		v_load_array[index_adc] = ads_read(ads_2, 4, 0);
 8001450:	4b70      	ldr	r3, [pc, #448]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	2104      	movs	r1, #4
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fe47 	bl	80010ec <ads_read>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b6a      	ldr	r3, [pc, #424]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461d      	mov	r5, r3
 8001468:	4610      	mov	r0, r2
 800146a:	f7fe ffb3 	bl	80003d4 <__aeabi_ui2d>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	4969      	ldr	r1, [pc, #420]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001474:	00ea      	lsls	r2, r5, #3
 8001476:	440a      	add	r2, r1
 8001478:	e9c2 3400 	strd	r3, r4, [r2]
		index_adc++;
 800147c:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b61      	ldr	r3, [pc, #388]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001486:	701a      	strb	r2, [r3, #0]

		if (index_adc == 40){
 8001488:	4b60      	ldr	r3, [pc, #384]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b28      	cmp	r3, #40	; 0x28
 800148e:	f040 8095 	bne.w	80015bc <HAL_TIM_PeriodElapsedCallback+0x25c>
			double mean_i = 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f04f 0400 	mov.w	r4, #0
 800149a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			double mean_v = 0;
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	f04f 0400 	mov.w	r4, #0
 80014a6:	e9c7 3408 	strd	r3, r4, [r7, #32]
			for(uint8_t i=0;i<40;i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	77fb      	strb	r3, [r7, #31]
 80014ae:	e020      	b.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x192>
				mean_i += v_amplified[i];
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	4a57      	ldr	r2, [pc, #348]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	cb18      	ldmia	r3, {r3, r4}
 80014ba:	461a      	mov	r2, r3
 80014bc:	4623      	mov	r3, r4
 80014be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014c2:	f7fe fe4b 	bl	800015c <__adddf3>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
				mean_v += v_load_array[i];
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	4a51      	ldr	r2, [pc, #324]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	cb18      	ldmia	r3, {r3, r4}
 80014d8:	461a      	mov	r2, r3
 80014da:	4623      	mov	r3, r4
 80014dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014e0:	f7fe fe3c 	bl	800015c <__adddf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
			for(uint8_t i=0;i<40;i++){
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
 80014ee:	3301      	adds	r3, #1
 80014f0:	77fb      	strb	r3, [r7, #31]
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	2b27      	cmp	r3, #39	; 0x27
 80014f6:	d9db      	bls.n	80014b0 <HAL_TIM_PeriodElapsedCallback+0x150>
			}
			double v_amp_mean = mean_i/40*1.13;
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80014fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001502:	f7ff f90b 	bl	800071c <__aeabi_ddiv>
 8001506:	4603      	mov	r3, r0
 8001508:	460c      	mov	r4, r1
 800150a:	4618      	mov	r0, r3
 800150c:	4621      	mov	r1, r4
 800150e:	a32e      	add	r3, pc, #184	; (adr r3, 80015c8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7fe ffd8 	bl	80004c8 <__aeabi_dmul>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	e9c7 3404 	strd	r3, r4, [r7, #16]
			double v_sens = v_amp_mean/gain_sens;
 8001520:	a42b      	add	r4, pc, #172	; (adr r4, 80015d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001522:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001526:	461a      	mov	r2, r3
 8001528:	4623      	mov	r3, r4
 800152a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800152e:	f7ff f8f5 	bl	800071c <__aeabi_ddiv>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	e9c7 3402 	strd	r3, r4, [r7, #8]
			i_load = v_sens/rsens;
 800153a:	a427      	add	r4, pc, #156	; (adr r4, 80015d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800153c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001548:	f7ff f8e8 	bl	800071c <__aeabi_ddiv>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001552:	e9c2 3400 	strd	r3, r4, [r2]
			if (i_load < 100){
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001562:	f7ff fa23 	bl	80009ac <__aeabi_dcmplt>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_TIM_PeriodElapsedCallback+0x21a>
				i_load = 0;
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f04f 0400 	mov.w	r4, #0
 8001576:	e9c2 3400 	strd	r3, r4, [r2]
			}
			v_load = (mean_v/40)*6/1000;
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001580:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001584:	f7ff f8ca 	bl	800071c <__aeabi_ddiv>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001596:	f7fe ff97 	bl	80004c8 <__aeabi_dmul>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015a8:	f7ff f8b8 	bl	800071c <__aeabi_ddiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	460c      	mov	r4, r1
 80015b0:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015b2:	e9c2 3400 	strd	r3, r4, [r2]
			index_adc = 0;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	f3af 8000 	nop.w
 80015c8:	e147ae14 	.word	0xe147ae14
 80015cc:	3ff2147a 	.word	0x3ff2147a
 80015d0:	ecbfb15b 	.word	0xecbfb15b
 80015d4:	4026bc9e 	.word	0x4026bc9e
 80015d8:	e6080735 	.word	0xe6080735
 80015dc:	3fabf1e8 	.word	0x3fabf1e8
 80015e0:	20000004 	.word	0x20000004
 80015e4:	20000220 	.word	0x20000220
 80015e8:	20000228 	.word	0x20000228
 80015ec:	08006fe0 	.word	0x08006fe0
 80015f0:	20000240 	.word	0x20000240
 80015f4:	20000230 	.word	0x20000230
 80015f8:	408f4000 	.word	0x408f4000
 80015fc:	08006fe4 	.word	0x08006fe4
 8001600:	08006fe8 	.word	0x08006fe8
 8001604:	20000008 	.word	0x20000008
 8001608:	20000248 	.word	0x20000248
 800160c:	200000b6 	.word	0x200000b6
 8001610:	20000260 	.word	0x20000260
 8001614:	20000238 	.word	0x20000238
 8001618:	200000e0 	.word	0x200000e0
 800161c:	40440000 	.word	0x40440000
 8001620:	40590000 	.word	0x40590000
 8001624:	40180000 	.word	0x40180000

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162c:	f001 f902 	bl	8002834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f80d 	bl	800164e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001634:	f000 f96c 	bl	8001910 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001638:	f000 f84e 	bl	80016d8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800163c:	f000 f87a 	bl	8001734 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001640:	f000 f8c4 	bl	80017cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001644:	f000 f910 	bl	8001868 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 8001648:	f7ff fdaa 	bl	80011a0 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800164c:	e7fe      	b.n	800164c <main+0x24>

0800164e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b090      	sub	sp, #64	; 0x40
 8001652:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	2228      	movs	r2, #40	; 0x28
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fcf5 	bl	800504c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167e:	2301      	movs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800168c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fc36 	bl	8003f08 <HAL_RCC_OscConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016a2:	f000 f985 	bl	80019b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
 80016a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2302      	movs	r3, #2
 80016ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2102      	movs	r1, #2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fea1 	bl	8004408 <HAL_RCC_ClockConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016cc:	f000 f970 	bl	80019b0 <Error_Handler>
  }
}
 80016d0:	bf00      	nop
 80016d2:	3740      	adds	r7, #64	; 0x40
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_I2C1_Init+0x50>)
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <MX_I2C1_Init+0x54>)
 80016e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_I2C1_Init+0x50>)
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_I2C1_Init+0x58>)
 80016e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_I2C1_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_I2C1_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_I2C1_Init+0x50>)
 80016f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_I2C1_Init+0x50>)
 8001716:	f001 fb79 	bl	8002e0c <HAL_I2C_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001720:	f000 f946 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200003e0 	.word	0x200003e0
 800172c:	40005400 	.word	0x40005400
 8001730:	00061a80 	.word	0x00061a80

08001734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_TIM2_Init+0x94>)
 800175a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800175e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001768:	22c7      	movs	r2, #199	; 0xc7
 800176a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_TIM2_Init+0x94>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001778:	4813      	ldr	r0, [pc, #76]	; (80017c8 <MX_TIM2_Init+0x94>)
 800177a:	f002 ffcd 	bl	8004718 <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001784:	f000 f914 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001796:	f003 f9da 	bl	8004b4e <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017a0:	f000 f906 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM2_Init+0x94>)
 80017b2:	f003 fbc3 	bl	8004f3c <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017bc:	f000 f8f8 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000474 	.word	0x20000474

080017cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM3_Init+0x94>)
 80017ea:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <MX_TIM3_Init+0x98>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM3_Init+0x94>)
 80017f0:	2263      	movs	r2, #99	; 0x63
 80017f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM3_Init+0x94>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2879;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_TIM3_Init+0x94>)
 80017fc:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001800:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_TIM3_Init+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_TIM3_Init+0x94>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <MX_TIM3_Init+0x94>)
 8001810:	f002 ff82 	bl	8004718 <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800181a:	f000 f8c9 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_TIM3_Init+0x94>)
 800182c:	f003 f98f 	bl	8004b4e <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001836:	f000 f8bb 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001842:	463b      	mov	r3, r7
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_TIM3_Init+0x94>)
 8001848:	f003 fb78 	bl	8004f3c <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001852:	f000 f8ad 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000434 	.word	0x20000434
 8001864:	40000400 	.word	0x40000400

08001868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fbe8 	bl	800504c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_TIM4_Init+0xa0>)
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <MX_TIM4_Init+0xa4>)
 8001888:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_TIM4_Init+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_TIM4_Init+0xa0>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <MX_TIM4_Init+0xa0>)
 8001898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018aa:	2303      	movs	r3, #3
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c2:	2301      	movs	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018d6:	f002 ff6d 	bl	80047b4 <HAL_TIM_Encoder_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80018e0:	f000 f866 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018f2:	f003 fb23 	bl	8004f3c <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80018fc:	f000 f858 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200003a0 	.word	0x200003a0
 800190c:	40000800 	.word	0x40000800

08001910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <MX_GPIO_Init+0x98>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <MX_GPIO_Init+0x98>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_GPIO_Init+0x98>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_GPIO_Init+0x98>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <MX_GPIO_Init+0x98>)
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_GPIO_Init+0x98>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_GPIO_Init+0x98>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <MX_GPIO_Init+0x98>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_GPIO_Init+0x98>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_GPIO_Init+0x98>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <MX_GPIO_Init+0x98>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_GPIO_Init+0x98>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	4619      	mov	r1, r3
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_GPIO_Init+0x9c>)
 800199a:	f001 f8dd 	bl	8002b58 <HAL_GPIO_Init>

}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40011000 	.word	0x40011000

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <mcp_new>:
 * @brief  Creates new mcp_t variable corresponding to a mcp module
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval mcp_t variable corresponding to the mcp module
 */
mcp_t* mcp_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	mcp_t* mcp = malloc(sizeof(*mcp));
 80019c8:	200c      	movs	r0, #12
 80019ca:	f003 fb37 	bl	800503c <malloc>
 80019ce:	4603      	mov	r3, r0
 80019d0:	60fb      	str	r3, [r7, #12]
	mcp_init(mcp, hi2c, addr);
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	461a      	mov	r2, r3
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f805 	bl	80019e8 <mcp_init>
	return mcp;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <mcp_init>:
 * @param  *mcp: mcp variable corresponding to the module targeted
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval None
 */
void mcp_init(mcp_t *mcp, I2C_HandleTypeDef *hi2c, uint8_t addr){
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	71fb      	strb	r3, [r7, #7]
	mcp->hi2c = hi2c;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	605a      	str	r2, [r3, #4]
	mcp->addr = addr;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	701a      	strb	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <mcp_write>:
 * @brief  Writes a value on the mcp4725 DAC module
 * @param  value: From 0 to 4095 (12 bits) value to be written on the DAC
 * @param  eeprom: If 1, saves the value on eeprom (persistence after reset)
 * @retval None
 */
void mcp_write(mcp_t *mcp, uint16_t value, uint8_t eeprom){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
	if (eeprom == 1) {
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d103      	bne.n	8001a2a <mcp_write+0x1e>
		mcp->buffer[0] = 0x60;	} // Persists after reset
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2260      	movs	r2, #96	; 0x60
 8001a26:	721a      	strb	r2, [r3, #8]
 8001a28:	e002      	b.n	8001a30 <mcp_write+0x24>
	else {
		mcp->buffer[0] = 0x40;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	721a      	strb	r2, [r3, #8]
	}
	mcp->buffer[1] = (value / 16);       // Upper data bits     (D11.D10.D9.D8.D7.D6.D5.D4)
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	725a      	strb	r2, [r3, #9]
	mcp->buffer[2] = (value % 16) << 4;  // Lower data bits     (D3.D2.D1.D0.x.x.x.x)
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	729a      	strb	r2, [r3, #10]
	HAL_I2C_Master_Transmit(mcp->hi2c, mcp->addr, mcp->buffer, sizeof(mcp->buffer), 1000);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6858      	ldr	r0, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f103 0208 	add.w	r2, r3, #8
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	f001 fafd 	bl	800305c <HAL_I2C_Master_Transmit>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <ssd1306_new>:
#include "ssd1306_basic.h"

/* SSD1306 data buffer */
//static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

ssd1306_t* ssd1306_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70fb      	strb	r3, [r7, #3]
	ssd1306_t* ssd1306 = malloc(sizeof(*ssd1306));
 8001a76:	f44f 6086 	mov.w	r0, #1072	; 0x430
 8001a7a:	f003 fadf 	bl	800503c <malloc>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]
	SSD1306_Init(ssd1306, hi2c, addr);
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	461a      	mov	r2, r3
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f805 	bl	8001a98 <SSD1306_Init>
	return ssd1306;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <SSD1306_Init>:

uint8_t SSD1306_Init(ssd1306_t* ssd1306, I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	71fb      	strb	r3, [r7, #7]

	ssd1306->hi2c = hi2c;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	605a      	str	r2, [r3, #4]
	ssd1306->addr = addr;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	79fa      	ldrb	r2, [r7, #7]
 8001ab0:	701a      	strb	r2, [r3, #0]
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306->hi2c, ssd1306->addr, 1, 20000) != HAL_OK) {
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6858      	ldr	r0, [r3, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b299      	uxth	r1, r3
 8001abc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f001 fdf7 	bl	80036b4 <HAL_I2C_IsDeviceReady>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SSD1306_Init+0x38>
		/* Return false */
		return 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e0a4      	b.n	8001c1a <SSD1306_Init+0x182>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;
	
	/* Init LCD */
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE);
 8001ad0:	22ae      	movs	r2, #174	; 0xae
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fccc 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE); //display off
 8001ada:	22ae      	movs	r2, #174	; 0xae
 8001adc:	2100      	movs	r1, #0
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fcc7 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //Set Memory Addressing Mode
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fcc2 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001aee:	2210      	movs	r2, #16
 8001af0:	2100      	movs	r1, #0
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 fcbd 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001af8:	22b0      	movs	r2, #176	; 0xb0
 8001afa:	2100      	movs	r1, #0
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fcb8 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xC8); //Set COM Output Scan Direction
 8001b02:	22c8      	movs	r2, #200	; 0xc8
 8001b04:	2100      	movs	r1, #0
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fcb3 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //---set low column address
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fcae 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //---set high column address
 8001b16:	2210      	movs	r2, #16
 8001b18:	2100      	movs	r1, #0
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fca9 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x40); //--set start line address
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	2100      	movs	r1, #0
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fca4 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x81); //--set contrast control register
 8001b2a:	2281      	movs	r2, #129	; 0x81
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fc9f 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xFF);
 8001b34:	22ff      	movs	r2, #255	; 0xff
 8001b36:	2100      	movs	r1, #0
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fc9a 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA1); //--set segment re-map 0 to 127
 8001b3e:	22a1      	movs	r2, #161	; 0xa1
 8001b40:	2100      	movs	r1, #0
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 fc95 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA6); //--set normal display
 8001b48:	22a6      	movs	r2, #166	; 0xa6
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fc90 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 8001b52:	22a8      	movs	r2, #168	; 0xa8
 8001b54:	2100      	movs	r1, #0
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fc8b 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x3F); //
 8001b5c:	223f      	movs	r2, #63	; 0x3f
 8001b5e:	2100      	movs	r1, #0
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fc86 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b66:	22a4      	movs	r2, #164	; 0xa4
 8001b68:	2100      	movs	r1, #0
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fc81 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD3); //-set display offset
 8001b70:	22d3      	movs	r2, #211	; 0xd3
 8001b72:	2100      	movs	r1, #0
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fc7c 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //-not offset
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fc77 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 8001b84:	22d5      	movs	r2, #213	; 0xd5
 8001b86:	2100      	movs	r1, #0
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fc72 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xF0); //--set divide ratio
 8001b8e:	22f0      	movs	r2, #240	; 0xf0
 8001b90:	2100      	movs	r1, #0
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fc6d 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD9); //--set pre-charge period
 8001b98:	22d9      	movs	r2, #217	; 0xd9
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 fc68 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x22); //
 8001ba2:	2222      	movs	r2, #34	; 0x22
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fc63 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDA); //--set com pins hardware configuration
 8001bac:	22da      	movs	r2, #218	; 0xda
 8001bae:	2100      	movs	r1, #0
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fc5e 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x12);
 8001bb6:	2212      	movs	r2, #18
 8001bb8:	2100      	movs	r1, #0
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fc59 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDB); //--set vcomh
 8001bc0:	22db      	movs	r2, #219	; 0xdb
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fc54 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //0x20,0.77xVcc
 8001bca:	2220      	movs	r2, #32
 8001bcc:	2100      	movs	r1, #0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fc4f 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x8D); //--set DC-DC enable
 8001bd4:	228d      	movs	r2, #141	; 0x8d
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fc4a 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x14); //
 8001bde:	2214      	movs	r2, #20
 8001be0:	2100      	movs	r1, #0
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fc45 	bl	8002472 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAF); //--turn on SSD1306 panel
 8001be8:	22af      	movs	r2, #175	; 0xaf
 8001bea:	2100      	movs	r1, #0
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fc40 	bl	8002472 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(ssd1306, SSD1306_COLOR_BLACK);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f845 	bl	8001c84 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(ssd1306);
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f811 	bl	8001c22 <SSD1306_UpdateScreen>
	
	/* Set default values */
	ssd1306->CurrentX = 0;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = 0;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	815a      	strh	r2, [r3, #10]
	
	/* Initialized OK */
	ssd1306->Initialized = 1;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	735a      	strb	r2, [r3, #13]
	ssd1306->Inverted= 0;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	731a      	strb	r2, [r3, #12]
	
	/* Return OK */
	return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(ssd1306_t* ssd1306) {
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e022      	b.n	8001c76 <SSD1306_UpdateScreen+0x54>
		ssd1306_I2C_Write(ssd1306, 0x00, 0xB0 + m);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3b50      	subs	r3, #80	; 0x50
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	2100      	movs	r1, #0
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fc19 	bl	8002472 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x00);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fc14 	bl	8002472 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x10);
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fc0f 	bl	8002472 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(ssd1306, 0x40, &ssd1306->SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	4613      	mov	r3, r2
 8001c58:	015b      	lsls	r3, r3, #5
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3308      	adds	r3, #8
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	1d9a      	adds	r2, r3, #6
 8001c66:	2384      	movs	r3, #132	; 0x84
 8001c68:	2140      	movs	r1, #64	; 0x40
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fba9 	bl	80023c2 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	3301      	adds	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	d9d9      	bls.n	8001c30 <SSD1306_UpdateScreen+0xe>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <SSD1306_Fill>:

void SSD1306_Fill(ssd1306_t* ssd1306, SSD1306_COLOR_t color) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(ssd1306->SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(ssd1306->SSD1306_Buffer));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f103 000e 	add.w	r0, r3, #14
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <SSD1306_Fill+0x1c>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <SSD1306_Fill+0x1e>
 8001ca0:	23ff      	movs	r3, #255	; 0xff
 8001ca2:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f003 f9d0 	bl	800504c <memset>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(ssd1306_t* ssd1306, uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001cb4:	b490      	push	{r4, r7}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	817b      	strh	r3, [r7, #10]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	813b      	strh	r3, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
	if (
 8001cce:	897b      	ldrh	r3, [r7, #10]
 8001cd0:	2b83      	cmp	r3, #131	; 0x83
 8001cd2:	d85a      	bhi.n	8001d8a <SSD1306_DrawPixel+0xd6>
		x >= SSD1306_WIDTH ||
 8001cd4:	893b      	ldrh	r3, [r7, #8]
 8001cd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001cd8:	d857      	bhi.n	8001d8a <SSD1306_DrawPixel+0xd6>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (ssd1306->Inverted) {
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	7b1b      	ldrb	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <SSD1306_DrawPixel+0x3c>
		color = (SSD1306_COLOR_t)!color;
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	71fb      	strb	r3, [r7, #7]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d123      	bne.n	8001d3e <SSD1306_DrawPixel+0x8a>
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cf6:	897a      	ldrh	r2, [r7, #10]
 8001cf8:	893b      	ldrh	r3, [r7, #8]
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	b298      	uxth	r0, r3
 8001cfe:	4601      	mov	r1, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	015b      	lsls	r3, r3, #5
 8001d04:	440b      	add	r3, r1
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	7b9b      	ldrb	r3, [r3, #14]
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	893b      	ldrh	r3, [r7, #8]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b25c      	sxtb	r4, r3
 8001d24:	897a      	ldrh	r2, [r7, #10]
 8001d26:	4601      	mov	r1, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	440b      	add	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	b2e1      	uxtb	r1, r4
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	460a      	mov	r2, r1
 8001d3a:	739a      	strb	r2, [r3, #14]
 8001d3c:	e026      	b.n	8001d8c <SSD1306_DrawPixel+0xd8>
	} else {
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d3e:	897a      	ldrh	r2, [r7, #10]
 8001d40:	893b      	ldrh	r3, [r7, #8]
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	b298      	uxth	r0, r3
 8001d46:	4601      	mov	r1, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	015b      	lsls	r3, r3, #5
 8001d4c:	440b      	add	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	7b9b      	ldrb	r3, [r3, #14]
 8001d58:	b25a      	sxtb	r2, r3
 8001d5a:	893b      	ldrh	r3, [r7, #8]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	b25c      	sxtb	r4, r3
 8001d70:	897a      	ldrh	r2, [r7, #10]
 8001d72:	4601      	mov	r1, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	015b      	lsls	r3, r3, #5
 8001d78:	440b      	add	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b2e1      	uxtb	r1, r4
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	739a      	strb	r2, [r3, #14]
 8001d88:	e000      	b.n	8001d8c <SSD1306_DrawPixel+0xd8>
		return;
 8001d8a:	bf00      	nop
	}
}
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc90      	pop	{r4, r7}
 8001d92:	4770      	bx	lr

08001d94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(ssd1306_t* ssd1306, uint16_t x, uint16_t y) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	ssd1306->CurrentX = x;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = y;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	883a      	ldrh	r2, [r7, #0]
 8001dae:	815a      	strh	r2, [r3, #10]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <SSD1306_Putc>:

char SSD1306_Putc(ssd1306_t* ssd1306, uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b088      	sub	sp, #32
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	72fb      	strb	r3, [r7, #11]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	891b      	ldrh	r3, [r3, #8]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4413      	add	r3, r2
	if (
 8001dda:	2b83      	cmp	r3, #131	; 0x83
 8001ddc:	dc07      	bgt.n	8001dee <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (ssd1306->CurrentY + Font->FontHeight)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	895b      	ldrh	r3, [r3, #10]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	4413      	add	r3, r2
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8001dea:	2b3f      	cmp	r3, #63	; 0x3f
 8001dec:	dd01      	ble.n	8001df2 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e05e      	b.n	8001eb0 <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e04b      	b.n	8001e90 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	3b20      	subs	r3, #32
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	7849      	ldrb	r1, [r1, #1]
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4619      	mov	r1, r3
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	440b      	add	r3, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	e030      	b.n	8001e7e <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t) color);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	891a      	ldrh	r2, [r3, #8]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	b299      	uxth	r1, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	895a      	ldrh	r2, [r3, #10]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	7abb      	ldrb	r3, [r7, #10]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff ff34 	bl	8001cb4 <SSD1306_DrawPixel>
 8001e4c:	e014      	b.n	8001e78 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	891a      	ldrh	r2, [r3, #8]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	895a      	ldrh	r2, [r3, #10]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	7abb      	ldrb	r3, [r7, #10]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff ff1e 	bl	8001cb4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d3c8      	bcc.n	8001e1c <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	785b      	ldrb	r3, [r3, #1]
 8001e94:	461a      	mov	r2, r3
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d3ad      	bcc.n	8001df8 <SSD1306_Putc+0x3e>
			}
		}
	}
	
	/* Increase pointer */
	ssd1306->CurrentX += Font->FontWidth;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	891a      	ldrh	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	811a      	strh	r2, [r3, #8]
	
	/* Return character written */
	return ch;
 8001eae:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <int_str>:
 * @brief  Represents an integer number with a char array
 * @param  integer: int to be represented
 * @param  unit: unit of the value, 2 char array ("mV", " A", etc.)
 * @retval Char array containing a char for each digit
 */
char* int_str(int integer,  char* unit){
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	466b      	mov	r3, sp
 8001ec4:	461d      	mov	r5, r3
	char negative = ' ';
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	76fb      	strb	r3, [r7, #27]
	if (integer < 0) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da04      	bge.n	8001eda <int_str+0x22>
		integer = -integer;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	607b      	str	r3, [r7, #4]
		negative = '-';
 8001ed6:	232d      	movs	r3, #45	; 0x2d
 8001ed8:	76fb      	strb	r3, [r7, #27]
	}

	int size = SSD1306_digits(integer);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fa1e 	bl	800231c <SSD1306_digits>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	617b      	str	r3, [r7, #20]
	if (size > 7){
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	dd01      	ble.n	8001eee <int_str+0x36>
			return "OVERLOAD";
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <int_str+0xf8>)
 8001eec:	e05b      	b.n	8001fa6 <int_str+0xee>
	}
	char data_char[size];
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	1e43      	subs	r3, r0, #1
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	f04f 0400 	mov.w	r4, #0
 8001f04:	00d4      	lsls	r4, r2, #3
 8001f06:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f0a:	00cb      	lsls	r3, r1, #3
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	f04f 0400 	mov.w	r4, #0
 8001f1c:	00d4      	lsls	r4, r2, #3
 8001f1e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f22:	00cb      	lsls	r3, r1, #3
 8001f24:	4603      	mov	r3, r0
 8001f26:	3307      	adds	r3, #7
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	ebad 0d03 	sub.w	sp, sp, r3
 8001f30:	466b      	mov	r3, sp
 8001f32:	3300      	adds	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
	sprintf(data_char,"%d", integer);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	491e      	ldr	r1, [pc, #120]	; (8001fb4 <int_str+0xfc>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 f943 	bl	80051c8 <siprintf>

	static char int_str[11];
	for(int i=1; i<11; i++){
 8001f42:	2301      	movs	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e024      	b.n	8001f92 <int_str+0xda>
		if (i<size+1){
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	da09      	bge.n	8001f66 <int_str+0xae>
			int_str[i] = data_char[i-1];
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	5cd1      	ldrb	r1, [r2, r3]
 8001f5a:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <int_str+0x100>)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	460a      	mov	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e012      	b.n	8001f8c <int_str+0xd4>
		} else if (i < 9){
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	dc05      	bgt.n	8001f78 <int_str+0xc0>
			int_str[i] = ' ';
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <int_str+0x100>)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	2220      	movs	r2, #32
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e009      	b.n	8001f8c <int_str+0xd4>
		} else {
			int_str[i] = unit[i-9];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3b09      	subs	r3, #9
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	7819      	ldrb	r1, [r3, #0]
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <int_str+0x100>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	460a      	mov	r2, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<11; i++){
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b0a      	cmp	r3, #10
 8001f96:	ddd7      	ble.n	8001f48 <int_str+0x90>
		}
	}
	int_str[0] = negative;
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <int_str+0x100>)
 8001f9a:	7efb      	ldrb	r3, [r7, #27]
 8001f9c:	7013      	strb	r3, [r2, #0]
	int_str[8] = ' ';
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <int_str+0x100>)
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	721a      	strb	r2, [r3, #8]
	return int_str;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <int_str+0x100>)
 8001fa6:	46ad      	mov	sp, r5
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	08006fec 	.word	0x08006fec
 8001fb4:	08006ff8 	.word	0x08006ff8
 8001fb8:	200000b8 	.word	0x200000b8

08001fbc <SSD1306_Putint>:
 * @note   @ref If the number has mora than 6 digits, displays OVERLOAD
 * @param  data: integer to be written
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @param  slot: slot to be used. 1, 2, and 3 are large slots. 4 and 5 are small slots
 */
void SSD1306_Putint(ssd1306_t* ssd1306, int data, char* unit, uint8_t slot) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	70fb      	strb	r3, [r7, #3]

	char* integer_str = int_str(data, unit);
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68b8      	ldr	r0, [r7, #8]
 8001fce:	f7ff ff73 	bl	8001eb8 <int_str>
 8001fd2:	61b8      	str	r0, [r7, #24]
	uint16_t x_slot = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	83fb      	strh	r3, [r7, #30]
	uint16_t y_slot = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	83bb      	strh	r3, [r7, #28]
	FontDef_t font = Font_11x18;
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <SSD1306_Putint+0xcc>)
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe6:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (slot) {
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d82b      	bhi.n	800204a <SSD1306_Putint+0x8e>
 8001ff2:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <SSD1306_Putint+0x3c>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	0800200d 	.word	0x0800200d
 8001ffc:	08002013 	.word	0x08002013
 8002000:	08002019 	.word	0x08002019
 8002004:	0800201f 	.word	0x0800201f
 8002008:	08002033 	.word	0x08002033
	case 1:
		y_slot = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	83bb      	strh	r3, [r7, #28]
		break;
 8002010:	e01b      	b.n	800204a <SSD1306_Putint+0x8e>
	case 2:
		y_slot = 17;
 8002012:	2311      	movs	r3, #17
 8002014:	83bb      	strh	r3, [r7, #28]
		break;
 8002016:	e018      	b.n	800204a <SSD1306_Putint+0x8e>
	case 3:
		y_slot = 34;
 8002018:	2322      	movs	r3, #34	; 0x22
 800201a:	83bb      	strh	r3, [r7, #28]
		break;
 800201c:	e015      	b.n	800204a <SSD1306_Putint+0x8e>
	case 4:
		y_slot = 53;
 800201e:	2335      	movs	r3, #53	; 0x35
 8002020:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 8002022:	4a1a      	ldr	r2, [pc, #104]	; (800208c <SSD1306_Putint+0xd0>)
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800202c:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002030:	e00b      	b.n	800204a <SSD1306_Putint+0x8e>
	case 5:
		x_slot = 65;
 8002032:	2341      	movs	r3, #65	; 0x41
 8002034:	83fb      	strh	r3, [r7, #30]
		y_slot = 53;
 8002036:	2335      	movs	r3, #53	; 0x35
 8002038:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 800203a:	4a14      	ldr	r2, [pc, #80]	; (800208c <SSD1306_Putint+0xd0>)
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002044:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002048:	bf00      	nop
	}
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 800204a:	8bba      	ldrh	r2, [r7, #28]
 800204c:	8bfb      	ldrh	r3, [r7, #30]
 800204e:	4619      	mov	r1, r3
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fe9f 	bl	8001d94 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &font, 1);
 8002056:	f107 0210 	add.w	r2, r7, #16
 800205a:	2301      	movs	r3, #1
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <SSD1306_Putint+0xd4>)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f98a 	bl	8002378 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 8002064:	8bba      	ldrh	r2, [r7, #28]
 8002066:	8bfb      	ldrh	r3, [r7, #30]
 8002068:	4619      	mov	r1, r3
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff fe92 	bl	8001d94 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, integer_str, &font, 1);
 8002070:	f107 0210 	add.w	r2, r7, #16
 8002074:	2301      	movs	r3, #1
 8002076:	69b9      	ldr	r1, [r7, #24]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f97d 	bl	8002378 <SSD1306_Puts>
}
 800207e:	bf00      	nop
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000018 	.word	0x20000018
 800208c:	20000010 	.word	0x20000010
 8002090:	08006ffc 	.word	0x08006ffc

08002094 <double_str>:
 * @param  number: double to be represented
 * @param  decimals: number of decimals to be represented
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @retval Char array containing a char for each digit
 */
char* double_str(double number, uint8_t decimals, char* unit){
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	466b      	mov	r3, sp
 80020a6:	461d      	mov	r5, r3

	uint8_t negative = ' ';
 80020a8:	2320      	movs	r3, #32
 80020aa:	77bb      	strb	r3, [r7, #30]
	if (number < 0) {
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020b8:	f7fe fc78 	bl	80009ac <__aeabi_dcmplt>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <double_str+0x3e>
		number = -number;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	60fb      	str	r3, [r7, #12]
		negative = '-';
 80020ce:	232d      	movs	r3, #45	; 0x2d
 80020d0:	77bb      	strb	r3, [r7, #30]
	}

	number = round(number*pow(10, decimals));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f97d 	bl	80003d4 <__aeabi_ui2d>
 80020da:	4603      	mov	r3, r0
 80020dc:	460c      	mov	r4, r1
 80020de:	461a      	mov	r2, r3
 80020e0:	4623      	mov	r3, r4
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	4951      	ldr	r1, [pc, #324]	; (800222c <double_str+0x198>)
 80020e8:	f003 fd0e 	bl	8005b08 <pow>
 80020ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f0:	f7fe f9ea 	bl	80004c8 <__aeabi_dmul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	4618      	mov	r0, r3
 80020fa:	4621      	mov	r1, r4
 80020fc:	f003 fc44 	bl	8005988 <round>
 8002100:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint8_t size = SSD1306_digits(number);
 8002104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002108:	f7fe fc8e 	bl	8000a28 <__aeabi_d2iz>
 800210c:	4603      	mov	r3, r0
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f904 	bl	800231c <SSD1306_digits>
 8002114:	4603      	mov	r3, r0
 8002116:	777b      	strb	r3, [r7, #29]
	if (size > 6) {
 8002118:	7f7b      	ldrb	r3, [r7, #29]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d901      	bls.n	8002122 <double_str+0x8e>
		return "OVERLOAD";
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <double_str+0x19c>)
 8002120:	e07e      	b.n	8002220 <double_str+0x18c>
	}
	char data_char[size];
 8002122:	7f78      	ldrb	r0, [r7, #29]
 8002124:	4603      	mov	r3, r0
 8002126:	3b01      	subs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	b2c1      	uxtb	r1, r0
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f04f 0400 	mov.w	r4, #0
 8002138:	00d4      	lsls	r4, r2, #3
 800213a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800213e:	00cb      	lsls	r3, r1, #3
 8002140:	b2c1      	uxtb	r1, r0
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	f04f 0400 	mov.w	r4, #0
 800214e:	00d4      	lsls	r4, r2, #3
 8002150:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002154:	00cb      	lsls	r3, r1, #3
 8002156:	4603      	mov	r3, r0
 8002158:	3307      	adds	r3, #7
 800215a:	08db      	lsrs	r3, r3, #3
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	ebad 0d03 	sub.w	sp, sp, r3
 8002162:	466b      	mov	r3, sp
 8002164:	3300      	adds	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
	sprintf(data_char,"%d", (int)number);
 8002168:	697c      	ldr	r4, [r7, #20]
 800216a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800216e:	f7fe fc5b 	bl	8000a28 <__aeabi_d2iz>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	492f      	ldr	r1, [pc, #188]	; (8002234 <double_str+0x1a0>)
 8002178:	4620      	mov	r0, r4
 800217a:	f003 f825 	bl	80051c8 <siprintf>

	static char double_str[11];
	for(int8_t i=1; i<11; i++){
 800217e:	2301      	movs	r3, #1
 8002180:	77fb      	strb	r3, [r7, #31]
 8002182:	e03b      	b.n	80021fc <double_str+0x168>
		if (i < (size-decimals+1)){
 8002184:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002188:	7f79      	ldrb	r1, [r7, #29]
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	1acb      	subs	r3, r1, r3
 800218e:	3301      	adds	r3, #1
 8002190:	429a      	cmp	r2, r3
 8002192:	da09      	bge.n	80021a8 <double_str+0x114>
			double_str[i] = data_char[i-1];
 8002194:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800219e:	6979      	ldr	r1, [r7, #20]
 80021a0:	5c89      	ldrb	r1, [r1, r2]
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <double_str+0x1a4>)
 80021a4:	54d1      	strb	r1, [r2, r3]
 80021a6:	e023      	b.n	80021f0 <double_str+0x15c>
		} else if (i < size+2){
 80021a8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80021ac:	7f7b      	ldrb	r3, [r7, #29]
 80021ae:	3302      	adds	r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	da09      	bge.n	80021c8 <double_str+0x134>
			double_str[i] = data_char[i-2];
 80021b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021b8:	1e9a      	subs	r2, r3, #2
 80021ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021be:	6979      	ldr	r1, [r7, #20]
 80021c0:	5c89      	ldrb	r1, [r1, r2]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <double_str+0x1a4>)
 80021c4:	54d1      	strb	r1, [r2, r3]
 80021c6:	e013      	b.n	80021f0 <double_str+0x15c>
		} else if (i < 11-2){
 80021c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	dc05      	bgt.n	80021dc <double_str+0x148>
			double_str[i] = ' ';
 80021d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021d4:	4a18      	ldr	r2, [pc, #96]	; (8002238 <double_str+0x1a4>)
 80021d6:	2120      	movs	r1, #32
 80021d8:	54d1      	strb	r1, [r2, r3]
 80021da:	e009      	b.n	80021f0 <double_str+0x15c>
		} else {
			double_str[i] = unit[i-9];
 80021dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021e0:	3b09      	subs	r3, #9
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	441a      	add	r2, r3
 80021e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021ea:	7811      	ldrb	r1, [r2, #0]
 80021ec:	4a12      	ldr	r2, [pc, #72]	; (8002238 <double_str+0x1a4>)
 80021ee:	54d1      	strb	r1, [r2, r3]
	for(int8_t i=1; i<11; i++){
 80021f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	77fb      	strb	r3, [r7, #31]
 80021fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002200:	2b0a      	cmp	r3, #10
 8002202:	ddbf      	ble.n	8002184 <double_str+0xf0>
		}
	}
	double_str[0] = negative;
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <double_str+0x1a4>)
 8002206:	7fbb      	ldrb	r3, [r7, #30]
 8002208:	7013      	strb	r3, [r2, #0]
	double_str[size-decimals+1] = '.';
 800220a:	7f7a      	ldrb	r2, [r7, #29]
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	3301      	adds	r3, #1
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <double_str+0x1a4>)
 8002214:	212e      	movs	r1, #46	; 0x2e
 8002216:	54d1      	strb	r1, [r2, r3]
	double_str[8] = ' ';
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <double_str+0x1a4>)
 800221a:	2220      	movs	r2, #32
 800221c:	721a      	strb	r2, [r3, #8]
	return double_str;
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <double_str+0x1a4>)
 8002220:	46ad      	mov	sp, r5
}
 8002222:	4618      	mov	r0, r3
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bdb0      	pop	{r4, r5, r7, pc}
 800222a:	bf00      	nop
 800222c:	40240000 	.word	0x40240000
 8002230:	08006fec 	.word	0x08006fec
 8002234:	08006ff8 	.word	0x08006ff8
 8002238:	200000c4 	.word	0x200000c4

0800223c <SSD1306_Putdouble>:
 * @param  data: double to be written
 * @param  decimals: number of decimals to be represented
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @param  slot: slot to be used. 1, 2, and 3 are large slots. 4 and 5 are small slots
 */
void SSD1306_Putdouble(ssd1306_t* ssd1306, double data, uint8_t decimals, char* unit, uint8_t slot) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	e9c7 2300 	strd	r2, r3, [r7]
	char* float_str = double_str(data, decimals, unit);
 8002248:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002252:	f7ff ff1f 	bl	8002094 <double_str>
 8002256:	61b8      	str	r0, [r7, #24]

	uint16_t x_slot = 1;
 8002258:	2301      	movs	r3, #1
 800225a:	83fb      	strh	r3, [r7, #30]
	uint16_t y_slot = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	83bb      	strh	r3, [r7, #28]
	FontDef_t font = Font_11x18;
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <SSD1306_Putdouble+0xd4>)
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800226a:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (slot) {
 800226e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002272:	3b01      	subs	r3, #1
 8002274:	2b04      	cmp	r3, #4
 8002276:	d82c      	bhi.n	80022d2 <SSD1306_Putdouble+0x96>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <SSD1306_Putdouble+0x44>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	08002295 	.word	0x08002295
 8002284:	0800229b 	.word	0x0800229b
 8002288:	080022a1 	.word	0x080022a1
 800228c:	080022a7 	.word	0x080022a7
 8002290:	080022bb 	.word	0x080022bb
	case 1:
		y_slot = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	83bb      	strh	r3, [r7, #28]
		break;
 8002298:	e01b      	b.n	80022d2 <SSD1306_Putdouble+0x96>
	case 2:
		y_slot = 17;
 800229a:	2311      	movs	r3, #17
 800229c:	83bb      	strh	r3, [r7, #28]
		break;
 800229e:	e018      	b.n	80022d2 <SSD1306_Putdouble+0x96>
	case 3:
		y_slot = 34;
 80022a0:	2322      	movs	r3, #34	; 0x22
 80022a2:	83bb      	strh	r3, [r7, #28]
		break;
 80022a4:	e015      	b.n	80022d2 <SSD1306_Putdouble+0x96>
	case 4:
		y_slot = 53;
 80022a6:	2335      	movs	r3, #53	; 0x35
 80022a8:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 80022aa:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <SSD1306_Putdouble+0xd8>)
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022b4:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80022b8:	e00b      	b.n	80022d2 <SSD1306_Putdouble+0x96>
	case 5:
		x_slot = 65;
 80022ba:	2341      	movs	r3, #65	; 0x41
 80022bc:	83fb      	strh	r3, [r7, #30]
		y_slot = 53;
 80022be:	2335      	movs	r3, #53	; 0x35
 80022c0:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 80022c2:	4a14      	ldr	r2, [pc, #80]	; (8002314 <SSD1306_Putdouble+0xd8>)
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022cc:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80022d0:	bf00      	nop
	}

	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80022d2:	8bba      	ldrh	r2, [r7, #28]
 80022d4:	8bfb      	ldrh	r3, [r7, #30]
 80022d6:	4619      	mov	r1, r3
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fd5b 	bl	8001d94 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &font, 1);
 80022de:	f107 0210 	add.w	r2, r7, #16
 80022e2:	2301      	movs	r3, #1
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <SSD1306_Putdouble+0xdc>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f846 	bl	8002378 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80022ec:	8bba      	ldrh	r2, [r7, #28]
 80022ee:	8bfb      	ldrh	r3, [r7, #30]
 80022f0:	4619      	mov	r1, r3
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff fd4e 	bl	8001d94 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, float_str, &font, 1);
 80022f8:	f107 0210 	add.w	r2, r7, #16
 80022fc:	2301      	movs	r3, #1
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f839 	bl	8002378 <SSD1306_Puts>
}
 8002306:	bf00      	nop
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000018 	.word	0x20000018
 8002314:	20000010 	.word	0x20000010
 8002318:	08006ffc 	.word	0x08006ffc

0800231c <SSD1306_digits>:
/**
 * @brief  Calculates the number of digits needed to represent an integer
 * @param  int: integer to be processed
 * @retval Number of digits in an integer
 */
uint8_t SSD1306_digits(int integer){
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	uint8_t digits;
	if (integer==0){
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <SSD1306_digits+0x14>
		digits = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e01b      	b.n	8002368 <SSD1306_digits+0x4c>
	}
	else {
		digits = floor(log10(integer))+1;
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fe f85f 	bl	80003f4 <__aeabi_i2d>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	4618      	mov	r0, r3
 800233c:	4621      	mov	r1, r4
 800233e:	f003 fb69 	bl	8005a14 <log10>
 8002342:	4603      	mov	r3, r0
 8002344:	460c      	mov	r4, r1
 8002346:	4618      	mov	r0, r3
 8002348:	4621      	mov	r1, r4
 800234a:	f003 fa99 	bl	8005880 <floor>
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <SSD1306_digits+0x58>)
 8002354:	f7fd ff02 	bl	800015c <__adddf3>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	4618      	mov	r0, r3
 800235e:	4621      	mov	r1, r4
 8002360:	f7fe fb8a 	bl	8000a78 <__aeabi_d2uiz>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
	}
	return digits;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	3ff00000 	.word	0x3ff00000

08002378 <SSD1306_Puts>:

char SSD1306_Puts(ssd1306_t* ssd1306, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str) {
 8002386:	e012      	b.n	80023ae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(ssd1306, *str, Font, color) != *str) {
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	7819      	ldrb	r1, [r3, #0]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff fd12 	bl	8001dba <SSD1306_Putc>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d002      	beq.n	80023a8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	e008      	b.n	80023ba <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
	while (*str) {
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e8      	bne.n	8002388 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <ssd1306_I2C_WriteMulti>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(ssd1306_t* ssd1306, uint8_t reg, uint8_t* data, uint16_t count) {
 80023c2:	b5b0      	push	{r4, r5, r7, lr}
 80023c4:	b08a      	sub	sp, #40	; 0x28
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	461a      	mov	r2, r3
 80023ce:	460b      	mov	r3, r1
 80023d0:	72fb      	strb	r3, [r7, #11]
 80023d2:	4613      	mov	r3, r2
 80023d4:	813b      	strh	r3, [r7, #8]
 80023d6:	466b      	mov	r3, sp
 80023d8:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80023da:	893b      	ldrh	r3, [r7, #8]
 80023dc:	1c58      	adds	r0, r3, #1
 80023de:	1e43      	subs	r3, r0, #1
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	4603      	mov	r3, r0
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	00d4      	lsls	r4, r2, #3
 80023f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80023f8:	00cb      	lsls	r3, r1, #3
 80023fa:	4603      	mov	r3, r0
 80023fc:	4619      	mov	r1, r3
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	f04f 0400 	mov.w	r4, #0
 800240a:	00d4      	lsls	r4, r2, #3
 800240c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002410:	00cb      	lsls	r3, r1, #3
 8002412:	4603      	mov	r3, r0
 8002414:	3307      	adds	r3, #7
 8002416:	08db      	lsrs	r3, r3, #3
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	ebad 0d03 	sub.w	sp, sp, r3
 800241e:	ab02      	add	r3, sp, #8
 8002420:	3300      	adds	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
	dt[0] = reg;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	7afa      	ldrb	r2, [r7, #11]
 8002428:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800242a:	2301      	movs	r3, #1
 800242c:	77fb      	strb	r3, [r7, #31]
 800242e:	e00a      	b.n	8002446 <ssd1306_I2C_WriteMulti+0x84>
		dt[i] = data[i-1];
 8002430:	7ffb      	ldrb	r3, [r7, #31]
 8002432:	3b01      	subs	r3, #1
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	441a      	add	r2, r3
 8002438:	7ffb      	ldrb	r3, [r7, #31]
 800243a:	7811      	ldrb	r1, [r2, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8002440:	7ffb      	ldrb	r3, [r7, #31]
 8002442:	3301      	adds	r3, #1
 8002444:	77fb      	strb	r3, [r7, #31]
 8002446:	7ffb      	ldrb	r3, [r7, #31]
 8002448:	b29b      	uxth	r3, r3
 800244a:	893a      	ldrh	r2, [r7, #8]
 800244c:	429a      	cmp	r2, r3
 800244e:	d2ef      	bcs.n	8002430 <ssd1306_I2C_WriteMulti+0x6e>
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, count, 10);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6858      	ldr	r0, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b299      	uxth	r1, r3
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	893c      	ldrh	r4, [r7, #8]
 800245e:	230a      	movs	r3, #10
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	4623      	mov	r3, r4
 8002464:	f000 fdfa 	bl	800305c <HAL_I2C_Master_Transmit>
 8002468:	46ad      	mov	sp, r5
}
 800246a:	bf00      	nop
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bdb0      	pop	{r4, r5, r7, pc}

08002472 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(ssd1306_t* ssd1306, uint8_t reg, uint8_t data) {
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af02      	add	r7, sp, #8
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	70fb      	strb	r3, [r7, #3]
 800247e:	4613      	mov	r3, r2
 8002480:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2];
	dt[0] = reg;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002486:	78bb      	ldrb	r3, [r7, #2]
 8002488:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, 2, 10);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6858      	ldr	r0, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b299      	uxth	r1, r3
 8002494:	f107 020c 	add.w	r2, r7, #12
 8002498:	230a      	movs	r3, #10
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2302      	movs	r3, #2
 800249e:	f000 fddd 	bl	800305c <HAL_I2C_Master_Transmit>
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_MspInit+0x5c>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_MspInit+0x5c>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6193      	str	r3, [r2, #24]
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_MspInit+0x5c>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_MspInit+0x5c>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_MspInit+0x5c>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_MspInit+0x5c>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_MspInit+0x60>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_MspInit+0x60>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000

08002510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_I2C_MspInit+0x90>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d132      	bne.n	8002596 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_I2C_MspInit+0x94>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_I2C_MspInit+0x94>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_I2C_MspInit+0x94>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002548:	f44f 7340 	mov.w	r3, #768	; 0x300
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254e:	2312      	movs	r3, #18
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	4812      	ldr	r0, [pc, #72]	; (80025a8 <HAL_I2C_MspInit+0x98>)
 800255e:	f000 fafb 	bl	8002b58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_I2C_MspInit+0x9c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <HAL_I2C_MspInit+0x9c>)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_I2C_MspInit+0x94>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_I2C_MspInit+0x94>)
 8002584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_I2C_MspInit+0x94>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40005400 	.word	0x40005400
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010c00 	.word	0x40010c00
 80025ac:	40010000 	.word	0x40010000

080025b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d114      	bne.n	80025ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_TIM_Base_MspInit+0x78>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_Base_MspInit+0x78>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_TIM_Base_MspInit+0x78>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	201c      	movs	r0, #28
 80025e0:	f000 fa83 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025e4:	201c      	movs	r0, #28
 80025e6:	f000 fa9c 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ea:	e018      	b.n	800261e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_TIM_Base_MspInit+0x7c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d113      	bne.n	800261e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_TIM_Base_MspInit+0x78>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HAL_TIM_Base_MspInit+0x78>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_TIM_Base_MspInit+0x78>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	201d      	movs	r0, #29
 8002614:	f000 fa69 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002618:	201d      	movs	r0, #29
 800261a:	f000 fa82 	bl	8002b22 <HAL_NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40000400 	.word	0x40000400

08002630 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <HAL_TIM_Encoder_MspInit+0x70>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d123      	bne.n	8002698 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	61d3      	str	r3, [r2, #28]
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x74>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x74>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x74>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	4619      	mov	r1, r3
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002694:	f000 fa60 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40000800 	.word	0x40000800
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010c00 	.word	0x40010c00

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <HardFault_Handler+0x4>

080026be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <MemManage_Handler+0x4>

080026c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <BusFault_Handler+0x4>

080026ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <UsageFault_Handler+0x4>

080026d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f8:	f000 f8e2 	bl	80028c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <TIM2_IRQHandler+0x10>)
 8002706:	f002 f91a 	bl	800493e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000474 	.word	0x20000474

08002714 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <TIM3_IRQHandler+0x10>)
 800271a:	f002 f910 	bl	800493e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000434 	.word	0x20000434

08002728 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <_sbrk+0x50>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <_sbrk+0x16>
		heap_end = &end;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <_sbrk+0x50>)
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <_sbrk+0x54>)
 800273c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <_sbrk+0x50>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <_sbrk+0x50>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	466a      	mov	r2, sp
 800274e:	4293      	cmp	r3, r2
 8002750:	d907      	bls.n	8002762 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002752:	f002 fc49 	bl	8004fe8 <__errno>
 8002756:	4602      	mov	r2, r0
 8002758:	230c      	movs	r3, #12
 800275a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	e006      	b.n	8002770 <_sbrk+0x48>
	}

	heap_end += incr;
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <_sbrk+0x50>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	4a03      	ldr	r2, [pc, #12]	; (8002778 <_sbrk+0x50>)
 800276c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800276e:	68fb      	ldr	r3, [r7, #12]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200000d0 	.word	0x200000d0
 800277c:	200004c0 	.word	0x200004c0

08002780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <SystemInit+0x5c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <SystemInit+0x5c>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <SystemInit+0x5c>)
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4911      	ldr	r1, [pc, #68]	; (80027dc <SystemInit+0x5c>)
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <SystemInit+0x60>)
 8002798:	4013      	ands	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <SystemInit+0x5c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <SystemInit+0x5c>)
 80027a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <SystemInit+0x5c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SystemInit+0x5c>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <SystemInit+0x5c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <SystemInit+0x5c>)
 80027be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SystemInit+0x5c>)
 80027c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SystemInit+0x64>)
 80027ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40021000 	.word	0x40021000
 80027e0:	f8ff0000 	.word	0xf8ff0000
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027ea:	e003      	b.n	80027f4 <LoopCopyDataInit>

080027ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027f2:	3104      	adds	r1, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027f4:	480a      	ldr	r0, [pc, #40]	; (8002820 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027fc:	d3f6      	bcc.n	80027ec <CopyDataInit>
  ldr r2, =_sbss
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002800:	e002      	b.n	8002808 <LoopFillZerobss>

08002802 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002804:	f842 3b04 	str.w	r3, [r2], #4

08002808 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800280a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800280c:	d3f9      	bcc.n	8002802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800280e:	f7ff ffb7 	bl	8002780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002812:	f002 fbef 	bl	8004ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002816:	f7fe ff07 	bl	8001628 <main>
  bx lr
 800281a:	4770      	bx	lr
  ldr r3, =_sidata
 800281c:	08008588 	.word	0x08008588
  ldr r0, =_sdata
 8002820:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002824:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8002828:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 800282c:	200004bc 	.word	0x200004bc

08002830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC1_2_IRQHandler>
	...

08002834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_Init+0x28>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_Init+0x28>)
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002844:	2003      	movs	r0, #3
 8002846:	f000 f945 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284a:	2000      	movs	r0, #0
 800284c:	f000 f808 	bl	8002860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002850:	f7ff fe2c 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_InitTick+0x54>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_InitTick+0x58>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4619      	mov	r1, r3
 8002872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002876:	fbb3 f3f1 	udiv	r3, r3, r1
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f95d 	bl	8002b3e <HAL_SYSTICK_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e00e      	b.n	80028ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b0f      	cmp	r3, #15
 8002892:	d80a      	bhi.n	80028aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002894:	2200      	movs	r2, #0
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	f000 f925 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a0:	4a06      	ldr	r2, [pc, #24]	; (80028bc <HAL_InitTick+0x5c>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e000      	b.n	80028ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000020 	.word	0x20000020
 80028b8:	20000028 	.word	0x20000028
 80028bc:	20000024 	.word	0x20000024

080028c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_IncTick+0x1c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_IncTick+0x20>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_IncTick+0x20>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000028 	.word	0x20000028
 80028e0:	200004b4 	.word	0x200004b4

080028e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return uwTick;
 80028e8:	4b02      	ldr	r3, [pc, #8]	; (80028f4 <HAL_GetTick+0x10>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	200004b4 	.word	0x200004b4

080028f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002900:	f7ff fff0 	bl	80028e4 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d005      	beq.n	800291e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_Delay+0x40>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800291e:	bf00      	nop
 8002920:	f7ff ffe0 	bl	80028e4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d8f7      	bhi.n	8002920 <HAL_Delay+0x28>
  {
  }
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000028 	.word	0x20000028

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4906      	ldr	r1, [pc, #24]	; (80029d4 <__NVIC_EnableIRQ+0x34>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f7ff ff90 	bl	80029d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff2d 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff42 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff90 	bl	8002a2c <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5f 	bl	80029d8 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff35 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e127      	b.n	8002dbc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8116 	bne.w	8002db6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d034      	beq.n	8002bfc <HAL_GPIO_Init+0xa4>
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d80d      	bhi.n	8002bb2 <HAL_GPIO_Init+0x5a>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x9a>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d804      	bhi.n	8002ba8 <HAL_GPIO_Init+0x50>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d031      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d01c      	beq.n	8002be0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba6:	e048      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d043      	beq.n	8002c34 <HAL_GPIO_Init+0xdc>
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d01b      	beq.n	8002be8 <HAL_GPIO_Init+0x90>
          break;
 8002bb0:	e043      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bb2:	4a89      	ldr	r2, [pc, #548]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d026      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bb8:	4a87      	ldr	r2, [pc, #540]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d806      	bhi.n	8002bcc <HAL_GPIO_Init+0x74>
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_GPIO_Init+0x284>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d020      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bc4:	4a86      	ldr	r2, [pc, #536]	; (8002de0 <HAL_GPIO_Init+0x288>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bca:	e036      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bcc:	4a85      	ldr	r2, [pc, #532]	; (8002de4 <HAL_GPIO_Init+0x28c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd2:	4a85      	ldr	r2, [pc, #532]	; (8002de8 <HAL_GPIO_Init+0x290>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d016      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd8:	4a84      	ldr	r2, [pc, #528]	; (8002dec <HAL_GPIO_Init+0x294>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bde:	e02c      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e028      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e023      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e01e      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	330c      	adds	r3, #12
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e019      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e012      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	611a      	str	r2, [r3, #16]
          break;
 8002c26:	e008      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	615a      	str	r2, [r3, #20]
          break;
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	d801      	bhi.n	8002c44 <HAL_GPIO_Init+0xec>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	e001      	b.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2bff      	cmp	r3, #255	; 0xff
 8002c4e:	d802      	bhi.n	8002c56 <HAL_GPIO_Init+0xfe>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x104>
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3b08      	subs	r3, #8
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	210f      	movs	r1, #15
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	6a39      	ldr	r1, [r7, #32]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8096 	beq.w	8002db6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8a:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6193      	str	r3, [r2, #24]
 8002c96:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca2:	4a54      	ldr	r2, [pc, #336]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_GPIO_Init+0x2a0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x19e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x2a4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x19a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_GPIO_Init+0x2a8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x196>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_GPIO_Init+0x2ac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x192>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d08:	493a      	ldr	r1, [pc, #232]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4938      	ldr	r1, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e006      	b.n	8002d3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4933      	ldr	r1, [pc, #204]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	492e      	ldr	r1, [pc, #184]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	4929      	ldr	r1, [pc, #164]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4924      	ldr	r1, [pc, #144]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	491f      	ldr	r1, [pc, #124]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	491a      	ldr	r1, [pc, #104]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
 8002da6:	e006      	b.n	8002db6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4915      	ldr	r1, [pc, #84]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f47f aed0 	bne.w	8002b6c <HAL_GPIO_Init+0x14>
  }
}
 8002dcc:	bf00      	nop
 8002dce:	372c      	adds	r7, #44	; 0x2c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	10110000 	.word	0x10110000
 8002de0:	10120000 	.word	0x10120000
 8002de4:	10310000 	.word	0x10310000
 8002de8:	10320000 	.word	0x10320000
 8002dec:	10220000 	.word	0x10220000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	40010c00 	.word	0x40010c00
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e10f      	b.n	800303e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fb6c 	bl	8002510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e50:	f001 fc30 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 8002e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a7b      	ldr	r2, [pc, #492]	; (8003048 <HAL_I2C_Init+0x23c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d807      	bhi.n	8002e70 <HAL_I2C_Init+0x64>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a7a      	ldr	r2, [pc, #488]	; (800304c <HAL_I2C_Init+0x240>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e006      	b.n	8002e7e <HAL_I2C_Init+0x72>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_I2C_Init+0x244>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0db      	b.n	800303e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a72      	ldr	r2, [pc, #456]	; (8003054 <HAL_I2C_Init+0x248>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a64      	ldr	r2, [pc, #400]	; (8003048 <HAL_I2C_Init+0x23c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d802      	bhi.n	8002ec0 <HAL_I2C_Init+0xb4>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	e009      	b.n	8002ed4 <HAL_I2C_Init+0xc8>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a63      	ldr	r2, [pc, #396]	; (8003058 <HAL_I2C_Init+0x24c>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4956      	ldr	r1, [pc, #344]	; (8003048 <HAL_I2C_Init+0x23c>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d80d      	bhi.n	8002f10 <HAL_I2C_Init+0x104>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e59      	subs	r1, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	bf38      	it	cc
 8002f0c:	2304      	movcc	r3, #4
 8002f0e:	e04f      	b.n	8002fb0 <HAL_I2C_Init+0x1a4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <HAL_I2C_Init+0x130>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e58      	subs	r0, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e012      	b.n	8002f62 <HAL_I2C_Init+0x156>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e58      	subs	r0, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	0099      	lsls	r1, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Init+0x15e>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e022      	b.n	8002fb0 <HAL_I2C_Init+0x1a4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10e      	bne.n	8002f90 <HAL_I2C_Init+0x184>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e58      	subs	r0, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	440b      	add	r3, r1
 8002f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8e:	e00f      	b.n	8002fb0 <HAL_I2C_Init+0x1a4>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	0099      	lsls	r1, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	6809      	ldr	r1, [r1, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6911      	ldr	r1, [r2, #16]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68d2      	ldr	r2, [r2, #12]
 8002fea:	4311      	orrs	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	000186a0 	.word	0x000186a0
 800304c:	001e847f 	.word	0x001e847f
 8003050:	003d08ff 	.word	0x003d08ff
 8003054:	431bde83 	.word	0x431bde83
 8003058:	10624dd3 	.word	0x10624dd3

0800305c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	461a      	mov	r2, r3
 8003068:	460b      	mov	r3, r1
 800306a:	817b      	strh	r3, [r7, #10]
 800306c:	4613      	mov	r3, r2
 800306e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff fc38 	bl	80028e4 <HAL_GetTick>
 8003074:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	f040 80e0 	bne.w	8003244 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2319      	movs	r3, #25
 800308a:	2201      	movs	r2, #1
 800308c:	4970      	ldr	r1, [pc, #448]	; (8003250 <HAL_I2C_Master_Transmit+0x1f4>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fd5e 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
 800309c:	e0d3      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_I2C_Master_Transmit+0x50>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0cc      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ea>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d007      	beq.n	80030d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2221      	movs	r2, #33	; 0x21
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2210      	movs	r2, #16
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	893a      	ldrh	r2, [r7, #8]
 8003102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a50      	ldr	r2, [pc, #320]	; (8003254 <HAL_I2C_Master_Transmit+0x1f8>)
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003114:	8979      	ldrh	r1, [r7, #10]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fbec 	bl	80038f8 <I2C_MasterRequestWrite>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e08d      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003140:	e066      	b.n	8003210 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	6a39      	ldr	r1, [r7, #32]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fdd8 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b04      	cmp	r3, #4
 8003158:	d107      	bne.n	800316a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06b      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d11b      	bne.n	80031e4 <HAL_I2C_Master_Transmit+0x188>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d017      	beq.n	80031e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	781a      	ldrb	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	6a39      	ldr	r1, [r7, #32]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fdc8 	bl	8003d7e <I2C_WaitOnBTFFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d107      	bne.n	800320c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e01a      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d194      	bne.n	8003142 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e000      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
  }
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	00100002 	.word	0x00100002
 8003254:	ffff0000 	.word	0xffff0000

08003258 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	461a      	mov	r2, r3
 8003264:	460b      	mov	r3, r1
 8003266:	817b      	strh	r3, [r7, #10]
 8003268:	4613      	mov	r3, r2
 800326a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800326c:	f7ff fb3a 	bl	80028e4 <HAL_GetTick>
 8003270:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	f040 8213 	bne.w	80036a6 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2319      	movs	r3, #25
 8003286:	2201      	movs	r2, #1
 8003288:	497e      	ldr	r1, [pc, #504]	; (8003484 <HAL_I2C_Master_Receive+0x22c>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fc60 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
 8003298:	e206      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_I2C_Master_Receive+0x50>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e1ff      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d007      	beq.n	80032ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2222      	movs	r2, #34	; 0x22
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2210      	movs	r2, #16
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	893a      	ldrh	r2, [r7, #8]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a5e      	ldr	r2, [pc, #376]	; (8003488 <HAL_I2C_Master_Receive+0x230>)
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003310:	8979      	ldrh	r1, [r7, #10]
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fb64 	bl	80039e4 <I2C_MasterRequestRead>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e1c0      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	d113      	bne.n	8003356 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332e:	2300      	movs	r3, #0
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e194      	b.n	8003680 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	2b01      	cmp	r3, #1
 800335c:	d11d      	bne.n	800339a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800336e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003394:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003396:	b662      	cpsie	i
 8003398:	e172      	b.n	8003680 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d11d      	bne.n	80033de <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033da:	b662      	cpsie	i
 80033dc:	e150      	b.n	8003680 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003404:	e13c      	b.n	8003680 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b03      	cmp	r3, #3
 800340c:	f200 80f5 	bhi.w	80035fa <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b01      	cmp	r3, #1
 8003416:	d123      	bne.n	8003460 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fcef 	bl	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e13d      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800345e:	e10f      	b.n	8003680 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b02      	cmp	r3, #2
 8003466:	d150      	bne.n	800350a <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	2200      	movs	r2, #0
 8003470:	4906      	ldr	r1, [pc, #24]	; (800348c <HAL_I2C_Master_Receive+0x234>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fb6c 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e112      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
 8003482:	bf00      	nop
 8003484:	00100002 	.word	0x00100002
 8003488:	ffff0000 	.word	0xffff0000
 800348c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034d4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003508:	e0ba      	b.n	8003680 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	4967      	ldr	r1, [pc, #412]	; (80036b0 <HAL_I2C_Master_Receive+0x458>)
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fb1b 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0c1      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003532:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003534:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	2200      	movs	r2, #0
 8003570:	494f      	ldr	r1, [pc, #316]	; (80036b0 <HAL_I2C_Master_Receive+0x458>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 faec 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e092      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003590:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035c4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f8:	e042      	b.n	8003680 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fbfe 	bl	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e04c      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d118      	bne.n	8003680 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f aebe 	bne.w	8003406 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3728      	adds	r7, #40	; 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	00010004 	.word	0x00010004

080036b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	460b      	mov	r3, r1
 80036c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036c4:	f7ff f90e 	bl	80028e4 <HAL_GetTick>
 80036c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	f040 8105 	bne.w	80038e6 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2319      	movs	r3, #25
 80036e2:	2201      	movs	r2, #1
 80036e4:	4982      	ldr	r1, [pc, #520]	; (80038f0 <HAL_I2C_IsDeviceReady+0x23c>)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fa32 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	e0f8      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_I2C_IsDeviceReady+0x50>
 8003700:	2302      	movs	r3, #2
 8003702:	e0f1      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x234>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d007      	beq.n	800372a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003738:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2224      	movs	r2, #36	; 0x24
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a6a      	ldr	r2, [pc, #424]	; (80038f4 <HAL_I2C_IsDeviceReady+0x240>)
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f9f0 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0b6      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003788:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800378a:	f7ff f8ab 	bl	80028e4 <HAL_GetTick>
 800378e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037be:	e025      	b.n	800380c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7ff f890 	bl	80028e4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <HAL_I2C_IsDeviceReady+0x122>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	22a0      	movs	r2, #160	; 0xa0
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2ba0      	cmp	r3, #160	; 0xa0
 8003816:	d005      	beq.n	8003824 <HAL_I2C_IsDeviceReady+0x170>
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_I2C_IsDeviceReady+0x170>
 800381e:	7dbb      	ldrb	r3, [r7, #22]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0cd      	beq.n	80037c0 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d129      	bne.n	800388e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003848:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2319      	movs	r3, #25
 8003866:	2201      	movs	r2, #1
 8003868:	4921      	ldr	r1, [pc, #132]	; (80038f0 <HAL_I2C_IsDeviceReady+0x23c>)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f970 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e036      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e02c      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2319      	movs	r3, #25
 80038ae:	2201      	movs	r2, #1
 80038b0:	490f      	ldr	r1, [pc, #60]	; (80038f0 <HAL_I2C_IsDeviceReady+0x23c>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f94c 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e012      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f4ff af3e 	bcc.w	800374e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	00100002 	.word	0x00100002
 80038f4:	ffff0000 	.word	0xffff0000

080038f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	460b      	mov	r3, r1
 8003906:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d006      	beq.n	8003922 <I2C_MasterRequestWrite+0x2a>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d003      	beq.n	8003922 <I2C_MasterRequestWrite+0x2a>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003920:	d108      	bne.n	8003934 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e00b      	b.n	800394c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	2b12      	cmp	r3, #18
 800393a:	d107      	bne.n	800394c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f8f9 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e035      	b.n	80039d4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003970:	d108      	bne.n	8003984 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e01b      	b.n	80039bc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	11db      	asrs	r3, r3, #7
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0306 	and.w	r3, r3, #6
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f063 030f 	orn	r3, r3, #15
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	490e      	ldr	r1, [pc, #56]	; (80039dc <I2C_MasterRequestWrite+0xe4>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f92b 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e010      	b.n	80039d4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039b2:	897b      	ldrh	r3, [r7, #10]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4907      	ldr	r1, [pc, #28]	; (80039e0 <I2C_MasterRequestWrite+0xe8>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f91b 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010008 	.word	0x00010008
 80039e0:	00010002 	.word	0x00010002

080039e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	460b      	mov	r3, r1
 80039f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d006      	beq.n	8003a1e <I2C_MasterRequestRead+0x3a>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d003      	beq.n	8003a1e <I2C_MasterRequestRead+0x3a>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a1c:	d108      	bne.n	8003a30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e00b      	b.n	8003a48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b11      	cmp	r3, #17
 8003a36:	d107      	bne.n	8003a48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f87b 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e06d      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6c:	d108      	bne.n	8003a80 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	611a      	str	r2, [r3, #16]
 8003a7e:	e053      	b.n	8003b28 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a80:	897b      	ldrh	r3, [r7, #10]
 8003a82:	11db      	asrs	r3, r3, #7
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 0306 	and.w	r3, r3, #6
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f063 030f 	orn	r3, r3, #15
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	492a      	ldr	r1, [pc, #168]	; (8003b48 <I2C_MasterRequestRead+0x164>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f8ad 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e048      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4923      	ldr	r1, [pc, #140]	; (8003b4c <I2C_MasterRequestRead+0x168>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f89d 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e038      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f825 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e017      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b10:	897b      	ldrh	r3, [r7, #10]
 8003b12:	11db      	asrs	r3, r3, #7
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0306 	and.w	r3, r3, #6
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f063 030e 	orn	r3, r3, #14
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4907      	ldr	r1, [pc, #28]	; (8003b4c <I2C_MasterRequestRead+0x168>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f865 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	00010008 	.word	0x00010008
 8003b4c:	00010002 	.word	0x00010002

08003b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b60:	e025      	b.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d021      	beq.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fe febb 	bl	80028e4 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d116      	bne.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e023      	b.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10d      	bne.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	e00c      	b.n	8003bee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d0b6      	beq.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c0c:	e051      	b.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1c:	d123      	bne.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e046      	b.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d021      	beq.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fe fe39 	bl	80028e4 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e020      	b.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10c      	bne.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	e00b      	b.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d18d      	bne.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d08:	e02d      	b.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f8ce 	bl	8003eac <I2C_IsAcknowledgeFailed>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e02d      	b.n	8003d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d021      	beq.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe fddf 	bl	80028e4 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e007      	b.n	8003d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d1ca      	bne.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8a:	e02d      	b.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f88d 	bl	8003eac <I2C_IsAcknowledgeFailed>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e02d      	b.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d021      	beq.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da4:	f7fe fd9e 	bl	80028e4 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d116      	bne.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e007      	b.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d1ca      	bne.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e0c:	e042      	b.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d119      	bne.n	8003e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0210 	mvn.w	r2, #16
 8003e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e029      	b.n	8003ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7fe fd48 	bl	80028e4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d1b5      	bne.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec2:	d11b      	bne.n	8003efc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ecc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e26c      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8087 	beq.w	8004036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f28:	4b92      	ldr	r3, [pc, #584]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d00c      	beq.n	8003f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f34:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d112      	bne.n	8003f66 <HAL_RCC_OscConfig+0x5e>
 8003f40:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4e:	4b89      	ldr	r3, [pc, #548]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06c      	beq.n	8004034 <HAL_RCC_OscConfig+0x12c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d168      	bne.n	8004034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e246      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x76>
 8003f70:	4b80      	ldr	r3, [pc, #512]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7f      	ldr	r2, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e02e      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b7b      	ldr	r3, [pc, #492]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7a      	ldr	r2, [pc, #488]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b78      	ldr	r3, [pc, #480]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a77      	ldr	r2, [pc, #476]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e01d      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0xbc>
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a71      	ldr	r2, [pc, #452]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6e      	ldr	r2, [pc, #440]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003fc4:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6a      	ldr	r2, [pc, #424]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b68      	ldr	r3, [pc, #416]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a67      	ldr	r2, [pc, #412]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fc7e 	bl	80028e4 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fe fc7a 	bl	80028e4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1fa      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b5d      	ldr	r3, [pc, #372]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0xe4>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fe fc6a 	bl	80028e4 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004014:	f7fe fc66 	bl	80028e4 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1e6      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x10c>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800404e:	4b49      	ldr	r3, [pc, #292]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b08      	cmp	r3, #8
 8004058:	d11c      	bne.n	8004094 <HAL_RCC_OscConfig+0x18c>
 800405a:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d116      	bne.n	8004094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_RCC_OscConfig+0x176>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1ba      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4939      	ldr	r1, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	e03a      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409c:	4b36      	ldr	r3, [pc, #216]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe fc1f 	bl	80028e4 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fe fc1b 	bl	80028e4 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e19b      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4927      	ldr	r1, [pc, #156]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b26      	ldr	r3, [pc, #152]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fe fbfe 	bl	80028e4 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fe fbfa 	bl	80028e4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e17a      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d03a      	beq.n	800418c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x274>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004124:	f7fe fbde 	bl	80028e4 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412c:	f7fe fbda 	bl	80028e4 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e15a      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800414a:	2001      	movs	r0, #1
 800414c:	f000 fac6 	bl	80046dc <RCC_Delay>
 8004150:	e01c      	b.n	800418c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_RCC_OscConfig+0x274>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fe fbc4 	bl	80028e4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415e:	e00f      	b.n	8004180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7fe fbc0 	bl	80028e4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d908      	bls.n	8004180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e140      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	42420000 	.word	0x42420000
 800417c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	4b9e      	ldr	r3, [pc, #632]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e9      	bne.n	8004160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a6 	beq.w	80042e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b97      	ldr	r3, [pc, #604]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b94      	ldr	r3, [pc, #592]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4a93      	ldr	r2, [pc, #588]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	61d3      	str	r3, [r2, #28]
 80041b6:	4b91      	ldr	r3, [pc, #580]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b8e      	ldr	r3, [pc, #568]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b8b      	ldr	r3, [pc, #556]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a8a      	ldr	r2, [pc, #552]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fe fb81 	bl	80028e4 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fe fb7d 	bl	80028e4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	; 0x64
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0fd      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b81      	ldr	r3, [pc, #516]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x312>
 800420c:	4b7b      	ldr	r3, [pc, #492]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a7a      	ldr	r2, [pc, #488]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	e02d      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x334>
 8004222:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4a75      	ldr	r2, [pc, #468]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6213      	str	r3, [r2, #32]
 800422e:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a72      	ldr	r2, [pc, #456]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	e01c      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b05      	cmp	r3, #5
 8004242:	d10c      	bne.n	800425e <HAL_RCC_OscConfig+0x356>
 8004244:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4a6c      	ldr	r2, [pc, #432]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	6213      	str	r3, [r2, #32]
 8004250:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a69      	ldr	r2, [pc, #420]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6213      	str	r3, [r2, #32]
 800425c:	e00b      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800425e:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4a66      	ldr	r2, [pc, #408]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	6213      	str	r3, [r2, #32]
 800426a:	4b64      	ldr	r3, [pc, #400]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a63      	ldr	r2, [pc, #396]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004270:	f023 0304 	bic.w	r3, r3, #4
 8004274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d015      	beq.n	80042aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fe fb31 	bl	80028e4 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fe fb2d 	bl	80028e4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0ab      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b57      	ldr	r3, [pc, #348]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCC_OscConfig+0x37e>
 80042a8:	e014      	b.n	80042d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042aa:	f7fe fb1b 	bl	80028e4 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fe fb17 	bl	80028e4 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e095      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c8:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ee      	bne.n	80042b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042da:	4b48      	ldr	r3, [pc, #288]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4a47      	ldr	r2, [pc, #284]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8081 	beq.w	80043f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f0:	4b42      	ldr	r3, [pc, #264]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d061      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d146      	bne.n	8004392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b3f      	ldr	r3, [pc, #252]	; (8004404 <HAL_RCC_OscConfig+0x4fc>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fe faeb 	bl	80028e4 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fe fae7 	bl	80028e4 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e067      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d108      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	492d      	ldr	r1, [pc, #180]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a19      	ldr	r1, [r3, #32]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	430b      	orrs	r3, r1
 800435e:	4927      	ldr	r1, [pc, #156]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x4fc>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fe fabb 	bl	80028e4 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004372:	f7fe fab7 	bl	80028e4 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e037      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x46a>
 8004390:	e02f      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <HAL_RCC_OscConfig+0x4fc>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fe faa4 	bl	80028e4 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe faa0 	bl	80028e4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e020      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x498>
 80043be:	e018      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e013      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d106      	bne.n	80043ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000
 8004400:	40007000 	.word	0x40007000
 8004404:	42420060 	.word	0x42420060

08004408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0d0      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800441c:	4b6a      	ldr	r3, [pc, #424]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d910      	bls.n	800444c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b67      	ldr	r3, [pc, #412]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 0207 	bic.w	r2, r3, #7
 8004432:	4965      	ldr	r1, [pc, #404]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b63      	ldr	r3, [pc, #396]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b8      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a58      	ldr	r2, [pc, #352]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800446e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b50      	ldr	r3, [pc, #320]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	494d      	ldr	r1, [pc, #308]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d040      	beq.n	8004528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b47      	ldr	r3, [pc, #284]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d115      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07f      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e073      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06b      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044e6:	4b39      	ldr	r3, [pc, #228]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4936      	ldr	r1, [pc, #216]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f8:	f7fe f9f4 	bl	80028e4 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004500:	f7fe f9f0 	bl	80028e4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e053      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 020c 	and.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	429a      	cmp	r2, r3
 8004526:	d1eb      	bne.n	8004500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d210      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 0207 	bic.w	r2, r3, #7
 800453e:	4922      	ldr	r1, [pc, #136]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e032      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4916      	ldr	r1, [pc, #88]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	490e      	ldr	r1, [pc, #56]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004596:	f000 f821 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800459a:	4601      	mov	r1, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	fa21 f303 	lsr.w	r3, r1, r3
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1cc>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1d0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe f952 	bl	8002860 <HAL_InitTick>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40022000 	.word	0x40022000
 80045cc:	40021000 	.word	0x40021000
 80045d0:	080084e4 	.word	0x080084e4
 80045d4:	20000020 	.word	0x20000020
 80045d8:	20000024 	.word	0x20000024

080045dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	b490      	push	{r4, r7}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <HAL_RCC_GetSysClockFreq+0xb0>)
 80045e4:	1d3c      	adds	r4, r7, #4
 80045e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045ec:	4b28      	ldr	r3, [pc, #160]	; (8004690 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d002      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x40>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d003      	beq.n	8004622 <HAL_RCC_GetSysClockFreq+0x46>
 800461a:	e02d      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800461e:	623b      	str	r3, [r7, #32]
      break;
 8004620:	e02d      	b.n	800467e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	0c9b      	lsrs	r3, r3, #18
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800462e:	4413      	add	r3, r2
 8004630:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004634:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d013      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	0c5b      	lsrs	r3, r3, #17
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800464e:	4413      	add	r3, r2
 8004650:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004654:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800465a:	fb02 f203 	mul.w	r2, r2, r3
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	e004      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4a0c      	ldr	r2, [pc, #48]	; (800469c <HAL_RCC_GetSysClockFreq+0xc0>)
 800466c:	fb02 f303 	mul.w	r3, r2, r3
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	623b      	str	r3, [r7, #32]
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800467a:	623b      	str	r3, [r7, #32]
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6a3b      	ldr	r3, [r7, #32]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	; 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bc90      	pop	{r4, r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	08007008 	.word	0x08007008
 8004690:	08007018 	.word	0x08007018
 8004694:	40021000 	.word	0x40021000
 8004698:	007a1200 	.word	0x007a1200
 800469c:	003d0900 	.word	0x003d0900

080046a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a4:	4b02      	ldr	r3, [pc, #8]	; (80046b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046a6:	681b      	ldr	r3, [r3, #0]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	20000020 	.word	0x20000020

080046b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046b8:	f7ff fff2 	bl	80046a0 <HAL_RCC_GetHCLKFreq>
 80046bc:	4601      	mov	r1, r0
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4a03      	ldr	r2, [pc, #12]	; (80046d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ca:	5cd3      	ldrb	r3, [r2, r3]
 80046cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	080084f4 	.word	0x080084f4

080046dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <RCC_Delay+0x34>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <RCC_Delay+0x38>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	0a5b      	lsrs	r3, r3, #9
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046f8:	bf00      	nop
  }
  while (Delay --);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1e5a      	subs	r2, r3, #1
 80046fe:	60fa      	str	r2, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f9      	bne.n	80046f8 <RCC_Delay+0x1c>
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000020 	.word	0x20000020
 8004714:	10624dd3 	.word	0x10624dd3

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e01d      	b.n	8004766 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd ff36 	bl	80025b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fad4 	bl	8004d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b06      	cmp	r3, #6
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e07f      	b.n	80048c8 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fd ff27 	bl	8002630 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f8:	f023 0307 	bic.w	r3, r3, #7
 80047fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 fa7b 	bl	8004d04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	4313      	orrs	r3, r2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004854:	f023 030c 	bic.w	r3, r3, #12
 8004858:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	4313      	orrs	r3, r2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	031b      	lsls	r3, r3, #12
 8004884:	4313      	orrs	r3, r2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	4313      	orrs	r3, r2
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_TIM_Encoder_Start+0x16>
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d008      	beq.n	80048f6 <HAL_TIM_Encoder_Start+0x26>
 80048e4:	e00f      	b.n	8004906 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fb00 	bl	8004ef4 <TIM_CCxChannelCmd>
      break;
 80048f4:	e016      	b.n	8004924 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	2104      	movs	r1, #4
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 faf8 	bl	8004ef4 <TIM_CCxChannelCmd>
      break;
 8004904:	e00e      	b.n	8004924 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 faf0 	bl	8004ef4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2201      	movs	r2, #1
 800491a:	2104      	movs	r1, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fae9 	bl	8004ef4 <TIM_CCxChannelCmd>
      break;
 8004922:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b02      	cmp	r3, #2
 8004952:	d122      	bne.n	800499a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d11b      	bne.n	800499a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f06f 0202 	mvn.w	r2, #2
 800496a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f9a4 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004986:	e005      	b.n	8004994 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f997 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9a6 	bl	8004ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d122      	bne.n	80049ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d11b      	bne.n	80049ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f06f 0204 	mvn.w	r2, #4
 80049be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f97a 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80049da:	e005      	b.n	80049e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f96d 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f97c 	bl	8004ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d122      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d11b      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0208 	mvn.w	r2, #8
 8004a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2204      	movs	r2, #4
 8004a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f950 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004a2e:	e005      	b.n	8004a3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f943 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f952 	bl	8004ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d122      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d11b      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f06f 0210 	mvn.w	r2, #16
 8004a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f926 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004a82:	e005      	b.n	8004a90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f919 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f928 	bl	8004ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d107      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0201 	mvn.w	r2, #1
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fc fc4f 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d10e      	bne.n	8004aee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d107      	bne.n	8004aee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa74 	bl	8004fd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d10e      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d107      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8ec 	bl	8004cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d10e      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d107      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f06f 0220 	mvn.w	r2, #32
 8004b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fa3f 	bl	8004fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_ConfigClockSource+0x18>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e0a6      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x166>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b8c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d067      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x120>
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d80b      	bhi.n	8004bba <HAL_TIM_ConfigClockSource+0x6c>
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d073      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x140>
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d802      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x62>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d06f      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004bae:	e078      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d06c      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x140>
 8004bb4:	2b30      	cmp	r3, #48	; 0x30
 8004bb6:	d06a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004bb8:	e073      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bba:	2b70      	cmp	r3, #112	; 0x70
 8004bbc:	d00d      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x8c>
 8004bbe:	2b70      	cmp	r3, #112	; 0x70
 8004bc0:	d804      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x7e>
 8004bc2:	2b50      	cmp	r3, #80	; 0x50
 8004bc4:	d033      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0xe0>
 8004bc6:	2b60      	cmp	r3, #96	; 0x60
 8004bc8:	d041      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004bca:	e06a      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d066      	beq.n	8004ca0 <HAL_TIM_ConfigClockSource+0x152>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d017      	beq.n	8004c08 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004bd8:	e063      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6899      	ldr	r1, [r3, #8]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f000 f964 	bl	8004eb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	609a      	str	r2, [r3, #8]
      break;
 8004c06:	e04c      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6899      	ldr	r1, [r3, #8]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f000 f94d 	bl	8004eb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c2a:	609a      	str	r2, [r3, #8]
      break;
 8004c2c:	e039      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f000 f8c4 	bl	8004dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2150      	movs	r1, #80	; 0x50
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f91b 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c4c:	e029      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 f8e2 	bl	8004e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2160      	movs	r1, #96	; 0x60
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f90b 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e019      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 f8a4 	bl	8004dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 f8fb 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e009      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f000 f8f2 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ca0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <TIM_Base_SetConfig+0xb8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x30>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x30>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <TIM_Base_SetConfig+0xbc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x30>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <TIM_Base_SetConfig+0xc0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <TIM_Base_SetConfig+0xb8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_Base_SetConfig+0x62>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d007      	beq.n	8004d66 <TIM_Base_SetConfig+0x62>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <TIM_Base_SetConfig+0xbc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_Base_SetConfig+0x62>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <TIM_Base_SetConfig+0xc0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <TIM_Base_SetConfig+0xb8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	615a      	str	r2, [r3, #20]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800

08004dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f023 0201 	bic.w	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f023 030a 	bic.w	r3, r3, #10
 8004e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f023 0210 	bic.w	r2, r3, #16
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	031b      	lsls	r3, r3, #12
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	621a      	str	r2, [r3, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f043 0307 	orr.w	r3, r3, #7
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	609a      	str	r2, [r3, #8]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b087      	sub	sp, #28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	609a      	str	r2, [r3, #8]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2201      	movs	r2, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1a      	ldr	r2, [r3, #32]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	401a      	ands	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e032      	b.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	2000002c 	.word	0x2000002c

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	4e0c      	ldr	r6, [pc, #48]	; (800502c <__libc_init_array+0x38>)
 8004ffa:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffc:	1ba4      	subs	r4, r4, r6
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	42a5      	cmp	r5, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	f001 ffe0 	bl	8006fc8 <_init>
 8005008:	2500      	movs	r5, #0
 800500a:	4e0a      	ldr	r6, [pc, #40]	; (8005034 <__libc_init_array+0x40>)
 800500c:	4c0a      	ldr	r4, [pc, #40]	; (8005038 <__libc_init_array+0x44>)
 800500e:	1ba4      	subs	r4, r4, r6
 8005010:	10a4      	asrs	r4, r4, #2
 8005012:	42a5      	cmp	r5, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800501c:	4798      	blx	r3
 800501e:	3501      	adds	r5, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005026:	4798      	blx	r3
 8005028:	3501      	adds	r5, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	08008580 	.word	0x08008580
 8005030:	08008580 	.word	0x08008580
 8005034:	08008580 	.word	0x08008580
 8005038:	08008584 	.word	0x08008584

0800503c <malloc>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <malloc+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 b857 	b.w	80050f4 <_malloc_r>
 8005046:	bf00      	nop
 8005048:	2000002c 	.word	0x2000002c

0800504c <memset>:
 800504c:	4603      	mov	r3, r0
 800504e:	4402      	add	r2, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	d100      	bne.n	8005056 <memset+0xa>
 8005054:	4770      	bx	lr
 8005056:	f803 1b01 	strb.w	r1, [r3], #1
 800505a:	e7f9      	b.n	8005050 <memset+0x4>

0800505c <_free_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4605      	mov	r5, r0
 8005060:	2900      	cmp	r1, #0
 8005062:	d043      	beq.n	80050ec <_free_r+0x90>
 8005064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005068:	1f0c      	subs	r4, r1, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	bfb8      	it	lt
 800506e:	18e4      	addlt	r4, r4, r3
 8005070:	f000 f8ca 	bl	8005208 <__malloc_lock>
 8005074:	4a1e      	ldr	r2, [pc, #120]	; (80050f0 <_free_r+0x94>)
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	4610      	mov	r0, r2
 800507a:	b933      	cbnz	r3, 800508a <_free_r+0x2e>
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	6014      	str	r4, [r2, #0]
 8005080:	4628      	mov	r0, r5
 8005082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005086:	f000 b8c0 	b.w	800520a <__malloc_unlock>
 800508a:	42a3      	cmp	r3, r4
 800508c:	d90b      	bls.n	80050a6 <_free_r+0x4a>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	1862      	adds	r2, r4, r1
 8005092:	4293      	cmp	r3, r2
 8005094:	bf01      	itttt	eq
 8005096:	681a      	ldreq	r2, [r3, #0]
 8005098:	685b      	ldreq	r3, [r3, #4]
 800509a:	1852      	addeq	r2, r2, r1
 800509c:	6022      	streq	r2, [r4, #0]
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	6004      	str	r4, [r0, #0]
 80050a2:	e7ed      	b.n	8005080 <_free_r+0x24>
 80050a4:	4613      	mov	r3, r2
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	b10a      	cbz	r2, 80050ae <_free_r+0x52>
 80050aa:	42a2      	cmp	r2, r4
 80050ac:	d9fa      	bls.n	80050a4 <_free_r+0x48>
 80050ae:	6819      	ldr	r1, [r3, #0]
 80050b0:	1858      	adds	r0, r3, r1
 80050b2:	42a0      	cmp	r0, r4
 80050b4:	d10b      	bne.n	80050ce <_free_r+0x72>
 80050b6:	6820      	ldr	r0, [r4, #0]
 80050b8:	4401      	add	r1, r0
 80050ba:	1858      	adds	r0, r3, r1
 80050bc:	4282      	cmp	r2, r0
 80050be:	6019      	str	r1, [r3, #0]
 80050c0:	d1de      	bne.n	8005080 <_free_r+0x24>
 80050c2:	6810      	ldr	r0, [r2, #0]
 80050c4:	6852      	ldr	r2, [r2, #4]
 80050c6:	4401      	add	r1, r0
 80050c8:	6019      	str	r1, [r3, #0]
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e7d8      	b.n	8005080 <_free_r+0x24>
 80050ce:	d902      	bls.n	80050d6 <_free_r+0x7a>
 80050d0:	230c      	movs	r3, #12
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	e7d4      	b.n	8005080 <_free_r+0x24>
 80050d6:	6820      	ldr	r0, [r4, #0]
 80050d8:	1821      	adds	r1, r4, r0
 80050da:	428a      	cmp	r2, r1
 80050dc:	bf01      	itttt	eq
 80050de:	6811      	ldreq	r1, [r2, #0]
 80050e0:	6852      	ldreq	r2, [r2, #4]
 80050e2:	1809      	addeq	r1, r1, r0
 80050e4:	6021      	streq	r1, [r4, #0]
 80050e6:	6062      	str	r2, [r4, #4]
 80050e8:	605c      	str	r4, [r3, #4]
 80050ea:	e7c9      	b.n	8005080 <_free_r+0x24>
 80050ec:	bd38      	pop	{r3, r4, r5, pc}
 80050ee:	bf00      	nop
 80050f0:	200000d4 	.word	0x200000d4

080050f4 <_malloc_r>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	1ccd      	adds	r5, r1, #3
 80050f8:	f025 0503 	bic.w	r5, r5, #3
 80050fc:	3508      	adds	r5, #8
 80050fe:	2d0c      	cmp	r5, #12
 8005100:	bf38      	it	cc
 8005102:	250c      	movcc	r5, #12
 8005104:	2d00      	cmp	r5, #0
 8005106:	4606      	mov	r6, r0
 8005108:	db01      	blt.n	800510e <_malloc_r+0x1a>
 800510a:	42a9      	cmp	r1, r5
 800510c:	d903      	bls.n	8005116 <_malloc_r+0x22>
 800510e:	230c      	movs	r3, #12
 8005110:	6033      	str	r3, [r6, #0]
 8005112:	2000      	movs	r0, #0
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	f000 f877 	bl	8005208 <__malloc_lock>
 800511a:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <_malloc_r+0xac>)
 800511c:	6814      	ldr	r4, [r2, #0]
 800511e:	4621      	mov	r1, r4
 8005120:	b991      	cbnz	r1, 8005148 <_malloc_r+0x54>
 8005122:	4c20      	ldr	r4, [pc, #128]	; (80051a4 <_malloc_r+0xb0>)
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	b91b      	cbnz	r3, 8005130 <_malloc_r+0x3c>
 8005128:	4630      	mov	r0, r6
 800512a:	f000 f83d 	bl	80051a8 <_sbrk_r>
 800512e:	6020      	str	r0, [r4, #0]
 8005130:	4629      	mov	r1, r5
 8005132:	4630      	mov	r0, r6
 8005134:	f000 f838 	bl	80051a8 <_sbrk_r>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d124      	bne.n	8005186 <_malloc_r+0x92>
 800513c:	230c      	movs	r3, #12
 800513e:	4630      	mov	r0, r6
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	f000 f862 	bl	800520a <__malloc_unlock>
 8005146:	e7e4      	b.n	8005112 <_malloc_r+0x1e>
 8005148:	680b      	ldr	r3, [r1, #0]
 800514a:	1b5b      	subs	r3, r3, r5
 800514c:	d418      	bmi.n	8005180 <_malloc_r+0x8c>
 800514e:	2b0b      	cmp	r3, #11
 8005150:	d90f      	bls.n	8005172 <_malloc_r+0x7e>
 8005152:	600b      	str	r3, [r1, #0]
 8005154:	18cc      	adds	r4, r1, r3
 8005156:	50cd      	str	r5, [r1, r3]
 8005158:	4630      	mov	r0, r6
 800515a:	f000 f856 	bl	800520a <__malloc_unlock>
 800515e:	f104 000b 	add.w	r0, r4, #11
 8005162:	1d23      	adds	r3, r4, #4
 8005164:	f020 0007 	bic.w	r0, r0, #7
 8005168:	1ac3      	subs	r3, r0, r3
 800516a:	d0d3      	beq.n	8005114 <_malloc_r+0x20>
 800516c:	425a      	negs	r2, r3
 800516e:	50e2      	str	r2, [r4, r3]
 8005170:	e7d0      	b.n	8005114 <_malloc_r+0x20>
 8005172:	684b      	ldr	r3, [r1, #4]
 8005174:	428c      	cmp	r4, r1
 8005176:	bf16      	itet	ne
 8005178:	6063      	strne	r3, [r4, #4]
 800517a:	6013      	streq	r3, [r2, #0]
 800517c:	460c      	movne	r4, r1
 800517e:	e7eb      	b.n	8005158 <_malloc_r+0x64>
 8005180:	460c      	mov	r4, r1
 8005182:	6849      	ldr	r1, [r1, #4]
 8005184:	e7cc      	b.n	8005120 <_malloc_r+0x2c>
 8005186:	1cc4      	adds	r4, r0, #3
 8005188:	f024 0403 	bic.w	r4, r4, #3
 800518c:	42a0      	cmp	r0, r4
 800518e:	d005      	beq.n	800519c <_malloc_r+0xa8>
 8005190:	1a21      	subs	r1, r4, r0
 8005192:	4630      	mov	r0, r6
 8005194:	f000 f808 	bl	80051a8 <_sbrk_r>
 8005198:	3001      	adds	r0, #1
 800519a:	d0cf      	beq.n	800513c <_malloc_r+0x48>
 800519c:	6025      	str	r5, [r4, #0]
 800519e:	e7db      	b.n	8005158 <_malloc_r+0x64>
 80051a0:	200000d4 	.word	0x200000d4
 80051a4:	200000d8 	.word	0x200000d8

080051a8 <_sbrk_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	2300      	movs	r3, #0
 80051ac:	4c05      	ldr	r4, [pc, #20]	; (80051c4 <_sbrk_r+0x1c>)
 80051ae:	4605      	mov	r5, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	f7fd fab8 	bl	8002728 <_sbrk>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d102      	bne.n	80051c2 <_sbrk_r+0x1a>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	b103      	cbz	r3, 80051c2 <_sbrk_r+0x1a>
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	200004b8 	.word	0x200004b8

080051c8 <siprintf>:
 80051c8:	b40e      	push	{r1, r2, r3}
 80051ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051ce:	b500      	push	{lr}
 80051d0:	b09c      	sub	sp, #112	; 0x70
 80051d2:	ab1d      	add	r3, sp, #116	; 0x74
 80051d4:	9002      	str	r0, [sp, #8]
 80051d6:	9006      	str	r0, [sp, #24]
 80051d8:	9107      	str	r1, [sp, #28]
 80051da:	9104      	str	r1, [sp, #16]
 80051dc:	4808      	ldr	r0, [pc, #32]	; (8005200 <siprintf+0x38>)
 80051de:	4909      	ldr	r1, [pc, #36]	; (8005204 <siprintf+0x3c>)
 80051e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e4:	9105      	str	r1, [sp, #20]
 80051e6:	6800      	ldr	r0, [r0, #0]
 80051e8:	a902      	add	r1, sp, #8
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	f000 f868 	bl	80052c0 <_svfiprintf_r>
 80051f0:	2200      	movs	r2, #0
 80051f2:	9b02      	ldr	r3, [sp, #8]
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	b01c      	add	sp, #112	; 0x70
 80051f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051fc:	b003      	add	sp, #12
 80051fe:	4770      	bx	lr
 8005200:	2000002c 	.word	0x2000002c
 8005204:	ffff0208 	.word	0xffff0208

08005208 <__malloc_lock>:
 8005208:	4770      	bx	lr

0800520a <__malloc_unlock>:
 800520a:	4770      	bx	lr

0800520c <__ssputs_r>:
 800520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	688e      	ldr	r6, [r1, #8]
 8005212:	4682      	mov	sl, r0
 8005214:	429e      	cmp	r6, r3
 8005216:	460c      	mov	r4, r1
 8005218:	4690      	mov	r8, r2
 800521a:	4699      	mov	r9, r3
 800521c:	d837      	bhi.n	800528e <__ssputs_r+0x82>
 800521e:	898a      	ldrh	r2, [r1, #12]
 8005220:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005224:	d031      	beq.n	800528a <__ssputs_r+0x7e>
 8005226:	2302      	movs	r3, #2
 8005228:	6825      	ldr	r5, [r4, #0]
 800522a:	6909      	ldr	r1, [r1, #16]
 800522c:	1a6f      	subs	r7, r5, r1
 800522e:	6965      	ldr	r5, [r4, #20]
 8005230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005234:	fb95 f5f3 	sdiv	r5, r5, r3
 8005238:	f109 0301 	add.w	r3, r9, #1
 800523c:	443b      	add	r3, r7
 800523e:	429d      	cmp	r5, r3
 8005240:	bf38      	it	cc
 8005242:	461d      	movcc	r5, r3
 8005244:	0553      	lsls	r3, r2, #21
 8005246:	d530      	bpl.n	80052aa <__ssputs_r+0x9e>
 8005248:	4629      	mov	r1, r5
 800524a:	f7ff ff53 	bl	80050f4 <_malloc_r>
 800524e:	4606      	mov	r6, r0
 8005250:	b950      	cbnz	r0, 8005268 <__ssputs_r+0x5c>
 8005252:	230c      	movs	r3, #12
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	f8ca 3000 	str.w	r3, [sl]
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005262:	81a3      	strh	r3, [r4, #12]
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	463a      	mov	r2, r7
 800526a:	6921      	ldr	r1, [r4, #16]
 800526c:	f000 fab6 	bl	80057dc <memcpy>
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	6126      	str	r6, [r4, #16]
 800527e:	443e      	add	r6, r7
 8005280:	6026      	str	r6, [r4, #0]
 8005282:	464e      	mov	r6, r9
 8005284:	6165      	str	r5, [r4, #20]
 8005286:	1bed      	subs	r5, r5, r7
 8005288:	60a5      	str	r5, [r4, #8]
 800528a:	454e      	cmp	r6, r9
 800528c:	d900      	bls.n	8005290 <__ssputs_r+0x84>
 800528e:	464e      	mov	r6, r9
 8005290:	4632      	mov	r2, r6
 8005292:	4641      	mov	r1, r8
 8005294:	6820      	ldr	r0, [r4, #0]
 8005296:	f000 faac 	bl	80057f2 <memmove>
 800529a:	68a3      	ldr	r3, [r4, #8]
 800529c:	2000      	movs	r0, #0
 800529e:	1b9b      	subs	r3, r3, r6
 80052a0:	60a3      	str	r3, [r4, #8]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	441e      	add	r6, r3
 80052a6:	6026      	str	r6, [r4, #0]
 80052a8:	e7dc      	b.n	8005264 <__ssputs_r+0x58>
 80052aa:	462a      	mov	r2, r5
 80052ac:	f000 faba 	bl	8005824 <_realloc_r>
 80052b0:	4606      	mov	r6, r0
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d1e2      	bne.n	800527c <__ssputs_r+0x70>
 80052b6:	6921      	ldr	r1, [r4, #16]
 80052b8:	4650      	mov	r0, sl
 80052ba:	f7ff fecf 	bl	800505c <_free_r>
 80052be:	e7c8      	b.n	8005252 <__ssputs_r+0x46>

080052c0 <_svfiprintf_r>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	461d      	mov	r5, r3
 80052c6:	898b      	ldrh	r3, [r1, #12]
 80052c8:	b09d      	sub	sp, #116	; 0x74
 80052ca:	061f      	lsls	r7, r3, #24
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	4616      	mov	r6, r2
 80052d2:	d50f      	bpl.n	80052f4 <_svfiprintf_r+0x34>
 80052d4:	690b      	ldr	r3, [r1, #16]
 80052d6:	b96b      	cbnz	r3, 80052f4 <_svfiprintf_r+0x34>
 80052d8:	2140      	movs	r1, #64	; 0x40
 80052da:	f7ff ff0b 	bl	80050f4 <_malloc_r>
 80052de:	6020      	str	r0, [r4, #0]
 80052e0:	6120      	str	r0, [r4, #16]
 80052e2:	b928      	cbnz	r0, 80052f0 <_svfiprintf_r+0x30>
 80052e4:	230c      	movs	r3, #12
 80052e6:	f8c8 3000 	str.w	r3, [r8]
 80052ea:	f04f 30ff 	mov.w	r0, #4294967295
 80052ee:	e0c8      	b.n	8005482 <_svfiprintf_r+0x1c2>
 80052f0:	2340      	movs	r3, #64	; 0x40
 80052f2:	6163      	str	r3, [r4, #20]
 80052f4:	2300      	movs	r3, #0
 80052f6:	9309      	str	r3, [sp, #36]	; 0x24
 80052f8:	2320      	movs	r3, #32
 80052fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052fe:	2330      	movs	r3, #48	; 0x30
 8005300:	f04f 0b01 	mov.w	fp, #1
 8005304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005308:	9503      	str	r5, [sp, #12]
 800530a:	4637      	mov	r7, r6
 800530c:	463d      	mov	r5, r7
 800530e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005312:	b10b      	cbz	r3, 8005318 <_svfiprintf_r+0x58>
 8005314:	2b25      	cmp	r3, #37	; 0x25
 8005316:	d13e      	bne.n	8005396 <_svfiprintf_r+0xd6>
 8005318:	ebb7 0a06 	subs.w	sl, r7, r6
 800531c:	d00b      	beq.n	8005336 <_svfiprintf_r+0x76>
 800531e:	4653      	mov	r3, sl
 8005320:	4632      	mov	r2, r6
 8005322:	4621      	mov	r1, r4
 8005324:	4640      	mov	r0, r8
 8005326:	f7ff ff71 	bl	800520c <__ssputs_r>
 800532a:	3001      	adds	r0, #1
 800532c:	f000 80a4 	beq.w	8005478 <_svfiprintf_r+0x1b8>
 8005330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005332:	4453      	add	r3, sl
 8005334:	9309      	str	r3, [sp, #36]	; 0x24
 8005336:	783b      	ldrb	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 809d 	beq.w	8005478 <_svfiprintf_r+0x1b8>
 800533e:	2300      	movs	r3, #0
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005348:	9304      	str	r3, [sp, #16]
 800534a:	9307      	str	r3, [sp, #28]
 800534c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005350:	931a      	str	r3, [sp, #104]	; 0x68
 8005352:	462f      	mov	r7, r5
 8005354:	2205      	movs	r2, #5
 8005356:	f817 1b01 	ldrb.w	r1, [r7], #1
 800535a:	4850      	ldr	r0, [pc, #320]	; (800549c <_svfiprintf_r+0x1dc>)
 800535c:	f000 fa30 	bl	80057c0 <memchr>
 8005360:	9b04      	ldr	r3, [sp, #16]
 8005362:	b9d0      	cbnz	r0, 800539a <_svfiprintf_r+0xda>
 8005364:	06d9      	lsls	r1, r3, #27
 8005366:	bf44      	itt	mi
 8005368:	2220      	movmi	r2, #32
 800536a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800536e:	071a      	lsls	r2, r3, #28
 8005370:	bf44      	itt	mi
 8005372:	222b      	movmi	r2, #43	; 0x2b
 8005374:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005378:	782a      	ldrb	r2, [r5, #0]
 800537a:	2a2a      	cmp	r2, #42	; 0x2a
 800537c:	d015      	beq.n	80053aa <_svfiprintf_r+0xea>
 800537e:	462f      	mov	r7, r5
 8005380:	2000      	movs	r0, #0
 8005382:	250a      	movs	r5, #10
 8005384:	9a07      	ldr	r2, [sp, #28]
 8005386:	4639      	mov	r1, r7
 8005388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800538c:	3b30      	subs	r3, #48	; 0x30
 800538e:	2b09      	cmp	r3, #9
 8005390:	d94d      	bls.n	800542e <_svfiprintf_r+0x16e>
 8005392:	b1b8      	cbz	r0, 80053c4 <_svfiprintf_r+0x104>
 8005394:	e00f      	b.n	80053b6 <_svfiprintf_r+0xf6>
 8005396:	462f      	mov	r7, r5
 8005398:	e7b8      	b.n	800530c <_svfiprintf_r+0x4c>
 800539a:	4a40      	ldr	r2, [pc, #256]	; (800549c <_svfiprintf_r+0x1dc>)
 800539c:	463d      	mov	r5, r7
 800539e:	1a80      	subs	r0, r0, r2
 80053a0:	fa0b f000 	lsl.w	r0, fp, r0
 80053a4:	4318      	orrs	r0, r3
 80053a6:	9004      	str	r0, [sp, #16]
 80053a8:	e7d3      	b.n	8005352 <_svfiprintf_r+0x92>
 80053aa:	9a03      	ldr	r2, [sp, #12]
 80053ac:	1d11      	adds	r1, r2, #4
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	9103      	str	r1, [sp, #12]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	db01      	blt.n	80053ba <_svfiprintf_r+0xfa>
 80053b6:	9207      	str	r2, [sp, #28]
 80053b8:	e004      	b.n	80053c4 <_svfiprintf_r+0x104>
 80053ba:	4252      	negs	r2, r2
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	9207      	str	r2, [sp, #28]
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	783b      	ldrb	r3, [r7, #0]
 80053c6:	2b2e      	cmp	r3, #46	; 0x2e
 80053c8:	d10c      	bne.n	80053e4 <_svfiprintf_r+0x124>
 80053ca:	787b      	ldrb	r3, [r7, #1]
 80053cc:	2b2a      	cmp	r3, #42	; 0x2a
 80053ce:	d133      	bne.n	8005438 <_svfiprintf_r+0x178>
 80053d0:	9b03      	ldr	r3, [sp, #12]
 80053d2:	3702      	adds	r7, #2
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	9203      	str	r2, [sp, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bfb8      	it	lt
 80053de:	f04f 33ff 	movlt.w	r3, #4294967295
 80053e2:	9305      	str	r3, [sp, #20]
 80053e4:	4d2e      	ldr	r5, [pc, #184]	; (80054a0 <_svfiprintf_r+0x1e0>)
 80053e6:	2203      	movs	r2, #3
 80053e8:	7839      	ldrb	r1, [r7, #0]
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f9e8 	bl	80057c0 <memchr>
 80053f0:	b138      	cbz	r0, 8005402 <_svfiprintf_r+0x142>
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	1b40      	subs	r0, r0, r5
 80053f6:	fa03 f000 	lsl.w	r0, r3, r0
 80053fa:	9b04      	ldr	r3, [sp, #16]
 80053fc:	3701      	adds	r7, #1
 80053fe:	4303      	orrs	r3, r0
 8005400:	9304      	str	r3, [sp, #16]
 8005402:	7839      	ldrb	r1, [r7, #0]
 8005404:	2206      	movs	r2, #6
 8005406:	4827      	ldr	r0, [pc, #156]	; (80054a4 <_svfiprintf_r+0x1e4>)
 8005408:	1c7e      	adds	r6, r7, #1
 800540a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800540e:	f000 f9d7 	bl	80057c0 <memchr>
 8005412:	2800      	cmp	r0, #0
 8005414:	d038      	beq.n	8005488 <_svfiprintf_r+0x1c8>
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <_svfiprintf_r+0x1e8>)
 8005418:	bb13      	cbnz	r3, 8005460 <_svfiprintf_r+0x1a0>
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	3307      	adds	r3, #7
 800541e:	f023 0307 	bic.w	r3, r3, #7
 8005422:	3308      	adds	r3, #8
 8005424:	9303      	str	r3, [sp, #12]
 8005426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005428:	444b      	add	r3, r9
 800542a:	9309      	str	r3, [sp, #36]	; 0x24
 800542c:	e76d      	b.n	800530a <_svfiprintf_r+0x4a>
 800542e:	fb05 3202 	mla	r2, r5, r2, r3
 8005432:	2001      	movs	r0, #1
 8005434:	460f      	mov	r7, r1
 8005436:	e7a6      	b.n	8005386 <_svfiprintf_r+0xc6>
 8005438:	2300      	movs	r3, #0
 800543a:	250a      	movs	r5, #10
 800543c:	4619      	mov	r1, r3
 800543e:	3701      	adds	r7, #1
 8005440:	9305      	str	r3, [sp, #20]
 8005442:	4638      	mov	r0, r7
 8005444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005448:	3a30      	subs	r2, #48	; 0x30
 800544a:	2a09      	cmp	r2, #9
 800544c:	d903      	bls.n	8005456 <_svfiprintf_r+0x196>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0c8      	beq.n	80053e4 <_svfiprintf_r+0x124>
 8005452:	9105      	str	r1, [sp, #20]
 8005454:	e7c6      	b.n	80053e4 <_svfiprintf_r+0x124>
 8005456:	fb05 2101 	mla	r1, r5, r1, r2
 800545a:	2301      	movs	r3, #1
 800545c:	4607      	mov	r7, r0
 800545e:	e7f0      	b.n	8005442 <_svfiprintf_r+0x182>
 8005460:	ab03      	add	r3, sp, #12
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4622      	mov	r2, r4
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <_svfiprintf_r+0x1ec>)
 8005468:	a904      	add	r1, sp, #16
 800546a:	4640      	mov	r0, r8
 800546c:	f3af 8000 	nop.w
 8005470:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005474:	4681      	mov	r9, r0
 8005476:	d1d6      	bne.n	8005426 <_svfiprintf_r+0x166>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	065b      	lsls	r3, r3, #25
 800547c:	f53f af35 	bmi.w	80052ea <_svfiprintf_r+0x2a>
 8005480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005482:	b01d      	add	sp, #116	; 0x74
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	ab03      	add	r3, sp, #12
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4622      	mov	r2, r4
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <_svfiprintf_r+0x1ec>)
 8005490:	a904      	add	r1, sp, #16
 8005492:	4640      	mov	r0, r8
 8005494:	f000 f882 	bl	800559c <_printf_i>
 8005498:	e7ea      	b.n	8005470 <_svfiprintf_r+0x1b0>
 800549a:	bf00      	nop
 800549c:	080084fc 	.word	0x080084fc
 80054a0:	08008502 	.word	0x08008502
 80054a4:	08008506 	.word	0x08008506
 80054a8:	00000000 	.word	0x00000000
 80054ac:	0800520d 	.word	0x0800520d

080054b0 <_printf_common>:
 80054b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	4691      	mov	r9, r2
 80054b6:	461f      	mov	r7, r3
 80054b8:	688a      	ldr	r2, [r1, #8]
 80054ba:	690b      	ldr	r3, [r1, #16]
 80054bc:	4606      	mov	r6, r0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfb8      	it	lt
 80054c2:	4613      	movlt	r3, r2
 80054c4:	f8c9 3000 	str.w	r3, [r9]
 80054c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054cc:	460c      	mov	r4, r1
 80054ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054d2:	b112      	cbz	r2, 80054da <_printf_common+0x2a>
 80054d4:	3301      	adds	r3, #1
 80054d6:	f8c9 3000 	str.w	r3, [r9]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	0699      	lsls	r1, r3, #26
 80054de:	bf42      	ittt	mi
 80054e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054e4:	3302      	addmi	r3, #2
 80054e6:	f8c9 3000 	strmi.w	r3, [r9]
 80054ea:	6825      	ldr	r5, [r4, #0]
 80054ec:	f015 0506 	ands.w	r5, r5, #6
 80054f0:	d107      	bne.n	8005502 <_printf_common+0x52>
 80054f2:	f104 0a19 	add.w	sl, r4, #25
 80054f6:	68e3      	ldr	r3, [r4, #12]
 80054f8:	f8d9 2000 	ldr.w	r2, [r9]
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	42ab      	cmp	r3, r5
 8005500:	dc29      	bgt.n	8005556 <_printf_common+0xa6>
 8005502:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005506:	6822      	ldr	r2, [r4, #0]
 8005508:	3300      	adds	r3, #0
 800550a:	bf18      	it	ne
 800550c:	2301      	movne	r3, #1
 800550e:	0692      	lsls	r2, r2, #26
 8005510:	d42e      	bmi.n	8005570 <_printf_common+0xc0>
 8005512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005516:	4639      	mov	r1, r7
 8005518:	4630      	mov	r0, r6
 800551a:	47c0      	blx	r8
 800551c:	3001      	adds	r0, #1
 800551e:	d021      	beq.n	8005564 <_printf_common+0xb4>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	68e5      	ldr	r5, [r4, #12]
 8005524:	f003 0306 	and.w	r3, r3, #6
 8005528:	2b04      	cmp	r3, #4
 800552a:	bf18      	it	ne
 800552c:	2500      	movne	r5, #0
 800552e:	f8d9 2000 	ldr.w	r2, [r9]
 8005532:	f04f 0900 	mov.w	r9, #0
 8005536:	bf08      	it	eq
 8005538:	1aad      	subeq	r5, r5, r2
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	6922      	ldr	r2, [r4, #16]
 800553e:	bf08      	it	eq
 8005540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005544:	4293      	cmp	r3, r2
 8005546:	bfc4      	itt	gt
 8005548:	1a9b      	subgt	r3, r3, r2
 800554a:	18ed      	addgt	r5, r5, r3
 800554c:	341a      	adds	r4, #26
 800554e:	454d      	cmp	r5, r9
 8005550:	d11a      	bne.n	8005588 <_printf_common+0xd8>
 8005552:	2000      	movs	r0, #0
 8005554:	e008      	b.n	8005568 <_printf_common+0xb8>
 8005556:	2301      	movs	r3, #1
 8005558:	4652      	mov	r2, sl
 800555a:	4639      	mov	r1, r7
 800555c:	4630      	mov	r0, r6
 800555e:	47c0      	blx	r8
 8005560:	3001      	adds	r0, #1
 8005562:	d103      	bne.n	800556c <_printf_common+0xbc>
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556c:	3501      	adds	r5, #1
 800556e:	e7c2      	b.n	80054f6 <_printf_common+0x46>
 8005570:	2030      	movs	r0, #48	; 0x30
 8005572:	18e1      	adds	r1, r4, r3
 8005574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800557e:	4422      	add	r2, r4
 8005580:	3302      	adds	r3, #2
 8005582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005586:	e7c4      	b.n	8005512 <_printf_common+0x62>
 8005588:	2301      	movs	r3, #1
 800558a:	4622      	mov	r2, r4
 800558c:	4639      	mov	r1, r7
 800558e:	4630      	mov	r0, r6
 8005590:	47c0      	blx	r8
 8005592:	3001      	adds	r0, #1
 8005594:	d0e6      	beq.n	8005564 <_printf_common+0xb4>
 8005596:	f109 0901 	add.w	r9, r9, #1
 800559a:	e7d8      	b.n	800554e <_printf_common+0x9e>

0800559c <_printf_i>:
 800559c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055a4:	460c      	mov	r4, r1
 80055a6:	7e09      	ldrb	r1, [r1, #24]
 80055a8:	b085      	sub	sp, #20
 80055aa:	296e      	cmp	r1, #110	; 0x6e
 80055ac:	4617      	mov	r7, r2
 80055ae:	4606      	mov	r6, r0
 80055b0:	4698      	mov	r8, r3
 80055b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055b4:	f000 80b3 	beq.w	800571e <_printf_i+0x182>
 80055b8:	d822      	bhi.n	8005600 <_printf_i+0x64>
 80055ba:	2963      	cmp	r1, #99	; 0x63
 80055bc:	d036      	beq.n	800562c <_printf_i+0x90>
 80055be:	d80a      	bhi.n	80055d6 <_printf_i+0x3a>
 80055c0:	2900      	cmp	r1, #0
 80055c2:	f000 80b9 	beq.w	8005738 <_printf_i+0x19c>
 80055c6:	2958      	cmp	r1, #88	; 0x58
 80055c8:	f000 8083 	beq.w	80056d2 <_printf_i+0x136>
 80055cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055d4:	e032      	b.n	800563c <_printf_i+0xa0>
 80055d6:	2964      	cmp	r1, #100	; 0x64
 80055d8:	d001      	beq.n	80055de <_printf_i+0x42>
 80055da:	2969      	cmp	r1, #105	; 0x69
 80055dc:	d1f6      	bne.n	80055cc <_printf_i+0x30>
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	6813      	ldr	r3, [r2, #0]
 80055e2:	0605      	lsls	r5, r0, #24
 80055e4:	f103 0104 	add.w	r1, r3, #4
 80055e8:	d52a      	bpl.n	8005640 <_printf_i+0xa4>
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da03      	bge.n	80055fa <_printf_i+0x5e>
 80055f2:	222d      	movs	r2, #45	; 0x2d
 80055f4:	425b      	negs	r3, r3
 80055f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055fa:	486f      	ldr	r0, [pc, #444]	; (80057b8 <_printf_i+0x21c>)
 80055fc:	220a      	movs	r2, #10
 80055fe:	e039      	b.n	8005674 <_printf_i+0xd8>
 8005600:	2973      	cmp	r1, #115	; 0x73
 8005602:	f000 809d 	beq.w	8005740 <_printf_i+0x1a4>
 8005606:	d808      	bhi.n	800561a <_printf_i+0x7e>
 8005608:	296f      	cmp	r1, #111	; 0x6f
 800560a:	d020      	beq.n	800564e <_printf_i+0xb2>
 800560c:	2970      	cmp	r1, #112	; 0x70
 800560e:	d1dd      	bne.n	80055cc <_printf_i+0x30>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	f043 0320 	orr.w	r3, r3, #32
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	e003      	b.n	8005622 <_printf_i+0x86>
 800561a:	2975      	cmp	r1, #117	; 0x75
 800561c:	d017      	beq.n	800564e <_printf_i+0xb2>
 800561e:	2978      	cmp	r1, #120	; 0x78
 8005620:	d1d4      	bne.n	80055cc <_printf_i+0x30>
 8005622:	2378      	movs	r3, #120	; 0x78
 8005624:	4865      	ldr	r0, [pc, #404]	; (80057bc <_printf_i+0x220>)
 8005626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800562a:	e055      	b.n	80056d8 <_printf_i+0x13c>
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005632:	1d19      	adds	r1, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6011      	str	r1, [r2, #0]
 8005638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800563c:	2301      	movs	r3, #1
 800563e:	e08c      	b.n	800575a <_printf_i+0x1be>
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005646:	6011      	str	r1, [r2, #0]
 8005648:	bf18      	it	ne
 800564a:	b21b      	sxthne	r3, r3
 800564c:	e7cf      	b.n	80055ee <_printf_i+0x52>
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	6825      	ldr	r5, [r4, #0]
 8005652:	1d18      	adds	r0, r3, #4
 8005654:	6010      	str	r0, [r2, #0]
 8005656:	0628      	lsls	r0, r5, #24
 8005658:	d501      	bpl.n	800565e <_printf_i+0xc2>
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	e002      	b.n	8005664 <_printf_i+0xc8>
 800565e:	0668      	lsls	r0, r5, #25
 8005660:	d5fb      	bpl.n	800565a <_printf_i+0xbe>
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	296f      	cmp	r1, #111	; 0x6f
 8005666:	bf14      	ite	ne
 8005668:	220a      	movne	r2, #10
 800566a:	2208      	moveq	r2, #8
 800566c:	4852      	ldr	r0, [pc, #328]	; (80057b8 <_printf_i+0x21c>)
 800566e:	2100      	movs	r1, #0
 8005670:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005674:	6865      	ldr	r5, [r4, #4]
 8005676:	2d00      	cmp	r5, #0
 8005678:	60a5      	str	r5, [r4, #8]
 800567a:	f2c0 8095 	blt.w	80057a8 <_printf_i+0x20c>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	f021 0104 	bic.w	r1, r1, #4
 8005684:	6021      	str	r1, [r4, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d13d      	bne.n	8005706 <_printf_i+0x16a>
 800568a:	2d00      	cmp	r5, #0
 800568c:	f040 808e 	bne.w	80057ac <_printf_i+0x210>
 8005690:	4665      	mov	r5, ip
 8005692:	2a08      	cmp	r2, #8
 8005694:	d10b      	bne.n	80056ae <_printf_i+0x112>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	07db      	lsls	r3, r3, #31
 800569a:	d508      	bpl.n	80056ae <_printf_i+0x112>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	bfde      	ittt	le
 80056a4:	2330      	movle	r3, #48	; 0x30
 80056a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056ae:	ebac 0305 	sub.w	r3, ip, r5
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	f8cd 8000 	str.w	r8, [sp]
 80056b8:	463b      	mov	r3, r7
 80056ba:	aa03      	add	r2, sp, #12
 80056bc:	4621      	mov	r1, r4
 80056be:	4630      	mov	r0, r6
 80056c0:	f7ff fef6 	bl	80054b0 <_printf_common>
 80056c4:	3001      	adds	r0, #1
 80056c6:	d14d      	bne.n	8005764 <_printf_i+0x1c8>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	b005      	add	sp, #20
 80056ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056d2:	4839      	ldr	r0, [pc, #228]	; (80057b8 <_printf_i+0x21c>)
 80056d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056d8:	6813      	ldr	r3, [r2, #0]
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	1d1d      	adds	r5, r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6015      	str	r5, [r2, #0]
 80056e2:	060a      	lsls	r2, r1, #24
 80056e4:	d50b      	bpl.n	80056fe <_printf_i+0x162>
 80056e6:	07ca      	lsls	r2, r1, #31
 80056e8:	bf44      	itt	mi
 80056ea:	f041 0120 	orrmi.w	r1, r1, #32
 80056ee:	6021      	strmi	r1, [r4, #0]
 80056f0:	b91b      	cbnz	r3, 80056fa <_printf_i+0x15e>
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	f022 0220 	bic.w	r2, r2, #32
 80056f8:	6022      	str	r2, [r4, #0]
 80056fa:	2210      	movs	r2, #16
 80056fc:	e7b7      	b.n	800566e <_printf_i+0xd2>
 80056fe:	064d      	lsls	r5, r1, #25
 8005700:	bf48      	it	mi
 8005702:	b29b      	uxthmi	r3, r3
 8005704:	e7ef      	b.n	80056e6 <_printf_i+0x14a>
 8005706:	4665      	mov	r5, ip
 8005708:	fbb3 f1f2 	udiv	r1, r3, r2
 800570c:	fb02 3311 	mls	r3, r2, r1, r3
 8005710:	5cc3      	ldrb	r3, [r0, r3]
 8005712:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005716:	460b      	mov	r3, r1
 8005718:	2900      	cmp	r1, #0
 800571a:	d1f5      	bne.n	8005708 <_printf_i+0x16c>
 800571c:	e7b9      	b.n	8005692 <_printf_i+0xf6>
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	6825      	ldr	r5, [r4, #0]
 8005722:	1d18      	adds	r0, r3, #4
 8005724:	6961      	ldr	r1, [r4, #20]
 8005726:	6010      	str	r0, [r2, #0]
 8005728:	0628      	lsls	r0, r5, #24
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	d501      	bpl.n	8005732 <_printf_i+0x196>
 800572e:	6019      	str	r1, [r3, #0]
 8005730:	e002      	b.n	8005738 <_printf_i+0x19c>
 8005732:	066a      	lsls	r2, r5, #25
 8005734:	d5fb      	bpl.n	800572e <_printf_i+0x192>
 8005736:	8019      	strh	r1, [r3, #0]
 8005738:	2300      	movs	r3, #0
 800573a:	4665      	mov	r5, ip
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	e7b9      	b.n	80056b4 <_printf_i+0x118>
 8005740:	6813      	ldr	r3, [r2, #0]
 8005742:	1d19      	adds	r1, r3, #4
 8005744:	6011      	str	r1, [r2, #0]
 8005746:	681d      	ldr	r5, [r3, #0]
 8005748:	6862      	ldr	r2, [r4, #4]
 800574a:	2100      	movs	r1, #0
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f837 	bl	80057c0 <memchr>
 8005752:	b108      	cbz	r0, 8005758 <_printf_i+0x1bc>
 8005754:	1b40      	subs	r0, r0, r5
 8005756:	6060      	str	r0, [r4, #4]
 8005758:	6863      	ldr	r3, [r4, #4]
 800575a:	6123      	str	r3, [r4, #16]
 800575c:	2300      	movs	r3, #0
 800575e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005762:	e7a7      	b.n	80056b4 <_printf_i+0x118>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	462a      	mov	r2, r5
 8005768:	4639      	mov	r1, r7
 800576a:	4630      	mov	r0, r6
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d0aa      	beq.n	80056c8 <_printf_i+0x12c>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	079b      	lsls	r3, r3, #30
 8005776:	d413      	bmi.n	80057a0 <_printf_i+0x204>
 8005778:	68e0      	ldr	r0, [r4, #12]
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	4298      	cmp	r0, r3
 800577e:	bfb8      	it	lt
 8005780:	4618      	movlt	r0, r3
 8005782:	e7a3      	b.n	80056cc <_printf_i+0x130>
 8005784:	2301      	movs	r3, #1
 8005786:	464a      	mov	r2, r9
 8005788:	4639      	mov	r1, r7
 800578a:	4630      	mov	r0, r6
 800578c:	47c0      	blx	r8
 800578e:	3001      	adds	r0, #1
 8005790:	d09a      	beq.n	80056c8 <_printf_i+0x12c>
 8005792:	3501      	adds	r5, #1
 8005794:	68e3      	ldr	r3, [r4, #12]
 8005796:	9a03      	ldr	r2, [sp, #12]
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	42ab      	cmp	r3, r5
 800579c:	dcf2      	bgt.n	8005784 <_printf_i+0x1e8>
 800579e:	e7eb      	b.n	8005778 <_printf_i+0x1dc>
 80057a0:	2500      	movs	r5, #0
 80057a2:	f104 0919 	add.w	r9, r4, #25
 80057a6:	e7f5      	b.n	8005794 <_printf_i+0x1f8>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ac      	bne.n	8005706 <_printf_i+0x16a>
 80057ac:	7803      	ldrb	r3, [r0, #0]
 80057ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057b6:	e76c      	b.n	8005692 <_printf_i+0xf6>
 80057b8:	0800850d 	.word	0x0800850d
 80057bc:	0800851e 	.word	0x0800851e

080057c0 <memchr>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	b2c9      	uxtb	r1, r1
 80057c4:	4402      	add	r2, r0
 80057c6:	4290      	cmp	r0, r2
 80057c8:	4603      	mov	r3, r0
 80057ca:	d101      	bne.n	80057d0 <memchr+0x10>
 80057cc:	2300      	movs	r3, #0
 80057ce:	e003      	b.n	80057d8 <memchr+0x18>
 80057d0:	781c      	ldrb	r4, [r3, #0]
 80057d2:	3001      	adds	r0, #1
 80057d4:	428c      	cmp	r4, r1
 80057d6:	d1f6      	bne.n	80057c6 <memchr+0x6>
 80057d8:	4618      	mov	r0, r3
 80057da:	bd10      	pop	{r4, pc}

080057dc <memcpy>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	1e43      	subs	r3, r0, #1
 80057e0:	440a      	add	r2, r1
 80057e2:	4291      	cmp	r1, r2
 80057e4:	d100      	bne.n	80057e8 <memcpy+0xc>
 80057e6:	bd10      	pop	{r4, pc}
 80057e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f0:	e7f7      	b.n	80057e2 <memcpy+0x6>

080057f2 <memmove>:
 80057f2:	4288      	cmp	r0, r1
 80057f4:	b510      	push	{r4, lr}
 80057f6:	eb01 0302 	add.w	r3, r1, r2
 80057fa:	d807      	bhi.n	800580c <memmove+0x1a>
 80057fc:	1e42      	subs	r2, r0, #1
 80057fe:	4299      	cmp	r1, r3
 8005800:	d00a      	beq.n	8005818 <memmove+0x26>
 8005802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005806:	f802 4f01 	strb.w	r4, [r2, #1]!
 800580a:	e7f8      	b.n	80057fe <memmove+0xc>
 800580c:	4283      	cmp	r3, r0
 800580e:	d9f5      	bls.n	80057fc <memmove+0xa>
 8005810:	1881      	adds	r1, r0, r2
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	42d3      	cmn	r3, r2
 8005816:	d100      	bne.n	800581a <memmove+0x28>
 8005818:	bd10      	pop	{r4, pc}
 800581a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800581e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005822:	e7f7      	b.n	8005814 <memmove+0x22>

08005824 <_realloc_r>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	4607      	mov	r7, r0
 8005828:	4614      	mov	r4, r2
 800582a:	460e      	mov	r6, r1
 800582c:	b921      	cbnz	r1, 8005838 <_realloc_r+0x14>
 800582e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005832:	4611      	mov	r1, r2
 8005834:	f7ff bc5e 	b.w	80050f4 <_malloc_r>
 8005838:	b922      	cbnz	r2, 8005844 <_realloc_r+0x20>
 800583a:	f7ff fc0f 	bl	800505c <_free_r>
 800583e:	4625      	mov	r5, r4
 8005840:	4628      	mov	r0, r5
 8005842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005844:	f000 f814 	bl	8005870 <_malloc_usable_size_r>
 8005848:	42a0      	cmp	r0, r4
 800584a:	d20f      	bcs.n	800586c <_realloc_r+0x48>
 800584c:	4621      	mov	r1, r4
 800584e:	4638      	mov	r0, r7
 8005850:	f7ff fc50 	bl	80050f4 <_malloc_r>
 8005854:	4605      	mov	r5, r0
 8005856:	2800      	cmp	r0, #0
 8005858:	d0f2      	beq.n	8005840 <_realloc_r+0x1c>
 800585a:	4631      	mov	r1, r6
 800585c:	4622      	mov	r2, r4
 800585e:	f7ff ffbd 	bl	80057dc <memcpy>
 8005862:	4631      	mov	r1, r6
 8005864:	4638      	mov	r0, r7
 8005866:	f7ff fbf9 	bl	800505c <_free_r>
 800586a:	e7e9      	b.n	8005840 <_realloc_r+0x1c>
 800586c:	4635      	mov	r5, r6
 800586e:	e7e7      	b.n	8005840 <_realloc_r+0x1c>

08005870 <_malloc_usable_size_r>:
 8005870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005874:	1f18      	subs	r0, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	bfbc      	itt	lt
 800587a:	580b      	ldrlt	r3, [r1, r0]
 800587c:	18c0      	addlt	r0, r0, r3
 800587e:	4770      	bx	lr

08005880 <floor>:
 8005880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005884:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005888:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800588c:	2e13      	cmp	r6, #19
 800588e:	4607      	mov	r7, r0
 8005890:	460b      	mov	r3, r1
 8005892:	460c      	mov	r4, r1
 8005894:	4605      	mov	r5, r0
 8005896:	dc35      	bgt.n	8005904 <floor+0x84>
 8005898:	2e00      	cmp	r6, #0
 800589a:	da16      	bge.n	80058ca <floor+0x4a>
 800589c:	a336      	add	r3, pc, #216	; (adr r3, 8005978 <floor+0xf8>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa fc5b 	bl	800015c <__adddf3>
 80058a6:	2200      	movs	r2, #0
 80058a8:	2300      	movs	r3, #0
 80058aa:	f7fb f89d 	bl	80009e8 <__aeabi_dcmpgt>
 80058ae:	b148      	cbz	r0, 80058c4 <floor+0x44>
 80058b0:	2c00      	cmp	r4, #0
 80058b2:	da5b      	bge.n	800596c <floor+0xec>
 80058b4:	2500      	movs	r5, #0
 80058b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80058ba:	4a31      	ldr	r2, [pc, #196]	; (8005980 <floor+0x100>)
 80058bc:	433b      	orrs	r3, r7
 80058be:	42ab      	cmp	r3, r5
 80058c0:	bf18      	it	ne
 80058c2:	4614      	movne	r4, r2
 80058c4:	4623      	mov	r3, r4
 80058c6:	462f      	mov	r7, r5
 80058c8:	e026      	b.n	8005918 <floor+0x98>
 80058ca:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <floor+0x104>)
 80058cc:	fa42 f806 	asr.w	r8, r2, r6
 80058d0:	ea01 0208 	and.w	r2, r1, r8
 80058d4:	4302      	orrs	r2, r0
 80058d6:	d01f      	beq.n	8005918 <floor+0x98>
 80058d8:	a327      	add	r3, pc, #156	; (adr r3, 8005978 <floor+0xf8>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f7fa fc3d 	bl	800015c <__adddf3>
 80058e2:	2200      	movs	r2, #0
 80058e4:	2300      	movs	r3, #0
 80058e6:	f7fb f87f 	bl	80009e8 <__aeabi_dcmpgt>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d0ea      	beq.n	80058c4 <floor+0x44>
 80058ee:	2c00      	cmp	r4, #0
 80058f0:	bfbe      	ittt	lt
 80058f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80058f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80058fa:	19a4      	addlt	r4, r4, r6
 80058fc:	ea24 0408 	bic.w	r4, r4, r8
 8005900:	2500      	movs	r5, #0
 8005902:	e7df      	b.n	80058c4 <floor+0x44>
 8005904:	2e33      	cmp	r6, #51	; 0x33
 8005906:	dd0b      	ble.n	8005920 <floor+0xa0>
 8005908:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800590c:	d104      	bne.n	8005918 <floor+0x98>
 800590e:	4602      	mov	r2, r0
 8005910:	f7fa fc24 	bl	800015c <__adddf3>
 8005914:	4607      	mov	r7, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4638      	mov	r0, r7
 800591a:	4619      	mov	r1, r3
 800591c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005920:	f04f 32ff 	mov.w	r2, #4294967295
 8005924:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005928:	fa22 f808 	lsr.w	r8, r2, r8
 800592c:	ea18 0f00 	tst.w	r8, r0
 8005930:	d0f2      	beq.n	8005918 <floor+0x98>
 8005932:	a311      	add	r3, pc, #68	; (adr r3, 8005978 <floor+0xf8>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fc10 	bl	800015c <__adddf3>
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	f7fb f852 	bl	80009e8 <__aeabi_dcmpgt>
 8005944:	2800      	cmp	r0, #0
 8005946:	d0bd      	beq.n	80058c4 <floor+0x44>
 8005948:	2c00      	cmp	r4, #0
 800594a:	da02      	bge.n	8005952 <floor+0xd2>
 800594c:	2e14      	cmp	r6, #20
 800594e:	d103      	bne.n	8005958 <floor+0xd8>
 8005950:	3401      	adds	r4, #1
 8005952:	ea25 0508 	bic.w	r5, r5, r8
 8005956:	e7b5      	b.n	80058c4 <floor+0x44>
 8005958:	2301      	movs	r3, #1
 800595a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800595e:	fa03 f606 	lsl.w	r6, r3, r6
 8005962:	4435      	add	r5, r6
 8005964:	42bd      	cmp	r5, r7
 8005966:	bf38      	it	cc
 8005968:	18e4      	addcc	r4, r4, r3
 800596a:	e7f2      	b.n	8005952 <floor+0xd2>
 800596c:	2500      	movs	r5, #0
 800596e:	462c      	mov	r4, r5
 8005970:	e7a8      	b.n	80058c4 <floor+0x44>
 8005972:	bf00      	nop
 8005974:	f3af 8000 	nop.w
 8005978:	8800759c 	.word	0x8800759c
 800597c:	7e37e43c 	.word	0x7e37e43c
 8005980:	bff00000 	.word	0xbff00000
 8005984:	000fffff 	.word	0x000fffff

08005988 <round>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800598e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8005992:	2c13      	cmp	r4, #19
 8005994:	4606      	mov	r6, r0
 8005996:	460d      	mov	r5, r1
 8005998:	460b      	mov	r3, r1
 800599a:	468c      	mov	ip, r1
 800599c:	4602      	mov	r2, r0
 800599e:	dc17      	bgt.n	80059d0 <round+0x48>
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	da09      	bge.n	80059b8 <round+0x30>
 80059a4:	3401      	adds	r4, #1
 80059a6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80059aa:	d103      	bne.n	80059b4 <round+0x2c>
 80059ac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80059b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059b4:	2200      	movs	r2, #0
 80059b6:	e028      	b.n	8005a0a <round+0x82>
 80059b8:	4915      	ldr	r1, [pc, #84]	; (8005a10 <round+0x88>)
 80059ba:	4121      	asrs	r1, r4
 80059bc:	420d      	tst	r5, r1
 80059be:	d100      	bne.n	80059c2 <round+0x3a>
 80059c0:	b178      	cbz	r0, 80059e2 <round+0x5a>
 80059c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059c6:	4123      	asrs	r3, r4
 80059c8:	4463      	add	r3, ip
 80059ca:	ea23 0301 	bic.w	r3, r3, r1
 80059ce:	e7f1      	b.n	80059b4 <round+0x2c>
 80059d0:	2c33      	cmp	r4, #51	; 0x33
 80059d2:	dd09      	ble.n	80059e8 <round+0x60>
 80059d4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80059d8:	d103      	bne.n	80059e2 <round+0x5a>
 80059da:	f7fa fbbf 	bl	800015c <__adddf3>
 80059de:	4606      	mov	r6, r0
 80059e0:	460d      	mov	r5, r1
 80059e2:	4630      	mov	r0, r6
 80059e4:	4629      	mov	r1, r5
 80059e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ec:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80059f0:	40f8      	lsrs	r0, r7
 80059f2:	4206      	tst	r6, r0
 80059f4:	d0f5      	beq.n	80059e2 <round+0x5a>
 80059f6:	2101      	movs	r1, #1
 80059f8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80059fc:	fa01 f404 	lsl.w	r4, r1, r4
 8005a00:	1932      	adds	r2, r6, r4
 8005a02:	bf28      	it	cs
 8005a04:	185b      	addcs	r3, r3, r1
 8005a06:	ea22 0200 	bic.w	r2, r2, r0
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	e7e6      	b.n	80059de <round+0x56>
 8005a10:	000fffff 	.word	0x000fffff

08005a14 <log10>:
 8005a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a18:	b08b      	sub	sp, #44	; 0x2c
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	f000 f9cf 	bl	8005dc0 <__ieee754_log10>
 8005a22:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <log10+0xe0>)
 8005a24:	4680      	mov	r8, r0
 8005a26:	f993 6000 	ldrsb.w	r6, [r3]
 8005a2a:	4689      	mov	r9, r1
 8005a2c:	1c73      	adds	r3, r6, #1
 8005a2e:	d05c      	beq.n	8005aea <log10+0xd6>
 8005a30:	4622      	mov	r2, r4
 8005a32:	462b      	mov	r3, r5
 8005a34:	4620      	mov	r0, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fa ffe0 	bl	80009fc <__aeabi_dcmpun>
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d153      	bne.n	8005aea <log10+0xd6>
 8005a42:	2200      	movs	r2, #0
 8005a44:	2300      	movs	r3, #0
 8005a46:	4620      	mov	r0, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f7fa ffb9 	bl	80009c0 <__aeabi_dcmple>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d04b      	beq.n	8005aea <log10+0xd6>
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <log10+0xe4>)
 8005a54:	9708      	str	r7, [sp, #32]
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005a5c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005a60:	b9a6      	cbnz	r6, 8005a8c <log10+0x78>
 8005a62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005a66:	4b25      	ldr	r3, [pc, #148]	; (8005afc <log10+0xe8>)
 8005a68:	4620      	mov	r0, r4
 8005a6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a6e:	4629      	mov	r1, r5
 8005a70:	2200      	movs	r2, #0
 8005a72:	2300      	movs	r3, #0
 8005a74:	f7fa ff90 	bl	8000998 <__aeabi_dcmpeq>
 8005a78:	bb40      	cbnz	r0, 8005acc <log10+0xb8>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	2e02      	cmp	r6, #2
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	d119      	bne.n	8005ab6 <log10+0xa2>
 8005a82:	f7ff fab1 	bl	8004fe8 <__errno>
 8005a86:	2321      	movs	r3, #33	; 0x21
 8005a88:	6003      	str	r3, [r0, #0]
 8005a8a:	e019      	b.n	8005ac0 <log10+0xac>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <log10+0xec>)
 8005a90:	4620      	mov	r0, r4
 8005a92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a96:	4629      	mov	r1, r5
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f7fa ff7c 	bl	8000998 <__aeabi_dcmpeq>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d0ea      	beq.n	8005a7a <log10+0x66>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	429e      	cmp	r6, r3
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	d111      	bne.n	8005ad0 <log10+0xbc>
 8005aac:	f7ff fa9c 	bl	8004fe8 <__errno>
 8005ab0:	2322      	movs	r3, #34	; 0x22
 8005ab2:	6003      	str	r3, [r0, #0]
 8005ab4:	e011      	b.n	8005ada <log10+0xc6>
 8005ab6:	4668      	mov	r0, sp
 8005ab8:	f000 ffc6 	bl	8006a48 <matherr>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d0e0      	beq.n	8005a82 <log10+0x6e>
 8005ac0:	4810      	ldr	r0, [pc, #64]	; (8005b04 <log10+0xf0>)
 8005ac2:	f000 ffc3 	bl	8006a4c <nan>
 8005ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005aca:	e006      	b.n	8005ada <log10+0xc6>
 8005acc:	2302      	movs	r3, #2
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4668      	mov	r0, sp
 8005ad2:	f000 ffb9 	bl	8006a48 <matherr>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d0e8      	beq.n	8005aac <log10+0x98>
 8005ada:	9b08      	ldr	r3, [sp, #32]
 8005adc:	b11b      	cbz	r3, 8005ae6 <log10+0xd2>
 8005ade:	f7ff fa83 	bl	8004fe8 <__errno>
 8005ae2:	9b08      	ldr	r3, [sp, #32]
 8005ae4:	6003      	str	r3, [r0, #0]
 8005ae6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	b00b      	add	sp, #44	; 0x2c
 8005af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af4:	20000090 	.word	0x20000090
 8005af8:	0800852f 	.word	0x0800852f
 8005afc:	c7efffff 	.word	0xc7efffff
 8005b00:	fff00000 	.word	0xfff00000
 8005b04:	08008501 	.word	0x08008501

08005b08 <pow>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	b08f      	sub	sp, #60	; 0x3c
 8005b0e:	461d      	mov	r5, r3
 8005b10:	4680      	mov	r8, r0
 8005b12:	4689      	mov	r9, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	f000 f9d7 	bl	8005ec8 <__ieee754_pow>
 8005b1a:	4fa1      	ldr	r7, [pc, #644]	; (8005da0 <pow+0x298>)
 8005b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8005b20:	f997 3000 	ldrsb.w	r3, [r7]
 8005b24:	463e      	mov	r6, r7
 8005b26:	9302      	str	r3, [sp, #8]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	d05f      	beq.n	8005bec <pow+0xe4>
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	462b      	mov	r3, r5
 8005b30:	4620      	mov	r0, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	f7fa ff62 	bl	80009fc <__aeabi_dcmpun>
 8005b38:	4682      	mov	sl, r0
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d156      	bne.n	8005bec <pow+0xe4>
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	4640      	mov	r0, r8
 8005b44:	4649      	mov	r1, r9
 8005b46:	f7fa ff59 	bl	80009fc <__aeabi_dcmpun>
 8005b4a:	9003      	str	r0, [sp, #12]
 8005b4c:	b1e8      	cbz	r0, 8005b8a <pow+0x82>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	4620      	mov	r0, r4
 8005b54:	4629      	mov	r1, r5
 8005b56:	f7fa ff1f 	bl	8000998 <__aeabi_dcmpeq>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d046      	beq.n	8005bec <pow+0xe4>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	2200      	movs	r2, #0
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	4b8f      	ldr	r3, [pc, #572]	; (8005da4 <pow+0x29c>)
 8005b66:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	4b8e      	ldr	r3, [pc, #568]	; (8005da8 <pow+0x2a0>)
 8005b6e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005b72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d031      	beq.n	8005be4 <pow+0xdc>
 8005b80:	a804      	add	r0, sp, #16
 8005b82:	f000 ff61 	bl	8006a48 <matherr>
 8005b86:	bb38      	cbnz	r0, 8005bd8 <pow+0xd0>
 8005b88:	e058      	b.n	8005c3c <pow+0x134>
 8005b8a:	f04f 0a00 	mov.w	sl, #0
 8005b8e:	f04f 0b00 	mov.w	fp, #0
 8005b92:	4652      	mov	r2, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	4640      	mov	r0, r8
 8005b98:	4649      	mov	r1, r9
 8005b9a:	f7fa fefd 	bl	8000998 <__aeabi_dcmpeq>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d051      	beq.n	8005c46 <pow+0x13e>
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	465b      	mov	r3, fp
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	4629      	mov	r1, r5
 8005baa:	f7fa fef5 	bl	8000998 <__aeabi_dcmpeq>
 8005bae:	4606      	mov	r6, r0
 8005bb0:	b308      	cbz	r0, 8005bf6 <pow+0xee>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	4b7b      	ldr	r3, [pc, #492]	; (8005da4 <pow+0x29c>)
 8005bb8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005bbc:	9305      	str	r3, [sp, #20]
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0d7      	beq.n	8005b80 <pow+0x78>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4b75      	ldr	r3, [pc, #468]	; (8005da8 <pow+0x2a0>)
 8005bd4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bda:	b11b      	cbz	r3, 8005be4 <pow+0xdc>
 8005bdc:	f7ff fa04 	bl	8004fe8 <__errno>
 8005be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005be2:	6003      	str	r3, [r0, #0]
 8005be4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005be8:	e9cd 3400 	strd	r3, r4, [sp]
 8005bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bf0:	b00f      	add	sp, #60	; 0x3c
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f000 ff1f 	bl	8006a3c <finite>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d0f4      	beq.n	8005bec <pow+0xe4>
 8005c02:	4652      	mov	r2, sl
 8005c04:	465b      	mov	r3, fp
 8005c06:	4620      	mov	r0, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7fa fecf 	bl	80009ac <__aeabi_dcmplt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0ec      	beq.n	8005bec <pow+0xe4>
 8005c12:	2301      	movs	r3, #1
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	4b63      	ldr	r3, [pc, #396]	; (8005da4 <pow+0x29c>)
 8005c18:	960c      	str	r6, [sp, #48]	; 0x30
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	f997 3000 	ldrsb.w	r3, [r7]
 8005c20:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c24:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005c28:	b913      	cbnz	r3, 8005c30 <pow+0x128>
 8005c2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005c2e:	e7a7      	b.n	8005b80 <pow+0x78>
 8005c30:	2000      	movs	r0, #0
 8005c32:	495e      	ldr	r1, [pc, #376]	; (8005dac <pow+0x2a4>)
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c3a:	d1a1      	bne.n	8005b80 <pow+0x78>
 8005c3c:	f7ff f9d4 	bl	8004fe8 <__errno>
 8005c40:	2321      	movs	r3, #33	; 0x21
 8005c42:	6003      	str	r3, [r0, #0]
 8005c44:	e7c8      	b.n	8005bd8 <pow+0xd0>
 8005c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c4a:	f000 fef7 	bl	8006a3c <finite>
 8005c4e:	9002      	str	r0, [sp, #8]
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d177      	bne.n	8005d44 <pow+0x23c>
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f000 fef0 	bl	8006a3c <finite>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d071      	beq.n	8005d44 <pow+0x23c>
 8005c60:	4620      	mov	r0, r4
 8005c62:	4629      	mov	r1, r5
 8005c64:	f000 feea 	bl	8006a3c <finite>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d06b      	beq.n	8005d44 <pow+0x23c>
 8005c6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f7fa fec2 	bl	80009fc <__aeabi_dcmpun>
 8005c78:	f997 7000 	ldrsb.w	r7, [r7]
 8005c7c:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <pow+0x29c>)
 8005c7e:	b1a0      	cbz	r0, 8005caa <pow+0x1a2>
 8005c80:	2201      	movs	r2, #1
 8005c82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c8c:	930c      	str	r3, [sp, #48]	; 0x30
 8005c8e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005c92:	2f00      	cmp	r7, #0
 8005c94:	d0c9      	beq.n	8005c2a <pow+0x122>
 8005c96:	4652      	mov	r2, sl
 8005c98:	465b      	mov	r3, fp
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	f7fa fd3d 	bl	800071c <__aeabi_ddiv>
 8005ca2:	2f02      	cmp	r7, #2
 8005ca4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ca8:	e7c7      	b.n	8005c3a <pow+0x132>
 8005caa:	2203      	movs	r2, #3
 8005cac:	900c      	str	r0, [sp, #48]	; 0x30
 8005cae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4b3d      	ldr	r3, [pc, #244]	; (8005db0 <pow+0x2a8>)
 8005cba:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005cbe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005cc2:	f7fa fc01 	bl	80004c8 <__aeabi_dmul>
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	460d      	mov	r5, r1
 8005cca:	bb17      	cbnz	r7, 8005d12 <pow+0x20a>
 8005ccc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005cd0:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <pow+0x2ac>)
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4652      	mov	r2, sl
 8005cdc:	465b      	mov	r3, fp
 8005cde:	f7fa fe65 	bl	80009ac <__aeabi_dcmplt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d054      	beq.n	8005d90 <pow+0x288>
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f000 feb5 	bl	8006a58 <rint>
 8005cee:	4622      	mov	r2, r4
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	f7fa fe51 	bl	8000998 <__aeabi_dcmpeq>
 8005cf6:	b920      	cbnz	r0, 8005d02 <pow+0x1fa>
 8005cf8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005cfc:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <pow+0x2b0>)
 8005cfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d02:	f996 3000 	ldrsb.w	r3, [r6]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d142      	bne.n	8005d90 <pow+0x288>
 8005d0a:	f7ff f96d 	bl	8004fe8 <__errno>
 8005d0e:	2322      	movs	r3, #34	; 0x22
 8005d10:	e797      	b.n	8005c42 <pow+0x13a>
 8005d12:	2200      	movs	r2, #0
 8005d14:	4b29      	ldr	r3, [pc, #164]	; (8005dbc <pow+0x2b4>)
 8005d16:	4640      	mov	r0, r8
 8005d18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	4652      	mov	r2, sl
 8005d20:	465b      	mov	r3, fp
 8005d22:	f7fa fe43 	bl	80009ac <__aeabi_dcmplt>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d0eb      	beq.n	8005d02 <pow+0x1fa>
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f000 fe93 	bl	8006a58 <rint>
 8005d32:	4622      	mov	r2, r4
 8005d34:	462b      	mov	r3, r5
 8005d36:	f7fa fe2f 	bl	8000998 <__aeabi_dcmpeq>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d1e1      	bne.n	8005d02 <pow+0x1fa>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <pow+0x2a4>)
 8005d42:	e7dc      	b.n	8005cfe <pow+0x1f6>
 8005d44:	2200      	movs	r2, #0
 8005d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f7fa fe24 	bl	8000998 <__aeabi_dcmpeq>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	f43f af4b 	beq.w	8005bec <pow+0xe4>
 8005d56:	4640      	mov	r0, r8
 8005d58:	4649      	mov	r1, r9
 8005d5a:	f000 fe6f 	bl	8006a3c <finite>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f43f af44 	beq.w	8005bec <pow+0xe4>
 8005d64:	4620      	mov	r0, r4
 8005d66:	4629      	mov	r1, r5
 8005d68:	f000 fe68 	bl	8006a3c <finite>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	f43f af3d 	beq.w	8005bec <pow+0xe4>
 8005d72:	2304      	movs	r3, #4
 8005d74:	9304      	str	r3, [sp, #16]
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <pow+0x29c>)
 8005d78:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2400      	movs	r4, #0
 8005d82:	930c      	str	r3, [sp, #48]	; 0x30
 8005d84:	2300      	movs	r3, #0
 8005d86:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d8a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005d8e:	e7b8      	b.n	8005d02 <pow+0x1fa>
 8005d90:	a804      	add	r0, sp, #16
 8005d92:	f000 fe59 	bl	8006a48 <matherr>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f47f af1e 	bne.w	8005bd8 <pow+0xd0>
 8005d9c:	e7b5      	b.n	8005d0a <pow+0x202>
 8005d9e:	bf00      	nop
 8005da0:	20000090 	.word	0x20000090
 8005da4:	08008535 	.word	0x08008535
 8005da8:	3ff00000 	.word	0x3ff00000
 8005dac:	fff00000 	.word	0xfff00000
 8005db0:	3fe00000 	.word	0x3fe00000
 8005db4:	47efffff 	.word	0x47efffff
 8005db8:	c7efffff 	.word	0xc7efffff
 8005dbc:	7ff00000 	.word	0x7ff00000

08005dc0 <__ieee754_log10>:
 8005dc0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4604      	mov	r4, r0
 8005dca:	460d      	mov	r5, r1
 8005dcc:	460b      	mov	r3, r1
 8005dce:	da26      	bge.n	8005e1e <__ieee754_log10+0x5e>
 8005dd0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005dd4:	4302      	orrs	r2, r0
 8005dd6:	d107      	bne.n	8005de8 <__ieee754_log10+0x28>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2000      	movs	r0, #0
 8005dde:	4936      	ldr	r1, [pc, #216]	; (8005eb8 <__ieee754_log10+0xf8>)
 8005de0:	f7fa fc9c 	bl	800071c <__aeabi_ddiv>
 8005de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de8:	2900      	cmp	r1, #0
 8005dea:	da05      	bge.n	8005df8 <__ieee754_log10+0x38>
 8005dec:	4602      	mov	r2, r0
 8005dee:	f7fa f9b3 	bl	8000158 <__aeabi_dsub>
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	e7f3      	b.n	8005de0 <__ieee754_log10+0x20>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4b30      	ldr	r3, [pc, #192]	; (8005ebc <__ieee754_log10+0xfc>)
 8005dfc:	f7fa fb64 	bl	80004c8 <__aeabi_dmul>
 8005e00:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005e04:	4604      	mov	r4, r0
 8005e06:	460d      	mov	r5, r1
 8005e08:	460b      	mov	r3, r1
 8005e0a:	492d      	ldr	r1, [pc, #180]	; (8005ec0 <__ieee754_log10+0x100>)
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	dd08      	ble.n	8005e22 <__ieee754_log10+0x62>
 8005e10:	4622      	mov	r2, r4
 8005e12:	462b      	mov	r3, r5
 8005e14:	4620      	mov	r0, r4
 8005e16:	4629      	mov	r1, r5
 8005e18:	f7fa f9a0 	bl	800015c <__adddf3>
 8005e1c:	e7e2      	b.n	8005de4 <__ieee754_log10+0x24>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	e7f3      	b.n	8005e0a <__ieee754_log10+0x4a>
 8005e22:	1518      	asrs	r0, r3, #20
 8005e24:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005e28:	4410      	add	r0, r2
 8005e2a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005e2e:	4448      	add	r0, r9
 8005e30:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005e34:	f7fa fade 	bl	80003f4 <__aeabi_i2d>
 8005e38:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005e42:	4606      	mov	r6, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f000 ff01 	bl	8006c50 <__ieee754_log>
 8005e4e:	a314      	add	r3, pc, #80	; (adr r3, 8005ea0 <__ieee754_log10+0xe0>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	4680      	mov	r8, r0
 8005e56:	4689      	mov	r9, r1
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fb34 	bl	80004c8 <__aeabi_dmul>
 8005e60:	a311      	add	r3, pc, #68	; (adr r3, 8005ea8 <__ieee754_log10+0xe8>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa fb2b 	bl	80004c8 <__aeabi_dmul>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa f96f 	bl	800015c <__adddf3>
 8005e7e:	a30c      	add	r3, pc, #48	; (adr r3, 8005eb0 <__ieee754_log10+0xf0>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	4604      	mov	r4, r0
 8005e86:	460d      	mov	r5, r1
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa fb1c 	bl	80004c8 <__aeabi_dmul>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4620      	mov	r0, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	e7be      	b.n	8005e18 <__ieee754_log10+0x58>
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	11f12b36 	.word	0x11f12b36
 8005ea4:	3d59fef3 	.word	0x3d59fef3
 8005ea8:	1526e50e 	.word	0x1526e50e
 8005eac:	3fdbcb7b 	.word	0x3fdbcb7b
 8005eb0:	509f6000 	.word	0x509f6000
 8005eb4:	3fd34413 	.word	0x3fd34413
 8005eb8:	c3500000 	.word	0xc3500000
 8005ebc:	43500000 	.word	0x43500000
 8005ec0:	7fefffff 	.word	0x7fefffff
 8005ec4:	00000000 	.word	0x00000000

08005ec8 <__ieee754_pow>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	b091      	sub	sp, #68	; 0x44
 8005ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ed2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005ed6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005eda:	ea55 0302 	orrs.w	r3, r5, r2
 8005ede:	4607      	mov	r7, r0
 8005ee0:	4688      	mov	r8, r1
 8005ee2:	f000 84b7 	beq.w	8006854 <__ieee754_pow+0x98c>
 8005ee6:	4b80      	ldr	r3, [pc, #512]	; (80060e8 <__ieee754_pow+0x220>)
 8005ee8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005eec:	429c      	cmp	r4, r3
 8005eee:	4689      	mov	r9, r1
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	dc09      	bgt.n	8005f08 <__ieee754_pow+0x40>
 8005ef4:	d103      	bne.n	8005efe <__ieee754_pow+0x36>
 8005ef6:	b938      	cbnz	r0, 8005f08 <__ieee754_pow+0x40>
 8005ef8:	42a5      	cmp	r5, r4
 8005efa:	dc0d      	bgt.n	8005f18 <__ieee754_pow+0x50>
 8005efc:	e001      	b.n	8005f02 <__ieee754_pow+0x3a>
 8005efe:	429d      	cmp	r5, r3
 8005f00:	dc02      	bgt.n	8005f08 <__ieee754_pow+0x40>
 8005f02:	429d      	cmp	r5, r3
 8005f04:	d10e      	bne.n	8005f24 <__ieee754_pow+0x5c>
 8005f06:	b16a      	cbz	r2, 8005f24 <__ieee754_pow+0x5c>
 8005f08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005f0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f10:	ea54 030a 	orrs.w	r3, r4, sl
 8005f14:	f000 849e 	beq.w	8006854 <__ieee754_pow+0x98c>
 8005f18:	4874      	ldr	r0, [pc, #464]	; (80060ec <__ieee754_pow+0x224>)
 8005f1a:	b011      	add	sp, #68	; 0x44
 8005f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	f000 bd94 	b.w	8006a4c <nan>
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	da53      	bge.n	8005fd2 <__ieee754_pow+0x10a>
 8005f2a:	4b71      	ldr	r3, [pc, #452]	; (80060f0 <__ieee754_pow+0x228>)
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	dc4e      	bgt.n	8005fce <__ieee754_pow+0x106>
 8005f30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005f34:	429d      	cmp	r5, r3
 8005f36:	dd4c      	ble.n	8005fd2 <__ieee754_pow+0x10a>
 8005f38:	152b      	asrs	r3, r5, #20
 8005f3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f3e:	2b14      	cmp	r3, #20
 8005f40:	dd28      	ble.n	8005f94 <__ieee754_pow+0xcc>
 8005f42:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005f46:	fa22 f103 	lsr.w	r1, r2, r3
 8005f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d13f      	bne.n	8005fd2 <__ieee754_pow+0x10a>
 8005f52:	f001 0101 	and.w	r1, r1, #1
 8005f56:	f1c1 0302 	rsb	r3, r1, #2
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d15c      	bne.n	800601a <__ieee754_pow+0x152>
 8005f60:	4b61      	ldr	r3, [pc, #388]	; (80060e8 <__ieee754_pow+0x220>)
 8005f62:	429d      	cmp	r5, r3
 8005f64:	d126      	bne.n	8005fb4 <__ieee754_pow+0xec>
 8005f66:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005f6a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005f6e:	ea53 030a 	orrs.w	r3, r3, sl
 8005f72:	f000 846f 	beq.w	8006854 <__ieee754_pow+0x98c>
 8005f76:	4b5f      	ldr	r3, [pc, #380]	; (80060f4 <__ieee754_pow+0x22c>)
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	dd2c      	ble.n	8005fd6 <__ieee754_pow+0x10e>
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	f280 846f 	bge.w	8006860 <__ieee754_pow+0x998>
 8005f82:	f04f 0b00 	mov.w	fp, #0
 8005f86:	f04f 0c00 	mov.w	ip, #0
 8005f8a:	4658      	mov	r0, fp
 8005f8c:	4661      	mov	r1, ip
 8005f8e:	b011      	add	sp, #68	; 0x44
 8005f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	d13e      	bne.n	8006016 <__ieee754_pow+0x14e>
 8005f98:	f1c3 0314 	rsb	r3, r3, #20
 8005f9c:	fa45 f103 	asr.w	r1, r5, r3
 8005fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa4:	42ab      	cmp	r3, r5
 8005fa6:	f040 8463 	bne.w	8006870 <__ieee754_pow+0x9a8>
 8005faa:	f001 0101 	and.w	r1, r1, #1
 8005fae:	f1c1 0302 	rsb	r3, r1, #2
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4b50      	ldr	r3, [pc, #320]	; (80060f8 <__ieee754_pow+0x230>)
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	d114      	bne.n	8005fe4 <__ieee754_pow+0x11c>
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	f280 8454 	bge.w	8006868 <__ieee754_pow+0x9a0>
 8005fc0:	463a      	mov	r2, r7
 8005fc2:	4643      	mov	r3, r8
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	494c      	ldr	r1, [pc, #304]	; (80060f8 <__ieee754_pow+0x230>)
 8005fc8:	f7fa fba8 	bl	800071c <__aeabi_ddiv>
 8005fcc:	e013      	b.n	8005ff6 <__ieee754_pow+0x12e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e7c3      	b.n	8005f5a <__ieee754_pow+0x92>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e7c1      	b.n	8005f5a <__ieee754_pow+0x92>
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	dad3      	bge.n	8005f82 <__ieee754_pow+0xba>
 8005fda:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005fde:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005fe2:	e7d2      	b.n	8005f8a <__ieee754_pow+0xc2>
 8005fe4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005fe8:	d108      	bne.n	8005ffc <__ieee754_pow+0x134>
 8005fea:	463a      	mov	r2, r7
 8005fec:	4643      	mov	r3, r8
 8005fee:	4638      	mov	r0, r7
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	f7fa fa69 	bl	80004c8 <__aeabi_dmul>
 8005ff6:	4683      	mov	fp, r0
 8005ff8:	468c      	mov	ip, r1
 8005ffa:	e7c6      	b.n	8005f8a <__ieee754_pow+0xc2>
 8005ffc:	4b3f      	ldr	r3, [pc, #252]	; (80060fc <__ieee754_pow+0x234>)
 8005ffe:	429e      	cmp	r6, r3
 8006000:	d10b      	bne.n	800601a <__ieee754_pow+0x152>
 8006002:	f1b9 0f00 	cmp.w	r9, #0
 8006006:	db08      	blt.n	800601a <__ieee754_pow+0x152>
 8006008:	4638      	mov	r0, r7
 800600a:	4641      	mov	r1, r8
 800600c:	b011      	add	sp, #68	; 0x44
 800600e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006012:	f000 bc63 	b.w	80068dc <__ieee754_sqrt>
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	4638      	mov	r0, r7
 800601c:	4641      	mov	r1, r8
 800601e:	f000 fd09 	bl	8006a34 <fabs>
 8006022:	4683      	mov	fp, r0
 8006024:	468c      	mov	ip, r1
 8006026:	f1ba 0f00 	cmp.w	sl, #0
 800602a:	d12b      	bne.n	8006084 <__ieee754_pow+0x1bc>
 800602c:	b124      	cbz	r4, 8006038 <__ieee754_pow+0x170>
 800602e:	4b32      	ldr	r3, [pc, #200]	; (80060f8 <__ieee754_pow+0x230>)
 8006030:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006034:	429a      	cmp	r2, r3
 8006036:	d125      	bne.n	8006084 <__ieee754_pow+0x1bc>
 8006038:	2e00      	cmp	r6, #0
 800603a:	da07      	bge.n	800604c <__ieee754_pow+0x184>
 800603c:	465a      	mov	r2, fp
 800603e:	4663      	mov	r3, ip
 8006040:	2000      	movs	r0, #0
 8006042:	492d      	ldr	r1, [pc, #180]	; (80060f8 <__ieee754_pow+0x230>)
 8006044:	f7fa fb6a 	bl	800071c <__aeabi_ddiv>
 8006048:	4683      	mov	fp, r0
 800604a:	468c      	mov	ip, r1
 800604c:	f1b9 0f00 	cmp.w	r9, #0
 8006050:	da9b      	bge.n	8005f8a <__ieee754_pow+0xc2>
 8006052:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800605c:	4323      	orrs	r3, r4
 800605e:	d108      	bne.n	8006072 <__ieee754_pow+0x1aa>
 8006060:	465a      	mov	r2, fp
 8006062:	4663      	mov	r3, ip
 8006064:	4658      	mov	r0, fp
 8006066:	4661      	mov	r1, ip
 8006068:	f7fa f876 	bl	8000158 <__aeabi_dsub>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	e7aa      	b.n	8005fc8 <__ieee754_pow+0x100>
 8006072:	9b00      	ldr	r3, [sp, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d188      	bne.n	8005f8a <__ieee754_pow+0xc2>
 8006078:	4658      	mov	r0, fp
 800607a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800607e:	4683      	mov	fp, r0
 8006080:	469c      	mov	ip, r3
 8006082:	e782      	b.n	8005f8a <__ieee754_pow+0xc2>
 8006084:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006088:	f109 33ff 	add.w	r3, r9, #4294967295
 800608c:	930d      	str	r3, [sp, #52]	; 0x34
 800608e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006090:	9b00      	ldr	r3, [sp, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	d104      	bne.n	80060a0 <__ieee754_pow+0x1d8>
 8006096:	463a      	mov	r2, r7
 8006098:	4643      	mov	r3, r8
 800609a:	4638      	mov	r0, r7
 800609c:	4641      	mov	r1, r8
 800609e:	e7e3      	b.n	8006068 <__ieee754_pow+0x1a0>
 80060a0:	4b17      	ldr	r3, [pc, #92]	; (8006100 <__ieee754_pow+0x238>)
 80060a2:	429d      	cmp	r5, r3
 80060a4:	f340 80fe 	ble.w	80062a4 <__ieee754_pow+0x3dc>
 80060a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80060ac:	429d      	cmp	r5, r3
 80060ae:	dd0b      	ble.n	80060c8 <__ieee754_pow+0x200>
 80060b0:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <__ieee754_pow+0x22c>)
 80060b2:	429c      	cmp	r4, r3
 80060b4:	dc0e      	bgt.n	80060d4 <__ieee754_pow+0x20c>
 80060b6:	2e00      	cmp	r6, #0
 80060b8:	f6bf af63 	bge.w	8005f82 <__ieee754_pow+0xba>
 80060bc:	a308      	add	r3, pc, #32	; (adr r3, 80060e0 <__ieee754_pow+0x218>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	e794      	b.n	8005ff2 <__ieee754_pow+0x12a>
 80060c8:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <__ieee754_pow+0x23c>)
 80060ca:	429c      	cmp	r4, r3
 80060cc:	ddf3      	ble.n	80060b6 <__ieee754_pow+0x1ee>
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <__ieee754_pow+0x230>)
 80060d0:	429c      	cmp	r4, r3
 80060d2:	dd19      	ble.n	8006108 <__ieee754_pow+0x240>
 80060d4:	2e00      	cmp	r6, #0
 80060d6:	dcf1      	bgt.n	80060bc <__ieee754_pow+0x1f4>
 80060d8:	e753      	b.n	8005f82 <__ieee754_pow+0xba>
 80060da:	bf00      	nop
 80060dc:	f3af 8000 	nop.w
 80060e0:	8800759c 	.word	0x8800759c
 80060e4:	7e37e43c 	.word	0x7e37e43c
 80060e8:	7ff00000 	.word	0x7ff00000
 80060ec:	08008501 	.word	0x08008501
 80060f0:	433fffff 	.word	0x433fffff
 80060f4:	3fefffff 	.word	0x3fefffff
 80060f8:	3ff00000 	.word	0x3ff00000
 80060fc:	3fe00000 	.word	0x3fe00000
 8006100:	41e00000 	.word	0x41e00000
 8006104:	3feffffe 	.word	0x3feffffe
 8006108:	4661      	mov	r1, ip
 800610a:	2200      	movs	r2, #0
 800610c:	4b60      	ldr	r3, [pc, #384]	; (8006290 <__ieee754_pow+0x3c8>)
 800610e:	4658      	mov	r0, fp
 8006110:	f7fa f822 	bl	8000158 <__aeabi_dsub>
 8006114:	a354      	add	r3, pc, #336	; (adr r3, 8006268 <__ieee754_pow+0x3a0>)
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	4604      	mov	r4, r0
 800611c:	460d      	mov	r5, r1
 800611e:	f7fa f9d3 	bl	80004c8 <__aeabi_dmul>
 8006122:	a353      	add	r3, pc, #332	; (adr r3, 8006270 <__ieee754_pow+0x3a8>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	4606      	mov	r6, r0
 800612a:	460f      	mov	r7, r1
 800612c:	4620      	mov	r0, r4
 800612e:	4629      	mov	r1, r5
 8006130:	f7fa f9ca 	bl	80004c8 <__aeabi_dmul>
 8006134:	2200      	movs	r2, #0
 8006136:	4682      	mov	sl, r0
 8006138:	468b      	mov	fp, r1
 800613a:	4b56      	ldr	r3, [pc, #344]	; (8006294 <__ieee754_pow+0x3cc>)
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa f9c2 	bl	80004c8 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	a14b      	add	r1, pc, #300	; (adr r1, 8006278 <__ieee754_pow+0x3b0>)
 800614a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800614e:	f7fa f803 	bl	8000158 <__aeabi_dsub>
 8006152:	4622      	mov	r2, r4
 8006154:	462b      	mov	r3, r5
 8006156:	f7fa f9b7 	bl	80004c8 <__aeabi_dmul>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	2000      	movs	r0, #0
 8006160:	494d      	ldr	r1, [pc, #308]	; (8006298 <__ieee754_pow+0x3d0>)
 8006162:	f7f9 fff9 	bl	8000158 <__aeabi_dsub>
 8006166:	4622      	mov	r2, r4
 8006168:	462b      	mov	r3, r5
 800616a:	4680      	mov	r8, r0
 800616c:	4689      	mov	r9, r1
 800616e:	4620      	mov	r0, r4
 8006170:	4629      	mov	r1, r5
 8006172:	f7fa f9a9 	bl	80004c8 <__aeabi_dmul>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	f7fa f9a3 	bl	80004c8 <__aeabi_dmul>
 8006182:	a33f      	add	r3, pc, #252	; (adr r3, 8006280 <__ieee754_pow+0x3b8>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f99e 	bl	80004c8 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4650      	mov	r0, sl
 8006192:	4659      	mov	r1, fp
 8006194:	f7f9 ffe0 	bl	8000158 <__aeabi_dsub>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4604      	mov	r4, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	f7f9 ffda 	bl	800015c <__adddf3>
 80061a8:	2000      	movs	r0, #0
 80061aa:	468b      	mov	fp, r1
 80061ac:	4682      	mov	sl, r0
 80061ae:	4632      	mov	r2, r6
 80061b0:	463b      	mov	r3, r7
 80061b2:	f7f9 ffd1 	bl	8000158 <__aeabi_dsub>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4620      	mov	r0, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	f7f9 ffcb 	bl	8000158 <__aeabi_dsub>
 80061c2:	9b00      	ldr	r3, [sp, #0]
 80061c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061c6:	3b01      	subs	r3, #1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	4c32      	ldreq	r4, [pc, #200]	; (800629c <__ieee754_pow+0x3d4>)
 80061d2:	4c2f      	ldrne	r4, [pc, #188]	; (8006290 <__ieee754_pow+0x3c8>)
 80061d4:	4606      	mov	r6, r0
 80061d6:	e9cd 3400 	strd	r3, r4, [sp]
 80061da:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061de:	2400      	movs	r4, #0
 80061e0:	460f      	mov	r7, r1
 80061e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e6:	4622      	mov	r2, r4
 80061e8:	462b      	mov	r3, r5
 80061ea:	f7f9 ffb5 	bl	8000158 <__aeabi_dsub>
 80061ee:	4652      	mov	r2, sl
 80061f0:	465b      	mov	r3, fp
 80061f2:	f7fa f969 	bl	80004c8 <__aeabi_dmul>
 80061f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061fa:	4680      	mov	r8, r0
 80061fc:	4689      	mov	r9, r1
 80061fe:	4630      	mov	r0, r6
 8006200:	4639      	mov	r1, r7
 8006202:	f7fa f961 	bl	80004c8 <__aeabi_dmul>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	f7f9 ffa5 	bl	800015c <__adddf3>
 8006212:	4622      	mov	r2, r4
 8006214:	462b      	mov	r3, r5
 8006216:	4680      	mov	r8, r0
 8006218:	4689      	mov	r9, r1
 800621a:	4650      	mov	r0, sl
 800621c:	4659      	mov	r1, fp
 800621e:	f7fa f953 	bl	80004c8 <__aeabi_dmul>
 8006222:	4604      	mov	r4, r0
 8006224:	460d      	mov	r5, r1
 8006226:	460b      	mov	r3, r1
 8006228:	4602      	mov	r2, r0
 800622a:	4649      	mov	r1, r9
 800622c:	4640      	mov	r0, r8
 800622e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006232:	f7f9 ff93 	bl	800015c <__adddf3>
 8006236:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <__ieee754_pow+0x3d8>)
 8006238:	4682      	mov	sl, r0
 800623a:	4299      	cmp	r1, r3
 800623c:	460f      	mov	r7, r1
 800623e:	460e      	mov	r6, r1
 8006240:	f340 82e1 	ble.w	8006806 <__ieee754_pow+0x93e>
 8006244:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006248:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800624c:	4303      	orrs	r3, r0
 800624e:	f000 81db 	beq.w	8006608 <__ieee754_pow+0x740>
 8006252:	a30d      	add	r3, pc, #52	; (adr r3, 8006288 <__ieee754_pow+0x3c0>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800625c:	f7fa f934 	bl	80004c8 <__aeabi_dmul>
 8006260:	a309      	add	r3, pc, #36	; (adr r3, 8006288 <__ieee754_pow+0x3c0>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	e6c4      	b.n	8005ff2 <__ieee754_pow+0x12a>
 8006268:	60000000 	.word	0x60000000
 800626c:	3ff71547 	.word	0x3ff71547
 8006270:	f85ddf44 	.word	0xf85ddf44
 8006274:	3e54ae0b 	.word	0x3e54ae0b
 8006278:	55555555 	.word	0x55555555
 800627c:	3fd55555 	.word	0x3fd55555
 8006280:	652b82fe 	.word	0x652b82fe
 8006284:	3ff71547 	.word	0x3ff71547
 8006288:	8800759c 	.word	0x8800759c
 800628c:	7e37e43c 	.word	0x7e37e43c
 8006290:	3ff00000 	.word	0x3ff00000
 8006294:	3fd00000 	.word	0x3fd00000
 8006298:	3fe00000 	.word	0x3fe00000
 800629c:	bff00000 	.word	0xbff00000
 80062a0:	408fffff 	.word	0x408fffff
 80062a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	da08      	bge.n	80062c0 <__ieee754_pow+0x3f8>
 80062ae:	4658      	mov	r0, fp
 80062b0:	4bcd      	ldr	r3, [pc, #820]	; (80065e8 <__ieee754_pow+0x720>)
 80062b2:	4661      	mov	r1, ip
 80062b4:	f7fa f908 	bl	80004c8 <__aeabi_dmul>
 80062b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80062bc:	4683      	mov	fp, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	1523      	asrs	r3, r4, #20
 80062c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062c6:	4413      	add	r3, r2
 80062c8:	930c      	str	r3, [sp, #48]	; 0x30
 80062ca:	4bc8      	ldr	r3, [pc, #800]	; (80065ec <__ieee754_pow+0x724>)
 80062cc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80062d0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80062d4:	429c      	cmp	r4, r3
 80062d6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80062da:	dd08      	ble.n	80062ee <__ieee754_pow+0x426>
 80062dc:	4bc4      	ldr	r3, [pc, #784]	; (80065f0 <__ieee754_pow+0x728>)
 80062de:	429c      	cmp	r4, r3
 80062e0:	f340 815b 	ble.w	800659a <__ieee754_pow+0x6d2>
 80062e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80062ea:	3301      	adds	r3, #1
 80062ec:	930c      	str	r3, [sp, #48]	; 0x30
 80062ee:	f04f 0800 	mov.w	r8, #0
 80062f2:	4658      	mov	r0, fp
 80062f4:	4629      	mov	r1, r5
 80062f6:	4bbf      	ldr	r3, [pc, #764]	; (80065f4 <__ieee754_pow+0x72c>)
 80062f8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80062fc:	444b      	add	r3, r9
 80062fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006302:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006306:	461a      	mov	r2, r3
 8006308:	4623      	mov	r3, r4
 800630a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800630e:	f7f9 ff23 	bl	8000158 <__aeabi_dsub>
 8006312:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006316:	4606      	mov	r6, r0
 8006318:	460f      	mov	r7, r1
 800631a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800631e:	f7f9 ff1d 	bl	800015c <__adddf3>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	2000      	movs	r0, #0
 8006328:	49b3      	ldr	r1, [pc, #716]	; (80065f8 <__ieee754_pow+0x730>)
 800632a:	f7fa f9f7 	bl	800071c <__aeabi_ddiv>
 800632e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7fa f8c5 	bl	80004c8 <__aeabi_dmul>
 800633e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006342:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006346:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800634a:	2300      	movs	r3, #0
 800634c:	2200      	movs	r2, #0
 800634e:	106d      	asrs	r5, r5, #1
 8006350:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800635a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800635e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8006362:	4650      	mov	r0, sl
 8006364:	4659      	mov	r1, fp
 8006366:	4614      	mov	r4, r2
 8006368:	461d      	mov	r5, r3
 800636a:	f7fa f8ad 	bl	80004c8 <__aeabi_dmul>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f7f9 feef 	bl	8000158 <__aeabi_dsub>
 800637a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7f9 fee7 	bl	8000158 <__aeabi_dsub>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006392:	f7f9 fee1 	bl	8000158 <__aeabi_dsub>
 8006396:	4652      	mov	r2, sl
 8006398:	465b      	mov	r3, fp
 800639a:	f7fa f895 	bl	80004c8 <__aeabi_dmul>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4630      	mov	r0, r6
 80063a4:	4639      	mov	r1, r7
 80063a6:	f7f9 fed7 	bl	8000158 <__aeabi_dsub>
 80063aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80063ae:	f7fa f88b 	bl	80004c8 <__aeabi_dmul>
 80063b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063ba:	4610      	mov	r0, r2
 80063bc:	4619      	mov	r1, r3
 80063be:	f7fa f883 	bl	80004c8 <__aeabi_dmul>
 80063c2:	a377      	add	r3, pc, #476	; (adr r3, 80065a0 <__ieee754_pow+0x6d8>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	4604      	mov	r4, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	f7fa f87c 	bl	80004c8 <__aeabi_dmul>
 80063d0:	a375      	add	r3, pc, #468	; (adr r3, 80065a8 <__ieee754_pow+0x6e0>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f7f9 fec1 	bl	800015c <__adddf3>
 80063da:	4622      	mov	r2, r4
 80063dc:	462b      	mov	r3, r5
 80063de:	f7fa f873 	bl	80004c8 <__aeabi_dmul>
 80063e2:	a373      	add	r3, pc, #460	; (adr r3, 80065b0 <__ieee754_pow+0x6e8>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7f9 feb8 	bl	800015c <__adddf3>
 80063ec:	4622      	mov	r2, r4
 80063ee:	462b      	mov	r3, r5
 80063f0:	f7fa f86a 	bl	80004c8 <__aeabi_dmul>
 80063f4:	a370      	add	r3, pc, #448	; (adr r3, 80065b8 <__ieee754_pow+0x6f0>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 feaf 	bl	800015c <__adddf3>
 80063fe:	4622      	mov	r2, r4
 8006400:	462b      	mov	r3, r5
 8006402:	f7fa f861 	bl	80004c8 <__aeabi_dmul>
 8006406:	a36e      	add	r3, pc, #440	; (adr r3, 80065c0 <__ieee754_pow+0x6f8>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7f9 fea6 	bl	800015c <__adddf3>
 8006410:	4622      	mov	r2, r4
 8006412:	462b      	mov	r3, r5
 8006414:	f7fa f858 	bl	80004c8 <__aeabi_dmul>
 8006418:	a36b      	add	r3, pc, #428	; (adr r3, 80065c8 <__ieee754_pow+0x700>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f7f9 fe9d 	bl	800015c <__adddf3>
 8006422:	4622      	mov	r2, r4
 8006424:	4606      	mov	r6, r0
 8006426:	460f      	mov	r7, r1
 8006428:	462b      	mov	r3, r5
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7fa f84b 	bl	80004c8 <__aeabi_dmul>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4630      	mov	r0, r6
 8006438:	4639      	mov	r1, r7
 800643a:	f7fa f845 	bl	80004c8 <__aeabi_dmul>
 800643e:	4604      	mov	r4, r0
 8006440:	460d      	mov	r5, r1
 8006442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006446:	4652      	mov	r2, sl
 8006448:	465b      	mov	r3, fp
 800644a:	f7f9 fe87 	bl	800015c <__adddf3>
 800644e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	4622      	mov	r2, r4
 8006458:	462b      	mov	r3, r5
 800645a:	f7f9 fe7f 	bl	800015c <__adddf3>
 800645e:	4652      	mov	r2, sl
 8006460:	4606      	mov	r6, r0
 8006462:	460f      	mov	r7, r1
 8006464:	465b      	mov	r3, fp
 8006466:	4650      	mov	r0, sl
 8006468:	4659      	mov	r1, fp
 800646a:	f7fa f82d 	bl	80004c8 <__aeabi_dmul>
 800646e:	2200      	movs	r2, #0
 8006470:	4b62      	ldr	r3, [pc, #392]	; (80065fc <__ieee754_pow+0x734>)
 8006472:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006476:	f7f9 fe71 	bl	800015c <__adddf3>
 800647a:	4632      	mov	r2, r6
 800647c:	463b      	mov	r3, r7
 800647e:	f7f9 fe6d 	bl	800015c <__adddf3>
 8006482:	9804      	ldr	r0, [sp, #16]
 8006484:	460d      	mov	r5, r1
 8006486:	4604      	mov	r4, r0
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4650      	mov	r0, sl
 800648e:	4659      	mov	r1, fp
 8006490:	f7fa f81a 	bl	80004c8 <__aeabi_dmul>
 8006494:	2200      	movs	r2, #0
 8006496:	4682      	mov	sl, r0
 8006498:	468b      	mov	fp, r1
 800649a:	4b58      	ldr	r3, [pc, #352]	; (80065fc <__ieee754_pow+0x734>)
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	f7f9 fe5a 	bl	8000158 <__aeabi_dsub>
 80064a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064a8:	f7f9 fe56 	bl	8000158 <__aeabi_dsub>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4630      	mov	r0, r6
 80064b2:	4639      	mov	r1, r7
 80064b4:	f7f9 fe50 	bl	8000158 <__aeabi_dsub>
 80064b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064bc:	f7fa f804 	bl	80004c8 <__aeabi_dmul>
 80064c0:	4622      	mov	r2, r4
 80064c2:	4606      	mov	r6, r0
 80064c4:	460f      	mov	r7, r1
 80064c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064ca:	462b      	mov	r3, r5
 80064cc:	f7f9 fffc 	bl	80004c8 <__aeabi_dmul>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f7f9 fe40 	bl	800015c <__adddf3>
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4650      	mov	r0, sl
 80064e6:	4659      	mov	r1, fp
 80064e8:	f7f9 fe38 	bl	800015c <__adddf3>
 80064ec:	a338      	add	r3, pc, #224	; (adr r3, 80065d0 <__ieee754_pow+0x708>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	9804      	ldr	r0, [sp, #16]
 80064f4:	460d      	mov	r5, r1
 80064f6:	4604      	mov	r4, r0
 80064f8:	f7f9 ffe6 	bl	80004c8 <__aeabi_dmul>
 80064fc:	4652      	mov	r2, sl
 80064fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006502:	465b      	mov	r3, fp
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7f9 fe26 	bl	8000158 <__aeabi_dsub>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7f9 fe20 	bl	8000158 <__aeabi_dsub>
 8006518:	a32f      	add	r3, pc, #188	; (adr r3, 80065d8 <__ieee754_pow+0x710>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7f9 ffd3 	bl	80004c8 <__aeabi_dmul>
 8006522:	a32f      	add	r3, pc, #188	; (adr r3, 80065e0 <__ieee754_pow+0x718>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	f7f9 ffca 	bl	80004c8 <__aeabi_dmul>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7f9 fe0e 	bl	800015c <__adddf3>
 8006540:	4b2f      	ldr	r3, [pc, #188]	; (8006600 <__ieee754_pow+0x738>)
 8006542:	444b      	add	r3, r9
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7f9 fe08 	bl	800015c <__adddf3>
 800654c:	4604      	mov	r4, r0
 800654e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006550:	460d      	mov	r5, r1
 8006552:	f7f9 ff4f 	bl	80003f4 <__aeabi_i2d>
 8006556:	4606      	mov	r6, r0
 8006558:	460f      	mov	r7, r1
 800655a:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <__ieee754_pow+0x73c>)
 800655c:	4622      	mov	r2, r4
 800655e:	444b      	add	r3, r9
 8006560:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006564:	462b      	mov	r3, r5
 8006566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800656a:	f7f9 fdf7 	bl	800015c <__adddf3>
 800656e:	4642      	mov	r2, r8
 8006570:	464b      	mov	r3, r9
 8006572:	f7f9 fdf3 	bl	800015c <__adddf3>
 8006576:	4632      	mov	r2, r6
 8006578:	463b      	mov	r3, r7
 800657a:	f7f9 fdef 	bl	800015c <__adddf3>
 800657e:	9804      	ldr	r0, [sp, #16]
 8006580:	4632      	mov	r2, r6
 8006582:	463b      	mov	r3, r7
 8006584:	4682      	mov	sl, r0
 8006586:	468b      	mov	fp, r1
 8006588:	f7f9 fde6 	bl	8000158 <__aeabi_dsub>
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	f7f9 fde2 	bl	8000158 <__aeabi_dsub>
 8006594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006598:	e60b      	b.n	80061b2 <__ieee754_pow+0x2ea>
 800659a:	f04f 0801 	mov.w	r8, #1
 800659e:	e6a8      	b.n	80062f2 <__ieee754_pow+0x42a>
 80065a0:	4a454eef 	.word	0x4a454eef
 80065a4:	3fca7e28 	.word	0x3fca7e28
 80065a8:	93c9db65 	.word	0x93c9db65
 80065ac:	3fcd864a 	.word	0x3fcd864a
 80065b0:	a91d4101 	.word	0xa91d4101
 80065b4:	3fd17460 	.word	0x3fd17460
 80065b8:	518f264d 	.word	0x518f264d
 80065bc:	3fd55555 	.word	0x3fd55555
 80065c0:	db6fabff 	.word	0xdb6fabff
 80065c4:	3fdb6db6 	.word	0x3fdb6db6
 80065c8:	33333303 	.word	0x33333303
 80065cc:	3fe33333 	.word	0x3fe33333
 80065d0:	e0000000 	.word	0xe0000000
 80065d4:	3feec709 	.word	0x3feec709
 80065d8:	dc3a03fd 	.word	0xdc3a03fd
 80065dc:	3feec709 	.word	0x3feec709
 80065e0:	145b01f5 	.word	0x145b01f5
 80065e4:	be3e2fe0 	.word	0xbe3e2fe0
 80065e8:	43400000 	.word	0x43400000
 80065ec:	0003988e 	.word	0x0003988e
 80065f0:	000bb679 	.word	0x000bb679
 80065f4:	08008540 	.word	0x08008540
 80065f8:	3ff00000 	.word	0x3ff00000
 80065fc:	40080000 	.word	0x40080000
 8006600:	08008560 	.word	0x08008560
 8006604:	08008550 	.word	0x08008550
 8006608:	a39b      	add	r3, pc, #620	; (adr r3, 8006878 <__ieee754_pow+0x9b0>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7f9 fda3 	bl	800015c <__adddf3>
 8006616:	4622      	mov	r2, r4
 8006618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800661c:	462b      	mov	r3, r5
 800661e:	4650      	mov	r0, sl
 8006620:	4639      	mov	r1, r7
 8006622:	f7f9 fd99 	bl	8000158 <__aeabi_dsub>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800662e:	f7fa f9db 	bl	80009e8 <__aeabi_dcmpgt>
 8006632:	2800      	cmp	r0, #0
 8006634:	f47f ae0d 	bne.w	8006252 <__ieee754_pow+0x38a>
 8006638:	4aa3      	ldr	r2, [pc, #652]	; (80068c8 <__ieee754_pow+0xa00>)
 800663a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800663e:	4293      	cmp	r3, r2
 8006640:	f340 8103 	ble.w	800684a <__ieee754_pow+0x982>
 8006644:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006648:	2000      	movs	r0, #0
 800664a:	151b      	asrs	r3, r3, #20
 800664c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006650:	fa4a f303 	asr.w	r3, sl, r3
 8006654:	4433      	add	r3, r6
 8006656:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800665a:	4f9c      	ldr	r7, [pc, #624]	; (80068cc <__ieee754_pow+0xa04>)
 800665c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006660:	4117      	asrs	r7, r2
 8006662:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006666:	ea23 0107 	bic.w	r1, r3, r7
 800666a:	f1c2 0214 	rsb	r2, r2, #20
 800666e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006672:	fa4a fa02 	asr.w	sl, sl, r2
 8006676:	2e00      	cmp	r6, #0
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	bfb8      	it	lt
 8006682:	f1ca 0a00 	rsblt	sl, sl, #0
 8006686:	f7f9 fd67 	bl	8000158 <__aeabi_dsub>
 800668a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800668e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006692:	4642      	mov	r2, r8
 8006694:	464b      	mov	r3, r9
 8006696:	f7f9 fd61 	bl	800015c <__adddf3>
 800669a:	a379      	add	r3, pc, #484	; (adr r3, 8006880 <__ieee754_pow+0x9b8>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	2000      	movs	r0, #0
 80066a2:	460d      	mov	r5, r1
 80066a4:	4604      	mov	r4, r0
 80066a6:	f7f9 ff0f 	bl	80004c8 <__aeabi_dmul>
 80066aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066ae:	4606      	mov	r6, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	4620      	mov	r0, r4
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7f9 fd4f 	bl	8000158 <__aeabi_dsub>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4640      	mov	r0, r8
 80066c0:	4649      	mov	r1, r9
 80066c2:	f7f9 fd49 	bl	8000158 <__aeabi_dsub>
 80066c6:	a370      	add	r3, pc, #448	; (adr r3, 8006888 <__ieee754_pow+0x9c0>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fefc 	bl	80004c8 <__aeabi_dmul>
 80066d0:	a36f      	add	r3, pc, #444	; (adr r3, 8006890 <__ieee754_pow+0x9c8>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	4680      	mov	r8, r0
 80066d8:	4689      	mov	r9, r1
 80066da:	4620      	mov	r0, r4
 80066dc:	4629      	mov	r1, r5
 80066de:	f7f9 fef3 	bl	80004c8 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4640      	mov	r0, r8
 80066e8:	4649      	mov	r1, r9
 80066ea:	f7f9 fd37 	bl	800015c <__adddf3>
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
 80066fa:	f7f9 fd2f 	bl	800015c <__adddf3>
 80066fe:	4632      	mov	r2, r6
 8006700:	463b      	mov	r3, r7
 8006702:	4680      	mov	r8, r0
 8006704:	4689      	mov	r9, r1
 8006706:	f7f9 fd27 	bl	8000158 <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4620      	mov	r0, r4
 8006710:	4629      	mov	r1, r5
 8006712:	f7f9 fd21 	bl	8000158 <__aeabi_dsub>
 8006716:	4642      	mov	r2, r8
 8006718:	4606      	mov	r6, r0
 800671a:	460f      	mov	r7, r1
 800671c:	464b      	mov	r3, r9
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 fed1 	bl	80004c8 <__aeabi_dmul>
 8006726:	a35c      	add	r3, pc, #368	; (adr r3, 8006898 <__ieee754_pow+0x9d0>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	4604      	mov	r4, r0
 800672e:	460d      	mov	r5, r1
 8006730:	f7f9 feca 	bl	80004c8 <__aeabi_dmul>
 8006734:	a35a      	add	r3, pc, #360	; (adr r3, 80068a0 <__ieee754_pow+0x9d8>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fd0d 	bl	8000158 <__aeabi_dsub>
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f7f9 fec1 	bl	80004c8 <__aeabi_dmul>
 8006746:	a358      	add	r3, pc, #352	; (adr r3, 80068a8 <__ieee754_pow+0x9e0>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd06 	bl	800015c <__adddf3>
 8006750:	4622      	mov	r2, r4
 8006752:	462b      	mov	r3, r5
 8006754:	f7f9 feb8 	bl	80004c8 <__aeabi_dmul>
 8006758:	a355      	add	r3, pc, #340	; (adr r3, 80068b0 <__ieee754_pow+0x9e8>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fcfb 	bl	8000158 <__aeabi_dsub>
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	f7f9 feaf 	bl	80004c8 <__aeabi_dmul>
 800676a:	a353      	add	r3, pc, #332	; (adr r3, 80068b8 <__ieee754_pow+0x9f0>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fcf4 	bl	800015c <__adddf3>
 8006774:	4622      	mov	r2, r4
 8006776:	462b      	mov	r3, r5
 8006778:	f7f9 fea6 	bl	80004c8 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7f9 fce8 	bl	8000158 <__aeabi_dsub>
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4640      	mov	r0, r8
 8006792:	4649      	mov	r1, r9
 8006794:	f7f9 fe98 	bl	80004c8 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7f9 fcd7 	bl	8000158 <__aeabi_dsub>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b2:	f7f9 ffb3 	bl	800071c <__aeabi_ddiv>
 80067b6:	4632      	mov	r2, r6
 80067b8:	4604      	mov	r4, r0
 80067ba:	460d      	mov	r5, r1
 80067bc:	463b      	mov	r3, r7
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7f9 fe81 	bl	80004c8 <__aeabi_dmul>
 80067c6:	4632      	mov	r2, r6
 80067c8:	463b      	mov	r3, r7
 80067ca:	f7f9 fcc7 	bl	800015c <__adddf3>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7f9 fcbf 	bl	8000158 <__aeabi_dsub>
 80067da:	4642      	mov	r2, r8
 80067dc:	464b      	mov	r3, r9
 80067de:	f7f9 fcbb 	bl	8000158 <__aeabi_dsub>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	2000      	movs	r0, #0
 80067e8:	4939      	ldr	r1, [pc, #228]	; (80068d0 <__ieee754_pow+0xa08>)
 80067ea:	f7f9 fcb5 	bl	8000158 <__aeabi_dsub>
 80067ee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80067f2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80067f6:	da2b      	bge.n	8006850 <__ieee754_pow+0x988>
 80067f8:	4652      	mov	r2, sl
 80067fa:	f000 f9b9 	bl	8006b70 <scalbn>
 80067fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006802:	f7ff bbf6 	b.w	8005ff2 <__ieee754_pow+0x12a>
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <__ieee754_pow+0xa0c>)
 8006808:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800680c:	429f      	cmp	r7, r3
 800680e:	f77f af13 	ble.w	8006638 <__ieee754_pow+0x770>
 8006812:	4b31      	ldr	r3, [pc, #196]	; (80068d8 <__ieee754_pow+0xa10>)
 8006814:	440b      	add	r3, r1
 8006816:	4303      	orrs	r3, r0
 8006818:	d00b      	beq.n	8006832 <__ieee754_pow+0x96a>
 800681a:	a329      	add	r3, pc, #164	; (adr r3, 80068c0 <__ieee754_pow+0x9f8>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006824:	f7f9 fe50 	bl	80004c8 <__aeabi_dmul>
 8006828:	a325      	add	r3, pc, #148	; (adr r3, 80068c0 <__ieee754_pow+0x9f8>)
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f7ff bbe0 	b.w	8005ff2 <__ieee754_pow+0x12a>
 8006832:	4622      	mov	r2, r4
 8006834:	462b      	mov	r3, r5
 8006836:	f7f9 fc8f 	bl	8000158 <__aeabi_dsub>
 800683a:	4642      	mov	r2, r8
 800683c:	464b      	mov	r3, r9
 800683e:	f7fa f8c9 	bl	80009d4 <__aeabi_dcmpge>
 8006842:	2800      	cmp	r0, #0
 8006844:	f43f aef8 	beq.w	8006638 <__ieee754_pow+0x770>
 8006848:	e7e7      	b.n	800681a <__ieee754_pow+0x952>
 800684a:	f04f 0a00 	mov.w	sl, #0
 800684e:	e71e      	b.n	800668e <__ieee754_pow+0x7c6>
 8006850:	4621      	mov	r1, r4
 8006852:	e7d4      	b.n	80067fe <__ieee754_pow+0x936>
 8006854:	f04f 0b00 	mov.w	fp, #0
 8006858:	f8df c074 	ldr.w	ip, [pc, #116]	; 80068d0 <__ieee754_pow+0xa08>
 800685c:	f7ff bb95 	b.w	8005f8a <__ieee754_pow+0xc2>
 8006860:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006864:	f7ff bb91 	b.w	8005f8a <__ieee754_pow+0xc2>
 8006868:	4638      	mov	r0, r7
 800686a:	4641      	mov	r1, r8
 800686c:	f7ff bbc3 	b.w	8005ff6 <__ieee754_pow+0x12e>
 8006870:	9200      	str	r2, [sp, #0]
 8006872:	f7ff bb9f 	b.w	8005fb4 <__ieee754_pow+0xec>
 8006876:	bf00      	nop
 8006878:	652b82fe 	.word	0x652b82fe
 800687c:	3c971547 	.word	0x3c971547
 8006880:	00000000 	.word	0x00000000
 8006884:	3fe62e43 	.word	0x3fe62e43
 8006888:	fefa39ef 	.word	0xfefa39ef
 800688c:	3fe62e42 	.word	0x3fe62e42
 8006890:	0ca86c39 	.word	0x0ca86c39
 8006894:	be205c61 	.word	0xbe205c61
 8006898:	72bea4d0 	.word	0x72bea4d0
 800689c:	3e663769 	.word	0x3e663769
 80068a0:	c5d26bf1 	.word	0xc5d26bf1
 80068a4:	3ebbbd41 	.word	0x3ebbbd41
 80068a8:	af25de2c 	.word	0xaf25de2c
 80068ac:	3f11566a 	.word	0x3f11566a
 80068b0:	16bebd93 	.word	0x16bebd93
 80068b4:	3f66c16c 	.word	0x3f66c16c
 80068b8:	5555553e 	.word	0x5555553e
 80068bc:	3fc55555 	.word	0x3fc55555
 80068c0:	c2f8f359 	.word	0xc2f8f359
 80068c4:	01a56e1f 	.word	0x01a56e1f
 80068c8:	3fe00000 	.word	0x3fe00000
 80068cc:	000fffff 	.word	0x000fffff
 80068d0:	3ff00000 	.word	0x3ff00000
 80068d4:	4090cbff 	.word	0x4090cbff
 80068d8:	3f6f3400 	.word	0x3f6f3400

080068dc <__ieee754_sqrt>:
 80068dc:	4b54      	ldr	r3, [pc, #336]	; (8006a30 <__ieee754_sqrt+0x154>)
 80068de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e2:	438b      	bics	r3, r1
 80068e4:	4606      	mov	r6, r0
 80068e6:	460d      	mov	r5, r1
 80068e8:	460a      	mov	r2, r1
 80068ea:	460c      	mov	r4, r1
 80068ec:	d10f      	bne.n	800690e <__ieee754_sqrt+0x32>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	f7f9 fde9 	bl	80004c8 <__aeabi_dmul>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4630      	mov	r0, r6
 80068fc:	4629      	mov	r1, r5
 80068fe:	f7f9 fc2d 	bl	800015c <__adddf3>
 8006902:	4606      	mov	r6, r0
 8006904:	460d      	mov	r5, r1
 8006906:	4630      	mov	r0, r6
 8006908:	4629      	mov	r1, r5
 800690a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800690e:	2900      	cmp	r1, #0
 8006910:	4607      	mov	r7, r0
 8006912:	4603      	mov	r3, r0
 8006914:	dc0e      	bgt.n	8006934 <__ieee754_sqrt+0x58>
 8006916:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800691a:	ea5c 0707 	orrs.w	r7, ip, r7
 800691e:	d0f2      	beq.n	8006906 <__ieee754_sqrt+0x2a>
 8006920:	b141      	cbz	r1, 8006934 <__ieee754_sqrt+0x58>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	f7f9 fc17 	bl	8000158 <__aeabi_dsub>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	f7f9 fef5 	bl	800071c <__aeabi_ddiv>
 8006932:	e7e6      	b.n	8006902 <__ieee754_sqrt+0x26>
 8006934:	1512      	asrs	r2, r2, #20
 8006936:	d074      	beq.n	8006a22 <__ieee754_sqrt+0x146>
 8006938:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800693c:	07d5      	lsls	r5, r2, #31
 800693e:	f04f 0500 	mov.w	r5, #0
 8006942:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006946:	bf48      	it	mi
 8006948:	0fd9      	lsrmi	r1, r3, #31
 800694a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800694e:	bf44      	itt	mi
 8006950:	005b      	lslmi	r3, r3, #1
 8006952:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006956:	1051      	asrs	r1, r2, #1
 8006958:	0fda      	lsrs	r2, r3, #31
 800695a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800695e:	4628      	mov	r0, r5
 8006960:	2216      	movs	r2, #22
 8006962:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	1987      	adds	r7, r0, r6
 800696a:	42a7      	cmp	r7, r4
 800696c:	bfde      	ittt	le
 800696e:	19b8      	addle	r0, r7, r6
 8006970:	1be4      	suble	r4, r4, r7
 8006972:	19ad      	addle	r5, r5, r6
 8006974:	0fdf      	lsrs	r7, r3, #31
 8006976:	3a01      	subs	r2, #1
 8006978:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800697c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006980:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006984:	d1f0      	bne.n	8006968 <__ieee754_sqrt+0x8c>
 8006986:	f04f 0c20 	mov.w	ip, #32
 800698a:	4696      	mov	lr, r2
 800698c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006990:	4284      	cmp	r4, r0
 8006992:	eb06 070e 	add.w	r7, r6, lr
 8006996:	dc02      	bgt.n	800699e <__ieee754_sqrt+0xc2>
 8006998:	d112      	bne.n	80069c0 <__ieee754_sqrt+0xe4>
 800699a:	429f      	cmp	r7, r3
 800699c:	d810      	bhi.n	80069c0 <__ieee754_sqrt+0xe4>
 800699e:	2f00      	cmp	r7, #0
 80069a0:	eb07 0e06 	add.w	lr, r7, r6
 80069a4:	da42      	bge.n	8006a2c <__ieee754_sqrt+0x150>
 80069a6:	f1be 0f00 	cmp.w	lr, #0
 80069aa:	db3f      	blt.n	8006a2c <__ieee754_sqrt+0x150>
 80069ac:	f100 0801 	add.w	r8, r0, #1
 80069b0:	1a24      	subs	r4, r4, r0
 80069b2:	4640      	mov	r0, r8
 80069b4:	429f      	cmp	r7, r3
 80069b6:	bf88      	it	hi
 80069b8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80069bc:	1bdb      	subs	r3, r3, r7
 80069be:	4432      	add	r2, r6
 80069c0:	0064      	lsls	r4, r4, #1
 80069c2:	f1bc 0c01 	subs.w	ip, ip, #1
 80069c6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80069ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80069ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80069d2:	d1dd      	bne.n	8006990 <__ieee754_sqrt+0xb4>
 80069d4:	4323      	orrs	r3, r4
 80069d6:	d006      	beq.n	80069e6 <__ieee754_sqrt+0x10a>
 80069d8:	1c54      	adds	r4, r2, #1
 80069da:	bf0b      	itete	eq
 80069dc:	4662      	moveq	r2, ip
 80069de:	3201      	addne	r2, #1
 80069e0:	3501      	addeq	r5, #1
 80069e2:	f022 0201 	bicne.w	r2, r2, #1
 80069e6:	106b      	asrs	r3, r5, #1
 80069e8:	0852      	lsrs	r2, r2, #1
 80069ea:	07e8      	lsls	r0, r5, #31
 80069ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80069f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80069f4:	bf48      	it	mi
 80069f6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80069fa:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80069fe:	4616      	mov	r6, r2
 8006a00:	e781      	b.n	8006906 <__ieee754_sqrt+0x2a>
 8006a02:	0adc      	lsrs	r4, r3, #11
 8006a04:	3915      	subs	r1, #21
 8006a06:	055b      	lsls	r3, r3, #21
 8006a08:	2c00      	cmp	r4, #0
 8006a0a:	d0fa      	beq.n	8006a02 <__ieee754_sqrt+0x126>
 8006a0c:	02e6      	lsls	r6, r4, #11
 8006a0e:	d50a      	bpl.n	8006a26 <__ieee754_sqrt+0x14a>
 8006a10:	f1c2 0020 	rsb	r0, r2, #32
 8006a14:	fa23 f000 	lsr.w	r0, r3, r0
 8006a18:	1e55      	subs	r5, r2, #1
 8006a1a:	4093      	lsls	r3, r2
 8006a1c:	4304      	orrs	r4, r0
 8006a1e:	1b4a      	subs	r2, r1, r5
 8006a20:	e78a      	b.n	8006938 <__ieee754_sqrt+0x5c>
 8006a22:	4611      	mov	r1, r2
 8006a24:	e7f0      	b.n	8006a08 <__ieee754_sqrt+0x12c>
 8006a26:	0064      	lsls	r4, r4, #1
 8006a28:	3201      	adds	r2, #1
 8006a2a:	e7ef      	b.n	8006a0c <__ieee754_sqrt+0x130>
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	e7bf      	b.n	80069b0 <__ieee754_sqrt+0xd4>
 8006a30:	7ff00000 	.word	0x7ff00000

08006a34 <fabs>:
 8006a34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4770      	bx	lr

08006a3c <finite>:
 8006a3c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006a40:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006a44:	0fc0      	lsrs	r0, r0, #31
 8006a46:	4770      	bx	lr

08006a48 <matherr>:
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4770      	bx	lr

08006a4c <nan>:
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	4901      	ldr	r1, [pc, #4]	; (8006a54 <nan+0x8>)
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	7ff80000 	.word	0x7ff80000

08006a58 <rint>:
 8006a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a5e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8006a62:	f1bc 0f13 	cmp.w	ip, #19
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8006a72:	dc5a      	bgt.n	8006b2a <rint+0xd2>
 8006a74:	f1bc 0f00 	cmp.w	ip, #0
 8006a78:	da2b      	bge.n	8006ad2 <rint+0x7a>
 8006a7a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006a7e:	4302      	orrs	r2, r0
 8006a80:	d023      	beq.n	8006aca <rint+0x72>
 8006a82:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006a86:	4302      	orrs	r2, r0
 8006a88:	4256      	negs	r6, r2
 8006a8a:	4316      	orrs	r6, r2
 8006a8c:	0c4b      	lsrs	r3, r1, #17
 8006a8e:	0b36      	lsrs	r6, r6, #12
 8006a90:	4934      	ldr	r1, [pc, #208]	; (8006b64 <rint+0x10c>)
 8006a92:	045b      	lsls	r3, r3, #17
 8006a94:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006a98:	ea46 0503 	orr.w	r5, r6, r3
 8006a9c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	462b      	mov	r3, r5
 8006aa4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f7f9 fb56 	bl	800015c <__adddf3>
 8006ab0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ab8:	462b      	mov	r3, r5
 8006aba:	4622      	mov	r2, r4
 8006abc:	f7f9 fb4c 	bl	8000158 <__aeabi_dsub>
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ac6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	b003      	add	sp, #12
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad2:	4a25      	ldr	r2, [pc, #148]	; (8006b68 <rint+0x110>)
 8006ad4:	fa42 f20c 	asr.w	r2, r2, ip
 8006ad8:	4011      	ands	r1, r2
 8006ada:	4301      	orrs	r1, r0
 8006adc:	d0f5      	beq.n	8006aca <rint+0x72>
 8006ade:	0852      	lsrs	r2, r2, #1
 8006ae0:	ea05 0102 	and.w	r1, r5, r2
 8006ae4:	ea50 0601 	orrs.w	r6, r0, r1
 8006ae8:	d00c      	beq.n	8006b04 <rint+0xac>
 8006aea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006aee:	f1bc 0f13 	cmp.w	ip, #19
 8006af2:	bf0c      	ite	eq
 8006af4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8006af8:	2600      	movne	r6, #0
 8006afa:	ea25 0202 	bic.w	r2, r5, r2
 8006afe:	fa43 f30c 	asr.w	r3, r3, ip
 8006b02:	4313      	orrs	r3, r2
 8006b04:	4917      	ldr	r1, [pc, #92]	; (8006b64 <rint+0x10c>)
 8006b06:	4632      	mov	r2, r6
 8006b08:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8006b0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b10:	4620      	mov	r0, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	f7f9 fb22 	bl	800015c <__adddf3>
 8006b18:	e9cd 0100 	strd	r0, r1, [sp]
 8006b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b20:	4622      	mov	r2, r4
 8006b22:	462b      	mov	r3, r5
 8006b24:	f7f9 fb18 	bl	8000158 <__aeabi_dsub>
 8006b28:	e008      	b.n	8006b3c <rint+0xe4>
 8006b2a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8006b2e:	dd08      	ble.n	8006b42 <rint+0xea>
 8006b30:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8006b34:	d1c9      	bne.n	8006aca <rint+0x72>
 8006b36:	4602      	mov	r2, r0
 8006b38:	f7f9 fb10 	bl	800015c <__adddf3>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	e7c3      	b.n	8006aca <rint+0x72>
 8006b42:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8006b46:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4a:	40ca      	lsrs	r2, r1
 8006b4c:	4210      	tst	r0, r2
 8006b4e:	d0bc      	beq.n	8006aca <rint+0x72>
 8006b50:	0852      	lsrs	r2, r2, #1
 8006b52:	4210      	tst	r0, r2
 8006b54:	bf1f      	itttt	ne
 8006b56:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8006b5a:	ea20 0202 	bicne.w	r2, r0, r2
 8006b5e:	410e      	asrne	r6, r1
 8006b60:	4316      	orrne	r6, r2
 8006b62:	e7cf      	b.n	8006b04 <rint+0xac>
 8006b64:	08008570 	.word	0x08008570
 8006b68:	000fffff 	.word	0x000fffff
 8006b6c:	00000000 	.word	0x00000000

08006b70 <scalbn>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	4616      	mov	r6, r2
 8006b74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b78:	4604      	mov	r4, r0
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	b982      	cbnz	r2, 8006ba2 <scalbn+0x32>
 8006b80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b84:	4303      	orrs	r3, r0
 8006b86:	d034      	beq.n	8006bf2 <scalbn+0x82>
 8006b88:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <scalbn+0xd0>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f7f9 fc9c 	bl	80004c8 <__aeabi_dmul>
 8006b90:	4b2c      	ldr	r3, [pc, #176]	; (8006c44 <scalbn+0xd4>)
 8006b92:	4604      	mov	r4, r0
 8006b94:	429e      	cmp	r6, r3
 8006b96:	460d      	mov	r5, r1
 8006b98:	da0d      	bge.n	8006bb6 <scalbn+0x46>
 8006b9a:	a325      	add	r3, pc, #148	; (adr r3, 8006c30 <scalbn+0xc0>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	e01c      	b.n	8006bdc <scalbn+0x6c>
 8006ba2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006ba6:	42ba      	cmp	r2, r7
 8006ba8:	d109      	bne.n	8006bbe <scalbn+0x4e>
 8006baa:	4602      	mov	r2, r0
 8006bac:	f7f9 fad6 	bl	800015c <__adddf3>
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	e01d      	b.n	8006bf2 <scalbn+0x82>
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006bbc:	3a36      	subs	r2, #54	; 0x36
 8006bbe:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006bc2:	4432      	add	r2, r6
 8006bc4:	428a      	cmp	r2, r1
 8006bc6:	dd0c      	ble.n	8006be2 <scalbn+0x72>
 8006bc8:	4622      	mov	r2, r4
 8006bca:	462b      	mov	r3, r5
 8006bcc:	a11a      	add	r1, pc, #104	; (adr r1, 8006c38 <scalbn+0xc8>)
 8006bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd2:	f000 f9ef 	bl	8006fb4 <copysign>
 8006bd6:	a318      	add	r3, pc, #96	; (adr r3, 8006c38 <scalbn+0xc8>)
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f7f9 fc74 	bl	80004c8 <__aeabi_dmul>
 8006be0:	e7e6      	b.n	8006bb0 <scalbn+0x40>
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	dd08      	ble.n	8006bf8 <scalbn+0x88>
 8006be6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006bfc:	da0b      	bge.n	8006c16 <scalbn+0xa6>
 8006bfe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c02:	429e      	cmp	r6, r3
 8006c04:	4622      	mov	r2, r4
 8006c06:	462b      	mov	r3, r5
 8006c08:	dce0      	bgt.n	8006bcc <scalbn+0x5c>
 8006c0a:	a109      	add	r1, pc, #36	; (adr r1, 8006c30 <scalbn+0xc0>)
 8006c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c10:	f000 f9d0 	bl	8006fb4 <copysign>
 8006c14:	e7c1      	b.n	8006b9a <scalbn+0x2a>
 8006c16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c1a:	3236      	adds	r2, #54	; 0x36
 8006c1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c20:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <scalbn+0xd8>)
 8006c2c:	e7d6      	b.n	8006bdc <scalbn+0x6c>
 8006c2e:	bf00      	nop
 8006c30:	c2f8f359 	.word	0xc2f8f359
 8006c34:	01a56e1f 	.word	0x01a56e1f
 8006c38:	8800759c 	.word	0x8800759c
 8006c3c:	7e37e43c 	.word	0x7e37e43c
 8006c40:	43500000 	.word	0x43500000
 8006c44:	ffff3cb0 	.word	0xffff3cb0
 8006c48:	3c900000 	.word	0x3c900000
 8006c4c:	00000000 	.word	0x00000000

08006c50 <__ieee754_log>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006c58:	b087      	sub	sp, #28
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	460d      	mov	r5, r1
 8006c60:	da24      	bge.n	8006cac <__ieee754_log+0x5c>
 8006c62:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006c66:	4304      	orrs	r4, r0
 8006c68:	d108      	bne.n	8006c7c <__ieee754_log+0x2c>
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2000      	movs	r0, #0
 8006c70:	49cb      	ldr	r1, [pc, #812]	; (8006fa0 <__ieee754_log+0x350>)
 8006c72:	f7f9 fd53 	bl	800071c <__aeabi_ddiv>
 8006c76:	b007      	add	sp, #28
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	da04      	bge.n	8006c8a <__ieee754_log+0x3a>
 8006c80:	f7f9 fa6a 	bl	8000158 <__aeabi_dsub>
 8006c84:	2200      	movs	r2, #0
 8006c86:	2300      	movs	r3, #0
 8006c88:	e7f3      	b.n	8006c72 <__ieee754_log+0x22>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4bc5      	ldr	r3, [pc, #788]	; (8006fa4 <__ieee754_log+0x354>)
 8006c8e:	f7f9 fc1b 	bl	80004c8 <__aeabi_dmul>
 8006c92:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	49c2      	ldr	r1, [pc, #776]	; (8006fa8 <__ieee754_log+0x358>)
 8006c9e:	428d      	cmp	r5, r1
 8006ca0:	dd06      	ble.n	8006cb0 <__ieee754_log+0x60>
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7f9 fa59 	bl	800015c <__adddf3>
 8006caa:	e7e4      	b.n	8006c76 <__ieee754_log+0x26>
 8006cac:	2600      	movs	r6, #0
 8006cae:	e7f5      	b.n	8006c9c <__ieee754_log+0x4c>
 8006cb0:	152c      	asrs	r4, r5, #20
 8006cb2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006cb6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8006cba:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006cbe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8006cc2:	4426      	add	r6, r4
 8006cc4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8006cc8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8006ccc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8006cd0:	ea41 0305 	orr.w	r3, r1, r5
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4bb4      	ldr	r3, [pc, #720]	; (8006fac <__ieee754_log+0x35c>)
 8006cdc:	f7f9 fa3c 	bl	8000158 <__aeabi_dsub>
 8006ce0:	1cab      	adds	r3, r5, #2
 8006ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8006cec:	4682      	mov	sl, r0
 8006cee:	468b      	mov	fp, r1
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	dc53      	bgt.n	8006d9e <__ieee754_log+0x14e>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f7f9 fe4e 	bl	8000998 <__aeabi_dcmpeq>
 8006cfc:	b1d0      	cbz	r0, 8006d34 <__ieee754_log+0xe4>
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	f000 8120 	beq.w	8006f44 <__ieee754_log+0x2f4>
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7f9 fb75 	bl	80003f4 <__aeabi_i2d>
 8006d0a:	a391      	add	r3, pc, #580	; (adr r3, 8006f50 <__ieee754_log+0x300>)
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	4606      	mov	r6, r0
 8006d12:	460f      	mov	r7, r1
 8006d14:	f7f9 fbd8 	bl	80004c8 <__aeabi_dmul>
 8006d18:	a38f      	add	r3, pc, #572	; (adr r3, 8006f58 <__ieee754_log+0x308>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	4604      	mov	r4, r0
 8006d20:	460d      	mov	r5, r1
 8006d22:	4630      	mov	r0, r6
 8006d24:	4639      	mov	r1, r7
 8006d26:	f7f9 fbcf 	bl	80004c8 <__aeabi_dmul>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	e7b8      	b.n	8006ca6 <__ieee754_log+0x56>
 8006d34:	a38a      	add	r3, pc, #552	; (adr r3, 8006f60 <__ieee754_log+0x310>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	f7f9 fbc3 	bl	80004c8 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	2000      	movs	r0, #0
 8006d48:	4999      	ldr	r1, [pc, #612]	; (8006fb0 <__ieee754_log+0x360>)
 8006d4a:	f7f9 fa05 	bl	8000158 <__aeabi_dsub>
 8006d4e:	4652      	mov	r2, sl
 8006d50:	4606      	mov	r6, r0
 8006d52:	460f      	mov	r7, r1
 8006d54:	465b      	mov	r3, fp
 8006d56:	4650      	mov	r0, sl
 8006d58:	4659      	mov	r1, fp
 8006d5a:	f7f9 fbb5 	bl	80004c8 <__aeabi_dmul>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4630      	mov	r0, r6
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fbaf 	bl	80004c8 <__aeabi_dmul>
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	b914      	cbnz	r4, 8006d76 <__ieee754_log+0x126>
 8006d70:	4632      	mov	r2, r6
 8006d72:	463b      	mov	r3, r7
 8006d74:	e0a0      	b.n	8006eb8 <__ieee754_log+0x268>
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7f9 fb3c 	bl	80003f4 <__aeabi_i2d>
 8006d7c:	a374      	add	r3, pc, #464	; (adr r3, 8006f50 <__ieee754_log+0x300>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	4680      	mov	r8, r0
 8006d84:	4689      	mov	r9, r1
 8006d86:	f7f9 fb9f 	bl	80004c8 <__aeabi_dmul>
 8006d8a:	a373      	add	r3, pc, #460	; (adr r3, 8006f58 <__ieee754_log+0x308>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	4640      	mov	r0, r8
 8006d96:	4649      	mov	r1, r9
 8006d98:	f7f9 fb96 	bl	80004c8 <__aeabi_dmul>
 8006d9c:	e0a5      	b.n	8006eea <__ieee754_log+0x29a>
 8006d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006da2:	f7f9 f9db 	bl	800015c <__adddf3>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4650      	mov	r0, sl
 8006dac:	4659      	mov	r1, fp
 8006dae:	f7f9 fcb5 	bl	800071c <__aeabi_ddiv>
 8006db2:	e9cd 0100 	strd	r0, r1, [sp]
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7f9 fb1c 	bl	80003f4 <__aeabi_i2d>
 8006dbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f7f9 fb7e 	bl	80004c8 <__aeabi_dmul>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dd4:	f7f9 fb78 	bl	80004c8 <__aeabi_dmul>
 8006dd8:	a363      	add	r3, pc, #396	; (adr r3, 8006f68 <__ieee754_log+0x318>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	4680      	mov	r8, r0
 8006de0:	4689      	mov	r9, r1
 8006de2:	f7f9 fb71 	bl	80004c8 <__aeabi_dmul>
 8006de6:	a362      	add	r3, pc, #392	; (adr r3, 8006f70 <__ieee754_log+0x320>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 f9b6 	bl	800015c <__adddf3>
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	f7f9 fb68 	bl	80004c8 <__aeabi_dmul>
 8006df8:	a35f      	add	r3, pc, #380	; (adr r3, 8006f78 <__ieee754_log+0x328>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f7f9 f9ad 	bl	800015c <__adddf3>
 8006e02:	4642      	mov	r2, r8
 8006e04:	464b      	mov	r3, r9
 8006e06:	f7f9 fb5f 	bl	80004c8 <__aeabi_dmul>
 8006e0a:	a35d      	add	r3, pc, #372	; (adr r3, 8006f80 <__ieee754_log+0x330>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 f9a4 	bl	800015c <__adddf3>
 8006e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e18:	f7f9 fb56 	bl	80004c8 <__aeabi_dmul>
 8006e1c:	a35a      	add	r3, pc, #360	; (adr r3, 8006f88 <__ieee754_log+0x338>)
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fb4d 	bl	80004c8 <__aeabi_dmul>
 8006e2e:	a358      	add	r3, pc, #352	; (adr r3, 8006f90 <__ieee754_log+0x340>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f7f9 f992 	bl	800015c <__adddf3>
 8006e38:	4642      	mov	r2, r8
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	f7f9 fb44 	bl	80004c8 <__aeabi_dmul>
 8006e40:	a355      	add	r3, pc, #340	; (adr r3, 8006f98 <__ieee754_log+0x348>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f7f9 f989 	bl	800015c <__adddf3>
 8006e4a:	4642      	mov	r2, r8
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	f7f9 fb3b 	bl	80004c8 <__aeabi_dmul>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e5a:	f7f9 f97f 	bl	800015c <__adddf3>
 8006e5e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8006e62:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006e66:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8006e6a:	3551      	adds	r5, #81	; 0x51
 8006e6c:	4335      	orrs	r5, r6
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	4680      	mov	r8, r0
 8006e72:	4689      	mov	r9, r1
 8006e74:	dd48      	ble.n	8006f08 <__ieee754_log+0x2b8>
 8006e76:	2200      	movs	r2, #0
 8006e78:	4b4d      	ldr	r3, [pc, #308]	; (8006fb0 <__ieee754_log+0x360>)
 8006e7a:	4650      	mov	r0, sl
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	f7f9 fb23 	bl	80004c8 <__aeabi_dmul>
 8006e82:	4652      	mov	r2, sl
 8006e84:	465b      	mov	r3, fp
 8006e86:	f7f9 fb1f 	bl	80004c8 <__aeabi_dmul>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	4640      	mov	r0, r8
 8006e94:	4649      	mov	r1, r9
 8006e96:	f7f9 f961 	bl	800015c <__adddf3>
 8006e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e9e:	f7f9 fb13 	bl	80004c8 <__aeabi_dmul>
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	b964      	cbnz	r4, 8006ec2 <__ieee754_log+0x272>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4630      	mov	r0, r6
 8006eae:	4639      	mov	r1, r7
 8006eb0:	f7f9 f952 	bl	8000158 <__aeabi_dsub>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4650      	mov	r0, sl
 8006eba:	4659      	mov	r1, fp
 8006ebc:	f7f9 f94c 	bl	8000158 <__aeabi_dsub>
 8006ec0:	e6d9      	b.n	8006c76 <__ieee754_log+0x26>
 8006ec2:	a323      	add	r3, pc, #140	; (adr r3, 8006f50 <__ieee754_log+0x300>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ecc:	f7f9 fafc 	bl	80004c8 <__aeabi_dmul>
 8006ed0:	a321      	add	r3, pc, #132	; (adr r3, 8006f58 <__ieee754_log+0x308>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	460d      	mov	r5, r1
 8006eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ede:	f7f9 faf3 	bl	80004c8 <__aeabi_dmul>
 8006ee2:	4642      	mov	r2, r8
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	f7f9 f939 	bl	800015c <__adddf3>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4630      	mov	r0, r6
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	f7f9 f931 	bl	8000158 <__aeabi_dsub>
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	465b      	mov	r3, fp
 8006efa:	f7f9 f92d 	bl	8000158 <__aeabi_dsub>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	e7d9      	b.n	8006ebc <__ieee754_log+0x26c>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	4659      	mov	r1, fp
 8006f10:	f7f9 f922 	bl	8000158 <__aeabi_dsub>
 8006f14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f18:	f7f9 fad6 	bl	80004c8 <__aeabi_dmul>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	460f      	mov	r7, r1
 8006f20:	2c00      	cmp	r4, #0
 8006f22:	f43f af25 	beq.w	8006d70 <__ieee754_log+0x120>
 8006f26:	a30a      	add	r3, pc, #40	; (adr r3, 8006f50 <__ieee754_log+0x300>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f30:	f7f9 faca 	bl	80004c8 <__aeabi_dmul>
 8006f34:	a308      	add	r3, pc, #32	; (adr r3, 8006f58 <__ieee754_log+0x308>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f42:	e729      	b.n	8006d98 <__ieee754_log+0x148>
 8006f44:	2000      	movs	r0, #0
 8006f46:	2100      	movs	r1, #0
 8006f48:	e695      	b.n	8006c76 <__ieee754_log+0x26>
 8006f4a:	bf00      	nop
 8006f4c:	f3af 8000 	nop.w
 8006f50:	fee00000 	.word	0xfee00000
 8006f54:	3fe62e42 	.word	0x3fe62e42
 8006f58:	35793c76 	.word	0x35793c76
 8006f5c:	3dea39ef 	.word	0x3dea39ef
 8006f60:	55555555 	.word	0x55555555
 8006f64:	3fd55555 	.word	0x3fd55555
 8006f68:	df3e5244 	.word	0xdf3e5244
 8006f6c:	3fc2f112 	.word	0x3fc2f112
 8006f70:	96cb03de 	.word	0x96cb03de
 8006f74:	3fc74664 	.word	0x3fc74664
 8006f78:	94229359 	.word	0x94229359
 8006f7c:	3fd24924 	.word	0x3fd24924
 8006f80:	55555593 	.word	0x55555593
 8006f84:	3fe55555 	.word	0x3fe55555
 8006f88:	d078c69f 	.word	0xd078c69f
 8006f8c:	3fc39a09 	.word	0x3fc39a09
 8006f90:	1d8e78af 	.word	0x1d8e78af
 8006f94:	3fcc71c5 	.word	0x3fcc71c5
 8006f98:	9997fa04 	.word	0x9997fa04
 8006f9c:	3fd99999 	.word	0x3fd99999
 8006fa0:	c3500000 	.word	0xc3500000
 8006fa4:	43500000 	.word	0x43500000
 8006fa8:	7fefffff 	.word	0x7fefffff
 8006fac:	3ff00000 	.word	0x3ff00000
 8006fb0:	3fe00000 	.word	0x3fe00000

08006fb4 <copysign>:
 8006fb4:	b530      	push	{r4, r5, lr}
 8006fb6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fbe:	ea42 0503 	orr.w	r5, r2, r3
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	bd30      	pop	{r4, r5, pc}
	...

08006fc8 <_init>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr

08006fd4 <_fini>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr
