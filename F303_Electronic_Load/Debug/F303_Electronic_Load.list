
F303_Electronic_Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000844c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  080085e0  080085e0  000185e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b78  08009b78  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08009b78  08009b78  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b78  08009b78  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000088  08009c04  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  08009c04  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d594  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000331f  00000000  00000000  0003d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001240  00000000  00000000  00040968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  00041ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b559  00000000  00000000  00042c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000113ae  00000000  00000000  0005e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092504  00000000  00000000  0006f597  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101a9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a8  00000000  00000000  00101b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085c4 	.word	0x080085c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080085c4 	.word	0x080085c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f001 f969 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f005 f9f6 	bl	8006084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f981 	bl	8001fca <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f001 f949 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000018 	.word	0x20000018
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	20000000 	.word	0x20000000

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004
 8000d28:	200004fc 	.word	0x200004fc

08000d2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200004fc 	.word	0x200004fc

08000d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b09c      	sub	sp, #112	; 0x70
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e170      	b.n	8001046 <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f003 0310 	and.w	r3, r3, #16
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d176      	bne.n	8000e64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d152      	bne.n	8000e24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f005 f997 	bl	80060cc <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d13b      	bne.n	8000e24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 fefd 	bl	8001bac <ADC_Disable>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d12f      	bne.n	8000e24 <HAL_ADC_Init+0xe0>
 8000dc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d12b      	bne.n	8000e24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dd4:	f023 0302 	bic.w	r3, r3, #2
 8000dd8:	f043 0202 	orr.w	r2, r3, #2
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dfe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e00:	4b93      	ldr	r3, [pc, #588]	; (8001050 <HAL_ADC_Init+0x30c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a93      	ldr	r2, [pc, #588]	; (8001054 <HAL_ADC_Init+0x310>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	0c9a      	lsrs	r2, r3, #18
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e16:	e002      	b.n	8000e1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f9      	bne.n	8000e18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e40:	d110      	bne.n	8000e64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f023 0312 	bic.w	r3, r3, #18
 8000e4a:	f043 0210 	orr.w	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e56:	f043 0201 	orr.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f040 80dd 	bne.w	800102c <HAL_ADC_Init+0x2e8>
 8000e72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 80d8 	bne.w	800102c <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f040 80d0 	bne.w	800102c <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e94:	f043 0202 	orr.w	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e9c:	4b6e      	ldr	r3, [pc, #440]	; (8001058 <HAL_ADC_Init+0x314>)
 8000e9e:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea8:	d102      	bne.n	8000eb0 <HAL_ADC_Init+0x16c>
 8000eaa:	4b6c      	ldr	r3, [pc, #432]	; (800105c <HAL_ADC_Init+0x318>)
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	e002      	b.n	8000eb6 <HAL_ADC_Init+0x172>
 8000eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eb4:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d108      	bne.n	8000ed6 <HAL_ADC_Init+0x192>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADC_Init+0x192>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_ADC_Init+0x194>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11c      	bne.n	8000f16 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000edc:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d010      	beq.n	8000f04 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d107      	bne.n	8000efe <HAL_ADC_Init+0x1ba>
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x1ba>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_ADC_Init+0x1bc>
 8000efe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d108      	bne.n	8000f16 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	431a      	orrs	r2, r3
 8000f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f14:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	035b      	lsls	r3, r3, #13
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f20:	2a01      	cmp	r2, #1
 8000f22:	d002      	beq.n	8000f2a <HAL_ADC_Init+0x1e6>
 8000f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f28:	e000      	b.n	8000f2c <HAL_ADC_Init+0x1e8>
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d11b      	bne.n	8000f80 <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d109      	bne.n	8000f64 <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	3b01      	subs	r3, #1
 8000f56:	045a      	lsls	r2, r3, #17
 8000f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f62:	e00d      	b.n	8000f80 <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000f6c:	f043 0220 	orr.w	r2, r3, #32
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f78:	f043 0201 	orr.w	r2, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d007      	beq.n	8000f98 <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4313      	orrs	r3, r2
 8000f92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f94:	4313      	orrs	r3, r2
 8000f96:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d113      	bne.n	8000fce <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fb4:	f023 0302 	bic.w	r3, r3, #2
 8000fb8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	039a      	lsls	r2, r3, #14
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_ADC_Init+0x31c>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10c      	bne.n	8001004 <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f023 010f 	bic.w	r1, r3, #15
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
 8001002:	e007      	b.n	8001014 <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020f 	bic.w	r2, r2, #15
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	645a      	str	r2, [r3, #68]	; 0x44
 800102a:	e00a      	b.n	8001042 <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	f023 0312 	bic.w	r3, r3, #18
 8001034:	f043 0210 	orr.w	r2, r3, #16
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800103c:	2301      	movs	r3, #1
 800103e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001042:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001046:	4618      	mov	r0, r3
 8001048:	3770      	adds	r7, #112	; 0x70
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000018 	.word	0x20000018
 8001054:	431bde83 	.word	0x431bde83
 8001058:	50000300 	.word	0x50000300
 800105c:	50000100 	.word	0x50000100
 8001060:	fff0c007 	.word	0xfff0c007

08001064 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 809c 	bne.w	80011b8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_ADC_Start+0x2a>
 800108a:	2302      	movs	r3, #2
 800108c:	e097      	b.n	80011be <HAL_ADC_Start+0x15a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fd2a 	bl	8001af0 <ADC_Enable>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 8083 	bne.w	80011ae <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_ADC_Start+0x164>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <HAL_ADC_Start+0x6e>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d0:	d115      	bne.n	80010fe <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d027      	beq.n	800113c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010fc:	e01e      	b.n	800113c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001112:	d004      	beq.n	800111e <HAL_ADC_Start+0xba>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <HAL_ADC_Start+0x168>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10e      	bne.n	800113c <HAL_ADC_Start+0xd8>
 800111e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001134:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001148:	d106      	bne.n	8001158 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	f023 0206 	bic.w	r2, r3, #6
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	649a      	str	r2, [r3, #72]	; 0x48
 8001156:	e002      	b.n	800115e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	221c      	movs	r2, #28
 800116c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_ADC_Start+0x164>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	2b00      	cmp	r3, #0
 8001178:	d010      	beq.n	800119c <HAL_ADC_Start+0x138>
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_ADC_Start+0x164>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	2b05      	cmp	r3, #5
 8001184:	d00a      	beq.n	800119c <HAL_ADC_Start+0x138>
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_ADC_Start+0x164>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	2b09      	cmp	r3, #9
 8001190:	d004      	beq.n	800119c <HAL_ADC_Start+0x138>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119a:	d10f      	bne.n	80011bc <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0204 	orr.w	r2, r2, #4
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	e006      	b.n	80011bc <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011b6:	e001      	b.n	80011bc <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011b8:	2302      	movs	r3, #2
 80011ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	50000300 	.word	0x50000300
 80011cc:	50000100 	.word	0x50000100

080011d0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Stop+0x1a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e023      	b.n	8001232 <HAL_ADC_Stop+0x62>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80011f2:	216c      	movs	r1, #108	; 0x6c
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fd39 	bl	8001c6c <ADC_ConversionStop>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fcd1 	bl	8001bac <ADC_Disable>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b08      	cmp	r3, #8
 8001250:	d102      	bne.n	8001258 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001252:	2308      	movs	r3, #8
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e02e      	b.n	80012b6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_ADC_PollForConversion+0x188>)
 800125a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	2b00      	cmp	r3, #0
 8001266:	d112      	bne.n	800128e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d11d      	bne.n	80012b2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f043 0220 	orr.w	r2, r3, #32
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e096      	b.n	80013bc <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f043 0220 	orr.w	r2, r3, #32
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e084      	b.n	80013bc <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80012b2:	230c      	movs	r3, #12
 80012b4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012b6:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_ADC_PollForConversion+0x188>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <HAL_ADC_PollForConversion+0x90>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ca:	d104      	bne.n	80012d6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e003      	b.n	80012de <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80012d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80012de:	f7ff fd25 	bl	8000d2c <HAL_GetTick>
 80012e2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012e4:	e01a      	b.n	800131c <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d016      	beq.n	800131c <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_ADC_PollForConversion+0xc8>
 80012f4:	f7ff fd1a 	bl	8000d2c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d20b      	bcs.n	800131c <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e04f      	b.n	80013bc <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0dd      	beq.n	80012e6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001340:	2b00      	cmp	r3, #0
 8001342:	d131      	bne.n	80013a8 <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800134a:	2b00      	cmp	r3, #0
 800134c:	d12c      	bne.n	80013a8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	2b08      	cmp	r3, #8
 800135a:	d125      	bne.n	80013a8 <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d112      	bne.n	8001390 <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d112      	bne.n	80013a8 <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
 800138e:	e00b      	b.n	80013a8 <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f043 0220 	orr.w	r2, r3, #32
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	50000300 	.word	0x50000300

080013c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b09d      	sub	sp, #116	; 0x74
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x22>
 8001402:	2302      	movs	r3, #2
 8001404:	e2a5      	b.n	8001952 <HAL_ADC_ConfigChannel+0x56e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 8289 	bne.w	8001930 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d81c      	bhi.n	8001460 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	461a      	mov	r2, r3
 800143a:	231f      	movs	r3, #31
 800143c:	4093      	lsls	r3, r2
 800143e:	43db      	mvns	r3, r3
 8001440:	4019      	ands	r1, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
 800145e:	e063      	b.n	8001528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d81e      	bhi.n	80014a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	3b1e      	subs	r3, #30
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	4019      	ands	r1, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	3b1e      	subs	r3, #30
 8001498:	fa00 f203 	lsl.w	r2, r0, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
 80014a4:	e040      	b.n	8001528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b0e      	cmp	r3, #14
 80014ac:	d81e      	bhi.n	80014ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	3b3c      	subs	r3, #60	; 0x3c
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	3b3c      	subs	r3, #60	; 0x3c
 80014de:	fa00 f203 	lsl.w	r2, r0, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
 80014ea:	e01d      	b.n	8001528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	3b5a      	subs	r3, #90	; 0x5a
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	4019      	ands	r1, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	3b5a      	subs	r3, #90	; 0x5a
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 80e5 	bne.w	8001702 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d91c      	bls.n	800157a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6999      	ldr	r1, [r3, #24]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	3b1e      	subs	r3, #30
 8001552:	2207      	movs	r2, #7
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	4019      	ands	r1, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	3b1e      	subs	r3, #30
 800156c:	fa00 f203 	lsl.w	r2, r0, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	619a      	str	r2, [r3, #24]
 8001578:	e019      	b.n	80015ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6959      	ldr	r1, [r3, #20]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	2207      	movs	r2, #7
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	4019      	ands	r1, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6898      	ldr	r0, [r3, #8]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d84f      	bhi.n	8001670 <HAL_ADC_ConfigChannel+0x28c>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	0800160b 	.word	0x0800160b
 80015e0:	0800162d 	.word	0x0800162d
 80015e4:	0800164f 	.word	0x0800164f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ee:	4b9e      	ldr	r3, [pc, #632]	; (8001868 <HAL_ADC_ConfigChannel+0x484>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	0691      	lsls	r1, r2, #26
 80015f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80015fa:	430a      	orrs	r2, r1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001606:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001608:	e07e      	b.n	8001708 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001610:	4b95      	ldr	r3, [pc, #596]	; (8001868 <HAL_ADC_ConfigChannel+0x484>)
 8001612:	4013      	ands	r3, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	0691      	lsls	r1, r2, #26
 800161a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800161c:	430a      	orrs	r2, r1
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001628:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800162a:	e06d      	b.n	8001708 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001632:	4b8d      	ldr	r3, [pc, #564]	; (8001868 <HAL_ADC_ConfigChannel+0x484>)
 8001634:	4013      	ands	r3, r2
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	0691      	lsls	r1, r2, #26
 800163c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800163e:	430a      	orrs	r2, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800164a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800164c:	e05c      	b.n	8001708 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001654:	4b84      	ldr	r3, [pc, #528]	; (8001868 <HAL_ADC_ConfigChannel+0x484>)
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	0691      	lsls	r1, r2, #26
 800165e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001660:	430a      	orrs	r2, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800166c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800166e:	e04b      	b.n	8001708 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	069b      	lsls	r3, r3, #26
 8001680:	429a      	cmp	r2, r3
 8001682:	d107      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001692:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800169a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	069b      	lsls	r3, r3, #26
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d107      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	069b      	lsls	r3, r3, #26
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	069b      	lsls	r3, r3, #26
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d10a      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001700:	e001      	b.n	8001706 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001702:	bf00      	nop
 8001704:	e000      	b.n	8001708 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001706:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x344>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x344>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_ADC_ConfigChannel+0x346>
 8001728:	2300      	movs	r3, #0
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 810b 	bne.w	8001946 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d00f      	beq.n	8001758 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	400a      	ands	r2, r1
 8001752:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001756:	e049      	b.n	80017ec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	409a      	lsls	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b09      	cmp	r3, #9
 8001778:	d91c      	bls.n	80017b4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6999      	ldr	r1, [r3, #24]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	3b1b      	subs	r3, #27
 800178c:	2207      	movs	r2, #7
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	4019      	ands	r1, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6898      	ldr	r0, [r3, #8]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	3b1b      	subs	r3, #27
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	e01b      	b.n	80017ec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6959      	ldr	r1, [r3, #20]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	2207      	movs	r2, #7
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6898      	ldr	r0, [r3, #8]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_ADC_ConfigChannel+0x488>)
 80017ee:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d105      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001800:	2b00      	cmp	r3, #0
 8001802:	d015      	beq.n	8001830 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001808:	2b11      	cmp	r3, #17
 800180a:	d105      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800180c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800181c:	2b12      	cmp	r3, #18
 800181e:	f040 8092 	bne.w	8001946 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 808b 	bne.w	8001946 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001838:	d102      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x45c>
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_ADC_ConfigChannel+0x48c>)
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	e002      	b.n	8001846 <HAL_ADC_ConfigChannel+0x462>
 8001840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001844:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10f      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x490>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d108      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x490>
 8001862:	2301      	movs	r3, #1
 8001864:	e007      	b.n	8001876 <HAL_ADC_ConfigChannel+0x492>
 8001866:	bf00      	nop
 8001868:	83fff000 	.word	0x83fff000
 800186c:	50000300 	.word	0x50000300
 8001870:	50000100 	.word	0x50000100
 8001874:	2300      	movs	r3, #0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d150      	bne.n	800191c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800187a:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800187c:	2b00      	cmp	r3, #0
 800187e:	d010      	beq.n	80018a2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_ADC_ConfigChannel+0x4b8>
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x4b8>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_ADC_ConfigChannel+0x4ba>
 800189c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d13c      	bne.n	800191c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d11d      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x502>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b2:	d118      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018be:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_ADC_ConfigChannel+0x57c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <HAL_ADC_ConfigChannel+0x580>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9a      	lsrs	r2, r3, #18
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80018d6:	e002      	b.n	80018de <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3b01      	subs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f9      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018e4:	e02e      	b.n	8001944 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b11      	cmp	r3, #17
 80018ec:	d10b      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x522>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f6:	d106      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001902:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001904:	e01e      	b.n	8001944 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b12      	cmp	r3, #18
 800190c:	d11a      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800190e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001918:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800191a:	e013      	b.n	8001944 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	f043 0220 	orr.w	r2, r3, #32
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800192e:	e00a      	b.n	8001946 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f043 0220 	orr.w	r2, r3, #32
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001942:	e000      	b.n	8001946 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001944:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800194e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001952:	4618      	mov	r0, r3
 8001954:	3774      	adds	r7, #116	; 0x74
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000018 	.word	0x20000018
 8001964:	431bde83 	.word	0x431bde83

08001968 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001968:	b480      	push	{r7}
 800196a:	b09b      	sub	sp, #108	; 0x6c
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001980:	d102      	bne.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001982:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e002      	b.n	800198e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001988:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800198c:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0a1      	b.n	8001adc <HAL_ADCEx_MultiModeConfigChannel+0x174>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e09a      	b.n	8001adc <HAL_ADCEx_MultiModeConfigChannel+0x174>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d17e      	bne.n	8001aba <HAL_ADCEx_MultiModeConfigChannel+0x152>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d178      	bne.n	8001aba <HAL_ADCEx_MultiModeConfigChannel+0x152>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c8:	4b48      	ldr	r3, [pc, #288]	; (8001aec <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80019ca:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03f      	beq.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0xec>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	035b      	lsls	r3, r3, #13
 80019e6:	430b      	orrs	r3, r1
 80019e8:	431a      	orrs	r2, r3
 80019ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ec:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d15c      	bne.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a30:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d14b      	bne.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a3e:	f023 030f 	bic.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	6811      	ldr	r1, [r2, #0]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	6892      	ldr	r2, [r2, #8]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a50:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a52:	e03c      	b.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x166>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a5e:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a80:	2300      	movs	r3, #0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d123      	bne.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001aa2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d112      	bne.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ab0:	f023 030f 	bic.w	r3, r3, #15
 8001ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ab6:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ab8:	e009      	b.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x166>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f043 0220 	orr.w	r2, r3, #32
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001acc:	e000      	b.n	8001ad0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ace:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001ad8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001adc:	4618      	mov	r0, r3
 8001ade:	376c      	adds	r7, #108	; 0x6c
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	50000100 	.word	0x50000100
 8001aec:	50000300 	.word	0x50000300

08001af0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <ADC_Enable+0x2c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <ADC_Enable+0x2c>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <ADC_Enable+0x2e>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d13c      	bne.n	8001b9c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <ADC_Enable+0xb8>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00d      	beq.n	8001b4c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	f043 0210 	orr.w	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e028      	b.n	8001b9e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b5c:	f7ff f8e6 	bl	8000d2c <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b62:	e014      	b.n	8001b8e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b64:	f7ff f8e2 	bl	8000d2c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d90d      	bls.n	8001b8e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f043 0210 	orr.w	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e007      	b.n	8001b9e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d1e3      	bne.n	8001b64 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	8000003f 	.word	0x8000003f

08001bac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d108      	bne.n	8001bd8 <ADC_Disable+0x2c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <ADC_Disable+0x2c>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <ADC_Disable+0x2e>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d040      	beq.n	8001c60 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030d 	and.w	r3, r3, #13
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d10f      	bne.n	8001c0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0202 	orr.w	r2, r2, #2
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2203      	movs	r2, #3
 8001c02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f892 	bl	8000d2c <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c0a:	e022      	b.n	8001c52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0210 	orr.w	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e01c      	b.n	8001c62 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c28:	f7ff f880 	bl	8000d2c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d90d      	bls.n	8001c52 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e007      	b.n	8001c62 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d0e3      	beq.n	8001c28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8093 	beq.w	8001db8 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ca0:	d12a      	bne.n	8001cf8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d126      	bne.n	8001cf8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d122      	bne.n	8001cf8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001cb6:	e014      	b.n	8001ce2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <ADC_ConversionStop+0x158>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d90d      	bls.n	8001cdc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	649a      	str	r2, [r3, #72]	; 0x48
          
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e06e      	b.n	8001dba <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d1e3      	bne.n	8001cb8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b60      	cmp	r3, #96	; 0x60
 8001cfc:	d015      	beq.n	8001d2a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d10e      	bne.n	8001d2a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0210 	orr.w	r2, r2, #16
 8001d28:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	d015      	beq.n	8001d5c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d10e      	bne.n	8001d5c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b60      	cmp	r3, #96	; 0x60
 8001d60:	d004      	beq.n	8001d6c <ADC_ConversionStop+0x100>
 8001d62:	2b6c      	cmp	r3, #108	; 0x6c
 8001d64:	d105      	bne.n	8001d72 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d66:	230c      	movs	r3, #12
 8001d68:	617b      	str	r3, [r7, #20]
        break;
 8001d6a:	e005      	b.n	8001d78 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	617b      	str	r3, [r7, #20]
        break;
 8001d70:	e002      	b.n	8001d78 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d72:	2304      	movs	r3, #4
 8001d74:	617b      	str	r3, [r7, #20]
        break;
 8001d76:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d78:	f7fe ffd8 	bl	8000d2c <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d7e:	e014      	b.n	8001daa <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d80:	f7fe ffd4 	bl	8000d2c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b0b      	cmp	r3, #11
 8001d8c:	d90d      	bls.n	8001daa <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e007      	b.n	8001dba <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e3      	bne.n	8001d80 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	000993ff 	.word	0x000993ff

08001dc8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	; (8001e5c <NVIC_EnableIRQ+0x30>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da0b      	bge.n	8001e8c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	; (8001eac <NVIC_SetPriority+0x4c>)
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	3b04      	subs	r3, #4
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8a:	e009      	b.n	8001ea0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4907      	ldr	r1, [pc, #28]	; (8001eb0 <NVIC_SetPriority+0x50>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff2d 	bl	8001dc8 <NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff42 	bl	8001e10 <NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff8e 	bl	8001eb4 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff35 	bl	8001e2c <NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa2 	bl	8001f1c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e014      	b.n	800201e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	791b      	ldrb	r3, [r3, #4]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f004 f89d 	bl	8006144 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	795b      	ldrb	r3, [r3, #5]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_DAC_ConfigChannel+0x20>
 8002044:	2302      	movs	r3, #2
 8002046:	e04e      	b.n	80020e6 <HAL_DAC_ConfigChannel+0xbe>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2202      	movs	r2, #2
 8002052:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <HAL_DAC_ConfigChannel+0xcc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d112      	bne.n	800208c <HAL_DAC_ConfigChannel+0x64>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10f      	bne.n	800208c <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800206c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4013      	ands	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e00e      	b.n	80020aa <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 800208c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	22c0      	movs	r2, #192	; 0xc0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	400a      	ands	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40007400 	.word	0x40007400

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800210e:	e14e      	b.n	80023ae <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8140 	beq.w	80023a8 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x40>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b12      	cmp	r3, #18
 8002136:	d123      	bne.n	8002180 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	08da      	lsrs	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	6939      	ldr	r1, [r7, #16]
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d00b      	beq.n	80021d4 <HAL_GPIO_Init+0xdc>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c8:	2b11      	cmp	r3, #17
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b12      	cmp	r3, #18
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 0201 	and.w	r2, r3, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 809a 	beq.w	80023a8 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b55      	ldr	r3, [pc, #340]	; (80023cc <HAL_GPIO_Init+0x2d4>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_GPIO_Init+0x2d4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b52      	ldr	r3, [pc, #328]	; (80023cc <HAL_GPIO_Init+0x2d4>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800228c:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_GPIO_Init+0x2d8>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b6:	d013      	beq.n	80022e0 <HAL_GPIO_Init+0x1e8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a46      	ldr	r2, [pc, #280]	; (80023d4 <HAL_GPIO_Init+0x2dc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00d      	beq.n	80022dc <HAL_GPIO_Init+0x1e4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_GPIO_Init+0x2e0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <HAL_GPIO_Init+0x1e0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a44      	ldr	r2, [pc, #272]	; (80023dc <HAL_GPIO_Init+0x2e4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_GPIO_Init+0x1dc>
 80022d0:	2303      	movs	r3, #3
 80022d2:	e006      	b.n	80022e2 <HAL_GPIO_Init+0x1ea>
 80022d4:	2305      	movs	r3, #5
 80022d6:	e004      	b.n	80022e2 <HAL_GPIO_Init+0x1ea>
 80022d8:	2302      	movs	r3, #2
 80022da:	e002      	b.n	80022e2 <HAL_GPIO_Init+0x1ea>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_GPIO_Init+0x1ea>
 80022e0:	2300      	movs	r3, #0
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	f002 0203 	and.w	r2, r2, #3
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	4093      	lsls	r3, r2
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022f2:	4937      	ldr	r1, [pc, #220]	; (80023d0 <HAL_GPIO_Init+0x2d8>)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002300:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002324:	4a2e      	ldr	r2, [pc, #184]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800234e:	4a24      	ldr	r2, [pc, #144]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f47f aea9 	bne.w	8002110 <HAL_GPIO_Init+0x18>
  }
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000
 80023d4:	48000400 	.word	0x48000400
 80023d8:	48000800 	.word	0x48000800
 80023dc:	48000c00 	.word	0x48000c00
 80023e0:	40010400 	.word	0x40010400

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002400:	e002      	b.n	8002408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	405a      	eors	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	615a      	str	r2, [r3, #20]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e081      	b.n	800254e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f003 feae 	bl	80061c0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2224      	movs	r2, #36	; 0x24
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e006      	b.n	80024c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d104      	bne.n	80024d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	021a      	lsls	r2, r3, #8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	461a      	mov	r2, r3
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
 8002568:	4613      	mov	r3, r2
 800256a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	f040 80e4 	bne.w	8002746 <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2C_Master_Transmit+0x34>
 8002588:	2302      	movs	r3, #2
 800258a:	e0dd      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002594:	f7fe fbca 	bl	8000d2c <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2319      	movs	r3, #25
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f9d8 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0c8      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2210      	movs	r2, #16
 80025c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	893a      	ldrh	r2, [r7, #8]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2bff      	cmp	r3, #255	; 0xff
 80025e6:	d90e      	bls.n	8002606 <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	22ff      	movs	r2, #255	; 0xff
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	8979      	ldrh	r1, [r7, #10]
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <HAL_I2C_Master_Transmit+0x1f8>)
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fac0 	bl	8002b84 <I2C_TransferConfig>
 8002604:	e070      	b.n	80026e8 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	b2da      	uxtb	r2, r3
 8002616:	8979      	ldrh	r1, [r7, #10]
 8002618:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <HAL_I2C_Master_Transmit+0x1f8>)
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 faaf 	bl	8002b84 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002626:	e05f      	b.n	80026e8 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	6a39      	ldr	r1, [r7, #32]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f9cf 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	2b04      	cmp	r3, #4
 800263e:	d101      	bne.n	8002644 <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e081      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e07f      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6251      	str	r1, [r2, #36]	; 0x24
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d135      	bne.n	80026e8 <HAL_I2C_Master_Transmit+0x190>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d030      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f963 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e053      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2bff      	cmp	r3, #255	; 0xff
 80026a8:	d90e      	bls.n	80026c8 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	22ff      	movs	r2, #255	; 0xff
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	8979      	ldrh	r1, [r7, #10]
 80026b8:	2300      	movs	r3, #0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fa5f 	bl	8002b84 <I2C_TransferConfig>
 80026c6:	e00f      	b.n	80026e8 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fa4e 	bl	8002b84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d19a      	bne.n	8002628 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f9aa 	bl	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	2b04      	cmp	r3, #4
 8002708:	d101      	bne.n	800270e <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e01c      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e01a      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2220      	movs	r2, #32
 8002718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_I2C_Master_Transmit+0x1fc>)
 8002726:	400b      	ands	r3, r1
 8002728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 8002746:	2302      	movs	r3, #2
  }
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	80002000 	.word	0x80002000
 8002754:	fe00e800 	.word	0xfe00e800

08002758 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	460b      	mov	r3, r1
 8002766:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	f040 80c6 	bne.w	800290a <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278c:	d101      	bne.n	8002792 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
 8002790:	e0bc      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_I2C_IsDeviceReady+0x48>
 800279c:	2302      	movs	r3, #2
 800279e:	e0b5      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_I2C_IsDeviceReady+0x76>
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027cc:	e004      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x80>
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80027de:	f7fe faa5 	bl	8000d2c <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80027e4:	e018      	b.n	8002818 <HAL_I2C_IsDeviceReady+0xc0>
      {
        if (Timeout != HAL_MAX_DELAY)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d014      	beq.n	8002818 <HAL_I2C_IsDeviceReady+0xc0>
        {
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_I2C_IsDeviceReady+0xac>
 80027f4:	f7fe fa9a 	bl	8000d2c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d209      	bcs.n	8002818 <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e079      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b20      	cmp	r3, #32
 8002824:	d00c      	beq.n	8002840 <HAL_I2C_IsDeviceReady+0xe8>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d005      	beq.n	8002840 <HAL_I2C_IsDeviceReady+0xe8>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2ba0      	cmp	r3, #160	; 0xa0
 800283e:	d1d2      	bne.n	80027e6 <HAL_I2C_IsDeviceReady+0x8e>
          }
        }
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b10      	cmp	r3, #16
 800284c:	d01a      	beq.n	8002884 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	2120      	movs	r1, #32
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f87f 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e051      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e043      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	2120      	movs	r1, #32
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f864 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e036      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2210      	movs	r2, #16
 80028a4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2220      	movs	r2, #32
 80028ac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	613a      	str	r2, [r7, #16]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d118      	bne.n	80028ec <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2120      	movs	r1, #32
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f841 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e013      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2220      	movs	r2, #32
 80028ea:	61da      	str	r2, [r3, #28]
      }
    }
    while (I2C_Trials < Trials);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f63f af60 	bhi.w	80027b6 <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e000      	b.n	800290c <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d103      	bne.n	8002932 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d007      	beq.n	8002950 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	619a      	str	r2, [r3, #24]
  }
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296c:	e01c      	b.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d018      	beq.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <I2C_WaitOnFlagUntilTimeout+0x30>
 800297c:	f7fe f9d6 	bl	8000d2c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d20d      	bcs.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e00f      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0d3      	beq.n	800296e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029dc:	e02c      	b.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f870 	bl	8002ac8 <I2C_IsAcknowledgeFailed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02a      	b.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d01e      	beq.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a00:	f7fe f994 	bl	8000d2c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d213      	bcs.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d1cb      	bne.n	80029de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a5c:	e028      	b.n	8002ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f830 	bl	8002ac8 <I2C_IsAcknowledgeFailed>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e026      	b.n	8002ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a78:	f7fe f958 	bl	8000d2c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d213      	bcs.n	8002ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e007      	b.n	8002ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d1cf      	bne.n	8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d148      	bne.n	8002b74 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae2:	e01c      	b.n	8002b1e <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d018      	beq.n	8002b1e <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <I2C_IsAcknowledgeFailed+0x3a>
 8002af2:	f7fe f91b 	bl	8000d2c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d20d      	bcs.n	8002b1e <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e02b      	b.n	8002b76 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d1db      	bne.n	8002ae4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2210      	movs	r2, #16
 8002b32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff fee9 	bl	8002914 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <I2C_IsAcknowledgeFailed+0xb8>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2204      	movs	r2, #4
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	fe00e800 	.word	0xfe00e800

08002b84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	817b      	strh	r3, [r7, #10]
 8002b92:	4613      	mov	r3, r2
 8002b94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	0d5b      	lsrs	r3, r3, #21
 8002ba0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <I2C_TransferConfig+0x58>)
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	ea02 0103 	and.w	r1, r2, r3
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bb4:	7a7b      	ldrb	r3, [r7, #9]
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	03ff63ff 	.word	0x03ff63ff

08002be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d138      	bne.n	8002c68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e032      	b.n	8002c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2224      	movs	r2, #36	; 0x24
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
  }
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d139      	bne.n	8002d04 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e033      	b.n	8002d06 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2224      	movs	r2, #36	; 0x24
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ccc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f000 beda 	b.w	8003ae2 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 816e 	beq.w	800301a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d3e:	4bb5      	ldr	r3, [pc, #724]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4a:	4bb2      	ldr	r3, [pc, #712]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d15a      	bne.n	8002e0c <HAL_RCC_OscConfig+0xf8>
 8002d56:	4baf      	ldr	r3, [pc, #700]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d153      	bne.n	8002e0c <HAL_RCC_OscConfig+0xf8>
 8002d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d68:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d102      	bne.n	8002d96 <HAL_RCC_OscConfig+0x82>
 8002d90:	4ba0      	ldr	r3, [pc, #640]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	e015      	b.n	8002dc2 <HAL_RCC_OscConfig+0xae>
 8002d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002db2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002dbe:	4b95      	ldr	r3, [pc, #596]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dc6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002dca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002dce:	fa92 f2a2 	rbit	r2, r2
 8002dd2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8002dd6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dda:	fab2 f282 	clz	r2, r2
 8002dde:	b252      	sxtb	r2, r2
 8002de0:	f042 0220 	orr.w	r2, r2, #32
 8002de4:	b252      	sxtb	r2, r2
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f002 021f 	and.w	r2, r2, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 810f 	beq.w	8003018 <HAL_RCC_OscConfig+0x304>
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8109 	bne.w	8003018 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f000 be6b 	b.w	8003ae2 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d106      	bne.n	8002e26 <HAL_RCC_OscConfig+0x112>
 8002e18:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a7d      	ldr	r2, [pc, #500]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e030      	b.n	8002e88 <HAL_RCC_OscConfig+0x174>
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x136>
 8002e30:	4b78      	ldr	r3, [pc, #480]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a77      	ldr	r2, [pc, #476]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b75      	ldr	r3, [pc, #468]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a74      	ldr	r2, [pc, #464]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e01e      	b.n	8002e88 <HAL_RCC_OscConfig+0x174>
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x15c>
 8002e56:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6e      	ldr	r2, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6b      	ldr	r2, [pc, #428]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x174>
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a67      	ldr	r2, [pc, #412]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a64      	ldr	r2, [pc, #400]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e86:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e88:	4b62      	ldr	r3, [pc, #392]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f023 020f 	bic.w	r2, r3, #15
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	495f      	ldr	r1, [pc, #380]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d05a      	beq.n	8002f5c <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fd ff41 	bl	8000d2c <HAL_GetTick>
 8002eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fd ff3c 	bl	8000d2c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d902      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f000 be0e 	b.w	8003ae2 <HAL_RCC_OscConfig+0xdce>
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8002eda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1e4>
 8002ef2:	4b48      	ldr	r3, [pc, #288]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e015      	b.n	8002f24 <HAL_RCC_OscConfig+0x210>
 8002ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f10:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f14:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f20:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f28:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f2c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002f30:	fa92 f2a2 	rbit	r2, r2
 8002f34:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8002f38:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b252      	sxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b252      	sxtb	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0aa      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x19c>
 8002f5a:	e05e      	b.n	800301a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fd fee6 	bl	8000d2c <HAL_GetTick>
 8002f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f66:	f7fd fee1 	bl	8000d2c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d902      	bls.n	8002f7c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	f000 bdb3 	b.w	8003ae2 <HAL_RCC_OscConfig+0xdce>
 8002f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f80:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8002f90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_OscConfig+0x29a>
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	e015      	b.n	8002fda <HAL_RCC_OscConfig+0x2c6>
 8002fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_RCC_OscConfig+0x300>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fde:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002fe2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002fe6:	fa92 f2a2 	rbit	r2, r2
 8002fea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8002fee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ff2:	fab2 f282 	clz	r2, r2
 8002ff6:	b252      	sxtb	r2, r2
 8002ff8:	f042 0220 	orr.w	r2, r2, #32
 8002ffc:	b252      	sxtb	r2, r2
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	f002 021f 	and.w	r2, r2, #31
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1aa      	bne.n	8002f66 <HAL_RCC_OscConfig+0x252>
 8003010:	e003      	b.n	800301a <HAL_RCC_OscConfig+0x306>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8170 	beq.w	800330a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800302a:	4bd0      	ldr	r3, [pc, #832]	; (800336c <HAL_RCC_OscConfig+0x658>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003036:	4bcd      	ldr	r3, [pc, #820]	; (800336c <HAL_RCC_OscConfig+0x658>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d16d      	bne.n	800311e <HAL_RCC_OscConfig+0x40a>
 8003042:	4bca      	ldr	r3, [pc, #808]	; (800336c <HAL_RCC_OscConfig+0x658>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d167      	bne.n	800311e <HAL_RCC_OscConfig+0x40a>
 800304e:	2302      	movs	r3, #2
 8003050:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8003060:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d102      	bne.n	800307e <HAL_RCC_OscConfig+0x36a>
 8003078:	4bbc      	ldr	r3, [pc, #752]	; (800336c <HAL_RCC_OscConfig+0x658>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	e013      	b.n	80030a6 <HAL_RCC_OscConfig+0x392>
 800307e:	2302      	movs	r3, #2
 8003080:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003090:	2302      	movs	r3, #2
 8003092:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003096:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80030a2:	4bb2      	ldr	r3, [pc, #712]	; (800336c <HAL_RCC_OscConfig+0x658>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2202      	movs	r2, #2
 80030a8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80030ac:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80030b0:	fa92 f2a2 	rbit	r2, r2
 80030b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80030b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b252      	sxtb	r2, r2
 80030c2:	f042 0220 	orr.w	r2, r2, #32
 80030c6:	b252      	sxtb	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <HAL_RCC_OscConfig+0x3d6>
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d002      	beq.n	80030ea <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f000 bcfc 	b.w	8003ae2 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ea:	4ba0      	ldr	r3, [pc, #640]	; (800336c <HAL_RCC_OscConfig+0x658>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6959      	ldr	r1, [r3, #20]
 80030f8:	23f8      	movs	r3, #248	; 0xf8
 80030fa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800310a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	4995      	ldr	r1, [pc, #596]	; (800336c <HAL_RCC_OscConfig+0x658>)
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311c:	e0f5      	b.n	800330a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8085 	beq.w	8003234 <HAL_RCC_OscConfig+0x520>
 800312a:	2301      	movs	r3, #1
 800312c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 800313c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003148:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	461a      	mov	r2, r3
 8003150:	2301      	movs	r3, #1
 8003152:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fd fdea 	bl	8000d2c <HAL_GetTick>
 8003158:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7fd fde5 	bl	8000d2c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	f000 bcb7 	b.w	8003ae2 <HAL_RCC_OscConfig+0xdce>
 8003174:	2302      	movs	r3, #2
 8003176:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8003186:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_OscConfig+0x490>
 800319e:	4b73      	ldr	r3, [pc, #460]	; (800336c <HAL_RCC_OscConfig+0x658>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e013      	b.n	80031cc <HAL_RCC_OscConfig+0x4b8>
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80031b6:	2302      	movs	r3, #2
 80031b8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031bc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x658>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2202      	movs	r2, #2
 80031ce:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80031d2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80031d6:	fa92 f2a2 	rbit	r2, r2
 80031da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80031de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031e2:	fab2 f282 	clz	r2, r2
 80031e6:	b252      	sxtb	r2, r2
 80031e8:	f042 0220 	orr.w	r2, r2, #32
 80031ec:	b252      	sxtb	r2, r2
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f002 021f 	and.w	r2, r2, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f202 	lsl.w	r2, r1, r2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ae      	beq.n	800315e <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b5a      	ldr	r3, [pc, #360]	; (800336c <HAL_RCC_OscConfig+0x658>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6959      	ldr	r1, [r3, #20]
 800320e:	23f8      	movs	r3, #248	; 0xf8
 8003210:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8003220:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	494f      	ldr	r1, [pc, #316]	; (800336c <HAL_RCC_OscConfig+0x658>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
 8003232:	e06a      	b.n	800330a <HAL_RCC_OscConfig+0x5f6>
 8003234:	2301      	movs	r3, #1
 8003236:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8003246:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	2300      	movs	r3, #0
 800325c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fd fd65 	bl	8000d2c <HAL_GetTick>
 8003262:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003268:	f7fd fd60 	bl	8000d2c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d902      	bls.n	800327e <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	f000 bc32 	b.w	8003ae2 <HAL_RCC_OscConfig+0xdce>
 800327e:	2302      	movs	r3, #2
 8003280:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8003290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0x59a>
 80032a8:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCC_OscConfig+0x658>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e013      	b.n	80032d6 <HAL_RCC_OscConfig+0x5c2>
 80032ae:	2302      	movs	r3, #2
 80032b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032c0:	2302      	movs	r3, #2
 80032c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_RCC_OscConfig+0x658>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2202      	movs	r2, #2
 80032d8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80032dc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80032e0:	fa92 f2a2 	rbit	r2, r2
 80032e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80032e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032ec:	fab2 f282 	clz	r2, r2
 80032f0:	b252      	sxtb	r2, r2
 80032f2:	f042 0220 	orr.w	r2, r2, #32
 80032f6:	b252      	sxtb	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ae      	bne.n	8003268 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80d8 	beq.w	80034ca <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d067      	beq.n	80033f4 <HAL_RCC_OscConfig+0x6e0>
 8003324:	2301      	movs	r3, #1
 8003326:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8003336:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_OscConfig+0x65c>)
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	2301      	movs	r3, #1
 800334a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7fd fcee 	bl	8000d2c <HAL_GetTick>
 8003350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003354:	e00e      	b.n	8003374 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7fd fce9 	bl	8000d2c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d906      	bls.n	8003374 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e3bb      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	10908120 	.word	0x10908120
 8003374:	2302      	movs	r3, #2
 8003376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003386:	2302      	movs	r3, #2
 8003388:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800338c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800339e:	2202      	movs	r2, #2
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	fa93 f2a3 	rbit	r2, r3
 80033ac:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80033b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4ba5      	ldr	r3, [pc, #660]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80033b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80033ba:	2102      	movs	r1, #2
 80033bc:	6019      	str	r1, [r3, #0]
 80033be:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fa93 f1a3 	rbit	r1, r3
 80033c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033cc:	6019      	str	r1, [r3, #0]
  return(result);
 80033ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033de:	b25b      	sxtb	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0b1      	beq.n	8003356 <HAL_RCC_OscConfig+0x642>
 80033f2:	e06a      	b.n	80034ca <HAL_RCC_OscConfig+0x7b6>
 80033f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800340a:	601a      	str	r2, [r3, #0]
  return(result);
 800340c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003410:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	4b8c      	ldr	r3, [pc, #560]	; (800364c <HAL_RCC_OscConfig+0x938>)
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	2300      	movs	r3, #0
 8003422:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7fd fc82 	bl	8000d2c <HAL_GetTick>
 8003428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	e009      	b.n	8003442 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342e:	f7fd fc7d 	bl	8000d2c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e34f      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
 8003442:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003446:	2202      	movs	r2, #2
 8003448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800345e:	2202      	movs	r2, #2
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f2a3 	rbit	r2, r3
 800346c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003488:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 800348c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800348e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003492:	2102      	movs	r1, #2
 8003494:	6019      	str	r1, [r3, #0]
 8003496:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f1a3 	rbit	r1, r3
 80034a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80034a4:	6019      	str	r1, [r3, #0]
  return(result);
 80034a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1b1      	bne.n	800342e <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8159 	beq.w	800378c <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d112      	bne.n	8003512 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ec:	4b56      	ldr	r3, [pc, #344]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a55      	ldr	r2, [pc, #340]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80034f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f6:	61d3      	str	r3, [r2, #28]
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	4b4f      	ldr	r3, [pc, #316]	; (8003650 <HAL_RCC_OscConfig+0x93c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11a      	bne.n	8003554 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351e:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <HAL_RCC_OscConfig+0x93c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a4b      	ldr	r2, [pc, #300]	; (8003650 <HAL_RCC_OscConfig+0x93c>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003528:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352a:	f7fd fbff 	bl	8000d2c <HAL_GetTick>
 800352e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	e009      	b.n	8003548 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fd fbfa 	bl	8000d2c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b64      	cmp	r3, #100	; 0x64
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e2cc      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_RCC_OscConfig+0x93c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ef      	beq.n	8003534 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x858>
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a39      	ldr	r2, [pc, #228]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	e02f      	b.n	80035cc <HAL_RCC_OscConfig+0x8b8>
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x87c>
 8003576:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a33      	ldr	r2, [pc, #204]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a30      	ldr	r2, [pc, #192]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	e01d      	b.n	80035cc <HAL_RCC_OscConfig+0x8b8>
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x8a0>
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6213      	str	r3, [r2, #32]
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a27      	ldr	r2, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6213      	str	r3, [r2, #32]
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x8b8>
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 80035c6:	f023 0304 	bic.w	r3, r3, #4
 80035ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d06b      	beq.n	80036ae <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fd fba9 	bl	8000d2c <HAL_GetTick>
 80035da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fd fba4 	bl	8000d2c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e274      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
 80035f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035fc:	2202      	movs	r2, #2
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003614:	2202      	movs	r2, #2
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	fa93 f2a3 	rbit	r2, r3
 8003622:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003626:	601a      	str	r2, [r3, #0]
  return(result);
 8003628:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800362c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x940>
 8003642:	4b01      	ldr	r3, [pc, #4]	; (8003648 <HAL_RCC_OscConfig+0x934>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	e013      	b.n	8003670 <HAL_RCC_OscConfig+0x95c>
 8003648:	40021000 	.word	0x40021000
 800364c:	10908120 	.word	0x10908120
 8003650:	40007000 	.word	0x40007000
 8003654:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003658:	2202      	movs	r2, #2
 800365a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	4bbb      	ldr	r3, [pc, #748]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003674:	2102      	movs	r1, #2
 8003676:	6011      	str	r1, [r2, #0]
 8003678:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	fa92 f1a2 	rbit	r1, r2
 8003682:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003686:	6011      	str	r1, [r2, #0]
  return(result);
 8003688:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b252      	sxtb	r2, r2
 8003694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003698:	b252      	sxtb	r2, r2
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d099      	beq.n	80035e0 <HAL_RCC_OscConfig+0x8cc>
 80036ac:	e064      	b.n	8003778 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fd fb3d 	bl	8000d2c <HAL_GetTick>
 80036b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd fb38 	bl	8000d2c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e208      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
 80036d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036d4:	2202      	movs	r2, #2
 80036d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036ec:	2202      	movs	r2, #2
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	fa93 f2a3 	rbit	r2, r3
 80036fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036fe:	601a      	str	r2, [r3, #0]
  return(result);
 8003700:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003704:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d102      	bne.n	8003720 <HAL_RCC_OscConfig+0xa0c>
 800371a:	4b90      	ldr	r3, [pc, #576]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	e00d      	b.n	800373c <HAL_RCC_OscConfig+0xa28>
 8003720:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003724:	2202      	movs	r2, #2
 8003726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	fa93 f2a3 	rbit	r2, r3
 8003732:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	4b88      	ldr	r3, [pc, #544]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003740:	2102      	movs	r1, #2
 8003742:	6011      	str	r1, [r2, #0]
 8003744:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	fa92 f1a2 	rbit	r1, r2
 800374e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003752:	6011      	str	r1, [r2, #0]
  return(result);
 8003754:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b252      	sxtb	r2, r2
 8003760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003764:	b252      	sxtb	r2, r2
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f002 021f 	and.w	r2, r2, #31
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f202 	lsl.w	r2, r1, r2
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d19f      	bne.n	80036b8 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003778:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003780:	4b76      	ldr	r3, [pc, #472]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	4a75      	ldr	r2, [pc, #468]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 8003786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800378a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 81a4 	beq.w	8003ae0 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	4b70      	ldr	r3, [pc, #448]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	f000 819b 	beq.w	8003adc <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	f040 8113 	bne.w	80039d8 <HAL_RCC_OscConfig+0xcc4>
 80037b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80037b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037ca:	601a      	str	r2, [r3, #0]
  return(result);
 80037cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	461a      	mov	r2, r3
 80037e2:	2300      	movs	r3, #0
 80037e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fd faa1 	bl	8000d2c <HAL_GetTick>
 80037ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	e009      	b.n	8003804 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fd fa9c 	bl	8000d2c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e16e      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
 8003804:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800380c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800381c:	601a      	str	r2, [r3, #0]
  return(result);
 800381e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003822:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <HAL_RCC_OscConfig+0xb2a>
 8003838:	4b48      	ldr	r3, [pc, #288]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	e01b      	b.n	8003876 <HAL_RCC_OscConfig+0xb62>
 800383e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	fa93 f2a3 	rbit	r2, r3
 8003852:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800385c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	4b3a      	ldr	r3, [pc, #232]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800387a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800387e:	6011      	str	r1, [r2, #0]
 8003880:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	fa92 f1a2 	rbit	r1, r2
 800388a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800388e:	6011      	str	r1, [r2, #0]
  return(result);
 8003890:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b252      	sxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b252      	sxtb	r2, r2
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f002 021f 	and.w	r2, r2, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f202 	lsl.w	r2, r1, r2
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d19d      	bne.n	80037f0 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b4:	4b29      	ldr	r3, [pc, #164]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	4924      	ldr	r1, [pc, #144]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
 80038d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038e8:	601a      	str	r2, [r3, #0]
  return(result);
 80038ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	461a      	mov	r2, r3
 8003900:	2301      	movs	r3, #1
 8003902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fd fa12 	bl	8000d2c <HAL_GetTick>
 8003908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390c:	e009      	b.n	8003922 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd fa0d 	bl	8000d2c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0df      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
 8003922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800393a:	601a      	str	r2, [r3, #0]
  return(result);
 800393c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d104      	bne.n	8003960 <HAL_RCC_OscConfig+0xc4c>
 8003956:	4b01      	ldr	r3, [pc, #4]	; (800395c <HAL_RCC_OscConfig+0xc48>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	e01d      	b.n	8003998 <HAL_RCC_OscConfig+0xc84>
 800395c:	40021000 	.word	0x40021000
 8003960:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fa93 f2a3 	rbit	r2, r3
 8003974:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800397e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f2a3 	rbit	r2, r3
 800398e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	4b55      	ldr	r3, [pc, #340]	; (8003aec <HAL_RCC_OscConfig+0xdd8>)
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800399c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039a0:	6011      	str	r1, [r2, #0]
 80039a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	fa92 f1a2 	rbit	r1, r2
 80039ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039b0:	6011      	str	r1, [r2, #0]
  return(result);
 80039b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	fab2 f282 	clz	r2, r2
 80039bc:	b252      	sxtb	r2, r2
 80039be:	f042 0220 	orr.w	r2, r2, #32
 80039c2:	b252      	sxtb	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f002 021f 	and.w	r2, r2, #31
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f202 	lsl.w	r2, r1, r2
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d09b      	beq.n	800390e <HAL_RCC_OscConfig+0xbfa>
 80039d6:	e083      	b.n	8003ae0 <HAL_RCC_OscConfig+0xdcc>
 80039d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fa93 f2a3 	rbit	r2, r3
 80039ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039f0:	601a      	str	r2, [r3, #0]
  return(result);
 80039f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039f6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	461a      	mov	r2, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd f98e 	bl	8000d2c <HAL_GetTick>
 8003a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a14:	e009      	b.n	8003a2a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fd f989 	bl	8000d2c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e05b      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
 8003a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	fa93 f2a3 	rbit	r2, r3
 8003a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a42:	601a      	str	r2, [r3, #0]
  return(result);
 8003a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HAL_RCC_OscConfig+0xd50>
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_RCC_OscConfig+0xdd8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e01b      	b.n	8003a9c <HAL_RCC_OscConfig+0xd88>
 8003a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f107 0320 	add.w	r3, r7, #32
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f107 031c 	add.w	r3, r7, #28
 8003a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	fa93 f2a3 	rbit	r2, r3
 8003a92:	f107 0318 	add.w	r3, r7, #24
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_OscConfig+0xdd8>)
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f107 0214 	add.w	r2, r7, #20
 8003aa0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003aa4:	6011      	str	r1, [r2, #0]
 8003aa6:	f107 0214 	add.w	r2, r7, #20
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	fa92 f1a2 	rbit	r1, r2
 8003ab0:	f107 0210 	add.w	r2, r7, #16
 8003ab4:	6011      	str	r1, [r2, #0]
  return(result);
 8003ab6:	f107 0210 	add.w	r2, r7, #16
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	fab2 f282 	clz	r2, r2
 8003ac0:	b252      	sxtb	r2, r2
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	b252      	sxtb	r2, r2
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	f002 021f 	and.w	r2, r2, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d19d      	bne.n	8003a16 <HAL_RCC_OscConfig+0xd02>
 8003ada:	e001      	b.n	8003ae0 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000

08003af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b09e      	sub	sp, #120	; 0x78
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e164      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b92      	ldr	r3, [pc, #584]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d910      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b8f      	ldr	r3, [pc, #572]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	498d      	ldr	r1, [pc, #564]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b8b      	ldr	r3, [pc, #556]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e14c      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b44:	4b84      	ldr	r3, [pc, #528]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4981      	ldr	r1, [pc, #516]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80df 	beq.w	8003d22 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d13d      	bne.n	8003be8 <HAL_RCC_ClockConfig+0xf8>
 8003b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8003b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xa6>
 8003b90:	4b71      	ldr	r3, [pc, #452]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e00f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0xc6>
 8003b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8003baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb2:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bba:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bbe:	fa92 f2a2 	rbit	r2, r2
 8003bc2:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8003bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bc6:	fab2 f282 	clz	r2, r2
 8003bca:	b252      	sxtb	r2, r2
 8003bcc:	f042 0220 	orr.w	r2, r2, #32
 8003bd0:	b252      	sxtb	r2, r2
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f002 021f 	and.w	r2, r2, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d17d      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0f4      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d13d      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x17c>
 8003bf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d102      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x12a>
 8003c14:	4b50      	ldr	r3, [pc, #320]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	e00f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x14a>
 8003c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	647b      	str	r3, [r7, #68]	; 0x44
 8003c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c36:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8003c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b252      	sxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b252      	sxtb	r2, r2
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f002 021f 	and.w	r2, r2, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13b      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b2      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2e2>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x1a4>
 8003c8e:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e00d      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1c0>
 8003c94:	2302      	movs	r3, #2
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	61ba      	str	r2, [r7, #24]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	617a      	str	r2, [r7, #20]
  return(result);
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	fab2 f282 	clz	r2, r2
 8003cc2:	b252      	sxtb	r2, r2
 8003cc4:	f042 0220 	orr.w	r2, r2, #32
 8003cc8:	b252      	sxtb	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f002 021f 	and.w	r2, r2, #31
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e078      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f023 0203 	bic.w	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	491a      	ldr	r1, [pc, #104]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf2:	f7fd f81b 	bl	8000d2c <HAL_GetTick>
 8003cf6:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfa:	f7fd f817 	bl	8000d2c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e060      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_RCC_ClockConfig+0x268>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 020c 	and.w	r2, r3, #12
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d1eb      	bne.n	8003cfa <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d215      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 0207 	bic.w	r2, r3, #7
 8003d38:	4906      	ldr	r1, [pc, #24]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <HAL_RCC_ClockConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d006      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e03f      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2e2>
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_RCC_ClockConfig+0x2ec>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4919      	ldr	r1, [pc, #100]	; (8003ddc <HAL_RCC_ClockConfig+0x2ec>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCC_ClockConfig+0x2ec>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4911      	ldr	r1, [pc, #68]	; (8003ddc <HAL_RCC_ClockConfig+0x2ec>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d9a:	f000 f825 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4601      	mov	r1, r0
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCC_ClockConfig+0x2ec>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da8:	23f0      	movs	r3, #240	; 0xf0
 8003daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <HAL_RCC_ClockConfig+0x2f0>)
 8003dc0:	5cd3      	ldrb	r3, [r2, r3]
 8003dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <HAL_RCC_ClockConfig+0x2f4>)
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7fc ff6a 	bl	8000ca4 <HAL_InitTick>
  
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3778      	adds	r7, #120	; 0x78
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08009ae0 	.word	0x08009ae0
 8003de4:	20000018 	.word	0x20000018

08003de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b08b      	sub	sp, #44	; 0x2c
 8003dec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e02:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x30>
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x36>
 8003e16:	e03c      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e1a:	623b      	str	r3, [r7, #32]
      break;
 8003e1c:	e03c      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e24:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003e28:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	607b      	str	r3, [r7, #4]
  return(result);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	fab3 f383 	clz	r3, r3
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	230f      	movs	r3, #15
 8003e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e62:	5cd3      	ldrb	r3, [r2, r3]
 8003e64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003e70:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	e004      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	623b      	str	r3, [r7, #32]
      break;
 8003e90:	e002      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e94:	623b      	str	r3, [r7, #32]
      break;
 8003e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e98:	6a3b      	ldr	r3, [r7, #32]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	372c      	adds	r7, #44	; 0x2c
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	007a1200 	.word	0x007a1200
 8003eb0:	080085f8 	.word	0x080085f8
 8003eb4:	08008608 	.word	0x08008608
 8003eb8:	003d0900 	.word	0x003d0900

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000018 	.word	0x20000018

08003ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003eda:	f7ff ffef 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003ede:	4601      	mov	r1, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ee8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003eec:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	603b      	str	r3, [r7, #0]
  return(result);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	fab3 f383 	clz	r3, r3
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08009af0 	.word	0x08009af0

08003f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f1e:	f7ff ffcd 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003f22:	4601      	mov	r1, r0
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003f2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f30:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	603b      	str	r3, [r7, #0]
  return(result);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f46:	5cd3      	ldrb	r3, [r2, r3]
 8003f48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08009af0 	.word	0x08009af0

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b092      	sub	sp, #72	; 0x48
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80cf 	beq.w	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f80:	4b86      	ldr	r3, [pc, #536]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10e      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b83      	ldr	r3, [pc, #524]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a82      	ldr	r2, [pc, #520]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	61d3      	str	r3, [r2, #28]
 8003f98:	4b80      	ldr	r3, [pc, #512]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	4b7d      	ldr	r3, [pc, #500]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d118      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb6:	4b7a      	ldr	r3, [pc, #488]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a79      	ldr	r2, [pc, #484]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc2:	f7fc feb3 	bl	8000d2c <HAL_GetTick>
 8003fc6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	e008      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7fc feaf 	bl	8000d2c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	; 0x64
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0da      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	4b70      	ldr	r3, [pc, #448]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe8:	4b6c      	ldr	r3, [pc, #432]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d07c      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004002:	429a      	cmp	r2, r3
 8004004:	d075      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004006:	4b65      	ldr	r3, [pc, #404]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004014:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4b5f      	ldr	r3, [pc, #380]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	461a      	mov	r2, r3
 800402e:	2301      	movs	r3, #1
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	4b56      	ldr	r3, [pc, #344]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004054:	4a51      	ldr	r2, [pc, #324]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004058:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d046      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fc fe62 	bl	8000d2c <HAL_GetTick>
 8004068:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fc fe5e 	bl	8000d2c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e087      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004082:	2302      	movs	r3, #2
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	2302      	movs	r3, #2
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	61fb      	str	r3, [r7, #28]
  return(result);
 800409a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d102      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80040b0:	4b3a      	ldr	r3, [pc, #232]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	e007      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80040b6:	2302      	movs	r3, #2
 80040b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2202      	movs	r2, #2
 80040c8:	613a      	str	r2, [r7, #16]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	fa92 f2a2 	rbit	r2, r2
 80040d0:	60fa      	str	r2, [r7, #12]
  return(result);
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	fab2 f282 	clz	r2, r2
 80040d8:	b252      	sxtb	r2, r2
 80040da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040de:	b252      	sxtb	r2, r2
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	f002 021f 	and.w	r2, r2, #31
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0bc      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040f2:	4b2a      	ldr	r3, [pc, #168]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4927      	ldr	r1, [pc, #156]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004100:	4313      	orrs	r3, r2
 8004102:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004104:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004116:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f023 0203 	bic.w	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	491a      	ldr	r1, [pc, #104]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004132:	4313      	orrs	r3, r2
 8004134:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004142:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4913      	ldr	r1, [pc, #76]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004150:	4313      	orrs	r3, r2
 8004152:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	490b      	ldr	r1, [pc, #44]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800416e:	4313      	orrs	r3, r2
 8004170:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4904      	ldr	r1, [pc, #16]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800418c:	4313      	orrs	r3, r2
 800418e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3748      	adds	r7, #72	; 0x48
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
 80041a4:	10908100 	.word	0x10908100

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e01d      	b.n	80041f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f002 f83a 	bl	8006248 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fa4e 	bl	8004688 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b02      	cmp	r3, #2
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0202 	mvn.w	r2, #2
 8004260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9e7 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9d9 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9ea 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0204 	mvn.w	r2, #4
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9bd 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9af 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f9c0 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0208 	mvn.w	r2, #8
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2204      	movs	r2, #4
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f993 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f985 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f996 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b10      	cmp	r3, #16
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b10      	cmp	r3, #16
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0210 	mvn.w	r2, #16
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2208      	movs	r2, #8
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f969 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f95b 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f96c 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d10e      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0201 	mvn.w	r2, #1
 80043b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 f8ea 	bl	800558c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d10e      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d107      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 face 	bl	8004980 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f2:	d10e      	bne.n	8004412 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d107      	bne.n	8004412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800440a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fac1 	bl	8004994 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d10e      	bne.n	800443e <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004436:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f91a 	bl	8004672 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0220 	mvn.w	r2, #32
 8004462:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fa81 	bl	800496c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_TIM_ConfigClockSource+0x1c>
 800448a:	2302      	movs	r3, #2
 800448c:	e0cf      	b.n	800462e <HAL_TIM_ConfigClockSource+0x1bc>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d07c      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0x152>
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d80f      	bhi.n	80044ee <HAL_TIM_ConfigClockSource+0x7c>
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	f000 808f 	beq.w	80045f2 <HAL_TIM_ConfigClockSource+0x180>
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d803      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x6e>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8083 	beq.w	80045e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 80044de:	e09d      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	f000 808d 	beq.w	8004600 <HAL_TIM_ConfigClockSource+0x18e>
 80044e6:	2b30      	cmp	r3, #48	; 0x30
 80044e8:	f000 8091 	beq.w	800460e <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 80044ec:	e096      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80044ee:	2b70      	cmp	r3, #112	; 0x70
 80044f0:	d018      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0xb2>
 80044f2:	2b70      	cmp	r3, #112	; 0x70
 80044f4:	d804      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x8e>
 80044f6:	2b50      	cmp	r3, #80	; 0x50
 80044f8:	d044      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0x112>
 80044fa:	2b60      	cmp	r3, #96	; 0x60
 80044fc:	d052      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 80044fe:	e08d      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d003      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x9c>
 8004506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450a:	d028      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xec>
    break;    
 800450c:	e086      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	f023 0307 	bic.w	r3, r3, #7
 8004520:	6093      	str	r3, [r2, #8]
    break;
 8004522:	e07b      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f000 f9a9 	bl	800488a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800454a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004552:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	609a      	str	r2, [r3, #8]
    break;
 800455c:	e05e      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f000 f98c 	bl	800488a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004580:	609a      	str	r2, [r3, #8]
    break;
 8004582:	e04b      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	461a      	mov	r2, r3
 8004592:	f000 f8f3 	bl	800477c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2150      	movs	r1, #80	; 0x50
 800459c:	4618      	mov	r0, r3
 800459e:	f000 f954 	bl	800484a <TIM_ITRx_SetConfig>
    break;
 80045a2:	e03b      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	461a      	mov	r2, r3
 80045b2:	f000 f916 	bl	80047e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2160      	movs	r1, #96	; 0x60
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 f944 	bl	800484a <TIM_ITRx_SetConfig>
    break;
 80045c2:	e02b      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f000 f8d3 	bl	800477c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f934 	bl	800484a <TIM_ITRx_SetConfig>
    break;
 80045e2:	e01b      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f92d 	bl	800484a <TIM_ITRx_SetConfig>
    break;
 80045f0:	e014      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2110      	movs	r1, #16
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f926 	bl	800484a <TIM_ITRx_SetConfig>
    break;
 80045fe:	e00d      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2120      	movs	r1, #32
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f91f 	bl	800484a <TIM_ITRx_SetConfig>
    break;
 800460c:	e006      	b.n	800461c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2130      	movs	r1, #48	; 0x30
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f918 	bl	800484a <TIM_ITRx_SetConfig>
    break;
 800461a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a32      	ldr	r2, [pc, #200]	; (8004768 <TIM_Base_SetConfig+0xe0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x2c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x2c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <TIM_Base_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a27      	ldr	r2, [pc, #156]	; (8004768 <TIM_Base_SetConfig+0xe0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <TIM_Base_SetConfig+0x6e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d00f      	beq.n	80046f6 <TIM_Base_SetConfig+0x6e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a24      	ldr	r2, [pc, #144]	; (800476c <TIM_Base_SetConfig+0xe4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <TIM_Base_SetConfig+0x6e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a23      	ldr	r2, [pc, #140]	; (8004770 <TIM_Base_SetConfig+0xe8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <TIM_Base_SetConfig+0x6e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a22      	ldr	r2, [pc, #136]	; (8004774 <TIM_Base_SetConfig+0xec>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_Base_SetConfig+0x6e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a21      	ldr	r2, [pc, #132]	; (8004778 <TIM_Base_SetConfig+0xf0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d108      	bne.n	8004708 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <TIM_Base_SetConfig+0xe0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00b      	beq.n	800474c <TIM_Base_SetConfig+0xc4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <TIM_Base_SetConfig+0xe8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <TIM_Base_SetConfig+0xc4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0d      	ldr	r2, [pc, #52]	; (8004774 <TIM_Base_SetConfig+0xec>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0xc4>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <TIM_Base_SetConfig+0xf0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	615a      	str	r2, [r3, #20]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f023 030a 	bic.w	r3, r3, #10
 80047c0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f023 0210 	bic.w	r2, r3, #16
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	031b      	lsls	r3, r3, #12
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	f043 0307 	orr.w	r3, r3, #7
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	609a      	str	r2, [r3, #8]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800488a:	b480      	push	{r7}
 800488c:	b087      	sub	sp, #28
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	609a      	str	r2, [r3, #8]
} 
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e038      	b.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d108      	bne.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004910:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004934:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
} 
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40012c00 	.word	0x40012c00

0800496c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e043      	b.n	8004a42 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fc7a 	bl	80062c8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f82d 	bl	8004a4c <UART_SetConfig>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e022      	b.n	8004a42 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f987 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a28:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa0e 	bl	8004e5c <UART_CheckIdleState>
 8004a40:	4603      	mov	r3, r0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004a58:	2310      	movs	r3, #16
 8004a5a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b9f      	ldr	r3, [pc, #636]	; (8004d04 <UART_SetConfig+0x2b8>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a8e      	ldr	r2, [pc, #568]	; (8004d08 <UART_SetConfig+0x2bc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d121      	bne.n	8004b18 <UART_SetConfig+0xcc>
 8004ad4:	4b8d      	ldr	r3, [pc, #564]	; (8004d0c <UART_SetConfig+0x2c0>)
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d817      	bhi.n	8004b10 <UART_SetConfig+0xc4>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x9c>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b05 	.word	0x08004b05
 8004af0:	08004b0b 	.word	0x08004b0b
 8004af4:	08004aff 	.word	0x08004aff
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]
 8004afc:	e01e      	b.n	8004b3c <UART_SetConfig+0xf0>
 8004afe:	2302      	movs	r3, #2
 8004b00:	75fb      	strb	r3, [r7, #23]
 8004b02:	e01b      	b.n	8004b3c <UART_SetConfig+0xf0>
 8004b04:	2304      	movs	r3, #4
 8004b06:	75fb      	strb	r3, [r7, #23]
 8004b08:	e018      	b.n	8004b3c <UART_SetConfig+0xf0>
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	75fb      	strb	r3, [r7, #23]
 8004b0e:	e015      	b.n	8004b3c <UART_SetConfig+0xf0>
 8004b10:	2310      	movs	r3, #16
 8004b12:	75fb      	strb	r3, [r7, #23]
 8004b14:	bf00      	nop
 8004b16:	e011      	b.n	8004b3c <UART_SetConfig+0xf0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a7c      	ldr	r2, [pc, #496]	; (8004d10 <UART_SetConfig+0x2c4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d102      	bne.n	8004b28 <UART_SetConfig+0xdc>
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
 8004b26:	e009      	b.n	8004b3c <UART_SetConfig+0xf0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a79      	ldr	r2, [pc, #484]	; (8004d14 <UART_SetConfig+0x2c8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d102      	bne.n	8004b38 <UART_SetConfig+0xec>
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
 8004b36:	e001      	b.n	8004b3c <UART_SetConfig+0xf0>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b44:	d16f      	bne.n	8004c26 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d857      	bhi.n	8004bfc <UART_SetConfig+0x1b0>
 8004b4c:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0x108>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b95 	.word	0x08004b95
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004bfd 	.word	0x08004bfd
 8004b64:	08004bcb 	.word	0x08004bcb
 8004b68:	08004bfd 	.word	0x08004bfd
 8004b6c:	08004bfd 	.word	0x08004bfd
 8004b70:	08004bfd 	.word	0x08004bfd
 8004b74:	08004be7 	.word	0x08004be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b78:	f7ff f9ac 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	005a      	lsls	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	82bb      	strh	r3, [r7, #20]
        break;
 8004b92:	e036      	b.n	8004c02 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004b94:	f7ff f9c0 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	005a      	lsls	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	441a      	add	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	82bb      	strh	r3, [r7, #20]
        break;
 8004bae:	e028      	b.n	8004c02 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004bba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6852      	ldr	r2, [r2, #4]
 8004bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc6:	82bb      	strh	r3, [r7, #20]
        break;
 8004bc8:	e01b      	b.n	8004c02 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004bca:	f7ff f90d 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	005a      	lsls	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	441a      	add	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	82bb      	strh	r3, [r7, #20]
        break;
 8004be4:	e00d      	b.n	8004c02 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	82bb      	strh	r3, [r7, #20]
        break;
 8004bfa:	e002      	b.n	8004c02 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	74fb      	strb	r3, [r7, #19]
        break;
 8004c00:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004c02:	8abb      	ldrh	r3, [r7, #20]
 8004c04:	f023 030f 	bic.w	r3, r3, #15
 8004c08:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c0a:	8abb      	ldrh	r3, [r7, #20]
 8004c0c:	105b      	asrs	r3, r3, #1
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	897a      	ldrh	r2, [r7, #10]
 8004c22:	60da      	str	r2, [r3, #12]
 8004c24:	e069      	b.n	8004cfa <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d863      	bhi.n	8004cf4 <UART_SetConfig+0x2a8>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x1e8>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c79 	.word	0x08004c79
 8004c3c:	08004c99 	.word	0x08004c99
 8004c40:	08004cf5 	.word	0x08004cf5
 8004c44:	08004cb9 	.word	0x08004cb9
 8004c48:	08004cf5 	.word	0x08004cf5
 8004c4c:	08004cf5 	.word	0x08004cf5
 8004c50:	08004cf5 	.word	0x08004cf5
 8004c54:	08004cd9 	.word	0x08004cd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c58:	f7ff f93c 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60da      	str	r2, [r3, #12]
        break;
 8004c76:	e040      	b.n	8004cfa <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004c78:	f7ff f94e 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	441a      	add	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
        break;
 8004c96:	e030      	b.n	8004cfa <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004ca2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6852      	ldr	r2, [r2, #4]
 8004caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
        break;
 8004cb6:	e020      	b.n	8004cfa <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004cb8:	f7ff f896 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	441a      	add	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60da      	str	r2, [r3, #12]
        break;
 8004cd6:	e010      	b.n	8004cfa <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60da      	str	r2, [r3, #12]
        break;
 8004cf2:	e002      	b.n	8004cfa <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	74fb      	strb	r3, [r7, #19]
        break;
 8004cf8:	bf00      	nop
    }
  }

  return ret;
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]

}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	efff69f3 	.word	0xefff69f3
 8004d08:	40013800 	.word	0x40013800
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40004400 	.word	0x40004400
 8004d14:	40004800 	.word	0x40004800

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d10a      	bne.n	8004e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e6e:	f7fb ff5d 	bl	8000d2c <HAL_GetTick>
 8004e72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d10e      	bne.n	8004ea0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f82c 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e022      	b.n	8004ee6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d10e      	bne.n	8004ecc <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f816 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e00c      	b.n	8004ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	e02c      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d028      	beq.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f0e:	f7fb ff0d 	bl	8000d2c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d21d      	bcs.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e00f      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d0c3      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f88:	f7fb fe76 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f8c:	f000 f824 	bl	8004fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f90:	f000 fa1e 	bl	80053d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004f94:	f000 f9ec 	bl	8005370 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004f98:	f000 f878 	bl	800508c <MX_ADC1_Init>
  MX_DAC1_Init();
 8004f9c:	f000 f8e4 	bl	8005168 <MX_DAC1_Init>
  MX_I2C1_Init();
 8004fa0:	f000 f90c 	bl	80051bc <MX_I2C1_Init>
  MX_TIM2_Init();
 8004fa4:	f000 f948 	bl	8005238 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004fa8:	f000 f994 	bl	80052d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  set_oled_addr(0x78);
 8004fac:	2078      	movs	r0, #120	; 0x78
 8004fae:	f000 fb71 	bl	8005694 <set_oled_addr>
  ssd1306_sel_I2C(&hi2c1);
 8004fb2:	4806      	ldr	r0, [pc, #24]	; (8004fcc <main+0x48>)
 8004fb4:	f000 ffdc 	bl	8005f70 <ssd1306_sel_I2C>
  SSD1306_Init ();
 8004fb8:	f000 fb7c 	bl	80056b4 <SSD1306_Init>

HAL_TIM_Base_Start_IT(&htim2);
 8004fbc:	4804      	ldr	r0, [pc, #16]	; (8004fd0 <main+0x4c>)
 8004fbe:	f7ff f91e 	bl	80041fe <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim3);
 8004fc2:	4804      	ldr	r0, [pc, #16]	; (8004fd4 <main+0x50>)
 8004fc4:	f7ff f91b 	bl	80041fe <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004fc8:	e7fe      	b.n	8004fc8 <main+0x44>
 8004fca:	bf00      	nop
 8004fcc:	200006a4 	.word	0x200006a4
 8004fd0:	20000784 	.word	0x20000784
 8004fd4:	200006f0 	.word	0x200006f0

08004fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b096      	sub	sp, #88	; 0x58
 8004fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fe2:	2228      	movs	r2, #40	; 0x28
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 fac9 	bl	800657e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fec:	f107 031c 	add.w	r3, r7, #28
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	611a      	str	r2, [r3, #16]
 800500a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800500c:	2302      	movs	r3, #2
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005010:	2301      	movs	r3, #1
 8005012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005014:	2310      	movs	r3, #16
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005018:	2302      	movs	r3, #2
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800501c:	2300      	movs	r3, #0
 800501e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8005020:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005024:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd fe72 	bl	8002d14 <HAL_RCC_OscConfig>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8005036:	f000 faf1 	bl	800561c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800503a:	230f      	movs	r3, #15
 800503c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800503e:	2302      	movs	r3, #2
 8005040:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005046:	2300      	movs	r3, #0
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800504a:	2300      	movs	r3, #0
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800504e:	f107 031c 	add.w	r3, r7, #28
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe fd4b 	bl	8003af0 <HAL_RCC_ClockConfig>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8005060:	f000 fadc 	bl	800561c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8005064:	23a0      	movs	r3, #160	; 0xa0
 8005066:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8005068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800506c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe ff71 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005080:	f000 facc 	bl	800561c <Error_Handler>
  }
}
 8005084:	bf00      	nop
 8005086:	3758      	adds	r7, #88	; 0x58
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005092:	f107 031c 	add.w	r3, r7, #28
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800509e:	1d3b      	adds	r3, r7, #4
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	609a      	str	r2, [r3, #8]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	611a      	str	r2, [r3, #16]
 80050ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80050ae:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80050b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80050b6:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80050c2:	4b28      	ldr	r3, [pc, #160]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80050c8:	4b26      	ldr	r3, [pc, #152]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80050ce:	4b25      	ldr	r3, [pc, #148]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80050da:	4b22      	ldr	r3, [pc, #136]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050dc:	2201      	movs	r2, #1
 80050de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80050ec:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050f4:	2204      	movs	r2, #4
 80050f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80050f8:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <MX_ADC1_Init+0xd8>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80050fe:	4b19      	ldr	r3, [pc, #100]	; (8005164 <MX_ADC1_Init+0xd8>)
 8005100:	2200      	movs	r2, #0
 8005102:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005104:	4817      	ldr	r0, [pc, #92]	; (8005164 <MX_ADC1_Init+0xd8>)
 8005106:	f7fb fe1d 	bl	8000d44 <HAL_ADC_Init>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8005110:	f000 fa84 	bl	800561c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005118:	f107 031c 	add.w	r3, r7, #28
 800511c:	4619      	mov	r1, r3
 800511e:	4811      	ldr	r0, [pc, #68]	; (8005164 <MX_ADC1_Init+0xd8>)
 8005120:	f7fc fc22 	bl	8001968 <HAL_ADCEx_MultiModeConfigChannel>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800512a:	f000 fa77 	bl	800561c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800512e:	2301      	movs	r3, #1
 8005130:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005132:	2301      	movs	r3, #1
 8005134:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4806      	ldr	r0, [pc, #24]	; (8005164 <MX_ADC1_Init+0xd8>)
 800514c:	f7fc f94a 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8005156:	f000 fa61 	bl	800561c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800515a:	bf00      	nop
 800515c:	3728      	adds	r7, #40	; 0x28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000730 	.word	0x20000730

08005168 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <MX_DAC1_Init+0x4c>)
 800517a:	4a0f      	ldr	r2, [pc, #60]	; (80051b8 <MX_DAC1_Init+0x50>)
 800517c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800517e:	480d      	ldr	r0, [pc, #52]	; (80051b4 <MX_DAC1_Init+0x4c>)
 8005180:	f7fc ff2f 	bl	8001fe2 <HAL_DAC_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 800518a:	f000 fa47 	bl	800561c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800518e:	2300      	movs	r3, #0
 8005190:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	2200      	movs	r2, #0
 800519a:	4619      	mov	r1, r3
 800519c:	4805      	ldr	r0, [pc, #20]	; (80051b4 <MX_DAC1_Init+0x4c>)
 800519e:	f7fc ff43 	bl	8002028 <HAL_DAC_ConfigChannel>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80051a8:	f000 fa38 	bl	800561c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000690 	.word	0x20000690
 80051b8:	40007400 	.word	0x40007400

080051bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <MX_I2C1_Init+0x74>)
 80051c2:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <MX_I2C1_Init+0x78>)
 80051c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <MX_I2C1_Init+0x74>)
 80051c8:	f240 220b 	movw	r2, #523	; 0x20b
 80051cc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <MX_I2C1_Init+0x74>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051d4:	4b16      	ldr	r3, [pc, #88]	; (8005230 <MX_I2C1_Init+0x74>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051da:	4b15      	ldr	r3, [pc, #84]	; (8005230 <MX_I2C1_Init+0x74>)
 80051dc:	2200      	movs	r2, #0
 80051de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <MX_I2C1_Init+0x74>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80051e6:	4b12      	ldr	r3, [pc, #72]	; (8005230 <MX_I2C1_Init+0x74>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <MX_I2C1_Init+0x74>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051f2:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <MX_I2C1_Init+0x74>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80051f8:	480d      	ldr	r0, [pc, #52]	; (8005230 <MX_I2C1_Init+0x74>)
 80051fa:	f7fd f91d 	bl	8002438 <HAL_I2C_Init>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005204:	f000 fa0a 	bl	800561c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005208:	2100      	movs	r1, #0
 800520a:	4809      	ldr	r0, [pc, #36]	; (8005230 <MX_I2C1_Init+0x74>)
 800520c:	f7fd fce8 	bl	8002be0 <HAL_I2CEx_ConfigAnalogFilter>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8005216:	f000 fa01 	bl	800561c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800521a:	2100      	movs	r1, #0
 800521c:	4804      	ldr	r0, [pc, #16]	; (8005230 <MX_I2C1_Init+0x74>)
 800521e:	f7fd fd2a 	bl	8002c76 <HAL_I2CEx_ConfigDigitalFilter>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8005228:	f000 f9f8 	bl	800561c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200006a4 	.word	0x200006a4
 8005234:	40005400 	.word	0x40005400

08005238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800523e:	f107 0310 	add.w	r3, r7, #16
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	609a      	str	r2, [r3, #8]
 800524a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <MX_TIM2_Init+0x98>)
 8005258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800525c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 800525e:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <MX_TIM2_Init+0x98>)
 8005260:	f240 623f 	movw	r2, #1599	; 0x63f
 8005264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <MX_TIM2_Init+0x98>)
 8005268:	2200      	movs	r2, #0
 800526a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 800526c:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <MX_TIM2_Init+0x98>)
 800526e:	2213      	movs	r2, #19
 8005270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <MX_TIM2_Init+0x98>)
 8005274:	2200      	movs	r2, #0
 8005276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <MX_TIM2_Init+0x98>)
 800527a:	2200      	movs	r2, #0
 800527c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800527e:	4814      	ldr	r0, [pc, #80]	; (80052d0 <MX_TIM2_Init+0x98>)
 8005280:	f7fe ff92 	bl	80041a8 <HAL_TIM_Base_Init>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800528a:	f000 f9c7 	bl	800561c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800528e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	4619      	mov	r1, r3
 800529a:	480d      	ldr	r0, [pc, #52]	; (80052d0 <MX_TIM2_Init+0x98>)
 800529c:	f7ff f8e9 	bl	8004472 <HAL_TIM_ConfigClockSource>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80052a6:	f000 f9b9 	bl	800561c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4806      	ldr	r0, [pc, #24]	; (80052d0 <MX_TIM2_Init+0x98>)
 80052b8:	f7ff fb0a 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80052c2:	f000 f9ab 	bl	800561c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80052c6:	bf00      	nop
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000784 	.word	0x20000784

080052d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052da:	f107 0310 	add.w	r3, r7, #16
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	605a      	str	r2, [r3, #4]
 80052e4:	609a      	str	r2, [r3, #8]
 80052e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	605a      	str	r2, [r3, #4]
 80052f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052f2:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <MX_TIM3_Init+0x94>)
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <MX_TIM3_Init+0x98>)
 80052f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <MX_TIM3_Init+0x94>)
 80052fa:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80052fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005300:	4b19      	ldr	r3, [pc, #100]	; (8005368 <MX_TIM3_Init+0x94>)
 8005302:	2200      	movs	r2, #0
 8005304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <MX_TIM3_Init+0x94>)
 8005308:	22c7      	movs	r2, #199	; 0xc7
 800530a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800530c:	4b16      	ldr	r3, [pc, #88]	; (8005368 <MX_TIM3_Init+0x94>)
 800530e:	2200      	movs	r2, #0
 8005310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <MX_TIM3_Init+0x94>)
 8005314:	2200      	movs	r2, #0
 8005316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005318:	4813      	ldr	r0, [pc, #76]	; (8005368 <MX_TIM3_Init+0x94>)
 800531a:	f7fe ff45 	bl	80041a8 <HAL_TIM_Base_Init>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005324:	f000 f97a 	bl	800561c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	4619      	mov	r1, r3
 8005334:	480c      	ldr	r0, [pc, #48]	; (8005368 <MX_TIM3_Init+0x94>)
 8005336:	f7ff f89c 	bl	8004472 <HAL_TIM_ConfigClockSource>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005340:	f000 f96c 	bl	800561c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005344:	2300      	movs	r3, #0
 8005346:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	4619      	mov	r1, r3
 8005350:	4805      	ldr	r0, [pc, #20]	; (8005368 <MX_TIM3_Init+0x94>)
 8005352:	f7ff fabd 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800535c:	f000 f95e 	bl	800561c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005360:	bf00      	nop
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200006f0 	.word	0x200006f0
 800536c:	40000400 	.word	0x40000400

08005370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 8005376:	4a15      	ldr	r2, [pc, #84]	; (80053cc <MX_USART2_UART_Init+0x5c>)
 8005378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800537a:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 800537c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005382:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 8005384:	2200      	movs	r2, #0
 8005386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 800538a:	2200      	movs	r2, #0
 800538c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800538e:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 8005390:	2200      	movs	r2, #0
 8005392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 8005396:	220c      	movs	r2, #12
 8005398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800539a:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 800539c:	2200      	movs	r2, #0
 800539e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053a6:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053b2:	4805      	ldr	r0, [pc, #20]	; (80053c8 <MX_USART2_UART_Init+0x58>)
 80053b4:	f7ff faf8 	bl	80049a8 <HAL_UART_Init>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80053be:	f000 f92d 	bl	800561c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200007c4 	.word	0x200007c4
 80053cc:	40004400 	.word	0x40004400

080053d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d6:	f107 030c 	add.w	r3, r7, #12
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <MX_GPIO_Init+0x8c>)
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4a1c      	ldr	r2, [pc, #112]	; (800545c <MX_GPIO_Init+0x8c>)
 80053ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053f0:	6153      	str	r3, [r2, #20]
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <MX_GPIO_Init+0x8c>)
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <MX_GPIO_Init+0x8c>)
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <MX_GPIO_Init+0x8c>)
 8005404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005408:	6153      	str	r3, [r2, #20]
 800540a:	4b14      	ldr	r3, [pc, #80]	; (800545c <MX_GPIO_Init+0x8c>)
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005416:	4b11      	ldr	r3, [pc, #68]	; (800545c <MX_GPIO_Init+0x8c>)
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	4a10      	ldr	r2, [pc, #64]	; (800545c <MX_GPIO_Init+0x8c>)
 800541c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005420:	6153      	str	r3, [r2, #20]
 8005422:	4b0e      	ldr	r3, [pc, #56]	; (800545c <MX_GPIO_Init+0x8c>)
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800542e:	2200      	movs	r2, #0
 8005430:	2108      	movs	r1, #8
 8005432:	480b      	ldr	r0, [pc, #44]	; (8005460 <MX_GPIO_Init+0x90>)
 8005434:	f7fc ffd6 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8005438:	2308      	movs	r3, #8
 800543a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800543c:	2301      	movs	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8005448:	f107 030c 	add.w	r3, r7, #12
 800544c:	4619      	mov	r1, r3
 800544e:	4804      	ldr	r0, [pc, #16]	; (8005460 <MX_GPIO_Init+0x90>)
 8005450:	f7fc fe52 	bl	80020f8 <HAL_GPIO_Init>

}
 8005454:	bf00      	nop
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	48000400 	.word	0x48000400

08005464 <check_ADC>:

/* USER CODE BEGIN 4 */
void check_ADC(ADC_HandleTypeDef *hadc, uint16_t *pData, uint16_t Size){
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
	static uint8_t index_adc = 0;
	static double processed_adc = 0;
	double data_adc = 0;
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	f04f 0400 	mov.w	r4, #0
 800547a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	HAL_ADC_Start(&hadc1);
 800547e:	483e      	ldr	r0, [pc, #248]	; (8005578 <check_ADC+0x114>)
 8005480:	f7fb fdf0 	bl	8001064 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8005484:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005488:	483b      	ldr	r0, [pc, #236]	; (8005578 <check_ADC+0x114>)
 800548a:	f7fb fed7 	bl	800123c <HAL_ADC_PollForConversion>
	pData[index_adc] = HAL_ADC_GetValue(&hadc1);
 800548e:	483a      	ldr	r0, [pc, #232]	; (8005578 <check_ADC+0x114>)
 8005490:	f7fb ff9a 	bl	80013c8 <HAL_ADC_GetValue>
 8005494:	4601      	mov	r1, r0
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <check_ADC+0x118>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	4413      	add	r3, r2
 80054a0:	b28a      	uxth	r2, r1
 80054a2:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80054a4:	4834      	ldr	r0, [pc, #208]	; (8005578 <check_ADC+0x114>)
 80054a6:	f7fb fe93 	bl	80011d0 <HAL_ADC_Stop>
	data_adc = pData[index_adc]*3300/4095;
 80054aa:	4b34      	ldr	r3, [pc, #208]	; (800557c <check_ADC+0x118>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80054bc:	fb03 f302 	mul.w	r3, r3, r2
 80054c0:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <check_ADC+0x11c>)
 80054c2:	fb82 1203 	smull	r1, r2, r2, r3
 80054c6:	441a      	add	r2, r3
 80054c8:	12d2      	asrs	r2, r2, #11
 80054ca:	17db      	asrs	r3, r3, #31
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fb f820 	bl	8000514 <__aeabi_i2d>
 80054d4:	4603      	mov	r3, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	processed_adc += data_adc;
 80054dc:	4b29      	ldr	r3, [pc, #164]	; (8005584 <check_ADC+0x120>)
 80054de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054e6:	f7fa fec9 	bl	800027c <__adddf3>
 80054ea:	4603      	mov	r3, r0
 80054ec:	460c      	mov	r4, r1
 80054ee:	4a25      	ldr	r2, [pc, #148]	; (8005584 <check_ADC+0x120>)
 80054f0:	e9c2 3400 	strd	r3, r4, [r2]
	index_adc++;
 80054f4:	4b21      	ldr	r3, [pc, #132]	; (800557c <check_ADC+0x118>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	4b1f      	ldr	r3, [pc, #124]	; (800557c <check_ADC+0x118>)
 80054fe:	701a      	strb	r2, [r3, #0]

	if (index_adc >= Size ){
 8005500:	4b1e      	ldr	r3, [pc, #120]	; (800557c <check_ADC+0x118>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	429a      	cmp	r2, r3
 800550a:	d831      	bhi.n	8005570 <check_ADC+0x10c>
		processed_adc = processed_adc/Size;
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <check_ADC+0x120>)
 800550e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fa fffd 	bl	8000514 <__aeabi_i2d>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fb f98b 	bl	800083c <__aeabi_ddiv>
 8005526:	4603      	mov	r3, r0
 8005528:	460c      	mov	r4, r1
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <check_ADC+0x120>)
 800552c:	e9c2 3400 	strd	r3, r4, [r2]
//		processed_adc = processed_adc/(10*1);
		processed_adc = round(processed_adc);
 8005530:	4b14      	ldr	r3, [pc, #80]	; (8005584 <check_ADC+0x120>)
 8005532:	ed93 7b00 	vldr	d7, [r3]
 8005536:	eeb0 0a47 	vmov.f32	s0, s14
 800553a:	eef0 0a67 	vmov.f32	s1, s15
 800553e:	f001 fca7 	bl	8006e90 <round>
 8005542:	eeb0 7a40 	vmov.f32	s14, s0
 8005546:	eef0 7a60 	vmov.f32	s15, s1
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <check_ADC+0x120>)
 800554c:	ed83 7b00 	vstr	d7, [r3]
//		processed_adc = processed_adc*10;

		voltage_adc = processed_adc;
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <check_ADC+0x120>)
 8005552:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005556:	4a0c      	ldr	r2, [pc, #48]	; (8005588 <check_ADC+0x124>)
 8005558:	e9c2 3400 	strd	r3, r4, [r2]
		index_adc = 0;
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <check_ADC+0x118>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
		processed_adc = 0;
 8005562:	4a08      	ldr	r2, [pc, #32]	; (8005584 <check_ADC+0x120>)
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	f04f 0400 	mov.w	r4, #0
 800556c:	e9c2 3400 	strd	r3, r4, [r2]

	}

//	tx_UART_byte(&huart2, data_0, 10);
}
 8005570:	bf00      	nop
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bdb0      	pop	{r4, r5, r7, pc}
 8005578:	20000730 	.word	0x20000730
 800557c:	200000b0 	.word	0x200000b0
 8005580:	80080081 	.word	0x80080081
 8005584:	200000b8 	.word	0x200000b8
 8005588:	200000a8 	.word	0x200000a8

0800558c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d10b      	bne.n	80055b4 <HAL_TIM_PeriodElapsedCallback+0x28>
		static uint8_t ready_2 = 0;
		if (ready_2 == 1){
 800559c:	4b18      	ldr	r3, [pc, #96]	; (8005600 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PeriodElapsedCallback+0x22>
			 check_ADC(&hadc1, rawValues, 200);
 80055a4:	22c8      	movs	r2, #200	; 0xc8
 80055a6:	4917      	ldr	r1, [pc, #92]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80055a8:	4817      	ldr	r0, [pc, #92]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80055aa:	f7ff ff5b 	bl	8005464 <check_ADC>
		}
		ready_2 = 1;
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim3){
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d11a      	bne.n	80055f2 <HAL_TIM_PeriodElapsedCallback+0x66>
		static uint8_t ready_3 = 0;
		if (ready_3 == 1){
 80055bc:	4b14      	ldr	r3, [pc, #80]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d113      	bne.n	80055ec <HAL_TIM_PeriodElapsedCallback+0x60>
//			voltage_adc = voltage_adc*100;
//			voltage_adc = round(voltage_adc);
//			voltage_adc = voltage_adc/100;

//			double current = (voltage_adc - 1.66)/0.098;
			SSD1306_Putdouble(voltage_adc, 1, 1);
 80055c4:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80055c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055ca:	4618      	mov	r0, r3
 80055cc:	4621      	mov	r1, r4
 80055ce:	f7fb fb03 	bl	8000bd8 <__aeabi_d2f>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2101      	movs	r1, #1
 80055d6:	2001      	movs	r0, #1
 80055d8:	ee00 3a10 	vmov	s0, r3
 80055dc:	f000 fc1c 	bl	8005e18 <SSD1306_Putdouble>
			SSD1306_UpdateScreen();
 80055e0:	f000 f95e 	bl	80058a0 <SSD1306_UpdateScreen>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80055e4:	2108      	movs	r1, #8
 80055e6:	480c      	ldr	r0, [pc, #48]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80055e8:	f7fc ff14 	bl	8002414 <HAL_GPIO_TogglePin>
		}
		ready_3 = 1;
 80055ec:	4b08      	ldr	r3, [pc, #32]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
	}
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000784 	.word	0x20000784
 8005600:	200000c0 	.word	0x200000c0
 8005604:	20000500 	.word	0x20000500
 8005608:	20000730 	.word	0x20000730
 800560c:	200006f0 	.word	0x200006f0
 8005610:	200000c1 	.word	0x200000c1
 8005614:	200000a8 	.word	0x200000a8
 8005618:	48000400 	.word	0x48000400

0800561c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <size_int>:
	byte_str[8] = '\r';
	byte_str[9] = '\n';
	HAL_UART_Transmit(huart, byte_str, sizeof(byte_str), 10);
}

uint8_t size_int(int data){
 800562c:	b590      	push	{r4, r7, lr}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <size_int+0x14>
		size = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
 800563e:	e021      	b.n	8005684 <size_int+0x58>
	}
	else {
		size = floor(log10(data))+1;
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fa ff67 	bl	8000514 <__aeabi_i2d>
 8005646:	4603      	mov	r3, r0
 8005648:	460c      	mov	r4, r1
 800564a:	ec44 3b10 	vmov	d0, r3, r4
 800564e:	f001 fca3 	bl	8006f98 <log10>
 8005652:	eeb0 7a40 	vmov.f32	s14, s0
 8005656:	eef0 7a60 	vmov.f32	s15, s1
 800565a:	eeb0 0a47 	vmov.f32	s0, s14
 800565e:	eef0 0a67 	vmov.f32	s1, s15
 8005662:	f001 fb91 	bl	8006d88 <floor>
 8005666:	ec51 0b10 	vmov	r0, r1, d0
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	4b08      	ldr	r3, [pc, #32]	; (8005690 <size_int+0x64>)
 8005670:	f7fa fe04 	bl	800027c <__adddf3>
 8005674:	4603      	mov	r3, r0
 8005676:	460c      	mov	r4, r1
 8005678:	4618      	mov	r0, r3
 800567a:	4621      	mov	r1, r4
 800567c:	f7fb fa8c 	bl	8000b98 <__aeabi_d2uiz>
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bd90      	pop	{r4, r7, pc}
 800568e:	bf00      	nop
 8005690:	3ff00000 	.word	0x3ff00000

08005694 <set_oled_addr>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

void set_oled_addr(uint8_t addr){
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
	oled_addr = addr;
 800569e:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <set_oled_addr+0x1c>)
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	7013      	strb	r3, [r2, #0]
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000880 	.word	0x20000880

080056b4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0

	/* Init I2C */
//	ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c_current, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80056ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80056be:	2201      	movs	r2, #1
 80056c0:	2178      	movs	r1, #120	; 0x78
 80056c2:	4874      	ldr	r0, [pc, #464]	; (8005894 <SSD1306_Init+0x1e0>)
 80056c4:	f7fd f848 	bl	8002758 <HAL_I2C_IsDeviceReady>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e0dc      	b.n	800588c <SSD1306_Init+0x1d8>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80056d2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80056d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80056d8:	e002      	b.n	80056e0 <SSD1306_Init+0x2c>
		p--;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3b01      	subs	r3, #1
 80056de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f9      	bne.n	80056da <SSD1306_Init+0x26>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80056e6:	4b6c      	ldr	r3, [pc, #432]	; (8005898 <SSD1306_Init+0x1e4>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	22ae      	movs	r2, #174	; 0xae
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fcaa 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80056f4:	4b68      	ldr	r3, [pc, #416]	; (8005898 <SSD1306_Init+0x1e4>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2220      	movs	r2, #32
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fca3 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005702:	4b65      	ldr	r3, [pc, #404]	; (8005898 <SSD1306_Init+0x1e4>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fc9c 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <SSD1306_Init+0x1e4>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	22b0      	movs	r2, #176	; 0xb0
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fc95 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800571e:	4b5e      	ldr	r3, [pc, #376]	; (8005898 <SSD1306_Init+0x1e4>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	22c8      	movs	r2, #200	; 0xc8
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fc8e 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800572c:	4b5a      	ldr	r3, [pc, #360]	; (8005898 <SSD1306_Init+0x1e4>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2200      	movs	r2, #0
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fc87 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800573a:	4b57      	ldr	r3, [pc, #348]	; (8005898 <SSD1306_Init+0x1e4>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2210      	movs	r2, #16
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fc80 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8005748:	4b53      	ldr	r3, [pc, #332]	; (8005898 <SSD1306_Init+0x1e4>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fc79 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8005756:	4b50      	ldr	r3, [pc, #320]	; (8005898 <SSD1306_Init+0x1e4>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2281      	movs	r2, #129	; 0x81
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fc72 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005764:	4b4c      	ldr	r3, [pc, #304]	; (8005898 <SSD1306_Init+0x1e4>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	22ff      	movs	r2, #255	; 0xff
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fc6b 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8005772:	4b49      	ldr	r3, [pc, #292]	; (8005898 <SSD1306_Init+0x1e4>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	22a1      	movs	r2, #161	; 0xa1
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fc64 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005780:	4b45      	ldr	r3, [pc, #276]	; (8005898 <SSD1306_Init+0x1e4>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	22a6      	movs	r2, #166	; 0xa6
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fc5d 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800578e:	4b42      	ldr	r3, [pc, #264]	; (8005898 <SSD1306_Init+0x1e4>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	22a8      	movs	r2, #168	; 0xa8
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fc56 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800579c:	4b3e      	ldr	r3, [pc, #248]	; (8005898 <SSD1306_Init+0x1e4>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	223f      	movs	r2, #63	; 0x3f
 80057a2:	2100      	movs	r1, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fc4f 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80057aa:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <SSD1306_Init+0x1e4>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	22a4      	movs	r2, #164	; 0xa4
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fc48 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80057b8:	4b37      	ldr	r3, [pc, #220]	; (8005898 <SSD1306_Init+0x1e4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	22d3      	movs	r2, #211	; 0xd3
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fc41 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80057c6:	4b34      	ldr	r3, [pc, #208]	; (8005898 <SSD1306_Init+0x1e4>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fc3a 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80057d4:	4b30      	ldr	r3, [pc, #192]	; (8005898 <SSD1306_Init+0x1e4>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	22d5      	movs	r2, #213	; 0xd5
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fc33 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80057e2:	4b2d      	ldr	r3, [pc, #180]	; (8005898 <SSD1306_Init+0x1e4>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	22f0      	movs	r2, #240	; 0xf0
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fc2c 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80057f0:	4b29      	ldr	r3, [pc, #164]	; (8005898 <SSD1306_Init+0x1e4>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	22d9      	movs	r2, #217	; 0xd9
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fc25 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80057fe:	4b26      	ldr	r3, [pc, #152]	; (8005898 <SSD1306_Init+0x1e4>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fc1e 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800580c:	4b22      	ldr	r3, [pc, #136]	; (8005898 <SSD1306_Init+0x1e4>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	22da      	movs	r2, #218	; 0xda
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fc17 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800581a:	4b1f      	ldr	r3, [pc, #124]	; (8005898 <SSD1306_Init+0x1e4>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2212      	movs	r2, #18
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc10 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8005828:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <SSD1306_Init+0x1e4>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	22db      	movs	r2, #219	; 0xdb
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fc09 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8005836:	4b18      	ldr	r3, [pc, #96]	; (8005898 <SSD1306_Init+0x1e4>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2220      	movs	r2, #32
 800583c:	2100      	movs	r1, #0
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fc02 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <SSD1306_Init+0x1e4>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	228d      	movs	r2, #141	; 0x8d
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fbfb 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <SSD1306_Init+0x1e4>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2214      	movs	r2, #20
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fbf4 	bl	8006048 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <SSD1306_Init+0x1e4>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	22af      	movs	r2, #175	; 0xaf
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fbed 	bl	8006048 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800586e:	2000      	movs	r0, #0
 8005870:	f000 f850 	bl	8005914 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8005874:	f000 f814 	bl	80058a0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8005878:	4b08      	ldr	r3, [pc, #32]	; (800589c <SSD1306_Init+0x1e8>)
 800587a:	2200      	movs	r2, #0
 800587c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800587e:	4b07      	ldr	r3, [pc, #28]	; (800589c <SSD1306_Init+0x1e8>)
 8005880:	2200      	movs	r2, #0
 8005882:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <SSD1306_Init+0x1e8>)
 8005886:	2201      	movs	r2, #1
 8005888:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800588a:	2301      	movs	r3, #1
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000834 	.word	0x20000834
 8005898:	20000880 	.word	0x20000880
 800589c:	200004dc 	.word	0x200004dc

080058a0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80058a6:	2300      	movs	r3, #0
 80058a8:	71fb      	strb	r3, [r7, #7]
 80058aa:	e027      	b.n	80058fc <SSD1306_UpdateScreen+0x5c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <SSD1306_UpdateScreen+0x6c>)
 80058ae:	7818      	ldrb	r0, [r3, #0]
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	3b50      	subs	r3, #80	; 0x50
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	2100      	movs	r1, #0
 80058ba:	f000 fbc5 	bl	8006048 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <SSD1306_UpdateScreen+0x6c>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	2100      	movs	r1, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fbbe 	bl	8006048 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <SSD1306_UpdateScreen+0x6c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2210      	movs	r2, #16
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fbb7 	bl	8006048 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(oled_addr, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <SSD1306_UpdateScreen+0x6c>)
 80058dc:	7818      	ldrb	r0, [r3, #0]
 80058de:	79fa      	ldrb	r2, [r7, #7]
 80058e0:	4613      	mov	r3, r2
 80058e2:	019b      	lsls	r3, r3, #6
 80058e4:	4413      	add	r3, r2
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	4413      	add	r3, r2
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <SSD1306_UpdateScreen+0x70>)
 80058ec:	441a      	add	r2, r3
 80058ee:	2383      	movs	r3, #131	; 0x83
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	f000 fb4f 	bl	8005f94 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	3301      	adds	r3, #1
 80058fa:	71fb      	strb	r3, [r7, #7]
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	2b07      	cmp	r3, #7
 8005900:	d9d4      	bls.n	80058ac <SSD1306_UpdateScreen+0xc>
	}
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000880 	.word	0x20000880
 8005910:	200000c4 	.word	0x200000c4

08005914 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <SSD1306_Fill+0x14>
 8005924:	2300      	movs	r3, #0
 8005926:	e000      	b.n	800592a <SSD1306_Fill+0x16>
 8005928:	23ff      	movs	r3, #255	; 0xff
 800592a:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800592e:	4619      	mov	r1, r3
 8005930:	4803      	ldr	r0, [pc, #12]	; (8005940 <SSD1306_Fill+0x2c>)
 8005932:	f000 fe24 	bl	800657e <memset>
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200000c4 	.word	0x200000c4

08005944 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8005944:	b490      	push	{r4, r7}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	80fb      	strh	r3, [r7, #6]
 800594e:	460b      	mov	r3, r1
 8005950:	80bb      	strh	r3, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	70fb      	strb	r3, [r7, #3]
	if (
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	2b82      	cmp	r3, #130	; 0x82
 800595a:	d858      	bhi.n	8005a0e <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 800595c:	88bb      	ldrh	r3, [r7, #4]
 800595e:	2b3f      	cmp	r3, #63	; 0x3f
 8005960:	d855      	bhi.n	8005a0e <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8005962:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <SSD1306_DrawPixel+0xd4>)
 8005964:	791b      	ldrb	r3, [r3, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d006      	beq.n	8005978 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d122      	bne.n	80059c4 <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800597e:	88f9      	ldrh	r1, [r7, #6]
 8005980:	88bb      	ldrh	r3, [r7, #4]
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	b298      	uxth	r0, r3
 8005986:	4602      	mov	r2, r0
 8005988:	4613      	mov	r3, r2
 800598a:	019b      	lsls	r3, r3, #6
 800598c:	4413      	add	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4413      	add	r3, r2
 8005992:	440b      	add	r3, r1
 8005994:	4a21      	ldr	r2, [pc, #132]	; (8005a1c <SSD1306_DrawPixel+0xd8>)
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	b25a      	sxtb	r2, r3
 800599a:	88bb      	ldrh	r3, [r7, #4]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b25c      	sxtb	r4, r3
 80059ac:	88f9      	ldrh	r1, [r7, #6]
 80059ae:	4602      	mov	r2, r0
 80059b0:	4613      	mov	r3, r2
 80059b2:	019b      	lsls	r3, r3, #6
 80059b4:	4413      	add	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4413      	add	r3, r2
 80059ba:	440b      	add	r3, r1
 80059bc:	b2e1      	uxtb	r1, r4
 80059be:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <SSD1306_DrawPixel+0xd8>)
 80059c0:	54d1      	strb	r1, [r2, r3]
 80059c2:	e025      	b.n	8005a10 <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80059c4:	88f9      	ldrh	r1, [r7, #6]
 80059c6:	88bb      	ldrh	r3, [r7, #4]
 80059c8:	08db      	lsrs	r3, r3, #3
 80059ca:	b298      	uxth	r0, r3
 80059cc:	4602      	mov	r2, r0
 80059ce:	4613      	mov	r3, r2
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	4413      	add	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	440b      	add	r3, r1
 80059da:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <SSD1306_DrawPixel+0xd8>)
 80059dc:	5cd3      	ldrb	r3, [r2, r3]
 80059de:	b25a      	sxtb	r2, r3
 80059e0:	88bb      	ldrh	r3, [r7, #4]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2101      	movs	r1, #1
 80059e8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	b25b      	sxtb	r3, r3
 80059f2:	4013      	ands	r3, r2
 80059f4:	b25c      	sxtb	r4, r3
 80059f6:	88f9      	ldrh	r1, [r7, #6]
 80059f8:	4602      	mov	r2, r0
 80059fa:	4613      	mov	r3, r2
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	4413      	add	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	440b      	add	r3, r1
 8005a06:	b2e1      	uxtb	r1, r4
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <SSD1306_DrawPixel+0xd8>)
 8005a0a:	54d1      	strb	r1, [r2, r3]
 8005a0c:	e000      	b.n	8005a10 <SSD1306_DrawPixel+0xcc>
		return;
 8005a0e:	bf00      	nop
	}
}
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc90      	pop	{r4, r7}
 8005a16:	4770      	bx	lr
 8005a18:	200004dc 	.word	0x200004dc
 8005a1c:	200000c4 	.word	0x200000c4

08005a20 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	460a      	mov	r2, r1
 8005a2a:	80fb      	strh	r3, [r7, #6]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005a30:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <SSD1306_GotoXY+0x28>)
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <SSD1306_GotoXY+0x28>)
 8005a38:	88bb      	ldrh	r3, [r7, #4]
 8005a3a:	8053      	strh	r3, [r2, #2]
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	200004dc 	.word	0x200004dc

08005a4c <SSD1306_Putc>:

char SSD1306_Putc(uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	6039      	str	r1, [r7, #0]
 8005a56:	71fb      	strb	r3, [r7, #7]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005a5c:	4b3a      	ldr	r3, [pc, #232]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	4413      	add	r3, r2
	if (
 8005a68:	2b82      	cmp	r3, #130	; 0x82
 8005a6a:	dc07      	bgt.n	8005a7c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005a6c:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005a6e:	885b      	ldrh	r3, [r3, #2]
 8005a70:	461a      	mov	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005a78:	2b3f      	cmp	r3, #63	; 0x3f
 8005a7a:	dd01      	ble.n	8005a80 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e05e      	b.n	8005b3e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e04b      	b.n	8005b1e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	3b20      	subs	r3, #32
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	7849      	ldrb	r1, [r1, #1]
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	4619      	mov	r1, r3
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	440b      	add	r3, r1
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	e030      	b.n	8005b0c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d010      	beq.n	8005adc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005aba:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005abc:	881a      	ldrh	r2, [r3, #0]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	b298      	uxth	r0, r3
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005ac8:	885a      	ldrh	r2, [r3, #2]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	79ba      	ldrb	r2, [r7, #6]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f7ff ff35 	bl	8005944 <SSD1306_DrawPixel>
 8005ada:	e014      	b.n	8005b06 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005adc:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	b298      	uxth	r0, r3
 8005ae8:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005aea:	885a      	ldrh	r2, [r3, #2]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	b299      	uxth	r1, r3
 8005af4:	79bb      	ldrb	r3, [r7, #6]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf0c      	ite	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	2300      	movne	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	f7ff ff1f 	bl	8005944 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d3c8      	bcc.n	8005aaa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	461a      	mov	r2, r3
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d3ad      	bcc.n	8005a86 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8005b2a:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005b2c:	881a      	ldrh	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <SSD1306_Putc+0xfc>)
 8005b3a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200004dc 	.word	0x200004dc
 8005b4c:	00000000 	.word	0x00000000

08005b50 <double_str>:
	SSD1306_GotoXY (x_slot+11,y_slot);
	SSD1306_Puts (data_char, &Font_11x18, 1);
//	SSD1306_UpdateScreen();
}

char* double_str(double data, uint8_t decimales){
 8005b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b54:	b095      	sub	sp, #84	; 0x54
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	ed87 0b02 	vstr	d0, [r7, #8]
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	71fb      	strb	r3, [r7, #7]
 8005b60:	466b      	mov	r3, sp
 8005b62:	461e      	mov	r6, r3
	char negativo = ' ';
 8005b64:	2320      	movs	r3, #32
 8005b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (data < 0) {
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b76:	f7fa ffa9 	bl	8000acc <__aeabi_dcmplt>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <double_str+0x42>
		data = -data;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b8a:	60fb      	str	r3, [r7, #12]
		negativo = '-';
 8005b8c:	232d      	movs	r3, #45	; 0x2d
 8005b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	int potencia_10 = pow(10, decimales);
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fa fcad 	bl	80004f4 <__aeabi_ui2d>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	ec44 3b11 	vmov	d1, r3, r4
 8005ba2:	ed9f 0b99 	vldr	d0, [pc, #612]	; 8005e08 <double_str+0x2b8>
 8005ba6:	f001 fa77 	bl	8007098 <pow>
 8005baa:	ec54 3b10 	vmov	r3, r4, d0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	f7fa ffc9 	bl	8000b48 <__aeabi_d2iz>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	643b      	str	r3, [r7, #64]	; 0x40
	double p_entera_f = trunc(data);
 8005bba:	ed97 0b02 	vldr	d0, [r7, #8]
 8005bbe:	f001 f9b1 	bl	8006f24 <trunc>
 8005bc2:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double p_decimal_f = data*potencia_10 - p_entera_f*potencia_10;
 8005bc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005bc8:	f7fa fca4 	bl	8000514 <__aeabi_i2d>
 8005bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd0:	f7fa fd0a 	bl	80005e8 <__aeabi_dmul>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	4625      	mov	r5, r4
 8005bda:	461c      	mov	r4, r3
 8005bdc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005bde:	f7fa fc99 	bl	8000514 <__aeabi_i2d>
 8005be2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005be6:	f7fa fcff 	bl	80005e8 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa fb41 	bl	8000278 <__aeabi_dsub>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int p_entera = p_entera_f;
 8005bfe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005c02:	f7fa ffa1 	bl	8000b48 <__aeabi_d2iz>
 8005c06:	4603      	mov	r3, r0
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	int p_decimal = p_decimal_f;
 8005c0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005c0e:	f7fa ff9b 	bl	8000b48 <__aeabi_d2iz>
 8005c12:	4603      	mov	r3, r0
 8005c14:	64bb      	str	r3, [r7, #72]	; 0x48

	int size = size_int(p_entera);
 8005c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c18:	f7ff fd08 	bl	800562c <size_int>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	char p_entera_char[size];		// String de chars
 8005c20:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8005c22:	1e6b      	subs	r3, r5, #1
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	462b      	mov	r3, r5
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	f04f 0400 	mov.w	r4, #0
 8005c36:	00d4      	lsls	r4, r2, #3
 8005c38:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005c3c:	00cb      	lsls	r3, r1, #3
 8005c3e:	462b      	mov	r3, r5
 8005c40:	4619      	mov	r1, r3
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	f04f 0400 	mov.w	r4, #0
 8005c4e:	00d4      	lsls	r4, r2, #3
 8005c50:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005c54:	00cb      	lsls	r3, r1, #3
 8005c56:	462b      	mov	r3, r5
 8005c58:	3307      	adds	r3, #7
 8005c5a:	08db      	lsrs	r3, r3, #3
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	ebad 0d03 	sub.w	sp, sp, r3
 8005c62:	466b      	mov	r3, sp
 8005c64:	3300      	adds	r3, #0
 8005c66:	623b      	str	r3, [r7, #32]
	sprintf(p_entera_char,"%d", p_entera);	// Cada numero del int en un char
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6c:	4968      	ldr	r1, [pc, #416]	; (8005e10 <double_str+0x2c0>)
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fc8e 	bl	8006590 <siprintf>

	char p_decimal_char[decimales];
 8005c74:	79f8      	ldrb	r0, [r7, #7]
 8005c76:	4603      	mov	r3, r0
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	b2c1      	uxtb	r1, r0
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	f04f 0400 	mov.w	r4, #0
 8005c8a:	00d4      	lsls	r4, r2, #3
 8005c8c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005c90:	00cb      	lsls	r3, r1, #3
 8005c92:	b2c1      	uxtb	r1, r0
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	f04f 0400 	mov.w	r4, #0
 8005ca0:	00d4      	lsls	r4, r2, #3
 8005ca2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005ca6:	00cb      	lsls	r3, r1, #3
 8005ca8:	4603      	mov	r3, r0
 8005caa:	3307      	adds	r3, #7
 8005cac:	08db      	lsrs	r3, r3, #3
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	ebad 0d03 	sub.w	sp, sp, r3
 8005cb4:	466b      	mov	r3, sp
 8005cb6:	3300      	adds	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
	size = size_int(p_decimal);
 8005cba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005cbc:	f7ff fcb6 	bl	800562c <size_int>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (decimales>size){
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	da21      	bge.n	8005d10 <double_str+0x1c0>
		p_decimal = p_decimal + pow(10,decimales-1);
 8005ccc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005cce:	f7fa fc21 	bl	8000514 <__aeabi_i2d>
 8005cd2:	4680      	mov	r8, r0
 8005cd4:	4689      	mov	r9, r1
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fa fc1a 	bl	8000514 <__aeabi_i2d>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	ec44 3b11 	vmov	d1, r3, r4
 8005ce8:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8005e08 <double_str+0x2b8>
 8005cec:	f001 f9d4 	bl	8007098 <pow>
 8005cf0:	ec54 3b10 	vmov	r3, r4, d0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	f7fa fabe 	bl	800027c <__adddf3>
 8005d00:	4603      	mov	r3, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	4618      	mov	r0, r3
 8005d06:	4621      	mov	r1, r4
 8005d08:	f7fa ff1e 	bl	8000b48 <__aeabi_d2iz>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	sprintf(p_decimal_char,"%d", p_decimal);
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d14:	493e      	ldr	r1, [pc, #248]	; (8005e10 <double_str+0x2c0>)
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fc3a 	bl	8006590 <siprintf>
	for(uint8_t i=0; i<(decimales-size);i++){
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005d22:	e009      	b.n	8005d38 <double_str+0x1e8>
		p_decimal_char[i] = '0';
 8005d24:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	2130      	movs	r1, #48	; 0x30
 8005d2c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<(decimales-size);i++){
 8005d2e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005d32:	3301      	adds	r3, #1
 8005d34:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005d38:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8005d3c:	79f9      	ldrb	r1, [r7, #7]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	1acb      	subs	r3, r1, r3
 8005d42:	429a      	cmp	r2, r3
 8005d44:	dbee      	blt.n	8005d24 <double_str+0x1d4>
	}

	uint8_t total_size = sizeof(p_entera_char)+decimales+2;
 8005d46:	b2ea      	uxtb	r2, r5
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	3302      	adds	r3, #2
 8005d50:	75fb      	strb	r3, [r7, #23]
	static char float_str[10];

	for(uint8_t i= 0; i<11; i++){
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005d58:	e04b      	b.n	8005df2 <double_str+0x2a2>
		if (i==0){
 8005d5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <double_str+0x220>
			float_str[i] = negativo;
 8005d62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d66:	492b      	ldr	r1, [pc, #172]	; (8005e14 <double_str+0x2c4>)
 8005d68:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005d6c:	54ca      	strb	r2, [r1, r3]
 8005d6e:	e03b      	b.n	8005de8 <double_str+0x298>
		} else if((i>0) && (i<sizeof(p_entera_char)+1)){
 8005d70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00f      	beq.n	8005d98 <double_str+0x248>
 8005d78:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005d7c:	462b      	mov	r3, r5
 8005d7e:	3301      	adds	r3, #1
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d209      	bcs.n	8005d98 <double_str+0x248>
			float_str[i] = p_entera_char[i-1];
 8005d84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d88:	1e5a      	subs	r2, r3, #1
 8005d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d8e:	6a39      	ldr	r1, [r7, #32]
 8005d90:	5c89      	ldrb	r1, [r1, r2]
 8005d92:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <double_str+0x2c4>)
 8005d94:	54d1      	strb	r1, [r2, r3]
 8005d96:	e027      	b.n	8005de8 <double_str+0x298>
		} else if (i == sizeof(p_entera_char)+1){
 8005d98:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005d9c:	462b      	mov	r3, r5
 8005d9e:	3301      	adds	r3, #1
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d105      	bne.n	8005db0 <double_str+0x260>
			float_str[i] = '.';
 8005da4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005da8:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <double_str+0x2c4>)
 8005daa:	212e      	movs	r1, #46	; 0x2e
 8005dac:	54d1      	strb	r1, [r2, r3]
 8005dae:	e01b      	b.n	8005de8 <double_str+0x298>
		} else if ((i> sizeof(p_entera_char)+1) && (i<total_size)){
 8005db0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005db4:	462b      	mov	r3, r5
 8005db6:	3301      	adds	r3, #1
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d910      	bls.n	8005dde <double_str+0x28e>
 8005dbc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d20b      	bcs.n	8005dde <double_str+0x28e>
			float_str[i] = p_decimal_char[i-(sizeof(p_entera_char)+2)];
 8005dc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005dca:	462a      	mov	r2, r5
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	1e9a      	subs	r2, r3, #2
 8005dd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	5c89      	ldrb	r1, [r1, r2]
 8005dd8:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <double_str+0x2c4>)
 8005dda:	54d1      	strb	r1, [r2, r3]
 8005ddc:	e004      	b.n	8005de8 <double_str+0x298>
		} else {float_str[i] = ' ';}
 8005dde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005de2:	4a0c      	ldr	r2, [pc, #48]	; (8005e14 <double_str+0x2c4>)
 8005de4:	2120      	movs	r1, #32
 8005de6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i= 0; i<11; i++){
 8005de8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005dec:	3301      	adds	r3, #1
 8005dee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005df2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005df6:	2b0a      	cmp	r3, #10
 8005df8:	d9af      	bls.n	8005d5a <double_str+0x20a>
	}
	return float_str;
 8005dfa:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <double_str+0x2c4>)
 8005dfc:	46b5      	mov	sp, r6
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3754      	adds	r7, #84	; 0x54
 8005e02:	46bd      	mov	sp, r7
 8005e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e08:	00000000 	.word	0x00000000
 8005e0c:	40240000 	.word	0x40240000
 8005e10:	080085e0 	.word	0x080085e0
 8005e14:	200004e4 	.word	0x200004e4

08005e18 <SSD1306_Putdouble>:

void SSD1306_Putdouble(float data, uint8_t decimales, uint8_t slot) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e22:	4603      	mov	r3, r0
 8005e24:	460a      	mov	r2, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	70bb      	strb	r3, [r7, #2]
	char* float_str = double_str(data, decimales);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7fa fb83 	bl	8000538 <__aeabi_f2d>
 8005e32:	460a      	mov	r2, r1
 8005e34:	4601      	mov	r1, r0
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	ec42 1b10 	vmov	d0, r1, r2
 8005e3e:	f7ff fe87 	bl	8005b50 <double_str>
 8005e42:	60f8      	str	r0, [r7, #12]

	uint16_t x_slot = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	82fb      	strh	r3, [r7, #22]
	uint16_t y_slot = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	82bb      	strh	r3, [r7, #20]
	uint8_t slot_mini = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	74fb      	strb	r3, [r7, #19]
	switch (slot) {
 8005e50:	78bb      	ldrb	r3, [r7, #2]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d82a      	bhi.n	8005eae <SSD1306_Putdouble+0x96>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <SSD1306_Putdouble+0x48>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e75 	.word	0x08005e75
 8005e64:	08005e7f 	.word	0x08005e7f
 8005e68:	08005e89 	.word	0x08005e89
 8005e6c:	08005e93 	.word	0x08005e93
 8005e70:	08005ea1 	.word	0x08005ea1
	case 1:
		x_slot = 2;
 8005e74:	2302      	movs	r3, #2
 8005e76:	82fb      	strh	r3, [r7, #22]
		y_slot = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	82bb      	strh	r3, [r7, #20]
		break;
 8005e7c:	e017      	b.n	8005eae <SSD1306_Putdouble+0x96>
	case 2:
		x_slot = 2;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	82fb      	strh	r3, [r7, #22]
		y_slot = 17;
 8005e82:	2311      	movs	r3, #17
 8005e84:	82bb      	strh	r3, [r7, #20]
		break;
 8005e86:	e012      	b.n	8005eae <SSD1306_Putdouble+0x96>
	case 3:
		x_slot = 2;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	82fb      	strh	r3, [r7, #22]
		y_slot = 35;
 8005e8c:	2323      	movs	r3, #35	; 0x23
 8005e8e:	82bb      	strh	r3, [r7, #20]
		break;
 8005e90:	e00d      	b.n	8005eae <SSD1306_Putdouble+0x96>
	case 4:
		x_slot = 2;
 8005e92:	2302      	movs	r3, #2
 8005e94:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 8005e96:	2335      	movs	r3, #53	; 0x35
 8005e98:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	74fb      	strb	r3, [r7, #19]
		break;
 8005e9e:	e006      	b.n	8005eae <SSD1306_Putdouble+0x96>
	case 5:
		x_slot = 60;
 8005ea0:	233c      	movs	r3, #60	; 0x3c
 8005ea2:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 8005ea4:	2335      	movs	r3, #53	; 0x35
 8005ea6:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	74fb      	strb	r3, [r7, #19]
		break;
 8005eac:	bf00      	nop
	}
	if (slot_mini == 1){
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d116      	bne.n	8005ee2 <SSD1306_Putdouble+0xca>
		SSD1306_GotoXY (x_slot,y_slot);				// Select x and y from the selected slot
 8005eb4:	8aba      	ldrh	r2, [r7, #20]
 8005eb6:	8afb      	ldrh	r3, [r7, #22]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fdb0 	bl	8005a20 <SSD1306_GotoXY>
		SSD1306_Puts ("       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4914      	ldr	r1, [pc, #80]	; (8005f14 <SSD1306_Putdouble+0xfc>)
 8005ec4:	4814      	ldr	r0, [pc, #80]	; (8005f18 <SSD1306_Putdouble+0x100>)
 8005ec6:	f000 f82d 	bl	8005f24 <SSD1306_Puts>
		SSD1306_GotoXY (x_slot,y_slot);				// Come back to the initial position
 8005eca:	8aba      	ldrh	r2, [r7, #20]
 8005ecc:	8afb      	ldrh	r3, [r7, #22]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fda5 	bl	8005a20 <SSD1306_GotoXY>
		SSD1306_Puts (float_str, &Font_7x10, 1);	// Write the value
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	490e      	ldr	r1, [pc, #56]	; (8005f14 <SSD1306_Putdouble+0xfc>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f822 	bl	8005f24 <SSD1306_Puts>
//		SSD1306_UpdateScreen();						// Update the screen
		return;
 8005ee0:	e015      	b.n	8005f0e <SSD1306_Putdouble+0xf6>
	}
	SSD1306_GotoXY (x_slot,y_slot);
 8005ee2:	8aba      	ldrh	r2, [r7, #20]
 8005ee4:	8afb      	ldrh	r3, [r7, #22]
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fd99 	bl	8005a20 <SSD1306_GotoXY>
	SSD1306_Puts ("         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	490a      	ldr	r1, [pc, #40]	; (8005f1c <SSD1306_Putdouble+0x104>)
 8005ef2:	480b      	ldr	r0, [pc, #44]	; (8005f20 <SSD1306_Putdouble+0x108>)
 8005ef4:	f000 f816 	bl	8005f24 <SSD1306_Puts>
	SSD1306_GotoXY (x_slot,y_slot);
 8005ef8:	8aba      	ldrh	r2, [r7, #20]
 8005efa:	8afb      	ldrh	r3, [r7, #22]
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fd8e 	bl	8005a20 <SSD1306_GotoXY>
	SSD1306_Puts (float_str, &Font_11x18, 1);
 8005f04:	2201      	movs	r2, #1
 8005f06:	4905      	ldr	r1, [pc, #20]	; (8005f1c <SSD1306_Putdouble+0x104>)
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f80b 	bl	8005f24 <SSD1306_Puts>
//	SSD1306_UpdateScreen();
}
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000008 	.word	0x20000008
 8005f18:	080085e4 	.word	0x080085e4
 8005f1c:	20000010 	.word	0x20000010
 8005f20:	080085ec 	.word	0x080085ec

08005f24 <SSD1306_Puts>:



char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005f32:	e012      	b.n	8005f5a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	79fa      	ldrb	r2, [r7, #7]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fd85 	bl	8005a4c <SSD1306_Putc>
 8005f42:	4603      	mov	r3, r0
 8005f44:	461a      	mov	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d002      	beq.n	8005f54 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	e008      	b.n	8005f66 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e8      	bne.n	8005f34 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	781b      	ldrb	r3, [r3, #0]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <ssd1306_sel_I2C>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_sel_I2C(I2C_HandleTypeDef *hi2c) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	hi2c_current = *hi2c;
 8005f78:	4a05      	ldr	r2, [pc, #20]	; (8005f90 <ssd1306_sel_I2C+0x20>)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4619      	mov	r1, r3
 8005f80:	234c      	movs	r3, #76	; 0x4c
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 faf0 	bl	8006568 <memcpy>
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000834 	.word	0x20000834

08005f94 <ssd1306_I2C_WriteMulti>:
//	//while(p>0)
//	//	p--;
//	//MX_I2C1_Init();
//}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8005f94:	b5b0      	push	{r4, r5, r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	603a      	str	r2, [r7, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	71bb      	strb	r3, [r7, #6]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80bb      	strh	r3, [r7, #4]
 8005faa:	466b      	mov	r3, sp
 8005fac:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8005fae:	88bb      	ldrh	r3, [r7, #4]
 8005fb0:	1c58      	adds	r0, r3, #1
 8005fb2:	1e43      	subs	r3, r0, #1
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	00d4      	lsls	r4, r2, #3
 8005fc8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005fcc:	00cb      	lsls	r3, r1, #3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	f04f 0400 	mov.w	r4, #0
 8005fde:	00d4      	lsls	r4, r2, #3
 8005fe0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005fe4:	00cb      	lsls	r3, r1, #3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	3307      	adds	r3, #7
 8005fea:	08db      	lsrs	r3, r3, #3
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	ebad 0d03 	sub.w	sp, sp, r3
 8005ff2:	ab02      	add	r3, sp, #8
 8005ff4:	3300      	adds	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	79ba      	ldrb	r2, [r7, #6]
 8005ffc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
 8006002:	e00a      	b.n	800601a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	3b01      	subs	r3, #1
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	441a      	add	r2, r3
 800600c:	7dfb      	ldrb	r3, [r7, #23]
 800600e:	7811      	ldrb	r1, [r2, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	3301      	adds	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	b29b      	uxth	r3, r3
 800601e:	88ba      	ldrh	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d2ef      	bcs.n	8006004 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, count, 10);
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	b299      	uxth	r1, r3
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	88b8      	ldrh	r0, [r7, #4]
 800602c:	230a      	movs	r3, #10
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	4603      	mov	r3, r0
 8006032:	4804      	ldr	r0, [pc, #16]	; (8006044 <ssd1306_I2C_WriteMulti+0xb0>)
 8006034:	f7fc fa90 	bl	8002558 <HAL_I2C_Master_Transmit>
 8006038:	46ad      	mov	sp, r5
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bdb0      	pop	{r4, r5, r7, pc}
 8006042:	bf00      	nop
 8006044:	20000834 	.word	0x20000834

08006048 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af02      	add	r7, sp, #8
 800604e:	4603      	mov	r3, r0
 8006050:	71fb      	strb	r3, [r7, #7]
 8006052:	460b      	mov	r3, r1
 8006054:	71bb      	strb	r3, [r7, #6]
 8006056:	4613      	mov	r3, r2
 8006058:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800605a:	79bb      	ldrb	r3, [r7, #6]
 800605c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800605e:	797b      	ldrb	r3, [r7, #5]
 8006060:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, 2, 10);
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	b299      	uxth	r1, r3
 8006066:	f107 020c 	add.w	r2, r7, #12
 800606a:	230a      	movs	r3, #10
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	2302      	movs	r3, #2
 8006070:	4803      	ldr	r0, [pc, #12]	; (8006080 <ssd1306_I2C_Write+0x38>)
 8006072:	f7fc fa71 	bl	8002558 <HAL_I2C_Master_Transmit>
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000834 	.word	0x20000834

08006084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_MspInit+0x44>)
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	4a0e      	ldr	r2, [pc, #56]	; (80060c8 <HAL_MspInit+0x44>)
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	6193      	str	r3, [r2, #24]
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <HAL_MspInit+0x44>)
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_MspInit+0x44>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <HAL_MspInit+0x44>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ac:	61d3      	str	r3, [r2, #28]
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <HAL_MspInit+0x44>)
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40021000 	.word	0x40021000

080060cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d4:	f107 0314 	add.w	r3, r7, #20
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ec:	d124      	bne.n	8006138 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80060ee:	4b14      	ldr	r3, [pc, #80]	; (8006140 <HAL_ADC_MspInit+0x74>)
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	4a13      	ldr	r2, [pc, #76]	; (8006140 <HAL_ADC_MspInit+0x74>)
 80060f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f8:	6153      	str	r3, [r2, #20]
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <HAL_ADC_MspInit+0x74>)
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_ADC_MspInit+0x74>)
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <HAL_ADC_MspInit+0x74>)
 800610c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006110:	6153      	str	r3, [r2, #20]
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_ADC_MspInit+0x74>)
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800611e:	2301      	movs	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006122:	2303      	movs	r3, #3
 8006124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800612a:	f107 0314 	add.w	r3, r7, #20
 800612e:	4619      	mov	r1, r3
 8006130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006134:	f7fb ffe0 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006138:	bf00      	nop
 800613a:	3728      	adds	r7, #40	; 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40021000 	.word	0x40021000

08006144 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800614c:	f107 0314 	add.w	r3, r7, #20
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <HAL_DAC_MspInit+0x74>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d124      	bne.n	80061b0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006166:	4b15      	ldr	r3, [pc, #84]	; (80061bc <HAL_DAC_MspInit+0x78>)
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	4a14      	ldr	r2, [pc, #80]	; (80061bc <HAL_DAC_MspInit+0x78>)
 800616c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006170:	61d3      	str	r3, [r2, #28]
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <HAL_DAC_MspInit+0x78>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <HAL_DAC_MspInit+0x78>)
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <HAL_DAC_MspInit+0x78>)
 8006184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006188:	6153      	str	r3, [r2, #20]
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <HAL_DAC_MspInit+0x78>)
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006196:	2310      	movs	r3, #16
 8006198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800619a:	2303      	movs	r3, #3
 800619c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	4619      	mov	r1, r3
 80061a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061ac:	f7fb ffa4 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80061b0:	bf00      	nop
 80061b2:	3728      	adds	r7, #40	; 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40007400 	.word	0x40007400
 80061bc:	40021000 	.word	0x40021000

080061c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c8:	f107 0314 	add.w	r3, r7, #20
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a17      	ldr	r2, [pc, #92]	; (800623c <HAL_I2C_MspInit+0x7c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d127      	bne.n	8006232 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <HAL_I2C_MspInit+0x80>)
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	4a16      	ldr	r2, [pc, #88]	; (8006240 <HAL_I2C_MspInit+0x80>)
 80061e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ec:	6153      	str	r3, [r2, #20]
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <HAL_I2C_MspInit+0x80>)
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061fa:	23c0      	movs	r3, #192	; 0xc0
 80061fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80061fe:	2312      	movs	r3, #18
 8006200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006202:	2301      	movs	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006206:	2303      	movs	r3, #3
 8006208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800620a:	2304      	movs	r3, #4
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800620e:	f107 0314 	add.w	r3, r7, #20
 8006212:	4619      	mov	r1, r3
 8006214:	480b      	ldr	r0, [pc, #44]	; (8006244 <HAL_I2C_MspInit+0x84>)
 8006216:	f7fb ff6f 	bl	80020f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <HAL_I2C_MspInit+0x80>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	4a08      	ldr	r2, [pc, #32]	; (8006240 <HAL_I2C_MspInit+0x80>)
 8006220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006224:	61d3      	str	r3, [r2, #28]
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <HAL_I2C_MspInit+0x80>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006232:	bf00      	nop
 8006234:	3728      	adds	r7, #40	; 0x28
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40005400 	.word	0x40005400
 8006240:	40021000 	.word	0x40021000
 8006244:	48000400 	.word	0x48000400

08006248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006258:	d114      	bne.n	8006284 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800625a:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <HAL_TIM_Base_MspInit+0x78>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <HAL_TIM_Base_MspInit+0x78>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	61d3      	str	r3, [r2, #28]
 8006266:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <HAL_TIM_Base_MspInit+0x78>)
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006272:	2200      	movs	r2, #0
 8006274:	2100      	movs	r1, #0
 8006276:	201c      	movs	r0, #28
 8006278:	f7fb fe7d 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800627c:	201c      	movs	r0, #28
 800627e:	f7fb fe96 	bl	8001fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006282:	e018      	b.n	80062b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <HAL_TIM_Base_MspInit+0x7c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d113      	bne.n	80062b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <HAL_TIM_Base_MspInit+0x78>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4a0b      	ldr	r2, [pc, #44]	; (80062c0 <HAL_TIM_Base_MspInit+0x78>)
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	61d3      	str	r3, [r2, #28]
 800629a:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <HAL_TIM_Base_MspInit+0x78>)
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80062a6:	2200      	movs	r2, #0
 80062a8:	2100      	movs	r1, #0
 80062aa:	201d      	movs	r0, #29
 80062ac:	f7fb fe63 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80062b0:	201d      	movs	r0, #29
 80062b2:	f7fb fe7c 	bl	8001fae <HAL_NVIC_EnableIRQ>
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40000400 	.word	0x40000400

080062c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d0:	f107 0314 	add.w	r3, r7, #20
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_UART_MspInit+0x80>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d129      	bne.n	800633e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80062ea:	4b18      	ldr	r3, [pc, #96]	; (800634c <HAL_UART_MspInit+0x84>)
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	4a17      	ldr	r2, [pc, #92]	; (800634c <HAL_UART_MspInit+0x84>)
 80062f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f4:	61d3      	str	r3, [r2, #28]
 80062f6:	4b15      	ldr	r3, [pc, #84]	; (800634c <HAL_UART_MspInit+0x84>)
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <HAL_UART_MspInit+0x84>)
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	4a11      	ldr	r2, [pc, #68]	; (800634c <HAL_UART_MspInit+0x84>)
 8006308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630c:	6153      	str	r3, [r2, #20]
 800630e:	4b0f      	ldr	r3, [pc, #60]	; (800634c <HAL_UART_MspInit+0x84>)
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800631a:	f248 0304 	movw	r3, #32772	; 0x8004
 800631e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006320:	2302      	movs	r3, #2
 8006322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006328:	2303      	movs	r3, #3
 800632a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800632c:	2307      	movs	r3, #7
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	4619      	mov	r1, r3
 8006336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800633a:	f7fb fedd 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800633e:	bf00      	nop
 8006340:	3728      	adds	r7, #40	; 0x28
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40004400 	.word	0x40004400
 800634c:	40021000 	.word	0x40021000

08006350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006362:	e7fe      	b.n	8006362 <HardFault_Handler+0x4>

08006364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006368:	e7fe      	b.n	8006368 <MemManage_Handler+0x4>

0800636a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800636a:	b480      	push	{r7}
 800636c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800636e:	e7fe      	b.n	800636e <BusFault_Handler+0x4>

08006370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006374:	e7fe      	b.n	8006374 <UsageFault_Handler+0x4>

08006376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006392:	b480      	push	{r7}
 8006394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006396:	bf00      	nop
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063a4:	f7fa fcae 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063a8:	bf00      	nop
 80063aa:	bd80      	pop	{r7, pc}

080063ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80063b0:	4802      	ldr	r0, [pc, #8]	; (80063bc <TIM2_IRQHandler+0x10>)
 80063b2:	f7fd ff3f 	bl	8004234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000784 	.word	0x20000784

080063c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80063c4:	4802      	ldr	r0, [pc, #8]	; (80063d0 <TIM3_IRQHandler+0x10>)
 80063c6:	f7fd ff35 	bl	8004234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200006f0 	.word	0x200006f0

080063d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80063dc:	4b11      	ldr	r3, [pc, #68]	; (8006424 <_sbrk+0x50>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <_sbrk+0x16>
		heap_end = &end;
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <_sbrk+0x50>)
 80063e6:	4a10      	ldr	r2, [pc, #64]	; (8006428 <_sbrk+0x54>)
 80063e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <_sbrk+0x50>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <_sbrk+0x50>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	466a      	mov	r2, sp
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d907      	bls.n	800640e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80063fe:	f000 f889 	bl	8006514 <__errno>
 8006402:	4602      	mov	r2, r0
 8006404:	230c      	movs	r3, #12
 8006406:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	e006      	b.n	800641c <_sbrk+0x48>
	}

	heap_end += incr;
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <_sbrk+0x50>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	4a03      	ldr	r2, [pc, #12]	; (8006424 <_sbrk+0x50>)
 8006418:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800641a:	68fb      	ldr	r3, [r7, #12]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	200004f0 	.word	0x200004f0
 8006428:	20000888 	.word	0x20000888

0800642c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006430:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <SystemInit+0x84>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006436:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <SystemInit+0x84>)
 8006438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800643c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006440:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <SystemInit+0x88>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <SystemInit+0x88>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800644c:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <SystemInit+0x88>)
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	4918      	ldr	r1, [pc, #96]	; (80064b4 <SystemInit+0x88>)
 8006452:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <SystemInit+0x8c>)
 8006454:	4013      	ands	r3, r2
 8006456:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <SystemInit+0x88>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <SystemInit+0x88>)
 800645e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006466:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006468:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <SystemInit+0x88>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a11      	ldr	r2, [pc, #68]	; (80064b4 <SystemInit+0x88>)
 800646e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006472:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006474:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <SystemInit+0x88>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a0e      	ldr	r2, [pc, #56]	; (80064b4 <SystemInit+0x88>)
 800647a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800647e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8006480:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <SystemInit+0x88>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a0b      	ldr	r2, [pc, #44]	; (80064b4 <SystemInit+0x88>)
 8006486:	f023 030f 	bic.w	r3, r3, #15
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <SystemInit+0x88>)
 800648e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006490:	4908      	ldr	r1, [pc, #32]	; (80064b4 <SystemInit+0x88>)
 8006492:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <SystemInit+0x90>)
 8006494:	4013      	ands	r3, r2
 8006496:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <SystemInit+0x88>)
 800649a:	2200      	movs	r2, #0
 800649c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <SystemInit+0x84>)
 80064a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064a4:	609a      	str	r2, [r3, #8]
#endif
}
 80064a6:	bf00      	nop
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	e000ed00 	.word	0xe000ed00
 80064b4:	40021000 	.word	0x40021000
 80064b8:	f87fc00c 	.word	0xf87fc00c
 80064bc:	ff00fccc 	.word	0xff00fccc

080064c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80064c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80064c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80064c6:	e003      	b.n	80064d0 <LoopCopyDataInit>

080064c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80064ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80064cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80064ce:	3104      	adds	r1, #4

080064d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80064d0:	480b      	ldr	r0, [pc, #44]	; (8006500 <LoopForever+0xa>)
	ldr	r3, =_edata
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <LoopForever+0xe>)
	adds	r2, r0, r1
 80064d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80064d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80064d8:	d3f6      	bcc.n	80064c8 <CopyDataInit>
	ldr	r2, =_sbss
 80064da:	4a0b      	ldr	r2, [pc, #44]	; (8006508 <LoopForever+0x12>)
	b	LoopFillZerobss
 80064dc:	e002      	b.n	80064e4 <LoopFillZerobss>

080064de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80064de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80064e0:	f842 3b04 	str.w	r3, [r2], #4

080064e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <LoopForever+0x16>)
	cmp	r2, r3
 80064e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80064e8:	d3f9      	bcc.n	80064de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064ea:	f7ff ff9f 	bl	800642c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ee:	f000 f817 	bl	8006520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064f2:	f7fe fd47 	bl	8004f84 <main>

080064f6 <LoopForever>:

LoopForever:
    b LoopForever
 80064f6:	e7fe      	b.n	80064f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80064f8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80064fc:	08009b80 	.word	0x08009b80
	ldr	r0, =_sdata
 8006500:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006504:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8006508:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 800650c:	20000888 	.word	0x20000888

08006510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006510:	e7fe      	b.n	8006510 <ADC1_2_IRQHandler>
	...

08006514 <__errno>:
 8006514:	4b01      	ldr	r3, [pc, #4]	; (800651c <__errno+0x8>)
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	2000001c 	.word	0x2000001c

08006520 <__libc_init_array>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4e0d      	ldr	r6, [pc, #52]	; (8006558 <__libc_init_array+0x38>)
 8006524:	4c0d      	ldr	r4, [pc, #52]	; (800655c <__libc_init_array+0x3c>)
 8006526:	1ba4      	subs	r4, r4, r6
 8006528:	10a4      	asrs	r4, r4, #2
 800652a:	2500      	movs	r5, #0
 800652c:	42a5      	cmp	r5, r4
 800652e:	d109      	bne.n	8006544 <__libc_init_array+0x24>
 8006530:	4e0b      	ldr	r6, [pc, #44]	; (8006560 <__libc_init_array+0x40>)
 8006532:	4c0c      	ldr	r4, [pc, #48]	; (8006564 <__libc_init_array+0x44>)
 8006534:	f002 f846 	bl	80085c4 <_init>
 8006538:	1ba4      	subs	r4, r4, r6
 800653a:	10a4      	asrs	r4, r4, #2
 800653c:	2500      	movs	r5, #0
 800653e:	42a5      	cmp	r5, r4
 8006540:	d105      	bne.n	800654e <__libc_init_array+0x2e>
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006548:	4798      	blx	r3
 800654a:	3501      	adds	r5, #1
 800654c:	e7ee      	b.n	800652c <__libc_init_array+0xc>
 800654e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006552:	4798      	blx	r3
 8006554:	3501      	adds	r5, #1
 8006556:	e7f2      	b.n	800653e <__libc_init_array+0x1e>
 8006558:	08009b78 	.word	0x08009b78
 800655c:	08009b78 	.word	0x08009b78
 8006560:	08009b78 	.word	0x08009b78
 8006564:	08009b7c 	.word	0x08009b7c

08006568 <memcpy>:
 8006568:	b510      	push	{r4, lr}
 800656a:	1e43      	subs	r3, r0, #1
 800656c:	440a      	add	r2, r1
 800656e:	4291      	cmp	r1, r2
 8006570:	d100      	bne.n	8006574 <memcpy+0xc>
 8006572:	bd10      	pop	{r4, pc}
 8006574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800657c:	e7f7      	b.n	800656e <memcpy+0x6>

0800657e <memset>:
 800657e:	4402      	add	r2, r0
 8006580:	4603      	mov	r3, r0
 8006582:	4293      	cmp	r3, r2
 8006584:	d100      	bne.n	8006588 <memset+0xa>
 8006586:	4770      	bx	lr
 8006588:	f803 1b01 	strb.w	r1, [r3], #1
 800658c:	e7f9      	b.n	8006582 <memset+0x4>
	...

08006590 <siprintf>:
 8006590:	b40e      	push	{r1, r2, r3}
 8006592:	b500      	push	{lr}
 8006594:	b09c      	sub	sp, #112	; 0x70
 8006596:	ab1d      	add	r3, sp, #116	; 0x74
 8006598:	9002      	str	r0, [sp, #8]
 800659a:	9006      	str	r0, [sp, #24]
 800659c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065a0:	4809      	ldr	r0, [pc, #36]	; (80065c8 <siprintf+0x38>)
 80065a2:	9107      	str	r1, [sp, #28]
 80065a4:	9104      	str	r1, [sp, #16]
 80065a6:	4909      	ldr	r1, [pc, #36]	; (80065cc <siprintf+0x3c>)
 80065a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ac:	9105      	str	r1, [sp, #20]
 80065ae:	6800      	ldr	r0, [r0, #0]
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	a902      	add	r1, sp, #8
 80065b4:	f000 f866 	bl	8006684 <_svfiprintf_r>
 80065b8:	9b02      	ldr	r3, [sp, #8]
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	b01c      	add	sp, #112	; 0x70
 80065c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c4:	b003      	add	sp, #12
 80065c6:	4770      	bx	lr
 80065c8:	2000001c 	.word	0x2000001c
 80065cc:	ffff0208 	.word	0xffff0208

080065d0 <__ssputs_r>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	688e      	ldr	r6, [r1, #8]
 80065d6:	429e      	cmp	r6, r3
 80065d8:	4682      	mov	sl, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	4690      	mov	r8, r2
 80065de:	4699      	mov	r9, r3
 80065e0:	d837      	bhi.n	8006652 <__ssputs_r+0x82>
 80065e2:	898a      	ldrh	r2, [r1, #12]
 80065e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065e8:	d031      	beq.n	800664e <__ssputs_r+0x7e>
 80065ea:	6825      	ldr	r5, [r4, #0]
 80065ec:	6909      	ldr	r1, [r1, #16]
 80065ee:	1a6f      	subs	r7, r5, r1
 80065f0:	6965      	ldr	r5, [r4, #20]
 80065f2:	2302      	movs	r3, #2
 80065f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80065fc:	f109 0301 	add.w	r3, r9, #1
 8006600:	443b      	add	r3, r7
 8006602:	429d      	cmp	r5, r3
 8006604:	bf38      	it	cc
 8006606:	461d      	movcc	r5, r3
 8006608:	0553      	lsls	r3, r2, #21
 800660a:	d530      	bpl.n	800666e <__ssputs_r+0x9e>
 800660c:	4629      	mov	r1, r5
 800660e:	f000 fb21 	bl	8006c54 <_malloc_r>
 8006612:	4606      	mov	r6, r0
 8006614:	b950      	cbnz	r0, 800662c <__ssputs_r+0x5c>
 8006616:	230c      	movs	r3, #12
 8006618:	f8ca 3000 	str.w	r3, [sl]
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662c:	463a      	mov	r2, r7
 800662e:	6921      	ldr	r1, [r4, #16]
 8006630:	f7ff ff9a 	bl	8006568 <memcpy>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	6126      	str	r6, [r4, #16]
 8006642:	6165      	str	r5, [r4, #20]
 8006644:	443e      	add	r6, r7
 8006646:	1bed      	subs	r5, r5, r7
 8006648:	6026      	str	r6, [r4, #0]
 800664a:	60a5      	str	r5, [r4, #8]
 800664c:	464e      	mov	r6, r9
 800664e:	454e      	cmp	r6, r9
 8006650:	d900      	bls.n	8006654 <__ssputs_r+0x84>
 8006652:	464e      	mov	r6, r9
 8006654:	4632      	mov	r2, r6
 8006656:	4641      	mov	r1, r8
 8006658:	6820      	ldr	r0, [r4, #0]
 800665a:	f000 fa93 	bl	8006b84 <memmove>
 800665e:	68a3      	ldr	r3, [r4, #8]
 8006660:	1b9b      	subs	r3, r3, r6
 8006662:	60a3      	str	r3, [r4, #8]
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	441e      	add	r6, r3
 8006668:	6026      	str	r6, [r4, #0]
 800666a:	2000      	movs	r0, #0
 800666c:	e7dc      	b.n	8006628 <__ssputs_r+0x58>
 800666e:	462a      	mov	r2, r5
 8006670:	f000 fb4a 	bl	8006d08 <_realloc_r>
 8006674:	4606      	mov	r6, r0
 8006676:	2800      	cmp	r0, #0
 8006678:	d1e2      	bne.n	8006640 <__ssputs_r+0x70>
 800667a:	6921      	ldr	r1, [r4, #16]
 800667c:	4650      	mov	r0, sl
 800667e:	f000 fa9b 	bl	8006bb8 <_free_r>
 8006682:	e7c8      	b.n	8006616 <__ssputs_r+0x46>

08006684 <_svfiprintf_r>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	461d      	mov	r5, r3
 800668a:	898b      	ldrh	r3, [r1, #12]
 800668c:	061f      	lsls	r7, r3, #24
 800668e:	b09d      	sub	sp, #116	; 0x74
 8006690:	4680      	mov	r8, r0
 8006692:	460c      	mov	r4, r1
 8006694:	4616      	mov	r6, r2
 8006696:	d50f      	bpl.n	80066b8 <_svfiprintf_r+0x34>
 8006698:	690b      	ldr	r3, [r1, #16]
 800669a:	b96b      	cbnz	r3, 80066b8 <_svfiprintf_r+0x34>
 800669c:	2140      	movs	r1, #64	; 0x40
 800669e:	f000 fad9 	bl	8006c54 <_malloc_r>
 80066a2:	6020      	str	r0, [r4, #0]
 80066a4:	6120      	str	r0, [r4, #16]
 80066a6:	b928      	cbnz	r0, 80066b4 <_svfiprintf_r+0x30>
 80066a8:	230c      	movs	r3, #12
 80066aa:	f8c8 3000 	str.w	r3, [r8]
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295
 80066b2:	e0c8      	b.n	8006846 <_svfiprintf_r+0x1c2>
 80066b4:	2340      	movs	r3, #64	; 0x40
 80066b6:	6163      	str	r3, [r4, #20]
 80066b8:	2300      	movs	r3, #0
 80066ba:	9309      	str	r3, [sp, #36]	; 0x24
 80066bc:	2320      	movs	r3, #32
 80066be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066c2:	2330      	movs	r3, #48	; 0x30
 80066c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066c8:	9503      	str	r5, [sp, #12]
 80066ca:	f04f 0b01 	mov.w	fp, #1
 80066ce:	4637      	mov	r7, r6
 80066d0:	463d      	mov	r5, r7
 80066d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066d6:	b10b      	cbz	r3, 80066dc <_svfiprintf_r+0x58>
 80066d8:	2b25      	cmp	r3, #37	; 0x25
 80066da:	d13e      	bne.n	800675a <_svfiprintf_r+0xd6>
 80066dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80066e0:	d00b      	beq.n	80066fa <_svfiprintf_r+0x76>
 80066e2:	4653      	mov	r3, sl
 80066e4:	4632      	mov	r2, r6
 80066e6:	4621      	mov	r1, r4
 80066e8:	4640      	mov	r0, r8
 80066ea:	f7ff ff71 	bl	80065d0 <__ssputs_r>
 80066ee:	3001      	adds	r0, #1
 80066f0:	f000 80a4 	beq.w	800683c <_svfiprintf_r+0x1b8>
 80066f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f6:	4453      	add	r3, sl
 80066f8:	9309      	str	r3, [sp, #36]	; 0x24
 80066fa:	783b      	ldrb	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 809d 	beq.w	800683c <_svfiprintf_r+0x1b8>
 8006702:	2300      	movs	r3, #0
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	9307      	str	r3, [sp, #28]
 8006710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006714:	931a      	str	r3, [sp, #104]	; 0x68
 8006716:	462f      	mov	r7, r5
 8006718:	2205      	movs	r2, #5
 800671a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800671e:	4850      	ldr	r0, [pc, #320]	; (8006860 <_svfiprintf_r+0x1dc>)
 8006720:	f7f9 fd56 	bl	80001d0 <memchr>
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	b9d0      	cbnz	r0, 800675e <_svfiprintf_r+0xda>
 8006728:	06d9      	lsls	r1, r3, #27
 800672a:	bf44      	itt	mi
 800672c:	2220      	movmi	r2, #32
 800672e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006732:	071a      	lsls	r2, r3, #28
 8006734:	bf44      	itt	mi
 8006736:	222b      	movmi	r2, #43	; 0x2b
 8006738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800673c:	782a      	ldrb	r2, [r5, #0]
 800673e:	2a2a      	cmp	r2, #42	; 0x2a
 8006740:	d015      	beq.n	800676e <_svfiprintf_r+0xea>
 8006742:	9a07      	ldr	r2, [sp, #28]
 8006744:	462f      	mov	r7, r5
 8006746:	2000      	movs	r0, #0
 8006748:	250a      	movs	r5, #10
 800674a:	4639      	mov	r1, r7
 800674c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006750:	3b30      	subs	r3, #48	; 0x30
 8006752:	2b09      	cmp	r3, #9
 8006754:	d94d      	bls.n	80067f2 <_svfiprintf_r+0x16e>
 8006756:	b1b8      	cbz	r0, 8006788 <_svfiprintf_r+0x104>
 8006758:	e00f      	b.n	800677a <_svfiprintf_r+0xf6>
 800675a:	462f      	mov	r7, r5
 800675c:	e7b8      	b.n	80066d0 <_svfiprintf_r+0x4c>
 800675e:	4a40      	ldr	r2, [pc, #256]	; (8006860 <_svfiprintf_r+0x1dc>)
 8006760:	1a80      	subs	r0, r0, r2
 8006762:	fa0b f000 	lsl.w	r0, fp, r0
 8006766:	4318      	orrs	r0, r3
 8006768:	9004      	str	r0, [sp, #16]
 800676a:	463d      	mov	r5, r7
 800676c:	e7d3      	b.n	8006716 <_svfiprintf_r+0x92>
 800676e:	9a03      	ldr	r2, [sp, #12]
 8006770:	1d11      	adds	r1, r2, #4
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	9103      	str	r1, [sp, #12]
 8006776:	2a00      	cmp	r2, #0
 8006778:	db01      	blt.n	800677e <_svfiprintf_r+0xfa>
 800677a:	9207      	str	r2, [sp, #28]
 800677c:	e004      	b.n	8006788 <_svfiprintf_r+0x104>
 800677e:	4252      	negs	r2, r2
 8006780:	f043 0302 	orr.w	r3, r3, #2
 8006784:	9207      	str	r2, [sp, #28]
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	783b      	ldrb	r3, [r7, #0]
 800678a:	2b2e      	cmp	r3, #46	; 0x2e
 800678c:	d10c      	bne.n	80067a8 <_svfiprintf_r+0x124>
 800678e:	787b      	ldrb	r3, [r7, #1]
 8006790:	2b2a      	cmp	r3, #42	; 0x2a
 8006792:	d133      	bne.n	80067fc <_svfiprintf_r+0x178>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	1d1a      	adds	r2, r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	9203      	str	r2, [sp, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	bfb8      	it	lt
 80067a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80067a4:	3702      	adds	r7, #2
 80067a6:	9305      	str	r3, [sp, #20]
 80067a8:	4d2e      	ldr	r5, [pc, #184]	; (8006864 <_svfiprintf_r+0x1e0>)
 80067aa:	7839      	ldrb	r1, [r7, #0]
 80067ac:	2203      	movs	r2, #3
 80067ae:	4628      	mov	r0, r5
 80067b0:	f7f9 fd0e 	bl	80001d0 <memchr>
 80067b4:	b138      	cbz	r0, 80067c6 <_svfiprintf_r+0x142>
 80067b6:	2340      	movs	r3, #64	; 0x40
 80067b8:	1b40      	subs	r0, r0, r5
 80067ba:	fa03 f000 	lsl.w	r0, r3, r0
 80067be:	9b04      	ldr	r3, [sp, #16]
 80067c0:	4303      	orrs	r3, r0
 80067c2:	3701      	adds	r7, #1
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	7839      	ldrb	r1, [r7, #0]
 80067c8:	4827      	ldr	r0, [pc, #156]	; (8006868 <_svfiprintf_r+0x1e4>)
 80067ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ce:	2206      	movs	r2, #6
 80067d0:	1c7e      	adds	r6, r7, #1
 80067d2:	f7f9 fcfd 	bl	80001d0 <memchr>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d038      	beq.n	800684c <_svfiprintf_r+0x1c8>
 80067da:	4b24      	ldr	r3, [pc, #144]	; (800686c <_svfiprintf_r+0x1e8>)
 80067dc:	bb13      	cbnz	r3, 8006824 <_svfiprintf_r+0x1a0>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	3307      	adds	r3, #7
 80067e2:	f023 0307 	bic.w	r3, r3, #7
 80067e6:	3308      	adds	r3, #8
 80067e8:	9303      	str	r3, [sp, #12]
 80067ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ec:	444b      	add	r3, r9
 80067ee:	9309      	str	r3, [sp, #36]	; 0x24
 80067f0:	e76d      	b.n	80066ce <_svfiprintf_r+0x4a>
 80067f2:	fb05 3202 	mla	r2, r5, r2, r3
 80067f6:	2001      	movs	r0, #1
 80067f8:	460f      	mov	r7, r1
 80067fa:	e7a6      	b.n	800674a <_svfiprintf_r+0xc6>
 80067fc:	2300      	movs	r3, #0
 80067fe:	3701      	adds	r7, #1
 8006800:	9305      	str	r3, [sp, #20]
 8006802:	4619      	mov	r1, r3
 8006804:	250a      	movs	r5, #10
 8006806:	4638      	mov	r0, r7
 8006808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800680c:	3a30      	subs	r2, #48	; 0x30
 800680e:	2a09      	cmp	r2, #9
 8006810:	d903      	bls.n	800681a <_svfiprintf_r+0x196>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0c8      	beq.n	80067a8 <_svfiprintf_r+0x124>
 8006816:	9105      	str	r1, [sp, #20]
 8006818:	e7c6      	b.n	80067a8 <_svfiprintf_r+0x124>
 800681a:	fb05 2101 	mla	r1, r5, r1, r2
 800681e:	2301      	movs	r3, #1
 8006820:	4607      	mov	r7, r0
 8006822:	e7f0      	b.n	8006806 <_svfiprintf_r+0x182>
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4622      	mov	r2, r4
 800682a:	4b11      	ldr	r3, [pc, #68]	; (8006870 <_svfiprintf_r+0x1ec>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	4640      	mov	r0, r8
 8006830:	f3af 8000 	nop.w
 8006834:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006838:	4681      	mov	r9, r0
 800683a:	d1d6      	bne.n	80067ea <_svfiprintf_r+0x166>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	065b      	lsls	r3, r3, #25
 8006840:	f53f af35 	bmi.w	80066ae <_svfiprintf_r+0x2a>
 8006844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006846:	b01d      	add	sp, #116	; 0x74
 8006848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684c:	ab03      	add	r3, sp, #12
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	4622      	mov	r2, r4
 8006852:	4b07      	ldr	r3, [pc, #28]	; (8006870 <_svfiprintf_r+0x1ec>)
 8006854:	a904      	add	r1, sp, #16
 8006856:	4640      	mov	r0, r8
 8006858:	f000 f882 	bl	8006960 <_printf_i>
 800685c:	e7ea      	b.n	8006834 <_svfiprintf_r+0x1b0>
 800685e:	bf00      	nop
 8006860:	08009af8 	.word	0x08009af8
 8006864:	08009afe 	.word	0x08009afe
 8006868:	08009b02 	.word	0x08009b02
 800686c:	00000000 	.word	0x00000000
 8006870:	080065d1 	.word	0x080065d1

08006874 <_printf_common>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	4691      	mov	r9, r2
 800687a:	461f      	mov	r7, r3
 800687c:	688a      	ldr	r2, [r1, #8]
 800687e:	690b      	ldr	r3, [r1, #16]
 8006880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006884:	4293      	cmp	r3, r2
 8006886:	bfb8      	it	lt
 8006888:	4613      	movlt	r3, r2
 800688a:	f8c9 3000 	str.w	r3, [r9]
 800688e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006892:	4606      	mov	r6, r0
 8006894:	460c      	mov	r4, r1
 8006896:	b112      	cbz	r2, 800689e <_printf_common+0x2a>
 8006898:	3301      	adds	r3, #1
 800689a:	f8c9 3000 	str.w	r3, [r9]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068a8:	3302      	addmi	r3, #2
 80068aa:	f8c9 3000 	strmi.w	r3, [r9]
 80068ae:	6825      	ldr	r5, [r4, #0]
 80068b0:	f015 0506 	ands.w	r5, r5, #6
 80068b4:	d107      	bne.n	80068c6 <_printf_common+0x52>
 80068b6:	f104 0a19 	add.w	sl, r4, #25
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	f8d9 2000 	ldr.w	r2, [r9]
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	42ab      	cmp	r3, r5
 80068c4:	dc28      	bgt.n	8006918 <_printf_common+0xa4>
 80068c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	3300      	adds	r3, #0
 80068ce:	bf18      	it	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	0692      	lsls	r2, r2, #26
 80068d4:	d42d      	bmi.n	8006932 <_printf_common+0xbe>
 80068d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068da:	4639      	mov	r1, r7
 80068dc:	4630      	mov	r0, r6
 80068de:	47c0      	blx	r8
 80068e0:	3001      	adds	r0, #1
 80068e2:	d020      	beq.n	8006926 <_printf_common+0xb2>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	68e5      	ldr	r5, [r4, #12]
 80068e8:	f8d9 2000 	ldr.w	r2, [r9]
 80068ec:	f003 0306 	and.w	r3, r3, #6
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	bf08      	it	eq
 80068f4:	1aad      	subeq	r5, r5, r2
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	6922      	ldr	r2, [r4, #16]
 80068fa:	bf0c      	ite	eq
 80068fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006900:	2500      	movne	r5, #0
 8006902:	4293      	cmp	r3, r2
 8006904:	bfc4      	itt	gt
 8006906:	1a9b      	subgt	r3, r3, r2
 8006908:	18ed      	addgt	r5, r5, r3
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	341a      	adds	r4, #26
 8006910:	454d      	cmp	r5, r9
 8006912:	d11a      	bne.n	800694a <_printf_common+0xd6>
 8006914:	2000      	movs	r0, #0
 8006916:	e008      	b.n	800692a <_printf_common+0xb6>
 8006918:	2301      	movs	r3, #1
 800691a:	4652      	mov	r2, sl
 800691c:	4639      	mov	r1, r7
 800691e:	4630      	mov	r0, r6
 8006920:	47c0      	blx	r8
 8006922:	3001      	adds	r0, #1
 8006924:	d103      	bne.n	800692e <_printf_common+0xba>
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	3501      	adds	r5, #1
 8006930:	e7c3      	b.n	80068ba <_printf_common+0x46>
 8006932:	18e1      	adds	r1, r4, r3
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	2030      	movs	r0, #48	; 0x30
 8006938:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800693c:	4422      	add	r2, r4
 800693e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006946:	3302      	adds	r3, #2
 8006948:	e7c5      	b.n	80068d6 <_printf_common+0x62>
 800694a:	2301      	movs	r3, #1
 800694c:	4622      	mov	r2, r4
 800694e:	4639      	mov	r1, r7
 8006950:	4630      	mov	r0, r6
 8006952:	47c0      	blx	r8
 8006954:	3001      	adds	r0, #1
 8006956:	d0e6      	beq.n	8006926 <_printf_common+0xb2>
 8006958:	f109 0901 	add.w	r9, r9, #1
 800695c:	e7d8      	b.n	8006910 <_printf_common+0x9c>
	...

08006960 <_printf_i>:
 8006960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006964:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006968:	460c      	mov	r4, r1
 800696a:	7e09      	ldrb	r1, [r1, #24]
 800696c:	b085      	sub	sp, #20
 800696e:	296e      	cmp	r1, #110	; 0x6e
 8006970:	4617      	mov	r7, r2
 8006972:	4606      	mov	r6, r0
 8006974:	4698      	mov	r8, r3
 8006976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006978:	f000 80b3 	beq.w	8006ae2 <_printf_i+0x182>
 800697c:	d822      	bhi.n	80069c4 <_printf_i+0x64>
 800697e:	2963      	cmp	r1, #99	; 0x63
 8006980:	d036      	beq.n	80069f0 <_printf_i+0x90>
 8006982:	d80a      	bhi.n	800699a <_printf_i+0x3a>
 8006984:	2900      	cmp	r1, #0
 8006986:	f000 80b9 	beq.w	8006afc <_printf_i+0x19c>
 800698a:	2958      	cmp	r1, #88	; 0x58
 800698c:	f000 8083 	beq.w	8006a96 <_printf_i+0x136>
 8006990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006994:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006998:	e032      	b.n	8006a00 <_printf_i+0xa0>
 800699a:	2964      	cmp	r1, #100	; 0x64
 800699c:	d001      	beq.n	80069a2 <_printf_i+0x42>
 800699e:	2969      	cmp	r1, #105	; 0x69
 80069a0:	d1f6      	bne.n	8006990 <_printf_i+0x30>
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	6813      	ldr	r3, [r2, #0]
 80069a6:	0605      	lsls	r5, r0, #24
 80069a8:	f103 0104 	add.w	r1, r3, #4
 80069ac:	d52a      	bpl.n	8006a04 <_printf_i+0xa4>
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da03      	bge.n	80069be <_printf_i+0x5e>
 80069b6:	222d      	movs	r2, #45	; 0x2d
 80069b8:	425b      	negs	r3, r3
 80069ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069be:	486f      	ldr	r0, [pc, #444]	; (8006b7c <_printf_i+0x21c>)
 80069c0:	220a      	movs	r2, #10
 80069c2:	e039      	b.n	8006a38 <_printf_i+0xd8>
 80069c4:	2973      	cmp	r1, #115	; 0x73
 80069c6:	f000 809d 	beq.w	8006b04 <_printf_i+0x1a4>
 80069ca:	d808      	bhi.n	80069de <_printf_i+0x7e>
 80069cc:	296f      	cmp	r1, #111	; 0x6f
 80069ce:	d020      	beq.n	8006a12 <_printf_i+0xb2>
 80069d0:	2970      	cmp	r1, #112	; 0x70
 80069d2:	d1dd      	bne.n	8006990 <_printf_i+0x30>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	f043 0320 	orr.w	r3, r3, #32
 80069da:	6023      	str	r3, [r4, #0]
 80069dc:	e003      	b.n	80069e6 <_printf_i+0x86>
 80069de:	2975      	cmp	r1, #117	; 0x75
 80069e0:	d017      	beq.n	8006a12 <_printf_i+0xb2>
 80069e2:	2978      	cmp	r1, #120	; 0x78
 80069e4:	d1d4      	bne.n	8006990 <_printf_i+0x30>
 80069e6:	2378      	movs	r3, #120	; 0x78
 80069e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ec:	4864      	ldr	r0, [pc, #400]	; (8006b80 <_printf_i+0x220>)
 80069ee:	e055      	b.n	8006a9c <_printf_i+0x13c>
 80069f0:	6813      	ldr	r3, [r2, #0]
 80069f2:	1d19      	adds	r1, r3, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6011      	str	r1, [r2, #0]
 80069f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a00:	2301      	movs	r3, #1
 8006a02:	e08c      	b.n	8006b1e <_printf_i+0x1be>
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6011      	str	r1, [r2, #0]
 8006a08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a0c:	bf18      	it	ne
 8006a0e:	b21b      	sxthne	r3, r3
 8006a10:	e7cf      	b.n	80069b2 <_printf_i+0x52>
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	6825      	ldr	r5, [r4, #0]
 8006a16:	1d18      	adds	r0, r3, #4
 8006a18:	6010      	str	r0, [r2, #0]
 8006a1a:	0628      	lsls	r0, r5, #24
 8006a1c:	d501      	bpl.n	8006a22 <_printf_i+0xc2>
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	e002      	b.n	8006a28 <_printf_i+0xc8>
 8006a22:	0668      	lsls	r0, r5, #25
 8006a24:	d5fb      	bpl.n	8006a1e <_printf_i+0xbe>
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	4854      	ldr	r0, [pc, #336]	; (8006b7c <_printf_i+0x21c>)
 8006a2a:	296f      	cmp	r1, #111	; 0x6f
 8006a2c:	bf14      	ite	ne
 8006a2e:	220a      	movne	r2, #10
 8006a30:	2208      	moveq	r2, #8
 8006a32:	2100      	movs	r1, #0
 8006a34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a38:	6865      	ldr	r5, [r4, #4]
 8006a3a:	60a5      	str	r5, [r4, #8]
 8006a3c:	2d00      	cmp	r5, #0
 8006a3e:	f2c0 8095 	blt.w	8006b6c <_printf_i+0x20c>
 8006a42:	6821      	ldr	r1, [r4, #0]
 8006a44:	f021 0104 	bic.w	r1, r1, #4
 8006a48:	6021      	str	r1, [r4, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d13d      	bne.n	8006aca <_printf_i+0x16a>
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	f040 808e 	bne.w	8006b70 <_printf_i+0x210>
 8006a54:	4665      	mov	r5, ip
 8006a56:	2a08      	cmp	r2, #8
 8006a58:	d10b      	bne.n	8006a72 <_printf_i+0x112>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	07db      	lsls	r3, r3, #31
 8006a5e:	d508      	bpl.n	8006a72 <_printf_i+0x112>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	6862      	ldr	r2, [r4, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	bfde      	ittt	le
 8006a68:	2330      	movle	r3, #48	; 0x30
 8006a6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a72:	ebac 0305 	sub.w	r3, ip, r5
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	f8cd 8000 	str.w	r8, [sp]
 8006a7c:	463b      	mov	r3, r7
 8006a7e:	aa03      	add	r2, sp, #12
 8006a80:	4621      	mov	r1, r4
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7ff fef6 	bl	8006874 <_printf_common>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d14d      	bne.n	8006b28 <_printf_i+0x1c8>
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	b005      	add	sp, #20
 8006a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a96:	4839      	ldr	r0, [pc, #228]	; (8006b7c <_printf_i+0x21c>)
 8006a98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a9c:	6813      	ldr	r3, [r2, #0]
 8006a9e:	6821      	ldr	r1, [r4, #0]
 8006aa0:	1d1d      	adds	r5, r3, #4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6015      	str	r5, [r2, #0]
 8006aa6:	060a      	lsls	r2, r1, #24
 8006aa8:	d50b      	bpl.n	8006ac2 <_printf_i+0x162>
 8006aaa:	07ca      	lsls	r2, r1, #31
 8006aac:	bf44      	itt	mi
 8006aae:	f041 0120 	orrmi.w	r1, r1, #32
 8006ab2:	6021      	strmi	r1, [r4, #0]
 8006ab4:	b91b      	cbnz	r3, 8006abe <_printf_i+0x15e>
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	f022 0220 	bic.w	r2, r2, #32
 8006abc:	6022      	str	r2, [r4, #0]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	e7b7      	b.n	8006a32 <_printf_i+0xd2>
 8006ac2:	064d      	lsls	r5, r1, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b29b      	uxthmi	r3, r3
 8006ac8:	e7ef      	b.n	8006aaa <_printf_i+0x14a>
 8006aca:	4665      	mov	r5, ip
 8006acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad0:	fb02 3311 	mls	r3, r2, r1, r3
 8006ad4:	5cc3      	ldrb	r3, [r0, r3]
 8006ad6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ada:	460b      	mov	r3, r1
 8006adc:	2900      	cmp	r1, #0
 8006ade:	d1f5      	bne.n	8006acc <_printf_i+0x16c>
 8006ae0:	e7b9      	b.n	8006a56 <_printf_i+0xf6>
 8006ae2:	6813      	ldr	r3, [r2, #0]
 8006ae4:	6825      	ldr	r5, [r4, #0]
 8006ae6:	6961      	ldr	r1, [r4, #20]
 8006ae8:	1d18      	adds	r0, r3, #4
 8006aea:	6010      	str	r0, [r2, #0]
 8006aec:	0628      	lsls	r0, r5, #24
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	d501      	bpl.n	8006af6 <_printf_i+0x196>
 8006af2:	6019      	str	r1, [r3, #0]
 8006af4:	e002      	b.n	8006afc <_printf_i+0x19c>
 8006af6:	066a      	lsls	r2, r5, #25
 8006af8:	d5fb      	bpl.n	8006af2 <_printf_i+0x192>
 8006afa:	8019      	strh	r1, [r3, #0]
 8006afc:	2300      	movs	r3, #0
 8006afe:	6123      	str	r3, [r4, #16]
 8006b00:	4665      	mov	r5, ip
 8006b02:	e7b9      	b.n	8006a78 <_printf_i+0x118>
 8006b04:	6813      	ldr	r3, [r2, #0]
 8006b06:	1d19      	adds	r1, r3, #4
 8006b08:	6011      	str	r1, [r2, #0]
 8006b0a:	681d      	ldr	r5, [r3, #0]
 8006b0c:	6862      	ldr	r2, [r4, #4]
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7f9 fb5d 	bl	80001d0 <memchr>
 8006b16:	b108      	cbz	r0, 8006b1c <_printf_i+0x1bc>
 8006b18:	1b40      	subs	r0, r0, r5
 8006b1a:	6060      	str	r0, [r4, #4]
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	6123      	str	r3, [r4, #16]
 8006b20:	2300      	movs	r3, #0
 8006b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b26:	e7a7      	b.n	8006a78 <_printf_i+0x118>
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	4630      	mov	r0, r6
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d0aa      	beq.n	8006a8c <_printf_i+0x12c>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	079b      	lsls	r3, r3, #30
 8006b3a:	d413      	bmi.n	8006b64 <_printf_i+0x204>
 8006b3c:	68e0      	ldr	r0, [r4, #12]
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	4298      	cmp	r0, r3
 8006b42:	bfb8      	it	lt
 8006b44:	4618      	movlt	r0, r3
 8006b46:	e7a3      	b.n	8006a90 <_printf_i+0x130>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	464a      	mov	r2, r9
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	47c0      	blx	r8
 8006b52:	3001      	adds	r0, #1
 8006b54:	d09a      	beq.n	8006a8c <_printf_i+0x12c>
 8006b56:	3501      	adds	r5, #1
 8006b58:	68e3      	ldr	r3, [r4, #12]
 8006b5a:	9a03      	ldr	r2, [sp, #12]
 8006b5c:	1a9b      	subs	r3, r3, r2
 8006b5e:	42ab      	cmp	r3, r5
 8006b60:	dcf2      	bgt.n	8006b48 <_printf_i+0x1e8>
 8006b62:	e7eb      	b.n	8006b3c <_printf_i+0x1dc>
 8006b64:	2500      	movs	r5, #0
 8006b66:	f104 0919 	add.w	r9, r4, #25
 8006b6a:	e7f5      	b.n	8006b58 <_printf_i+0x1f8>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ac      	bne.n	8006aca <_printf_i+0x16a>
 8006b70:	7803      	ldrb	r3, [r0, #0]
 8006b72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7a:	e76c      	b.n	8006a56 <_printf_i+0xf6>
 8006b7c:	08009b09 	.word	0x08009b09
 8006b80:	08009b1a 	.word	0x08009b1a

08006b84 <memmove>:
 8006b84:	4288      	cmp	r0, r1
 8006b86:	b510      	push	{r4, lr}
 8006b88:	eb01 0302 	add.w	r3, r1, r2
 8006b8c:	d807      	bhi.n	8006b9e <memmove+0x1a>
 8006b8e:	1e42      	subs	r2, r0, #1
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d00a      	beq.n	8006baa <memmove+0x26>
 8006b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b9c:	e7f8      	b.n	8006b90 <memmove+0xc>
 8006b9e:	4283      	cmp	r3, r0
 8006ba0:	d9f5      	bls.n	8006b8e <memmove+0xa>
 8006ba2:	1881      	adds	r1, r0, r2
 8006ba4:	1ad2      	subs	r2, r2, r3
 8006ba6:	42d3      	cmn	r3, r2
 8006ba8:	d100      	bne.n	8006bac <memmove+0x28>
 8006baa:	bd10      	pop	{r4, pc}
 8006bac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006bb4:	e7f7      	b.n	8006ba6 <memmove+0x22>
	...

08006bb8 <_free_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4605      	mov	r5, r0
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d045      	beq.n	8006c4c <_free_r+0x94>
 8006bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc4:	1f0c      	subs	r4, r1, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfb8      	it	lt
 8006bca:	18e4      	addlt	r4, r4, r3
 8006bcc:	f000 f8d2 	bl	8006d74 <__malloc_lock>
 8006bd0:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <_free_r+0x98>)
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	b933      	cbnz	r3, 8006be6 <_free_r+0x2e>
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	6014      	str	r4, [r2, #0]
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be2:	f000 b8c8 	b.w	8006d76 <__malloc_unlock>
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	d90c      	bls.n	8006c04 <_free_r+0x4c>
 8006bea:	6821      	ldr	r1, [r4, #0]
 8006bec:	1862      	adds	r2, r4, r1
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bf04      	itt	eq
 8006bf2:	681a      	ldreq	r2, [r3, #0]
 8006bf4:	685b      	ldreq	r3, [r3, #4]
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	bf04      	itt	eq
 8006bfa:	1852      	addeq	r2, r2, r1
 8006bfc:	6022      	streq	r2, [r4, #0]
 8006bfe:	6004      	str	r4, [r0, #0]
 8006c00:	e7ec      	b.n	8006bdc <_free_r+0x24>
 8006c02:	4613      	mov	r3, r2
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	b10a      	cbz	r2, 8006c0c <_free_r+0x54>
 8006c08:	42a2      	cmp	r2, r4
 8006c0a:	d9fa      	bls.n	8006c02 <_free_r+0x4a>
 8006c0c:	6819      	ldr	r1, [r3, #0]
 8006c0e:	1858      	adds	r0, r3, r1
 8006c10:	42a0      	cmp	r0, r4
 8006c12:	d10b      	bne.n	8006c2c <_free_r+0x74>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	4401      	add	r1, r0
 8006c18:	1858      	adds	r0, r3, r1
 8006c1a:	4282      	cmp	r2, r0
 8006c1c:	6019      	str	r1, [r3, #0]
 8006c1e:	d1dd      	bne.n	8006bdc <_free_r+0x24>
 8006c20:	6810      	ldr	r0, [r2, #0]
 8006c22:	6852      	ldr	r2, [r2, #4]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	4401      	add	r1, r0
 8006c28:	6019      	str	r1, [r3, #0]
 8006c2a:	e7d7      	b.n	8006bdc <_free_r+0x24>
 8006c2c:	d902      	bls.n	8006c34 <_free_r+0x7c>
 8006c2e:	230c      	movs	r3, #12
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	e7d3      	b.n	8006bdc <_free_r+0x24>
 8006c34:	6820      	ldr	r0, [r4, #0]
 8006c36:	1821      	adds	r1, r4, r0
 8006c38:	428a      	cmp	r2, r1
 8006c3a:	bf04      	itt	eq
 8006c3c:	6811      	ldreq	r1, [r2, #0]
 8006c3e:	6852      	ldreq	r2, [r2, #4]
 8006c40:	6062      	str	r2, [r4, #4]
 8006c42:	bf04      	itt	eq
 8006c44:	1809      	addeq	r1, r1, r0
 8006c46:	6021      	streq	r1, [r4, #0]
 8006c48:	605c      	str	r4, [r3, #4]
 8006c4a:	e7c7      	b.n	8006bdc <_free_r+0x24>
 8006c4c:	bd38      	pop	{r3, r4, r5, pc}
 8006c4e:	bf00      	nop
 8006c50:	200004f4 	.word	0x200004f4

08006c54 <_malloc_r>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	1ccd      	adds	r5, r1, #3
 8006c58:	f025 0503 	bic.w	r5, r5, #3
 8006c5c:	3508      	adds	r5, #8
 8006c5e:	2d0c      	cmp	r5, #12
 8006c60:	bf38      	it	cc
 8006c62:	250c      	movcc	r5, #12
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	4606      	mov	r6, r0
 8006c68:	db01      	blt.n	8006c6e <_malloc_r+0x1a>
 8006c6a:	42a9      	cmp	r1, r5
 8006c6c:	d903      	bls.n	8006c76 <_malloc_r+0x22>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	2000      	movs	r0, #0
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
 8006c76:	f000 f87d 	bl	8006d74 <__malloc_lock>
 8006c7a:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <_malloc_r+0xac>)
 8006c7c:	6814      	ldr	r4, [r2, #0]
 8006c7e:	4621      	mov	r1, r4
 8006c80:	b991      	cbnz	r1, 8006ca8 <_malloc_r+0x54>
 8006c82:	4c20      	ldr	r4, [pc, #128]	; (8006d04 <_malloc_r+0xb0>)
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	b91b      	cbnz	r3, 8006c90 <_malloc_r+0x3c>
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 f863 	bl	8006d54 <_sbrk_r>
 8006c8e:	6020      	str	r0, [r4, #0]
 8006c90:	4629      	mov	r1, r5
 8006c92:	4630      	mov	r0, r6
 8006c94:	f000 f85e 	bl	8006d54 <_sbrk_r>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d124      	bne.n	8006ce6 <_malloc_r+0x92>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	6033      	str	r3, [r6, #0]
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 f868 	bl	8006d76 <__malloc_unlock>
 8006ca6:	e7e4      	b.n	8006c72 <_malloc_r+0x1e>
 8006ca8:	680b      	ldr	r3, [r1, #0]
 8006caa:	1b5b      	subs	r3, r3, r5
 8006cac:	d418      	bmi.n	8006ce0 <_malloc_r+0x8c>
 8006cae:	2b0b      	cmp	r3, #11
 8006cb0:	d90f      	bls.n	8006cd2 <_malloc_r+0x7e>
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	50cd      	str	r5, [r1, r3]
 8006cb6:	18cc      	adds	r4, r1, r3
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 f85c 	bl	8006d76 <__malloc_unlock>
 8006cbe:	f104 000b 	add.w	r0, r4, #11
 8006cc2:	1d23      	adds	r3, r4, #4
 8006cc4:	f020 0007 	bic.w	r0, r0, #7
 8006cc8:	1ac3      	subs	r3, r0, r3
 8006cca:	d0d3      	beq.n	8006c74 <_malloc_r+0x20>
 8006ccc:	425a      	negs	r2, r3
 8006cce:	50e2      	str	r2, [r4, r3]
 8006cd0:	e7d0      	b.n	8006c74 <_malloc_r+0x20>
 8006cd2:	428c      	cmp	r4, r1
 8006cd4:	684b      	ldr	r3, [r1, #4]
 8006cd6:	bf16      	itet	ne
 8006cd8:	6063      	strne	r3, [r4, #4]
 8006cda:	6013      	streq	r3, [r2, #0]
 8006cdc:	460c      	movne	r4, r1
 8006cde:	e7eb      	b.n	8006cb8 <_malloc_r+0x64>
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	6849      	ldr	r1, [r1, #4]
 8006ce4:	e7cc      	b.n	8006c80 <_malloc_r+0x2c>
 8006ce6:	1cc4      	adds	r4, r0, #3
 8006ce8:	f024 0403 	bic.w	r4, r4, #3
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d005      	beq.n	8006cfc <_malloc_r+0xa8>
 8006cf0:	1a21      	subs	r1, r4, r0
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 f82e 	bl	8006d54 <_sbrk_r>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d0cf      	beq.n	8006c9c <_malloc_r+0x48>
 8006cfc:	6025      	str	r5, [r4, #0]
 8006cfe:	e7db      	b.n	8006cb8 <_malloc_r+0x64>
 8006d00:	200004f4 	.word	0x200004f4
 8006d04:	200004f8 	.word	0x200004f8

08006d08 <_realloc_r>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	460e      	mov	r6, r1
 8006d10:	b921      	cbnz	r1, 8006d1c <_realloc_r+0x14>
 8006d12:	4611      	mov	r1, r2
 8006d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d18:	f7ff bf9c 	b.w	8006c54 <_malloc_r>
 8006d1c:	b922      	cbnz	r2, 8006d28 <_realloc_r+0x20>
 8006d1e:	f7ff ff4b 	bl	8006bb8 <_free_r>
 8006d22:	4625      	mov	r5, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d28:	f000 f826 	bl	8006d78 <_malloc_usable_size_r>
 8006d2c:	42a0      	cmp	r0, r4
 8006d2e:	d20f      	bcs.n	8006d50 <_realloc_r+0x48>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4638      	mov	r0, r7
 8006d34:	f7ff ff8e 	bl	8006c54 <_malloc_r>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0f2      	beq.n	8006d24 <_realloc_r+0x1c>
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4622      	mov	r2, r4
 8006d42:	f7ff fc11 	bl	8006568 <memcpy>
 8006d46:	4631      	mov	r1, r6
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ff35 	bl	8006bb8 <_free_r>
 8006d4e:	e7e9      	b.n	8006d24 <_realloc_r+0x1c>
 8006d50:	4635      	mov	r5, r6
 8006d52:	e7e7      	b.n	8006d24 <_realloc_r+0x1c>

08006d54 <_sbrk_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4c06      	ldr	r4, [pc, #24]	; (8006d70 <_sbrk_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	f7ff fb38 	bl	80063d4 <_sbrk>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_sbrk_r+0x1a>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_sbrk_r+0x1a>
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000884 	.word	0x20000884

08006d74 <__malloc_lock>:
 8006d74:	4770      	bx	lr

08006d76 <__malloc_unlock>:
 8006d76:	4770      	bx	lr

08006d78 <_malloc_usable_size_r>:
 8006d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7c:	1f18      	subs	r0, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfbc      	itt	lt
 8006d82:	580b      	ldrlt	r3, [r1, r0]
 8006d84:	18c0      	addlt	r0, r0, r3
 8006d86:	4770      	bx	lr

08006d88 <floor>:
 8006d88:	ec51 0b10 	vmov	r0, r1, d0
 8006d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006d94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006d98:	2e13      	cmp	r6, #19
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	ee10 5a10 	vmov	r5, s0
 8006da0:	4680      	mov	r8, r0
 8006da2:	dc34      	bgt.n	8006e0e <floor+0x86>
 8006da4:	2e00      	cmp	r6, #0
 8006da6:	da16      	bge.n	8006dd6 <floor+0x4e>
 8006da8:	a335      	add	r3, pc, #212	; (adr r3, 8006e80 <floor+0xf8>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fa65 	bl	800027c <__adddf3>
 8006db2:	2200      	movs	r2, #0
 8006db4:	2300      	movs	r3, #0
 8006db6:	f7f9 fea7 	bl	8000b08 <__aeabi_dcmpgt>
 8006dba:	b148      	cbz	r0, 8006dd0 <floor+0x48>
 8006dbc:	2c00      	cmp	r4, #0
 8006dbe:	da59      	bge.n	8006e74 <floor+0xec>
 8006dc0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006dc4:	4a30      	ldr	r2, [pc, #192]	; (8006e88 <floor+0x100>)
 8006dc6:	432b      	orrs	r3, r5
 8006dc8:	2500      	movs	r5, #0
 8006dca:	42ab      	cmp	r3, r5
 8006dcc:	bf18      	it	ne
 8006dce:	4614      	movne	r4, r2
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	e025      	b.n	8006e22 <floor+0x9a>
 8006dd6:	4f2d      	ldr	r7, [pc, #180]	; (8006e8c <floor+0x104>)
 8006dd8:	4137      	asrs	r7, r6
 8006dda:	ea01 0307 	and.w	r3, r1, r7
 8006dde:	4303      	orrs	r3, r0
 8006de0:	d01f      	beq.n	8006e22 <floor+0x9a>
 8006de2:	a327      	add	r3, pc, #156	; (adr r3, 8006e80 <floor+0xf8>)
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f7f9 fa48 	bl	800027c <__adddf3>
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	f7f9 fe8a 	bl	8000b08 <__aeabi_dcmpgt>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d0eb      	beq.n	8006dd0 <floor+0x48>
 8006df8:	2c00      	cmp	r4, #0
 8006dfa:	bfbe      	ittt	lt
 8006dfc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006e00:	fa43 f606 	asrlt.w	r6, r3, r6
 8006e04:	19a4      	addlt	r4, r4, r6
 8006e06:	ea24 0407 	bic.w	r4, r4, r7
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	e7e0      	b.n	8006dd0 <floor+0x48>
 8006e0e:	2e33      	cmp	r6, #51	; 0x33
 8006e10:	dd0b      	ble.n	8006e2a <floor+0xa2>
 8006e12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e16:	d104      	bne.n	8006e22 <floor+0x9a>
 8006e18:	ee10 2a10 	vmov	r2, s0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	f7f9 fa2d 	bl	800027c <__adddf3>
 8006e22:	ec41 0b10 	vmov	d0, r0, r1
 8006e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e32:	fa23 f707 	lsr.w	r7, r3, r7
 8006e36:	4207      	tst	r7, r0
 8006e38:	d0f3      	beq.n	8006e22 <floor+0x9a>
 8006e3a:	a311      	add	r3, pc, #68	; (adr r3, 8006e80 <floor+0xf8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fa1c 	bl	800027c <__adddf3>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	f7f9 fe5e 	bl	8000b08 <__aeabi_dcmpgt>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d0bf      	beq.n	8006dd0 <floor+0x48>
 8006e50:	2c00      	cmp	r4, #0
 8006e52:	da02      	bge.n	8006e5a <floor+0xd2>
 8006e54:	2e14      	cmp	r6, #20
 8006e56:	d103      	bne.n	8006e60 <floor+0xd8>
 8006e58:	3401      	adds	r4, #1
 8006e5a:	ea25 0507 	bic.w	r5, r5, r7
 8006e5e:	e7b7      	b.n	8006dd0 <floor+0x48>
 8006e60:	2301      	movs	r3, #1
 8006e62:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006e66:	fa03 f606 	lsl.w	r6, r3, r6
 8006e6a:	4435      	add	r5, r6
 8006e6c:	4545      	cmp	r5, r8
 8006e6e:	bf38      	it	cc
 8006e70:	18e4      	addcc	r4, r4, r3
 8006e72:	e7f2      	b.n	8006e5a <floor+0xd2>
 8006e74:	2500      	movs	r5, #0
 8006e76:	462c      	mov	r4, r5
 8006e78:	e7aa      	b.n	8006dd0 <floor+0x48>
 8006e7a:	bf00      	nop
 8006e7c:	f3af 8000 	nop.w
 8006e80:	8800759c 	.word	0x8800759c
 8006e84:	7e37e43c 	.word	0x7e37e43c
 8006e88:	bff00000 	.word	0xbff00000
 8006e8c:	000fffff 	.word	0x000fffff

08006e90 <round>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	ec57 6b10 	vmov	r6, r7, d0
 8006e96:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8006e9a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8006e9e:	2c13      	cmp	r4, #19
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	463d      	mov	r5, r7
 8006ea4:	dc17      	bgt.n	8006ed6 <round+0x46>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	da09      	bge.n	8006ebe <round+0x2e>
 8006eaa:	3401      	adds	r4, #1
 8006eac:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8006eb0:	d103      	bne.n	8006eba <round+0x2a>
 8006eb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006eb6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006eba:	2100      	movs	r1, #0
 8006ebc:	e02c      	b.n	8006f18 <round+0x88>
 8006ebe:	4a18      	ldr	r2, [pc, #96]	; (8006f20 <round+0x90>)
 8006ec0:	4122      	asrs	r2, r4
 8006ec2:	4217      	tst	r7, r2
 8006ec4:	d100      	bne.n	8006ec8 <round+0x38>
 8006ec6:	b19e      	cbz	r6, 8006ef0 <round+0x60>
 8006ec8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ecc:	4123      	asrs	r3, r4
 8006ece:	442b      	add	r3, r5
 8006ed0:	ea23 0302 	bic.w	r3, r3, r2
 8006ed4:	e7f1      	b.n	8006eba <round+0x2a>
 8006ed6:	2c33      	cmp	r4, #51	; 0x33
 8006ed8:	dd0d      	ble.n	8006ef6 <round+0x66>
 8006eda:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006ede:	d107      	bne.n	8006ef0 <round+0x60>
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	ee10 2a10 	vmov	r2, s0
 8006ee8:	f7f9 f9c8 	bl	800027c <__adddf3>
 8006eec:	4606      	mov	r6, r0
 8006eee:	460f      	mov	r7, r1
 8006ef0:	ec47 6b10 	vmov	d0, r6, r7
 8006ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	40d0      	lsrs	r0, r2
 8006f00:	4206      	tst	r6, r0
 8006f02:	d0f5      	beq.n	8006ef0 <round+0x60>
 8006f04:	2201      	movs	r2, #1
 8006f06:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006f0a:	fa02 f404 	lsl.w	r4, r2, r4
 8006f0e:	1931      	adds	r1, r6, r4
 8006f10:	bf28      	it	cs
 8006f12:	189b      	addcs	r3, r3, r2
 8006f14:	ea21 0100 	bic.w	r1, r1, r0
 8006f18:	461f      	mov	r7, r3
 8006f1a:	460e      	mov	r6, r1
 8006f1c:	e7e8      	b.n	8006ef0 <round+0x60>
 8006f1e:	bf00      	nop
 8006f20:	000fffff 	.word	0x000fffff

08006f24 <trunc>:
 8006f24:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8006f28:	ec5c bb10 	vmov	fp, ip, d0
 8006f2c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8006f30:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8006f34:	2913      	cmp	r1, #19
 8006f36:	4664      	mov	r4, ip
 8006f38:	dc11      	bgt.n	8006f5e <trunc+0x3a>
 8006f3a:	2900      	cmp	r1, #0
 8006f3c:	bfa7      	ittee	ge
 8006f3e:	4b15      	ldrge	r3, [pc, #84]	; (8006f94 <trunc+0x70>)
 8006f40:	fa43 f101 	asrge.w	r1, r3, r1
 8006f44:	2200      	movlt	r2, #0
 8006f46:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8006f4a:	bfa4      	itt	ge
 8006f4c:	2200      	movge	r2, #0
 8006f4e:	ea2c 0301 	bicge.w	r3, ip, r1
 8006f52:	4693      	mov	fp, r2
 8006f54:	469c      	mov	ip, r3
 8006f56:	ec4c bb10 	vmov	d0, fp, ip
 8006f5a:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8006f5e:	2933      	cmp	r1, #51	; 0x33
 8006f60:	dd0d      	ble.n	8006f7e <trunc+0x5a>
 8006f62:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006f66:	d1f6      	bne.n	8006f56 <trunc+0x32>
 8006f68:	4663      	mov	r3, ip
 8006f6a:	ee10 2a10 	vmov	r2, s0
 8006f6e:	ee10 0a10 	vmov	r0, s0
 8006f72:	4621      	mov	r1, r4
 8006f74:	f7f9 f982 	bl	800027c <__adddf3>
 8006f78:	4683      	mov	fp, r0
 8006f7a:	468c      	mov	ip, r1
 8006f7c:	e7eb      	b.n	8006f56 <trunc+0x32>
 8006f7e:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8006f82:	f04f 33ff 	mov.w	r3, #4294967295
 8006f86:	fa23 f000 	lsr.w	r0, r3, r0
 8006f8a:	ea2b 0600 	bic.w	r6, fp, r0
 8006f8e:	46b3      	mov	fp, r6
 8006f90:	46a4      	mov	ip, r4
 8006f92:	e7e0      	b.n	8006f56 <trunc+0x32>
 8006f94:	000fffff 	.word	0x000fffff

08006f98 <log10>:
 8006f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9a:	ed2d 8b02 	vpush	{d8}
 8006f9e:	b08b      	sub	sp, #44	; 0x2c
 8006fa0:	ec55 4b10 	vmov	r4, r5, d0
 8006fa4:	f000 f9e8 	bl	8007378 <__ieee754_log10>
 8006fa8:	4b36      	ldr	r3, [pc, #216]	; (8007084 <log10+0xec>)
 8006faa:	eeb0 8a40 	vmov.f32	s16, s0
 8006fae:	eef0 8a60 	vmov.f32	s17, s1
 8006fb2:	f993 6000 	ldrsb.w	r6, [r3]
 8006fb6:	1c73      	adds	r3, r6, #1
 8006fb8:	d05c      	beq.n	8007074 <log10+0xdc>
 8006fba:	4622      	mov	r2, r4
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 fdab 	bl	8000b1c <__aeabi_dcmpun>
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d153      	bne.n	8007074 <log10+0xdc>
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	f7f9 fd84 	bl	8000ae0 <__aeabi_dcmple>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d04b      	beq.n	8007074 <log10+0xdc>
 8006fdc:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <log10+0xf0>)
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	9708      	str	r7, [sp, #32]
 8006fe2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006fe6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006fea:	b9a6      	cbnz	r6, 8007016 <log10+0x7e>
 8006fec:	4b27      	ldr	r3, [pc, #156]	; (800708c <log10+0xf4>)
 8006fee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006ff2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7f9 fd5b 	bl	8000ab8 <__aeabi_dcmpeq>
 8007002:	bb40      	cbnz	r0, 8007056 <log10+0xbe>
 8007004:	2301      	movs	r3, #1
 8007006:	2e02      	cmp	r6, #2
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	d119      	bne.n	8007040 <log10+0xa8>
 800700c:	f7ff fa82 	bl	8006514 <__errno>
 8007010:	2321      	movs	r3, #33	; 0x21
 8007012:	6003      	str	r3, [r0, #0]
 8007014:	e019      	b.n	800704a <log10+0xb2>
 8007016:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <log10+0xf8>)
 8007018:	2200      	movs	r2, #0
 800701a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800701e:	4620      	mov	r0, r4
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 fd47 	bl	8000ab8 <__aeabi_dcmpeq>
 800702a:	2800      	cmp	r0, #0
 800702c:	d0ea      	beq.n	8007004 <log10+0x6c>
 800702e:	2302      	movs	r3, #2
 8007030:	429e      	cmp	r6, r3
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	d111      	bne.n	800705a <log10+0xc2>
 8007036:	f7ff fa6d 	bl	8006514 <__errno>
 800703a:	2322      	movs	r3, #34	; 0x22
 800703c:	6003      	str	r3, [r0, #0]
 800703e:	e011      	b.n	8007064 <log10+0xcc>
 8007040:	4668      	mov	r0, sp
 8007042:	f000 fff4 	bl	800802e <matherr>
 8007046:	2800      	cmp	r0, #0
 8007048:	d0e0      	beq.n	800700c <log10+0x74>
 800704a:	4812      	ldr	r0, [pc, #72]	; (8007094 <log10+0xfc>)
 800704c:	f000 fff4 	bl	8008038 <nan>
 8007050:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007054:	e006      	b.n	8007064 <log10+0xcc>
 8007056:	2302      	movs	r3, #2
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4668      	mov	r0, sp
 800705c:	f000 ffe7 	bl	800802e <matherr>
 8007060:	2800      	cmp	r0, #0
 8007062:	d0e8      	beq.n	8007036 <log10+0x9e>
 8007064:	9b08      	ldr	r3, [sp, #32]
 8007066:	b11b      	cbz	r3, 8007070 <log10+0xd8>
 8007068:	f7ff fa54 	bl	8006514 <__errno>
 800706c:	9b08      	ldr	r3, [sp, #32]
 800706e:	6003      	str	r3, [r0, #0]
 8007070:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007074:	eeb0 0a48 	vmov.f32	s0, s16
 8007078:	eef0 0a68 	vmov.f32	s1, s17
 800707c:	b00b      	add	sp, #44	; 0x2c
 800707e:	ecbd 8b02 	vpop	{d8}
 8007082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007084:	20000080 	.word	0x20000080
 8007088:	08009b2b 	.word	0x08009b2b
 800708c:	c7efffff 	.word	0xc7efffff
 8007090:	fff00000 	.word	0xfff00000
 8007094:	08009afd 	.word	0x08009afd

08007098 <pow>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	ed2d 8b04 	vpush	{d8-d9}
 80070a0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007374 <pow+0x2dc>
 80070a4:	b08d      	sub	sp, #52	; 0x34
 80070a6:	ec57 6b10 	vmov	r6, r7, d0
 80070aa:	ec55 4b11 	vmov	r4, r5, d1
 80070ae:	f000 f9ef 	bl	8007490 <__ieee754_pow>
 80070b2:	f999 3000 	ldrsb.w	r3, [r9]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	eeb0 8a40 	vmov.f32	s16, s0
 80070be:	eef0 8a60 	vmov.f32	s17, s1
 80070c2:	46c8      	mov	r8, r9
 80070c4:	d05f      	beq.n	8007186 <pow+0xee>
 80070c6:	4622      	mov	r2, r4
 80070c8:	462b      	mov	r3, r5
 80070ca:	4620      	mov	r0, r4
 80070cc:	4629      	mov	r1, r5
 80070ce:	f7f9 fd25 	bl	8000b1c <__aeabi_dcmpun>
 80070d2:	4683      	mov	fp, r0
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d156      	bne.n	8007186 <pow+0xee>
 80070d8:	4632      	mov	r2, r6
 80070da:	463b      	mov	r3, r7
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	f7f9 fd1c 	bl	8000b1c <__aeabi_dcmpun>
 80070e4:	9001      	str	r0, [sp, #4]
 80070e6:	b1e8      	cbz	r0, 8007124 <pow+0x8c>
 80070e8:	2200      	movs	r2, #0
 80070ea:	2300      	movs	r3, #0
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 fce2 	bl	8000ab8 <__aeabi_dcmpeq>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d046      	beq.n	8007186 <pow+0xee>
 80070f8:	2301      	movs	r3, #1
 80070fa:	9302      	str	r3, [sp, #8]
 80070fc:	4b96      	ldr	r3, [pc, #600]	; (8007358 <pow+0x2c0>)
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	4b96      	ldr	r3, [pc, #600]	; (800735c <pow+0x2c4>)
 8007102:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007106:	2200      	movs	r2, #0
 8007108:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800710c:	9b00      	ldr	r3, [sp, #0]
 800710e:	2b02      	cmp	r3, #2
 8007110:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007114:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007118:	d033      	beq.n	8007182 <pow+0xea>
 800711a:	a802      	add	r0, sp, #8
 800711c:	f000 ff87 	bl	800802e <matherr>
 8007120:	bb48      	cbnz	r0, 8007176 <pow+0xde>
 8007122:	e05d      	b.n	80071e0 <pow+0x148>
 8007124:	f04f 0a00 	mov.w	sl, #0
 8007128:	f04f 0b00 	mov.w	fp, #0
 800712c:	4652      	mov	r2, sl
 800712e:	465b      	mov	r3, fp
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 fcc0 	bl	8000ab8 <__aeabi_dcmpeq>
 8007138:	ec4b ab19 	vmov	d9, sl, fp
 800713c:	2800      	cmp	r0, #0
 800713e:	d054      	beq.n	80071ea <pow+0x152>
 8007140:	4652      	mov	r2, sl
 8007142:	465b      	mov	r3, fp
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 fcb6 	bl	8000ab8 <__aeabi_dcmpeq>
 800714c:	4680      	mov	r8, r0
 800714e:	b318      	cbz	r0, 8007198 <pow+0x100>
 8007150:	2301      	movs	r3, #1
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	4b80      	ldr	r3, [pc, #512]	; (8007358 <pow+0x2c0>)
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	930a      	str	r3, [sp, #40]	; 0x28
 800715c:	9b00      	ldr	r3, [sp, #0]
 800715e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007162:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007166:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0d5      	beq.n	800711a <pow+0x82>
 800716e:	4b7b      	ldr	r3, [pc, #492]	; (800735c <pow+0x2c4>)
 8007170:	2200      	movs	r2, #0
 8007172:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007178:	b11b      	cbz	r3, 8007182 <pow+0xea>
 800717a:	f7ff f9cb 	bl	8006514 <__errno>
 800717e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007180:	6003      	str	r3, [r0, #0]
 8007182:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007186:	eeb0 0a48 	vmov.f32	s0, s16
 800718a:	eef0 0a68 	vmov.f32	s1, s17
 800718e:	b00d      	add	sp, #52	; 0x34
 8007190:	ecbd 8b04 	vpop	{d8-d9}
 8007194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007198:	ec45 4b10 	vmov	d0, r4, r5
 800719c:	f000 ff3f 	bl	800801e <finite>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0f0      	beq.n	8007186 <pow+0xee>
 80071a4:	4652      	mov	r2, sl
 80071a6:	465b      	mov	r3, fp
 80071a8:	4620      	mov	r0, r4
 80071aa:	4629      	mov	r1, r5
 80071ac:	f7f9 fc8e 	bl	8000acc <__aeabi_dcmplt>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d0e8      	beq.n	8007186 <pow+0xee>
 80071b4:	2301      	movs	r3, #1
 80071b6:	9302      	str	r3, [sp, #8]
 80071b8:	4b67      	ldr	r3, [pc, #412]	; (8007358 <pow+0x2c0>)
 80071ba:	9303      	str	r3, [sp, #12]
 80071bc:	f999 3000 	ldrsb.w	r3, [r9]
 80071c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80071c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80071c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80071cc:	b913      	cbnz	r3, 80071d4 <pow+0x13c>
 80071ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80071d2:	e7a2      	b.n	800711a <pow+0x82>
 80071d4:	4962      	ldr	r1, [pc, #392]	; (8007360 <pow+0x2c8>)
 80071d6:	2000      	movs	r0, #0
 80071d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d19c      	bne.n	800711a <pow+0x82>
 80071e0:	f7ff f998 	bl	8006514 <__errno>
 80071e4:	2321      	movs	r3, #33	; 0x21
 80071e6:	6003      	str	r3, [r0, #0]
 80071e8:	e7c5      	b.n	8007176 <pow+0xde>
 80071ea:	eeb0 0a48 	vmov.f32	s0, s16
 80071ee:	eef0 0a68 	vmov.f32	s1, s17
 80071f2:	f000 ff14 	bl	800801e <finite>
 80071f6:	9000      	str	r0, [sp, #0]
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f040 8081 	bne.w	8007300 <pow+0x268>
 80071fe:	ec47 6b10 	vmov	d0, r6, r7
 8007202:	f000 ff0c 	bl	800801e <finite>
 8007206:	2800      	cmp	r0, #0
 8007208:	d07a      	beq.n	8007300 <pow+0x268>
 800720a:	ec45 4b10 	vmov	d0, r4, r5
 800720e:	f000 ff06 	bl	800801e <finite>
 8007212:	2800      	cmp	r0, #0
 8007214:	d074      	beq.n	8007300 <pow+0x268>
 8007216:	ec53 2b18 	vmov	r2, r3, d8
 800721a:	ee18 0a10 	vmov	r0, s16
 800721e:	4619      	mov	r1, r3
 8007220:	f7f9 fc7c 	bl	8000b1c <__aeabi_dcmpun>
 8007224:	f999 9000 	ldrsb.w	r9, [r9]
 8007228:	4b4b      	ldr	r3, [pc, #300]	; (8007358 <pow+0x2c0>)
 800722a:	b1b0      	cbz	r0, 800725a <pow+0x1c2>
 800722c:	2201      	movs	r2, #1
 800722e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007232:	9b00      	ldr	r3, [sp, #0]
 8007234:	930a      	str	r3, [sp, #40]	; 0x28
 8007236:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800723a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800723e:	f1b9 0f00 	cmp.w	r9, #0
 8007242:	d0c4      	beq.n	80071ce <pow+0x136>
 8007244:	4652      	mov	r2, sl
 8007246:	465b      	mov	r3, fp
 8007248:	4650      	mov	r0, sl
 800724a:	4659      	mov	r1, fp
 800724c:	f7f9 faf6 	bl	800083c <__aeabi_ddiv>
 8007250:	f1b9 0f02 	cmp.w	r9, #2
 8007254:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007258:	e7c1      	b.n	80071de <pow+0x146>
 800725a:	2203      	movs	r2, #3
 800725c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007260:	900a      	str	r0, [sp, #40]	; 0x28
 8007262:	4629      	mov	r1, r5
 8007264:	4620      	mov	r0, r4
 8007266:	2200      	movs	r2, #0
 8007268:	4b3e      	ldr	r3, [pc, #248]	; (8007364 <pow+0x2cc>)
 800726a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800726e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007272:	f7f9 f9b9 	bl	80005e8 <__aeabi_dmul>
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	f1b9 0f00 	cmp.w	r9, #0
 800727e:	d124      	bne.n	80072ca <pow+0x232>
 8007280:	4b39      	ldr	r3, [pc, #228]	; (8007368 <pow+0x2d0>)
 8007282:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007286:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800728a:	4630      	mov	r0, r6
 800728c:	4652      	mov	r2, sl
 800728e:	465b      	mov	r3, fp
 8007290:	4639      	mov	r1, r7
 8007292:	f7f9 fc1b 	bl	8000acc <__aeabi_dcmplt>
 8007296:	2800      	cmp	r0, #0
 8007298:	d056      	beq.n	8007348 <pow+0x2b0>
 800729a:	ec45 4b10 	vmov	d0, r4, r5
 800729e:	f000 fed3 	bl	8008048 <rint>
 80072a2:	4622      	mov	r2, r4
 80072a4:	462b      	mov	r3, r5
 80072a6:	ec51 0b10 	vmov	r0, r1, d0
 80072aa:	f7f9 fc05 	bl	8000ab8 <__aeabi_dcmpeq>
 80072ae:	b920      	cbnz	r0, 80072ba <pow+0x222>
 80072b0:	4b2e      	ldr	r3, [pc, #184]	; (800736c <pow+0x2d4>)
 80072b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80072b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072ba:	f998 3000 	ldrsb.w	r3, [r8]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d142      	bne.n	8007348 <pow+0x2b0>
 80072c2:	f7ff f927 	bl	8006514 <__errno>
 80072c6:	2322      	movs	r3, #34	; 0x22
 80072c8:	e78d      	b.n	80071e6 <pow+0x14e>
 80072ca:	4b29      	ldr	r3, [pc, #164]	; (8007370 <pow+0x2d8>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072d2:	4630      	mov	r0, r6
 80072d4:	4652      	mov	r2, sl
 80072d6:	465b      	mov	r3, fp
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f9 fbf7 	bl	8000acc <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d0eb      	beq.n	80072ba <pow+0x222>
 80072e2:	ec45 4b10 	vmov	d0, r4, r5
 80072e6:	f000 feaf 	bl	8008048 <rint>
 80072ea:	4622      	mov	r2, r4
 80072ec:	462b      	mov	r3, r5
 80072ee:	ec51 0b10 	vmov	r0, r1, d0
 80072f2:	f7f9 fbe1 	bl	8000ab8 <__aeabi_dcmpeq>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d1df      	bne.n	80072ba <pow+0x222>
 80072fa:	2200      	movs	r2, #0
 80072fc:	4b18      	ldr	r3, [pc, #96]	; (8007360 <pow+0x2c8>)
 80072fe:	e7da      	b.n	80072b6 <pow+0x21e>
 8007300:	2200      	movs	r2, #0
 8007302:	2300      	movs	r3, #0
 8007304:	ec51 0b18 	vmov	r0, r1, d8
 8007308:	f7f9 fbd6 	bl	8000ab8 <__aeabi_dcmpeq>
 800730c:	2800      	cmp	r0, #0
 800730e:	f43f af3a 	beq.w	8007186 <pow+0xee>
 8007312:	ec47 6b10 	vmov	d0, r6, r7
 8007316:	f000 fe82 	bl	800801e <finite>
 800731a:	2800      	cmp	r0, #0
 800731c:	f43f af33 	beq.w	8007186 <pow+0xee>
 8007320:	ec45 4b10 	vmov	d0, r4, r5
 8007324:	f000 fe7b 	bl	800801e <finite>
 8007328:	2800      	cmp	r0, #0
 800732a:	f43f af2c 	beq.w	8007186 <pow+0xee>
 800732e:	2304      	movs	r3, #4
 8007330:	9302      	str	r3, [sp, #8]
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <pow+0x2c0>)
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	2300      	movs	r3, #0
 8007338:	930a      	str	r3, [sp, #40]	; 0x28
 800733a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800733e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007342:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007346:	e7b8      	b.n	80072ba <pow+0x222>
 8007348:	a802      	add	r0, sp, #8
 800734a:	f000 fe70 	bl	800802e <matherr>
 800734e:	2800      	cmp	r0, #0
 8007350:	f47f af11 	bne.w	8007176 <pow+0xde>
 8007354:	e7b5      	b.n	80072c2 <pow+0x22a>
 8007356:	bf00      	nop
 8007358:	08009b31 	.word	0x08009b31
 800735c:	3ff00000 	.word	0x3ff00000
 8007360:	fff00000 	.word	0xfff00000
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	47efffff 	.word	0x47efffff
 800736c:	c7efffff 	.word	0xc7efffff
 8007370:	7ff00000 	.word	0x7ff00000
 8007374:	20000080 	.word	0x20000080

08007378 <__ieee754_log10>:
 8007378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800737c:	ec55 4b10 	vmov	r4, r5, d0
 8007380:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8007384:	462b      	mov	r3, r5
 8007386:	da2f      	bge.n	80073e8 <__ieee754_log10+0x70>
 8007388:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800738c:	4322      	orrs	r2, r4
 800738e:	d10a      	bne.n	80073a6 <__ieee754_log10+0x2e>
 8007390:	493b      	ldr	r1, [pc, #236]	; (8007480 <__ieee754_log10+0x108>)
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	2000      	movs	r0, #0
 8007398:	f7f9 fa50 	bl	800083c <__aeabi_ddiv>
 800739c:	ec41 0b10 	vmov	d0, r0, r1
 80073a0:	b003      	add	sp, #12
 80073a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	da08      	bge.n	80073bc <__ieee754_log10+0x44>
 80073aa:	ee10 2a10 	vmov	r2, s0
 80073ae:	4620      	mov	r0, r4
 80073b0:	4629      	mov	r1, r5
 80073b2:	f7f8 ff61 	bl	8000278 <__aeabi_dsub>
 80073b6:	2200      	movs	r2, #0
 80073b8:	2300      	movs	r3, #0
 80073ba:	e7ed      	b.n	8007398 <__ieee754_log10+0x20>
 80073bc:	2200      	movs	r2, #0
 80073be:	4b31      	ldr	r3, [pc, #196]	; (8007484 <__ieee754_log10+0x10c>)
 80073c0:	4629      	mov	r1, r5
 80073c2:	ee10 0a10 	vmov	r0, s0
 80073c6:	f7f9 f90f 	bl	80005e8 <__aeabi_dmul>
 80073ca:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80073ce:	4604      	mov	r4, r0
 80073d0:	460d      	mov	r5, r1
 80073d2:	460b      	mov	r3, r1
 80073d4:	492c      	ldr	r1, [pc, #176]	; (8007488 <__ieee754_log10+0x110>)
 80073d6:	428b      	cmp	r3, r1
 80073d8:	dd08      	ble.n	80073ec <__ieee754_log10+0x74>
 80073da:	4622      	mov	r2, r4
 80073dc:	462b      	mov	r3, r5
 80073de:	4620      	mov	r0, r4
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7f8 ff4b 	bl	800027c <__adddf3>
 80073e6:	e7d9      	b.n	800739c <__ieee754_log10+0x24>
 80073e8:	2200      	movs	r2, #0
 80073ea:	e7f3      	b.n	80073d4 <__ieee754_log10+0x5c>
 80073ec:	1518      	asrs	r0, r3, #20
 80073ee:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80073f2:	4410      	add	r0, r2
 80073f4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80073f8:	4448      	add	r0, r9
 80073fa:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80073fe:	f7f9 f889 	bl	8000514 <__aeabi_i2d>
 8007402:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8007406:	3303      	adds	r3, #3
 8007408:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800740c:	ec45 4b10 	vmov	d0, r4, r5
 8007410:	4606      	mov	r6, r0
 8007412:	460f      	mov	r7, r1
 8007414:	f000 ff14 	bl	8008240 <__ieee754_log>
 8007418:	a313      	add	r3, pc, #76	; (adr r3, 8007468 <__ieee754_log10+0xf0>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	ed8d 0b00 	vstr	d0, [sp]
 8007426:	f7f9 f8df 	bl	80005e8 <__aeabi_dmul>
 800742a:	ed9d 0b00 	vldr	d0, [sp]
 800742e:	4604      	mov	r4, r0
 8007430:	460d      	mov	r5, r1
 8007432:	a30f      	add	r3, pc, #60	; (adr r3, 8007470 <__ieee754_log10+0xf8>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	ec51 0b10 	vmov	r0, r1, d0
 800743c:	f7f9 f8d4 	bl	80005e8 <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f8 ff18 	bl	800027c <__adddf3>
 800744c:	a30a      	add	r3, pc, #40	; (adr r3, 8007478 <__ieee754_log10+0x100>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	4604      	mov	r4, r0
 8007454:	460d      	mov	r5, r1
 8007456:	4630      	mov	r0, r6
 8007458:	4639      	mov	r1, r7
 800745a:	f7f9 f8c5 	bl	80005e8 <__aeabi_dmul>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	e7bc      	b.n	80073e2 <__ieee754_log10+0x6a>
 8007468:	11f12b36 	.word	0x11f12b36
 800746c:	3d59fef3 	.word	0x3d59fef3
 8007470:	1526e50e 	.word	0x1526e50e
 8007474:	3fdbcb7b 	.word	0x3fdbcb7b
 8007478:	509f6000 	.word	0x509f6000
 800747c:	3fd34413 	.word	0x3fd34413
 8007480:	c3500000 	.word	0xc3500000
 8007484:	43500000 	.word	0x43500000
 8007488:	7fefffff 	.word	0x7fefffff
 800748c:	00000000 	.word	0x00000000

08007490 <__ieee754_pow>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	b091      	sub	sp, #68	; 0x44
 8007496:	ed8d 1b00 	vstr	d1, [sp]
 800749a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800749e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80074a2:	ea58 0302 	orrs.w	r3, r8, r2
 80074a6:	ec57 6b10 	vmov	r6, r7, d0
 80074aa:	f000 84be 	beq.w	8007e2a <__ieee754_pow+0x99a>
 80074ae:	4b7a      	ldr	r3, [pc, #488]	; (8007698 <__ieee754_pow+0x208>)
 80074b0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80074b4:	429c      	cmp	r4, r3
 80074b6:	463d      	mov	r5, r7
 80074b8:	ee10 aa10 	vmov	sl, s0
 80074bc:	dc09      	bgt.n	80074d2 <__ieee754_pow+0x42>
 80074be:	d103      	bne.n	80074c8 <__ieee754_pow+0x38>
 80074c0:	b93e      	cbnz	r6, 80074d2 <__ieee754_pow+0x42>
 80074c2:	45a0      	cmp	r8, r4
 80074c4:	dc0d      	bgt.n	80074e2 <__ieee754_pow+0x52>
 80074c6:	e001      	b.n	80074cc <__ieee754_pow+0x3c>
 80074c8:	4598      	cmp	r8, r3
 80074ca:	dc02      	bgt.n	80074d2 <__ieee754_pow+0x42>
 80074cc:	4598      	cmp	r8, r3
 80074ce:	d10e      	bne.n	80074ee <__ieee754_pow+0x5e>
 80074d0:	b16a      	cbz	r2, 80074ee <__ieee754_pow+0x5e>
 80074d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80074d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80074da:	ea54 030a 	orrs.w	r3, r4, sl
 80074de:	f000 84a4 	beq.w	8007e2a <__ieee754_pow+0x99a>
 80074e2:	486e      	ldr	r0, [pc, #440]	; (800769c <__ieee754_pow+0x20c>)
 80074e4:	b011      	add	sp, #68	; 0x44
 80074e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ea:	f000 bda5 	b.w	8008038 <nan>
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	da53      	bge.n	800759a <__ieee754_pow+0x10a>
 80074f2:	4b6b      	ldr	r3, [pc, #428]	; (80076a0 <__ieee754_pow+0x210>)
 80074f4:	4598      	cmp	r8, r3
 80074f6:	dc4d      	bgt.n	8007594 <__ieee754_pow+0x104>
 80074f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80074fc:	4598      	cmp	r8, r3
 80074fe:	dd4c      	ble.n	800759a <__ieee754_pow+0x10a>
 8007500:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007504:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007508:	2b14      	cmp	r3, #20
 800750a:	dd26      	ble.n	800755a <__ieee754_pow+0xca>
 800750c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007510:	fa22 f103 	lsr.w	r1, r2, r3
 8007514:	fa01 f303 	lsl.w	r3, r1, r3
 8007518:	4293      	cmp	r3, r2
 800751a:	d13e      	bne.n	800759a <__ieee754_pow+0x10a>
 800751c:	f001 0101 	and.w	r1, r1, #1
 8007520:	f1c1 0b02 	rsb	fp, r1, #2
 8007524:	2a00      	cmp	r2, #0
 8007526:	d15b      	bne.n	80075e0 <__ieee754_pow+0x150>
 8007528:	4b5b      	ldr	r3, [pc, #364]	; (8007698 <__ieee754_pow+0x208>)
 800752a:	4598      	cmp	r8, r3
 800752c:	d124      	bne.n	8007578 <__ieee754_pow+0xe8>
 800752e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007532:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007536:	ea53 030a 	orrs.w	r3, r3, sl
 800753a:	f000 8476 	beq.w	8007e2a <__ieee754_pow+0x99a>
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <__ieee754_pow+0x214>)
 8007540:	429c      	cmp	r4, r3
 8007542:	dd2d      	ble.n	80075a0 <__ieee754_pow+0x110>
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	f280 8473 	bge.w	8007e32 <__ieee754_pow+0x9a2>
 800754c:	2000      	movs	r0, #0
 800754e:	2100      	movs	r1, #0
 8007550:	ec41 0b10 	vmov	d0, r0, r1
 8007554:	b011      	add	sp, #68	; 0x44
 8007556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755a:	2a00      	cmp	r2, #0
 800755c:	d13e      	bne.n	80075dc <__ieee754_pow+0x14c>
 800755e:	f1c3 0314 	rsb	r3, r3, #20
 8007562:	fa48 f103 	asr.w	r1, r8, r3
 8007566:	fa01 f303 	lsl.w	r3, r1, r3
 800756a:	4543      	cmp	r3, r8
 800756c:	f040 8469 	bne.w	8007e42 <__ieee754_pow+0x9b2>
 8007570:	f001 0101 	and.w	r1, r1, #1
 8007574:	f1c1 0b02 	rsb	fp, r1, #2
 8007578:	4b4b      	ldr	r3, [pc, #300]	; (80076a8 <__ieee754_pow+0x218>)
 800757a:	4598      	cmp	r8, r3
 800757c:	d118      	bne.n	80075b0 <__ieee754_pow+0x120>
 800757e:	f1b9 0f00 	cmp.w	r9, #0
 8007582:	f280 845a 	bge.w	8007e3a <__ieee754_pow+0x9aa>
 8007586:	4948      	ldr	r1, [pc, #288]	; (80076a8 <__ieee754_pow+0x218>)
 8007588:	4632      	mov	r2, r6
 800758a:	463b      	mov	r3, r7
 800758c:	2000      	movs	r0, #0
 800758e:	f7f9 f955 	bl	800083c <__aeabi_ddiv>
 8007592:	e7dd      	b.n	8007550 <__ieee754_pow+0xc0>
 8007594:	f04f 0b02 	mov.w	fp, #2
 8007598:	e7c4      	b.n	8007524 <__ieee754_pow+0x94>
 800759a:	f04f 0b00 	mov.w	fp, #0
 800759e:	e7c1      	b.n	8007524 <__ieee754_pow+0x94>
 80075a0:	f1b9 0f00 	cmp.w	r9, #0
 80075a4:	dad2      	bge.n	800754c <__ieee754_pow+0xbc>
 80075a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80075aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80075ae:	e7cf      	b.n	8007550 <__ieee754_pow+0xc0>
 80075b0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80075b4:	d106      	bne.n	80075c4 <__ieee754_pow+0x134>
 80075b6:	4632      	mov	r2, r6
 80075b8:	463b      	mov	r3, r7
 80075ba:	4610      	mov	r0, r2
 80075bc:	4619      	mov	r1, r3
 80075be:	f7f9 f813 	bl	80005e8 <__aeabi_dmul>
 80075c2:	e7c5      	b.n	8007550 <__ieee754_pow+0xc0>
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <__ieee754_pow+0x21c>)
 80075c6:	4599      	cmp	r9, r3
 80075c8:	d10a      	bne.n	80075e0 <__ieee754_pow+0x150>
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	db08      	blt.n	80075e0 <__ieee754_pow+0x150>
 80075ce:	ec47 6b10 	vmov	d0, r6, r7
 80075d2:	b011      	add	sp, #68	; 0x44
 80075d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	f000 bc68 	b.w	8007eac <__ieee754_sqrt>
 80075dc:	f04f 0b00 	mov.w	fp, #0
 80075e0:	ec47 6b10 	vmov	d0, r6, r7
 80075e4:	f000 fd12 	bl	800800c <fabs>
 80075e8:	ec51 0b10 	vmov	r0, r1, d0
 80075ec:	f1ba 0f00 	cmp.w	sl, #0
 80075f0:	d127      	bne.n	8007642 <__ieee754_pow+0x1b2>
 80075f2:	b124      	cbz	r4, 80075fe <__ieee754_pow+0x16e>
 80075f4:	4b2c      	ldr	r3, [pc, #176]	; (80076a8 <__ieee754_pow+0x218>)
 80075f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d121      	bne.n	8007642 <__ieee754_pow+0x1b2>
 80075fe:	f1b9 0f00 	cmp.w	r9, #0
 8007602:	da05      	bge.n	8007610 <__ieee754_pow+0x180>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	2000      	movs	r0, #0
 800760a:	4927      	ldr	r1, [pc, #156]	; (80076a8 <__ieee754_pow+0x218>)
 800760c:	f7f9 f916 	bl	800083c <__aeabi_ddiv>
 8007610:	2d00      	cmp	r5, #0
 8007612:	da9d      	bge.n	8007550 <__ieee754_pow+0xc0>
 8007614:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007618:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800761c:	ea54 030b 	orrs.w	r3, r4, fp
 8007620:	d108      	bne.n	8007634 <__ieee754_pow+0x1a4>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4610      	mov	r0, r2
 8007628:	4619      	mov	r1, r3
 800762a:	f7f8 fe25 	bl	8000278 <__aeabi_dsub>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	e7ac      	b.n	800758e <__ieee754_pow+0xfe>
 8007634:	f1bb 0f01 	cmp.w	fp, #1
 8007638:	d18a      	bne.n	8007550 <__ieee754_pow+0xc0>
 800763a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800763e:	4619      	mov	r1, r3
 8007640:	e786      	b.n	8007550 <__ieee754_pow+0xc0>
 8007642:	0fed      	lsrs	r5, r5, #31
 8007644:	1e6b      	subs	r3, r5, #1
 8007646:	930d      	str	r3, [sp, #52]	; 0x34
 8007648:	ea5b 0303 	orrs.w	r3, fp, r3
 800764c:	d102      	bne.n	8007654 <__ieee754_pow+0x1c4>
 800764e:	4632      	mov	r2, r6
 8007650:	463b      	mov	r3, r7
 8007652:	e7e8      	b.n	8007626 <__ieee754_pow+0x196>
 8007654:	4b16      	ldr	r3, [pc, #88]	; (80076b0 <__ieee754_pow+0x220>)
 8007656:	4598      	cmp	r8, r3
 8007658:	f340 80fe 	ble.w	8007858 <__ieee754_pow+0x3c8>
 800765c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007660:	4598      	cmp	r8, r3
 8007662:	dd0a      	ble.n	800767a <__ieee754_pow+0x1ea>
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <__ieee754_pow+0x214>)
 8007666:	429c      	cmp	r4, r3
 8007668:	dc0d      	bgt.n	8007686 <__ieee754_pow+0x1f6>
 800766a:	f1b9 0f00 	cmp.w	r9, #0
 800766e:	f6bf af6d 	bge.w	800754c <__ieee754_pow+0xbc>
 8007672:	a307      	add	r3, pc, #28	; (adr r3, 8007690 <__ieee754_pow+0x200>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	e79f      	b.n	80075ba <__ieee754_pow+0x12a>
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <__ieee754_pow+0x224>)
 800767c:	429c      	cmp	r4, r3
 800767e:	ddf4      	ble.n	800766a <__ieee754_pow+0x1da>
 8007680:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <__ieee754_pow+0x218>)
 8007682:	429c      	cmp	r4, r3
 8007684:	dd18      	ble.n	80076b8 <__ieee754_pow+0x228>
 8007686:	f1b9 0f00 	cmp.w	r9, #0
 800768a:	dcf2      	bgt.n	8007672 <__ieee754_pow+0x1e2>
 800768c:	e75e      	b.n	800754c <__ieee754_pow+0xbc>
 800768e:	bf00      	nop
 8007690:	8800759c 	.word	0x8800759c
 8007694:	7e37e43c 	.word	0x7e37e43c
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	08009afd 	.word	0x08009afd
 80076a0:	433fffff 	.word	0x433fffff
 80076a4:	3fefffff 	.word	0x3fefffff
 80076a8:	3ff00000 	.word	0x3ff00000
 80076ac:	3fe00000 	.word	0x3fe00000
 80076b0:	41e00000 	.word	0x41e00000
 80076b4:	3feffffe 	.word	0x3feffffe
 80076b8:	2200      	movs	r2, #0
 80076ba:	4b63      	ldr	r3, [pc, #396]	; (8007848 <__ieee754_pow+0x3b8>)
 80076bc:	f7f8 fddc 	bl	8000278 <__aeabi_dsub>
 80076c0:	a355      	add	r3, pc, #340	; (adr r3, 8007818 <__ieee754_pow+0x388>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	4604      	mov	r4, r0
 80076c8:	460d      	mov	r5, r1
 80076ca:	f7f8 ff8d 	bl	80005e8 <__aeabi_dmul>
 80076ce:	a354      	add	r3, pc, #336	; (adr r3, 8007820 <__ieee754_pow+0x390>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	4606      	mov	r6, r0
 80076d6:	460f      	mov	r7, r1
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f7f8 ff84 	bl	80005e8 <__aeabi_dmul>
 80076e0:	2200      	movs	r2, #0
 80076e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e6:	4b59      	ldr	r3, [pc, #356]	; (800784c <__ieee754_pow+0x3bc>)
 80076e8:	4620      	mov	r0, r4
 80076ea:	4629      	mov	r1, r5
 80076ec:	f7f8 ff7c 	bl	80005e8 <__aeabi_dmul>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	a14c      	add	r1, pc, #304	; (adr r1, 8007828 <__ieee754_pow+0x398>)
 80076f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fa:	f7f8 fdbd 	bl	8000278 <__aeabi_dsub>
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	f7f8 ff71 	bl	80005e8 <__aeabi_dmul>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	2000      	movs	r0, #0
 800770c:	4950      	ldr	r1, [pc, #320]	; (8007850 <__ieee754_pow+0x3c0>)
 800770e:	f7f8 fdb3 	bl	8000278 <__aeabi_dsub>
 8007712:	4622      	mov	r2, r4
 8007714:	462b      	mov	r3, r5
 8007716:	4680      	mov	r8, r0
 8007718:	4689      	mov	r9, r1
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f8 ff63 	bl	80005e8 <__aeabi_dmul>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4640      	mov	r0, r8
 8007728:	4649      	mov	r1, r9
 800772a:	f7f8 ff5d 	bl	80005e8 <__aeabi_dmul>
 800772e:	a340      	add	r3, pc, #256	; (adr r3, 8007830 <__ieee754_pow+0x3a0>)
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f7f8 ff58 	bl	80005e8 <__aeabi_dmul>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007740:	f7f8 fd9a 	bl	8000278 <__aeabi_dsub>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4604      	mov	r4, r0
 800774a:	460d      	mov	r5, r1
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f7f8 fd94 	bl	800027c <__adddf3>
 8007754:	2000      	movs	r0, #0
 8007756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800775a:	4632      	mov	r2, r6
 800775c:	463b      	mov	r3, r7
 800775e:	f7f8 fd8b 	bl	8000278 <__aeabi_dsub>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f8 fd85 	bl	8000278 <__aeabi_dsub>
 800776e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007770:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007774:	4313      	orrs	r3, r2
 8007776:	4606      	mov	r6, r0
 8007778:	460f      	mov	r7, r1
 800777a:	f040 81eb 	bne.w	8007b54 <__ieee754_pow+0x6c4>
 800777e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007838 <__ieee754_pow+0x3a8>
 8007782:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007786:	2400      	movs	r4, #0
 8007788:	4622      	mov	r2, r4
 800778a:	462b      	mov	r3, r5
 800778c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007790:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007794:	f7f8 fd70 	bl	8000278 <__aeabi_dsub>
 8007798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800779c:	f7f8 ff24 	bl	80005e8 <__aeabi_dmul>
 80077a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077a4:	4680      	mov	r8, r0
 80077a6:	4689      	mov	r9, r1
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f8 ff1c 	bl	80005e8 <__aeabi_dmul>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4640      	mov	r0, r8
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f8 fd60 	bl	800027c <__adddf3>
 80077bc:	4622      	mov	r2, r4
 80077be:	462b      	mov	r3, r5
 80077c0:	4680      	mov	r8, r0
 80077c2:	4689      	mov	r9, r1
 80077c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077c8:	f7f8 ff0e 	bl	80005e8 <__aeabi_dmul>
 80077cc:	460b      	mov	r3, r1
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	4602      	mov	r2, r0
 80077d4:	4649      	mov	r1, r9
 80077d6:	4640      	mov	r0, r8
 80077d8:	e9cd 4500 	strd	r4, r5, [sp]
 80077dc:	f7f8 fd4e 	bl	800027c <__adddf3>
 80077e0:	4b1c      	ldr	r3, [pc, #112]	; (8007854 <__ieee754_pow+0x3c4>)
 80077e2:	4299      	cmp	r1, r3
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	468b      	mov	fp, r1
 80077ea:	f340 82f7 	ble.w	8007ddc <__ieee754_pow+0x94c>
 80077ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80077f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80077f6:	4303      	orrs	r3, r0
 80077f8:	f000 81ea 	beq.w	8007bd0 <__ieee754_pow+0x740>
 80077fc:	a310      	add	r3, pc, #64	; (adr r3, 8007840 <__ieee754_pow+0x3b0>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007806:	f7f8 feef 	bl	80005e8 <__aeabi_dmul>
 800780a:	a30d      	add	r3, pc, #52	; (adr r3, 8007840 <__ieee754_pow+0x3b0>)
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	e6d5      	b.n	80075be <__ieee754_pow+0x12e>
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
 8007818:	60000000 	.word	0x60000000
 800781c:	3ff71547 	.word	0x3ff71547
 8007820:	f85ddf44 	.word	0xf85ddf44
 8007824:	3e54ae0b 	.word	0x3e54ae0b
 8007828:	55555555 	.word	0x55555555
 800782c:	3fd55555 	.word	0x3fd55555
 8007830:	652b82fe 	.word	0x652b82fe
 8007834:	3ff71547 	.word	0x3ff71547
 8007838:	00000000 	.word	0x00000000
 800783c:	bff00000 	.word	0xbff00000
 8007840:	8800759c 	.word	0x8800759c
 8007844:	7e37e43c 	.word	0x7e37e43c
 8007848:	3ff00000 	.word	0x3ff00000
 800784c:	3fd00000 	.word	0x3fd00000
 8007850:	3fe00000 	.word	0x3fe00000
 8007854:	408fffff 	.word	0x408fffff
 8007858:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	da05      	bge.n	800786e <__ieee754_pow+0x3de>
 8007862:	4bd3      	ldr	r3, [pc, #844]	; (8007bb0 <__ieee754_pow+0x720>)
 8007864:	f7f8 fec0 	bl	80005e8 <__aeabi_dmul>
 8007868:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800786c:	460c      	mov	r4, r1
 800786e:	1523      	asrs	r3, r4, #20
 8007870:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007874:	4413      	add	r3, r2
 8007876:	9309      	str	r3, [sp, #36]	; 0x24
 8007878:	4bce      	ldr	r3, [pc, #824]	; (8007bb4 <__ieee754_pow+0x724>)
 800787a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800787e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007882:	429c      	cmp	r4, r3
 8007884:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007888:	dd08      	ble.n	800789c <__ieee754_pow+0x40c>
 800788a:	4bcb      	ldr	r3, [pc, #812]	; (8007bb8 <__ieee754_pow+0x728>)
 800788c:	429c      	cmp	r4, r3
 800788e:	f340 815e 	ble.w	8007b4e <__ieee754_pow+0x6be>
 8007892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007894:	3301      	adds	r3, #1
 8007896:	9309      	str	r3, [sp, #36]	; 0x24
 8007898:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800789c:	f04f 0a00 	mov.w	sl, #0
 80078a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80078a4:	930c      	str	r3, [sp, #48]	; 0x30
 80078a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078a8:	4bc4      	ldr	r3, [pc, #784]	; (8007bbc <__ieee754_pow+0x72c>)
 80078aa:	4413      	add	r3, r2
 80078ac:	ed93 7b00 	vldr	d7, [r3]
 80078b0:	4629      	mov	r1, r5
 80078b2:	ec53 2b17 	vmov	r2, r3, d7
 80078b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078be:	f7f8 fcdb 	bl	8000278 <__aeabi_dsub>
 80078c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ce:	f7f8 fcd5 	bl	800027c <__adddf3>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	2000      	movs	r0, #0
 80078d8:	49b9      	ldr	r1, [pc, #740]	; (8007bc0 <__ieee754_pow+0x730>)
 80078da:	f7f8 ffaf 	bl	800083c <__aeabi_ddiv>
 80078de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4630      	mov	r0, r6
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f8 fe7d 	bl	80005e8 <__aeabi_dmul>
 80078ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078f2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80078f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9302      	str	r3, [sp, #8]
 80078fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007902:	106d      	asrs	r5, r5, #1
 8007904:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007908:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800790c:	2200      	movs	r2, #0
 800790e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	4614      	mov	r4, r2
 8007918:	461d      	mov	r5, r3
 800791a:	f7f8 fe65 	bl	80005e8 <__aeabi_dmul>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4630      	mov	r0, r6
 8007924:	4639      	mov	r1, r7
 8007926:	f7f8 fca7 	bl	8000278 <__aeabi_dsub>
 800792a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800792e:	4606      	mov	r6, r0
 8007930:	460f      	mov	r7, r1
 8007932:	4620      	mov	r0, r4
 8007934:	4629      	mov	r1, r5
 8007936:	f7f8 fc9f 	bl	8000278 <__aeabi_dsub>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007942:	f7f8 fc99 	bl	8000278 <__aeabi_dsub>
 8007946:	4642      	mov	r2, r8
 8007948:	464b      	mov	r3, r9
 800794a:	f7f8 fe4d 	bl	80005e8 <__aeabi_dmul>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4630      	mov	r0, r6
 8007954:	4639      	mov	r1, r7
 8007956:	f7f8 fc8f 	bl	8000278 <__aeabi_dsub>
 800795a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800795e:	f7f8 fe43 	bl	80005e8 <__aeabi_dmul>
 8007962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800796a:	4610      	mov	r0, r2
 800796c:	4619      	mov	r1, r3
 800796e:	f7f8 fe3b 	bl	80005e8 <__aeabi_dmul>
 8007972:	a37b      	add	r3, pc, #492	; (adr r3, 8007b60 <__ieee754_pow+0x6d0>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	4604      	mov	r4, r0
 800797a:	460d      	mov	r5, r1
 800797c:	f7f8 fe34 	bl	80005e8 <__aeabi_dmul>
 8007980:	a379      	add	r3, pc, #484	; (adr r3, 8007b68 <__ieee754_pow+0x6d8>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fc79 	bl	800027c <__adddf3>
 800798a:	4622      	mov	r2, r4
 800798c:	462b      	mov	r3, r5
 800798e:	f7f8 fe2b 	bl	80005e8 <__aeabi_dmul>
 8007992:	a377      	add	r3, pc, #476	; (adr r3, 8007b70 <__ieee754_pow+0x6e0>)
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f7f8 fc70 	bl	800027c <__adddf3>
 800799c:	4622      	mov	r2, r4
 800799e:	462b      	mov	r3, r5
 80079a0:	f7f8 fe22 	bl	80005e8 <__aeabi_dmul>
 80079a4:	a374      	add	r3, pc, #464	; (adr r3, 8007b78 <__ieee754_pow+0x6e8>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f7f8 fc67 	bl	800027c <__adddf3>
 80079ae:	4622      	mov	r2, r4
 80079b0:	462b      	mov	r3, r5
 80079b2:	f7f8 fe19 	bl	80005e8 <__aeabi_dmul>
 80079b6:	a372      	add	r3, pc, #456	; (adr r3, 8007b80 <__ieee754_pow+0x6f0>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f7f8 fc5e 	bl	800027c <__adddf3>
 80079c0:	4622      	mov	r2, r4
 80079c2:	462b      	mov	r3, r5
 80079c4:	f7f8 fe10 	bl	80005e8 <__aeabi_dmul>
 80079c8:	a36f      	add	r3, pc, #444	; (adr r3, 8007b88 <__ieee754_pow+0x6f8>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fc55 	bl	800027c <__adddf3>
 80079d2:	4622      	mov	r2, r4
 80079d4:	4606      	mov	r6, r0
 80079d6:	460f      	mov	r7, r1
 80079d8:	462b      	mov	r3, r5
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	f7f8 fe03 	bl	80005e8 <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7f8 fdfd 	bl	80005e8 <__aeabi_dmul>
 80079ee:	4642      	mov	r2, r8
 80079f0:	4604      	mov	r4, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	464b      	mov	r3, r9
 80079f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079fa:	f7f8 fc3f 	bl	800027c <__adddf3>
 80079fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a02:	f7f8 fdf1 	bl	80005e8 <__aeabi_dmul>
 8007a06:	4622      	mov	r2, r4
 8007a08:	462b      	mov	r3, r5
 8007a0a:	f7f8 fc37 	bl	800027c <__adddf3>
 8007a0e:	4642      	mov	r2, r8
 8007a10:	4606      	mov	r6, r0
 8007a12:	460f      	mov	r7, r1
 8007a14:	464b      	mov	r3, r9
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f8 fde5 	bl	80005e8 <__aeabi_dmul>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4b68      	ldr	r3, [pc, #416]	; (8007bc4 <__ieee754_pow+0x734>)
 8007a22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a26:	f7f8 fc29 	bl	800027c <__adddf3>
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	463b      	mov	r3, r7
 8007a2e:	f7f8 fc25 	bl	800027c <__adddf3>
 8007a32:	9802      	ldr	r0, [sp, #8]
 8007a34:	460d      	mov	r5, r1
 8007a36:	4604      	mov	r4, r0
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	4649      	mov	r1, r9
 8007a40:	f7f8 fdd2 	bl	80005e8 <__aeabi_dmul>
 8007a44:	2200      	movs	r2, #0
 8007a46:	4680      	mov	r8, r0
 8007a48:	4689      	mov	r9, r1
 8007a4a:	4b5e      	ldr	r3, [pc, #376]	; (8007bc4 <__ieee754_pow+0x734>)
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	f7f8 fc12 	bl	8000278 <__aeabi_dsub>
 8007a54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a58:	f7f8 fc0e 	bl	8000278 <__aeabi_dsub>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 fc08 	bl	8000278 <__aeabi_dsub>
 8007a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a6c:	f7f8 fdbc 	bl	80005e8 <__aeabi_dmul>
 8007a70:	4622      	mov	r2, r4
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	462b      	mov	r3, r5
 8007a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a7c:	f7f8 fdb4 	bl	80005e8 <__aeabi_dmul>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	f7f8 fbf8 	bl	800027c <__adddf3>
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	460f      	mov	r7, r1
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f8 fbf0 	bl	800027c <__adddf3>
 8007a9c:	9802      	ldr	r0, [sp, #8]
 8007a9e:	a33c      	add	r3, pc, #240	; (adr r3, 8007b90 <__ieee754_pow+0x700>)
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	f7f8 fd9e 	bl	80005e8 <__aeabi_dmul>
 8007aac:	4642      	mov	r2, r8
 8007aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	f7f8 fbde 	bl	8000278 <__aeabi_dsub>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f8 fbd8 	bl	8000278 <__aeabi_dsub>
 8007ac8:	a333      	add	r3, pc, #204	; (adr r3, 8007b98 <__ieee754_pow+0x708>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fd8b 	bl	80005e8 <__aeabi_dmul>
 8007ad2:	a333      	add	r3, pc, #204	; (adr r3, 8007ba0 <__ieee754_pow+0x710>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	4606      	mov	r6, r0
 8007ada:	460f      	mov	r7, r1
 8007adc:	4620      	mov	r0, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f7f8 fd82 	bl	80005e8 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fbc6 	bl	800027c <__adddf3>
 8007af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af2:	4b35      	ldr	r3, [pc, #212]	; (8007bc8 <__ieee754_pow+0x738>)
 8007af4:	4413      	add	r3, r2
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f7f8 fbbf 	bl	800027c <__adddf3>
 8007afe:	4604      	mov	r4, r0
 8007b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b02:	460d      	mov	r5, r1
 8007b04:	f7f8 fd06 	bl	8000514 <__aeabi_i2d>
 8007b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b0a:	4b30      	ldr	r3, [pc, #192]	; (8007bcc <__ieee754_pow+0x73c>)
 8007b0c:	4413      	add	r3, r2
 8007b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b12:	4606      	mov	r6, r0
 8007b14:	460f      	mov	r7, r1
 8007b16:	4622      	mov	r2, r4
 8007b18:	462b      	mov	r3, r5
 8007b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b1e:	f7f8 fbad 	bl	800027c <__adddf3>
 8007b22:	4642      	mov	r2, r8
 8007b24:	464b      	mov	r3, r9
 8007b26:	f7f8 fba9 	bl	800027c <__adddf3>
 8007b2a:	4632      	mov	r2, r6
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	f7f8 fba5 	bl	800027c <__adddf3>
 8007b32:	9802      	ldr	r0, [sp, #8]
 8007b34:	4632      	mov	r2, r6
 8007b36:	463b      	mov	r3, r7
 8007b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b3c:	f7f8 fb9c 	bl	8000278 <__aeabi_dsub>
 8007b40:	4642      	mov	r2, r8
 8007b42:	464b      	mov	r3, r9
 8007b44:	f7f8 fb98 	bl	8000278 <__aeabi_dsub>
 8007b48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b4c:	e607      	b.n	800775e <__ieee754_pow+0x2ce>
 8007b4e:	f04f 0a01 	mov.w	sl, #1
 8007b52:	e6a5      	b.n	80078a0 <__ieee754_pow+0x410>
 8007b54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007ba8 <__ieee754_pow+0x718>
 8007b58:	e613      	b.n	8007782 <__ieee754_pow+0x2f2>
 8007b5a:	bf00      	nop
 8007b5c:	f3af 8000 	nop.w
 8007b60:	4a454eef 	.word	0x4a454eef
 8007b64:	3fca7e28 	.word	0x3fca7e28
 8007b68:	93c9db65 	.word	0x93c9db65
 8007b6c:	3fcd864a 	.word	0x3fcd864a
 8007b70:	a91d4101 	.word	0xa91d4101
 8007b74:	3fd17460 	.word	0x3fd17460
 8007b78:	518f264d 	.word	0x518f264d
 8007b7c:	3fd55555 	.word	0x3fd55555
 8007b80:	db6fabff 	.word	0xdb6fabff
 8007b84:	3fdb6db6 	.word	0x3fdb6db6
 8007b88:	33333303 	.word	0x33333303
 8007b8c:	3fe33333 	.word	0x3fe33333
 8007b90:	e0000000 	.word	0xe0000000
 8007b94:	3feec709 	.word	0x3feec709
 8007b98:	dc3a03fd 	.word	0xdc3a03fd
 8007b9c:	3feec709 	.word	0x3feec709
 8007ba0:	145b01f5 	.word	0x145b01f5
 8007ba4:	be3e2fe0 	.word	0xbe3e2fe0
 8007ba8:	00000000 	.word	0x00000000
 8007bac:	3ff00000 	.word	0x3ff00000
 8007bb0:	43400000 	.word	0x43400000
 8007bb4:	0003988e 	.word	0x0003988e
 8007bb8:	000bb679 	.word	0x000bb679
 8007bbc:	08009b38 	.word	0x08009b38
 8007bc0:	3ff00000 	.word	0x3ff00000
 8007bc4:	40080000 	.word	0x40080000
 8007bc8:	08009b58 	.word	0x08009b58
 8007bcc:	08009b48 	.word	0x08009b48
 8007bd0:	a3b4      	add	r3, pc, #720	; (adr r3, 8007ea4 <__ieee754_pow+0xa14>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 fb4f 	bl	800027c <__adddf3>
 8007bde:	4622      	mov	r2, r4
 8007be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007be4:	462b      	mov	r3, r5
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	f7f8 fb45 	bl	8000278 <__aeabi_dsub>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bf6:	f7f8 ff87 	bl	8000b08 <__aeabi_dcmpgt>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f47f adfe 	bne.w	80077fc <__ieee754_pow+0x36c>
 8007c00:	4aa3      	ldr	r2, [pc, #652]	; (8007e90 <__ieee754_pow+0xa00>)
 8007c02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c06:	4293      	cmp	r3, r2
 8007c08:	f340 810a 	ble.w	8007e20 <__ieee754_pow+0x990>
 8007c0c:	151b      	asrs	r3, r3, #20
 8007c0e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007c12:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007c16:	fa4a f303 	asr.w	r3, sl, r3
 8007c1a:	445b      	add	r3, fp
 8007c1c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007c20:	4e9c      	ldr	r6, [pc, #624]	; (8007e94 <__ieee754_pow+0xa04>)
 8007c22:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007c26:	4116      	asrs	r6, r2
 8007c28:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	ea23 0106 	bic.w	r1, r3, r6
 8007c32:	f1c2 0214 	rsb	r2, r2, #20
 8007c36:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007c3a:	fa4a fa02 	asr.w	sl, sl, r2
 8007c3e:	f1bb 0f00 	cmp.w	fp, #0
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	bfb8      	it	lt
 8007c4c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007c50:	f7f8 fb12 	bl	8000278 <__aeabi_dsub>
 8007c54:	e9cd 0100 	strd	r0, r1, [sp]
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c60:	f7f8 fb0c 	bl	800027c <__adddf3>
 8007c64:	2000      	movs	r0, #0
 8007c66:	a378      	add	r3, pc, #480	; (adr r3, 8007e48 <__ieee754_pow+0x9b8>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	f7f8 fcba 	bl	80005e8 <__aeabi_dmul>
 8007c74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c78:	4606      	mov	r6, r0
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 fafa 	bl	8000278 <__aeabi_dsub>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 faf4 	bl	8000278 <__aeabi_dsub>
 8007c90:	a36f      	add	r3, pc, #444	; (adr r3, 8007e50 <__ieee754_pow+0x9c0>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 fca7 	bl	80005e8 <__aeabi_dmul>
 8007c9a:	a36f      	add	r3, pc, #444	; (adr r3, 8007e58 <__ieee754_pow+0x9c8>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	4689      	mov	r9, r1
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7f8 fc9e 	bl	80005e8 <__aeabi_dmul>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	f7f8 fae2 	bl	800027c <__adddf3>
 8007cb8:	4604      	mov	r4, r0
 8007cba:	460d      	mov	r5, r1
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 fada 	bl	800027c <__adddf3>
 8007cc8:	4632      	mov	r2, r6
 8007cca:	463b      	mov	r3, r7
 8007ccc:	4680      	mov	r8, r0
 8007cce:	4689      	mov	r9, r1
 8007cd0:	f7f8 fad2 	bl	8000278 <__aeabi_dsub>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 facc 	bl	8000278 <__aeabi_dsub>
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	460f      	mov	r7, r1
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	4640      	mov	r0, r8
 8007cea:	4649      	mov	r1, r9
 8007cec:	f7f8 fc7c 	bl	80005e8 <__aeabi_dmul>
 8007cf0:	a35b      	add	r3, pc, #364	; (adr r3, 8007e60 <__ieee754_pow+0x9d0>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	f7f8 fc75 	bl	80005e8 <__aeabi_dmul>
 8007cfe:	a35a      	add	r3, pc, #360	; (adr r3, 8007e68 <__ieee754_pow+0x9d8>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fab8 	bl	8000278 <__aeabi_dsub>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	f7f8 fc6c 	bl	80005e8 <__aeabi_dmul>
 8007d10:	a357      	add	r3, pc, #348	; (adr r3, 8007e70 <__ieee754_pow+0x9e0>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fab1 	bl	800027c <__adddf3>
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	f7f8 fc63 	bl	80005e8 <__aeabi_dmul>
 8007d22:	a355      	add	r3, pc, #340	; (adr r3, 8007e78 <__ieee754_pow+0x9e8>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 faa6 	bl	8000278 <__aeabi_dsub>
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	462b      	mov	r3, r5
 8007d30:	f7f8 fc5a 	bl	80005e8 <__aeabi_dmul>
 8007d34:	a352      	add	r3, pc, #328	; (adr r3, 8007e80 <__ieee754_pow+0x9f0>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 fa9f 	bl	800027c <__adddf3>
 8007d3e:	4622      	mov	r2, r4
 8007d40:	462b      	mov	r3, r5
 8007d42:	f7f8 fc51 	bl	80005e8 <__aeabi_dmul>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 fa93 	bl	8000278 <__aeabi_dsub>
 8007d52:	4604      	mov	r4, r0
 8007d54:	460d      	mov	r5, r1
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 fc43 	bl	80005e8 <__aeabi_dmul>
 8007d62:	2200      	movs	r2, #0
 8007d64:	e9cd 0100 	strd	r0, r1, [sp]
 8007d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 fa82 	bl	8000278 <__aeabi_dsub>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d7c:	f7f8 fd5e 	bl	800083c <__aeabi_ddiv>
 8007d80:	4632      	mov	r2, r6
 8007d82:	4604      	mov	r4, r0
 8007d84:	460d      	mov	r5, r1
 8007d86:	463b      	mov	r3, r7
 8007d88:	4640      	mov	r0, r8
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	f7f8 fc2c 	bl	80005e8 <__aeabi_dmul>
 8007d90:	4632      	mov	r2, r6
 8007d92:	463b      	mov	r3, r7
 8007d94:	f7f8 fa72 	bl	800027c <__adddf3>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f7f8 fa6a 	bl	8000278 <__aeabi_dsub>
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	f7f8 fa66 	bl	8000278 <__aeabi_dsub>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	2000      	movs	r0, #0
 8007db2:	4939      	ldr	r1, [pc, #228]	; (8007e98 <__ieee754_pow+0xa08>)
 8007db4:	f7f8 fa60 	bl	8000278 <__aeabi_dsub>
 8007db8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007dbc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	da2f      	bge.n	8007e26 <__ieee754_pow+0x996>
 8007dc6:	4650      	mov	r0, sl
 8007dc8:	ec43 2b10 	vmov	d0, r2, r3
 8007dcc:	f000 f9c0 	bl	8008150 <scalbn>
 8007dd0:	ec51 0b10 	vmov	r0, r1, d0
 8007dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dd8:	f7ff bbf1 	b.w	80075be <__ieee754_pow+0x12e>
 8007ddc:	4b2f      	ldr	r3, [pc, #188]	; (8007e9c <__ieee754_pow+0xa0c>)
 8007dde:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007de2:	429e      	cmp	r6, r3
 8007de4:	f77f af0c 	ble.w	8007c00 <__ieee754_pow+0x770>
 8007de8:	4b2d      	ldr	r3, [pc, #180]	; (8007ea0 <__ieee754_pow+0xa10>)
 8007dea:	440b      	add	r3, r1
 8007dec:	4303      	orrs	r3, r0
 8007dee:	d00b      	beq.n	8007e08 <__ieee754_pow+0x978>
 8007df0:	a325      	add	r3, pc, #148	; (adr r3, 8007e88 <__ieee754_pow+0x9f8>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfa:	f7f8 fbf5 	bl	80005e8 <__aeabi_dmul>
 8007dfe:	a322      	add	r3, pc, #136	; (adr r3, 8007e88 <__ieee754_pow+0x9f8>)
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f7ff bbdb 	b.w	80075be <__ieee754_pow+0x12e>
 8007e08:	4622      	mov	r2, r4
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	f7f8 fa34 	bl	8000278 <__aeabi_dsub>
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	f7f8 fe6e 	bl	8000af4 <__aeabi_dcmpge>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	f43f aef1 	beq.w	8007c00 <__ieee754_pow+0x770>
 8007e1e:	e7e7      	b.n	8007df0 <__ieee754_pow+0x960>
 8007e20:	f04f 0a00 	mov.w	sl, #0
 8007e24:	e718      	b.n	8007c58 <__ieee754_pow+0x7c8>
 8007e26:	4621      	mov	r1, r4
 8007e28:	e7d4      	b.n	8007dd4 <__ieee754_pow+0x944>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	491a      	ldr	r1, [pc, #104]	; (8007e98 <__ieee754_pow+0xa08>)
 8007e2e:	f7ff bb8f 	b.w	8007550 <__ieee754_pow+0xc0>
 8007e32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e36:	f7ff bb8b 	b.w	8007550 <__ieee754_pow+0xc0>
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7ff bb87 	b.w	8007550 <__ieee754_pow+0xc0>
 8007e42:	4693      	mov	fp, r2
 8007e44:	f7ff bb98 	b.w	8007578 <__ieee754_pow+0xe8>
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	3fe62e43 	.word	0x3fe62e43
 8007e50:	fefa39ef 	.word	0xfefa39ef
 8007e54:	3fe62e42 	.word	0x3fe62e42
 8007e58:	0ca86c39 	.word	0x0ca86c39
 8007e5c:	be205c61 	.word	0xbe205c61
 8007e60:	72bea4d0 	.word	0x72bea4d0
 8007e64:	3e663769 	.word	0x3e663769
 8007e68:	c5d26bf1 	.word	0xc5d26bf1
 8007e6c:	3ebbbd41 	.word	0x3ebbbd41
 8007e70:	af25de2c 	.word	0xaf25de2c
 8007e74:	3f11566a 	.word	0x3f11566a
 8007e78:	16bebd93 	.word	0x16bebd93
 8007e7c:	3f66c16c 	.word	0x3f66c16c
 8007e80:	5555553e 	.word	0x5555553e
 8007e84:	3fc55555 	.word	0x3fc55555
 8007e88:	c2f8f359 	.word	0xc2f8f359
 8007e8c:	01a56e1f 	.word	0x01a56e1f
 8007e90:	3fe00000 	.word	0x3fe00000
 8007e94:	000fffff 	.word	0x000fffff
 8007e98:	3ff00000 	.word	0x3ff00000
 8007e9c:	4090cbff 	.word	0x4090cbff
 8007ea0:	3f6f3400 	.word	0x3f6f3400
 8007ea4:	652b82fe 	.word	0x652b82fe
 8007ea8:	3c971547 	.word	0x3c971547

08007eac <__ieee754_sqrt>:
 8007eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb0:	4955      	ldr	r1, [pc, #340]	; (8008008 <__ieee754_sqrt+0x15c>)
 8007eb2:	ec55 4b10 	vmov	r4, r5, d0
 8007eb6:	43a9      	bics	r1, r5
 8007eb8:	462b      	mov	r3, r5
 8007eba:	462a      	mov	r2, r5
 8007ebc:	d112      	bne.n	8007ee4 <__ieee754_sqrt+0x38>
 8007ebe:	ee10 2a10 	vmov	r2, s0
 8007ec2:	ee10 0a10 	vmov	r0, s0
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 fb8e 	bl	80005e8 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 f9d2 	bl	800027c <__adddf3>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	ec45 4b10 	vmov	d0, r4, r5
 8007ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	ee10 0a10 	vmov	r0, s0
 8007eea:	4621      	mov	r1, r4
 8007eec:	dc0f      	bgt.n	8007f0e <__ieee754_sqrt+0x62>
 8007eee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ef2:	4330      	orrs	r0, r6
 8007ef4:	d0f2      	beq.n	8007edc <__ieee754_sqrt+0x30>
 8007ef6:	b155      	cbz	r5, 8007f0e <__ieee754_sqrt+0x62>
 8007ef8:	ee10 2a10 	vmov	r2, s0
 8007efc:	4620      	mov	r0, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f8 f9ba 	bl	8000278 <__aeabi_dsub>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	f7f8 fc98 	bl	800083c <__aeabi_ddiv>
 8007f0c:	e7e4      	b.n	8007ed8 <__ieee754_sqrt+0x2c>
 8007f0e:	151b      	asrs	r3, r3, #20
 8007f10:	d073      	beq.n	8007ffa <__ieee754_sqrt+0x14e>
 8007f12:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007f16:	07dd      	lsls	r5, r3, #31
 8007f18:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007f1c:	bf48      	it	mi
 8007f1e:	0fc8      	lsrmi	r0, r1, #31
 8007f20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f24:	bf44      	itt	mi
 8007f26:	0049      	lslmi	r1, r1, #1
 8007f28:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007f2c:	2500      	movs	r5, #0
 8007f2e:	1058      	asrs	r0, r3, #1
 8007f30:	0fcb      	lsrs	r3, r1, #31
 8007f32:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007f36:	0049      	lsls	r1, r1, #1
 8007f38:	2316      	movs	r3, #22
 8007f3a:	462c      	mov	r4, r5
 8007f3c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007f40:	19a7      	adds	r7, r4, r6
 8007f42:	4297      	cmp	r7, r2
 8007f44:	bfde      	ittt	le
 8007f46:	19bc      	addle	r4, r7, r6
 8007f48:	1bd2      	suble	r2, r2, r7
 8007f4a:	19ad      	addle	r5, r5, r6
 8007f4c:	0fcf      	lsrs	r7, r1, #31
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007f54:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f5c:	d1f0      	bne.n	8007f40 <__ieee754_sqrt+0x94>
 8007f5e:	f04f 0c20 	mov.w	ip, #32
 8007f62:	469e      	mov	lr, r3
 8007f64:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007f68:	42a2      	cmp	r2, r4
 8007f6a:	eb06 070e 	add.w	r7, r6, lr
 8007f6e:	dc02      	bgt.n	8007f76 <__ieee754_sqrt+0xca>
 8007f70:	d112      	bne.n	8007f98 <__ieee754_sqrt+0xec>
 8007f72:	428f      	cmp	r7, r1
 8007f74:	d810      	bhi.n	8007f98 <__ieee754_sqrt+0xec>
 8007f76:	2f00      	cmp	r7, #0
 8007f78:	eb07 0e06 	add.w	lr, r7, r6
 8007f7c:	da42      	bge.n	8008004 <__ieee754_sqrt+0x158>
 8007f7e:	f1be 0f00 	cmp.w	lr, #0
 8007f82:	db3f      	blt.n	8008004 <__ieee754_sqrt+0x158>
 8007f84:	f104 0801 	add.w	r8, r4, #1
 8007f88:	1b12      	subs	r2, r2, r4
 8007f8a:	428f      	cmp	r7, r1
 8007f8c:	bf88      	it	hi
 8007f8e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f92:	1bc9      	subs	r1, r1, r7
 8007f94:	4433      	add	r3, r6
 8007f96:	4644      	mov	r4, r8
 8007f98:	0052      	lsls	r2, r2, #1
 8007f9a:	f1bc 0c01 	subs.w	ip, ip, #1
 8007f9e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007fa2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007fa6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007faa:	d1dd      	bne.n	8007f68 <__ieee754_sqrt+0xbc>
 8007fac:	430a      	orrs	r2, r1
 8007fae:	d006      	beq.n	8007fbe <__ieee754_sqrt+0x112>
 8007fb0:	1c5c      	adds	r4, r3, #1
 8007fb2:	bf13      	iteet	ne
 8007fb4:	3301      	addne	r3, #1
 8007fb6:	3501      	addeq	r5, #1
 8007fb8:	4663      	moveq	r3, ip
 8007fba:	f023 0301 	bicne.w	r3, r3, #1
 8007fbe:	106a      	asrs	r2, r5, #1
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	07e9      	lsls	r1, r5, #31
 8007fc4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007fc8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007fcc:	bf48      	it	mi
 8007fce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007fd2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007fd6:	461c      	mov	r4, r3
 8007fd8:	e780      	b.n	8007edc <__ieee754_sqrt+0x30>
 8007fda:	0aca      	lsrs	r2, r1, #11
 8007fdc:	3815      	subs	r0, #21
 8007fde:	0549      	lsls	r1, r1, #21
 8007fe0:	2a00      	cmp	r2, #0
 8007fe2:	d0fa      	beq.n	8007fda <__ieee754_sqrt+0x12e>
 8007fe4:	02d6      	lsls	r6, r2, #11
 8007fe6:	d50a      	bpl.n	8007ffe <__ieee754_sqrt+0x152>
 8007fe8:	f1c3 0420 	rsb	r4, r3, #32
 8007fec:	fa21 f404 	lsr.w	r4, r1, r4
 8007ff0:	1e5d      	subs	r5, r3, #1
 8007ff2:	4099      	lsls	r1, r3
 8007ff4:	4322      	orrs	r2, r4
 8007ff6:	1b43      	subs	r3, r0, r5
 8007ff8:	e78b      	b.n	8007f12 <__ieee754_sqrt+0x66>
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	e7f0      	b.n	8007fe0 <__ieee754_sqrt+0x134>
 8007ffe:	0052      	lsls	r2, r2, #1
 8008000:	3301      	adds	r3, #1
 8008002:	e7ef      	b.n	8007fe4 <__ieee754_sqrt+0x138>
 8008004:	46a0      	mov	r8, r4
 8008006:	e7bf      	b.n	8007f88 <__ieee754_sqrt+0xdc>
 8008008:	7ff00000 	.word	0x7ff00000

0800800c <fabs>:
 800800c:	ec51 0b10 	vmov	r0, r1, d0
 8008010:	ee10 2a10 	vmov	r2, s0
 8008014:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008018:	ec43 2b10 	vmov	d0, r2, r3
 800801c:	4770      	bx	lr

0800801e <finite>:
 800801e:	ee10 3a90 	vmov	r3, s1
 8008022:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008026:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800802a:	0fc0      	lsrs	r0, r0, #31
 800802c:	4770      	bx	lr

0800802e <matherr>:
 800802e:	2000      	movs	r0, #0
 8008030:	4770      	bx	lr
 8008032:	0000      	movs	r0, r0
 8008034:	0000      	movs	r0, r0
	...

08008038 <nan>:
 8008038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008040 <nan+0x8>
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	00000000 	.word	0x00000000
 8008044:	7ff80000 	.word	0x7ff80000

08008048 <rint>:
 8008048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800804a:	ec51 0b10 	vmov	r0, r1, d0
 800804e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008052:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008056:	2e13      	cmp	r6, #19
 8008058:	460b      	mov	r3, r1
 800805a:	ee10 4a10 	vmov	r4, s0
 800805e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008062:	dc56      	bgt.n	8008112 <rint+0xca>
 8008064:	2e00      	cmp	r6, #0
 8008066:	da2b      	bge.n	80080c0 <rint+0x78>
 8008068:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800806c:	4302      	orrs	r2, r0
 800806e:	d023      	beq.n	80080b8 <rint+0x70>
 8008070:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008074:	4302      	orrs	r2, r0
 8008076:	4254      	negs	r4, r2
 8008078:	4314      	orrs	r4, r2
 800807a:	0c4b      	lsrs	r3, r1, #17
 800807c:	0b24      	lsrs	r4, r4, #12
 800807e:	045b      	lsls	r3, r3, #17
 8008080:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008084:	ea44 0103 	orr.w	r1, r4, r3
 8008088:	460b      	mov	r3, r1
 800808a:	492f      	ldr	r1, [pc, #188]	; (8008148 <rint+0x100>)
 800808c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008090:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008094:	4602      	mov	r2, r0
 8008096:	4639      	mov	r1, r7
 8008098:	4630      	mov	r0, r6
 800809a:	f7f8 f8ef 	bl	800027c <__adddf3>
 800809e:	e9cd 0100 	strd	r0, r1, [sp]
 80080a2:	463b      	mov	r3, r7
 80080a4:	4632      	mov	r2, r6
 80080a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080aa:	f7f8 f8e5 	bl	8000278 <__aeabi_dsub>
 80080ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080b2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80080b6:	4639      	mov	r1, r7
 80080b8:	ec41 0b10 	vmov	d0, r0, r1
 80080bc:	b003      	add	sp, #12
 80080be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c0:	4a22      	ldr	r2, [pc, #136]	; (800814c <rint+0x104>)
 80080c2:	4132      	asrs	r2, r6
 80080c4:	ea01 0702 	and.w	r7, r1, r2
 80080c8:	4307      	orrs	r7, r0
 80080ca:	d0f5      	beq.n	80080b8 <rint+0x70>
 80080cc:	0852      	lsrs	r2, r2, #1
 80080ce:	4011      	ands	r1, r2
 80080d0:	430c      	orrs	r4, r1
 80080d2:	d00b      	beq.n	80080ec <rint+0xa4>
 80080d4:	ea23 0202 	bic.w	r2, r3, r2
 80080d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080dc:	2e13      	cmp	r6, #19
 80080de:	fa43 f306 	asr.w	r3, r3, r6
 80080e2:	bf0c      	ite	eq
 80080e4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80080e8:	2400      	movne	r4, #0
 80080ea:	4313      	orrs	r3, r2
 80080ec:	4916      	ldr	r1, [pc, #88]	; (8008148 <rint+0x100>)
 80080ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80080f2:	4622      	mov	r2, r4
 80080f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080f8:	4620      	mov	r0, r4
 80080fa:	4629      	mov	r1, r5
 80080fc:	f7f8 f8be 	bl	800027c <__adddf3>
 8008100:	e9cd 0100 	strd	r0, r1, [sp]
 8008104:	4622      	mov	r2, r4
 8008106:	462b      	mov	r3, r5
 8008108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800810c:	f7f8 f8b4 	bl	8000278 <__aeabi_dsub>
 8008110:	e7d2      	b.n	80080b8 <rint+0x70>
 8008112:	2e33      	cmp	r6, #51	; 0x33
 8008114:	dd07      	ble.n	8008126 <rint+0xde>
 8008116:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800811a:	d1cd      	bne.n	80080b8 <rint+0x70>
 800811c:	ee10 2a10 	vmov	r2, s0
 8008120:	f7f8 f8ac 	bl	800027c <__adddf3>
 8008124:	e7c8      	b.n	80080b8 <rint+0x70>
 8008126:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	40f2      	lsrs	r2, r6
 8008130:	4210      	tst	r0, r2
 8008132:	d0c1      	beq.n	80080b8 <rint+0x70>
 8008134:	0852      	lsrs	r2, r2, #1
 8008136:	4210      	tst	r0, r2
 8008138:	bf1f      	itttt	ne
 800813a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800813e:	ea20 0202 	bicne.w	r2, r0, r2
 8008142:	4134      	asrne	r4, r6
 8008144:	4314      	orrne	r4, r2
 8008146:	e7d1      	b.n	80080ec <rint+0xa4>
 8008148:	08009b68 	.word	0x08009b68
 800814c:	000fffff 	.word	0x000fffff

08008150 <scalbn>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	ec55 4b10 	vmov	r4, r5, d0
 8008156:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800815a:	4606      	mov	r6, r0
 800815c:	462b      	mov	r3, r5
 800815e:	b9aa      	cbnz	r2, 800818c <scalbn+0x3c>
 8008160:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008164:	4323      	orrs	r3, r4
 8008166:	d03b      	beq.n	80081e0 <scalbn+0x90>
 8008168:	4b31      	ldr	r3, [pc, #196]	; (8008230 <scalbn+0xe0>)
 800816a:	4629      	mov	r1, r5
 800816c:	2200      	movs	r2, #0
 800816e:	ee10 0a10 	vmov	r0, s0
 8008172:	f7f8 fa39 	bl	80005e8 <__aeabi_dmul>
 8008176:	4b2f      	ldr	r3, [pc, #188]	; (8008234 <scalbn+0xe4>)
 8008178:	429e      	cmp	r6, r3
 800817a:	4604      	mov	r4, r0
 800817c:	460d      	mov	r5, r1
 800817e:	da12      	bge.n	80081a6 <scalbn+0x56>
 8008180:	a327      	add	r3, pc, #156	; (adr r3, 8008220 <scalbn+0xd0>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 fa2f 	bl	80005e8 <__aeabi_dmul>
 800818a:	e009      	b.n	80081a0 <scalbn+0x50>
 800818c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008190:	428a      	cmp	r2, r1
 8008192:	d10c      	bne.n	80081ae <scalbn+0x5e>
 8008194:	ee10 2a10 	vmov	r2, s0
 8008198:	4620      	mov	r0, r4
 800819a:	4629      	mov	r1, r5
 800819c:	f7f8 f86e 	bl	800027c <__adddf3>
 80081a0:	4604      	mov	r4, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	e01c      	b.n	80081e0 <scalbn+0x90>
 80081a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081aa:	460b      	mov	r3, r1
 80081ac:	3a36      	subs	r2, #54	; 0x36
 80081ae:	4432      	add	r2, r6
 80081b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081b4:	428a      	cmp	r2, r1
 80081b6:	dd0b      	ble.n	80081d0 <scalbn+0x80>
 80081b8:	ec45 4b11 	vmov	d1, r4, r5
 80081bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008228 <scalbn+0xd8>
 80081c0:	f000 f9f0 	bl	80085a4 <copysign>
 80081c4:	a318      	add	r3, pc, #96	; (adr r3, 8008228 <scalbn+0xd8>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	ec51 0b10 	vmov	r0, r1, d0
 80081ce:	e7da      	b.n	8008186 <scalbn+0x36>
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	dd08      	ble.n	80081e6 <scalbn+0x96>
 80081d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081e0:	ec45 4b10 	vmov	d0, r4, r5
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081ea:	da0d      	bge.n	8008208 <scalbn+0xb8>
 80081ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081f0:	429e      	cmp	r6, r3
 80081f2:	ec45 4b11 	vmov	d1, r4, r5
 80081f6:	dce1      	bgt.n	80081bc <scalbn+0x6c>
 80081f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008220 <scalbn+0xd0>
 80081fc:	f000 f9d2 	bl	80085a4 <copysign>
 8008200:	a307      	add	r3, pc, #28	; (adr r3, 8008220 <scalbn+0xd0>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	e7e0      	b.n	80081ca <scalbn+0x7a>
 8008208:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800820c:	3236      	adds	r2, #54	; 0x36
 800820e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008212:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	2200      	movs	r2, #0
 800821c:	4b06      	ldr	r3, [pc, #24]	; (8008238 <scalbn+0xe8>)
 800821e:	e7b2      	b.n	8008186 <scalbn+0x36>
 8008220:	c2f8f359 	.word	0xc2f8f359
 8008224:	01a56e1f 	.word	0x01a56e1f
 8008228:	8800759c 	.word	0x8800759c
 800822c:	7e37e43c 	.word	0x7e37e43c
 8008230:	43500000 	.word	0x43500000
 8008234:	ffff3cb0 	.word	0xffff3cb0
 8008238:	3c900000 	.word	0x3c900000
 800823c:	00000000 	.word	0x00000000

08008240 <__ieee754_log>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	ec51 0b10 	vmov	r0, r1, d0
 8008248:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800824c:	b087      	sub	sp, #28
 800824e:	460d      	mov	r5, r1
 8008250:	da27      	bge.n	80082a2 <__ieee754_log+0x62>
 8008252:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008256:	4303      	orrs	r3, r0
 8008258:	ee10 2a10 	vmov	r2, s0
 800825c:	d10a      	bne.n	8008274 <__ieee754_log+0x34>
 800825e:	49cc      	ldr	r1, [pc, #816]	; (8008590 <__ieee754_log+0x350>)
 8008260:	2200      	movs	r2, #0
 8008262:	2300      	movs	r3, #0
 8008264:	2000      	movs	r0, #0
 8008266:	f7f8 fae9 	bl	800083c <__aeabi_ddiv>
 800826a:	ec41 0b10 	vmov	d0, r0, r1
 800826e:	b007      	add	sp, #28
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	2900      	cmp	r1, #0
 8008276:	da05      	bge.n	8008284 <__ieee754_log+0x44>
 8008278:	460b      	mov	r3, r1
 800827a:	f7f7 fffd 	bl	8000278 <__aeabi_dsub>
 800827e:	2200      	movs	r2, #0
 8008280:	2300      	movs	r3, #0
 8008282:	e7f0      	b.n	8008266 <__ieee754_log+0x26>
 8008284:	4bc3      	ldr	r3, [pc, #780]	; (8008594 <__ieee754_log+0x354>)
 8008286:	2200      	movs	r2, #0
 8008288:	f7f8 f9ae 	bl	80005e8 <__aeabi_dmul>
 800828c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008290:	460d      	mov	r5, r1
 8008292:	4ac1      	ldr	r2, [pc, #772]	; (8008598 <__ieee754_log+0x358>)
 8008294:	4295      	cmp	r5, r2
 8008296:	dd06      	ble.n	80082a6 <__ieee754_log+0x66>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	f7f7 ffee 	bl	800027c <__adddf3>
 80082a0:	e7e3      	b.n	800826a <__ieee754_log+0x2a>
 80082a2:	2300      	movs	r3, #0
 80082a4:	e7f5      	b.n	8008292 <__ieee754_log+0x52>
 80082a6:	152c      	asrs	r4, r5, #20
 80082a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80082ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80082b0:	441c      	add	r4, r3
 80082b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80082b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80082ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80082c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80082c6:	ea42 0105 	orr.w	r1, r2, r5
 80082ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80082ce:	2200      	movs	r2, #0
 80082d0:	4bb2      	ldr	r3, [pc, #712]	; (800859c <__ieee754_log+0x35c>)
 80082d2:	f7f7 ffd1 	bl	8000278 <__aeabi_dsub>
 80082d6:	1cab      	adds	r3, r5, #2
 80082d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082dc:	2b02      	cmp	r3, #2
 80082de:	4682      	mov	sl, r0
 80082e0:	468b      	mov	fp, r1
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	dc53      	bgt.n	8008390 <__ieee754_log+0x150>
 80082e8:	2300      	movs	r3, #0
 80082ea:	f7f8 fbe5 	bl	8000ab8 <__aeabi_dcmpeq>
 80082ee:	b1d0      	cbz	r0, 8008326 <__ieee754_log+0xe6>
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	f000 8120 	beq.w	8008536 <__ieee754_log+0x2f6>
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7f8 f90c 	bl	8000514 <__aeabi_i2d>
 80082fc:	a390      	add	r3, pc, #576	; (adr r3, 8008540 <__ieee754_log+0x300>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	4606      	mov	r6, r0
 8008304:	460f      	mov	r7, r1
 8008306:	f7f8 f96f 	bl	80005e8 <__aeabi_dmul>
 800830a:	a38f      	add	r3, pc, #572	; (adr r3, 8008548 <__ieee754_log+0x308>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	4604      	mov	r4, r0
 8008312:	460d      	mov	r5, r1
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f8 f966 	bl	80005e8 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4620      	mov	r0, r4
 8008322:	4629      	mov	r1, r5
 8008324:	e7ba      	b.n	800829c <__ieee754_log+0x5c>
 8008326:	a38a      	add	r3, pc, #552	; (adr r3, 8008550 <__ieee754_log+0x310>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	4650      	mov	r0, sl
 800832e:	4659      	mov	r1, fp
 8008330:	f7f8 f95a 	bl	80005e8 <__aeabi_dmul>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	2000      	movs	r0, #0
 800833a:	4999      	ldr	r1, [pc, #612]	; (80085a0 <__ieee754_log+0x360>)
 800833c:	f7f7 ff9c 	bl	8000278 <__aeabi_dsub>
 8008340:	4652      	mov	r2, sl
 8008342:	4606      	mov	r6, r0
 8008344:	460f      	mov	r7, r1
 8008346:	465b      	mov	r3, fp
 8008348:	4650      	mov	r0, sl
 800834a:	4659      	mov	r1, fp
 800834c:	f7f8 f94c 	bl	80005e8 <__aeabi_dmul>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	f7f8 f946 	bl	80005e8 <__aeabi_dmul>
 800835c:	4606      	mov	r6, r0
 800835e:	460f      	mov	r7, r1
 8008360:	b914      	cbnz	r4, 8008368 <__ieee754_log+0x128>
 8008362:	4632      	mov	r2, r6
 8008364:	463b      	mov	r3, r7
 8008366:	e0a0      	b.n	80084aa <__ieee754_log+0x26a>
 8008368:	4620      	mov	r0, r4
 800836a:	f7f8 f8d3 	bl	8000514 <__aeabi_i2d>
 800836e:	a374      	add	r3, pc, #464	; (adr r3, 8008540 <__ieee754_log+0x300>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	4680      	mov	r8, r0
 8008376:	4689      	mov	r9, r1
 8008378:	f7f8 f936 	bl	80005e8 <__aeabi_dmul>
 800837c:	a372      	add	r3, pc, #456	; (adr r3, 8008548 <__ieee754_log+0x308>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	4604      	mov	r4, r0
 8008384:	460d      	mov	r5, r1
 8008386:	4640      	mov	r0, r8
 8008388:	4649      	mov	r1, r9
 800838a:	f7f8 f92d 	bl	80005e8 <__aeabi_dmul>
 800838e:	e0a5      	b.n	80084dc <__ieee754_log+0x29c>
 8008390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008394:	f7f7 ff72 	bl	800027c <__adddf3>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4650      	mov	r0, sl
 800839e:	4659      	mov	r1, fp
 80083a0:	f7f8 fa4c 	bl	800083c <__aeabi_ddiv>
 80083a4:	e9cd 0100 	strd	r0, r1, [sp]
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7f8 f8b3 	bl	8000514 <__aeabi_i2d>
 80083ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b6:	4610      	mov	r0, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	f7f8 f915 	bl	80005e8 <__aeabi_dmul>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c6:	f7f8 f90f 	bl	80005e8 <__aeabi_dmul>
 80083ca:	a363      	add	r3, pc, #396	; (adr r3, 8008558 <__ieee754_log+0x318>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	4680      	mov	r8, r0
 80083d2:	4689      	mov	r9, r1
 80083d4:	f7f8 f908 	bl	80005e8 <__aeabi_dmul>
 80083d8:	a361      	add	r3, pc, #388	; (adr r3, 8008560 <__ieee754_log+0x320>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f7 ff4d 	bl	800027c <__adddf3>
 80083e2:	4642      	mov	r2, r8
 80083e4:	464b      	mov	r3, r9
 80083e6:	f7f8 f8ff 	bl	80005e8 <__aeabi_dmul>
 80083ea:	a35f      	add	r3, pc, #380	; (adr r3, 8008568 <__ieee754_log+0x328>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f7 ff44 	bl	800027c <__adddf3>
 80083f4:	4642      	mov	r2, r8
 80083f6:	464b      	mov	r3, r9
 80083f8:	f7f8 f8f6 	bl	80005e8 <__aeabi_dmul>
 80083fc:	a35c      	add	r3, pc, #368	; (adr r3, 8008570 <__ieee754_log+0x330>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f7 ff3b 	bl	800027c <__adddf3>
 8008406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800840a:	f7f8 f8ed 	bl	80005e8 <__aeabi_dmul>
 800840e:	a35a      	add	r3, pc, #360	; (adr r3, 8008578 <__ieee754_log+0x338>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008418:	4640      	mov	r0, r8
 800841a:	4649      	mov	r1, r9
 800841c:	f7f8 f8e4 	bl	80005e8 <__aeabi_dmul>
 8008420:	a357      	add	r3, pc, #348	; (adr r3, 8008580 <__ieee754_log+0x340>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f7 ff29 	bl	800027c <__adddf3>
 800842a:	4642      	mov	r2, r8
 800842c:	464b      	mov	r3, r9
 800842e:	f7f8 f8db 	bl	80005e8 <__aeabi_dmul>
 8008432:	a355      	add	r3, pc, #340	; (adr r3, 8008588 <__ieee754_log+0x348>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f7 ff20 	bl	800027c <__adddf3>
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	f7f8 f8d2 	bl	80005e8 <__aeabi_dmul>
 8008444:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008454:	f7f7 ff12 	bl	800027c <__adddf3>
 8008458:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800845c:	3551      	adds	r5, #81	; 0x51
 800845e:	4335      	orrs	r5, r6
 8008460:	2d00      	cmp	r5, #0
 8008462:	4680      	mov	r8, r0
 8008464:	4689      	mov	r9, r1
 8008466:	dd48      	ble.n	80084fa <__ieee754_log+0x2ba>
 8008468:	2200      	movs	r2, #0
 800846a:	4b4d      	ldr	r3, [pc, #308]	; (80085a0 <__ieee754_log+0x360>)
 800846c:	4650      	mov	r0, sl
 800846e:	4659      	mov	r1, fp
 8008470:	f7f8 f8ba 	bl	80005e8 <__aeabi_dmul>
 8008474:	4652      	mov	r2, sl
 8008476:	465b      	mov	r3, fp
 8008478:	f7f8 f8b6 	bl	80005e8 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4606      	mov	r6, r0
 8008482:	460f      	mov	r7, r1
 8008484:	4640      	mov	r0, r8
 8008486:	4649      	mov	r1, r9
 8008488:	f7f7 fef8 	bl	800027c <__adddf3>
 800848c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008490:	f7f8 f8aa 	bl	80005e8 <__aeabi_dmul>
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	b964      	cbnz	r4, 80084b4 <__ieee754_log+0x274>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f7 fee9 	bl	8000278 <__aeabi_dsub>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4650      	mov	r0, sl
 80084ac:	4659      	mov	r1, fp
 80084ae:	f7f7 fee3 	bl	8000278 <__aeabi_dsub>
 80084b2:	e6da      	b.n	800826a <__ieee754_log+0x2a>
 80084b4:	a322      	add	r3, pc, #136	; (adr r3, 8008540 <__ieee754_log+0x300>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084be:	f7f8 f893 	bl	80005e8 <__aeabi_dmul>
 80084c2:	a321      	add	r3, pc, #132	; (adr r3, 8008548 <__ieee754_log+0x308>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	4604      	mov	r4, r0
 80084ca:	460d      	mov	r5, r1
 80084cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d0:	f7f8 f88a 	bl	80005e8 <__aeabi_dmul>
 80084d4:	4642      	mov	r2, r8
 80084d6:	464b      	mov	r3, r9
 80084d8:	f7f7 fed0 	bl	800027c <__adddf3>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f7 fec8 	bl	8000278 <__aeabi_dsub>
 80084e8:	4652      	mov	r2, sl
 80084ea:	465b      	mov	r3, fp
 80084ec:	f7f7 fec4 	bl	8000278 <__aeabi_dsub>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4620      	mov	r0, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	e7d9      	b.n	80084ae <__ieee754_log+0x26e>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4650      	mov	r0, sl
 8008500:	4659      	mov	r1, fp
 8008502:	f7f7 feb9 	bl	8000278 <__aeabi_dsub>
 8008506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800850a:	f7f8 f86d 	bl	80005e8 <__aeabi_dmul>
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	2c00      	cmp	r4, #0
 8008514:	f43f af25 	beq.w	8008362 <__ieee754_log+0x122>
 8008518:	a309      	add	r3, pc, #36	; (adr r3, 8008540 <__ieee754_log+0x300>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008522:	f7f8 f861 	bl	80005e8 <__aeabi_dmul>
 8008526:	a308      	add	r3, pc, #32	; (adr r3, 8008548 <__ieee754_log+0x308>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	4604      	mov	r4, r0
 800852e:	460d      	mov	r5, r1
 8008530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008534:	e729      	b.n	800838a <__ieee754_log+0x14a>
 8008536:	2000      	movs	r0, #0
 8008538:	2100      	movs	r1, #0
 800853a:	e696      	b.n	800826a <__ieee754_log+0x2a>
 800853c:	f3af 8000 	nop.w
 8008540:	fee00000 	.word	0xfee00000
 8008544:	3fe62e42 	.word	0x3fe62e42
 8008548:	35793c76 	.word	0x35793c76
 800854c:	3dea39ef 	.word	0x3dea39ef
 8008550:	55555555 	.word	0x55555555
 8008554:	3fd55555 	.word	0x3fd55555
 8008558:	df3e5244 	.word	0xdf3e5244
 800855c:	3fc2f112 	.word	0x3fc2f112
 8008560:	96cb03de 	.word	0x96cb03de
 8008564:	3fc74664 	.word	0x3fc74664
 8008568:	94229359 	.word	0x94229359
 800856c:	3fd24924 	.word	0x3fd24924
 8008570:	55555593 	.word	0x55555593
 8008574:	3fe55555 	.word	0x3fe55555
 8008578:	d078c69f 	.word	0xd078c69f
 800857c:	3fc39a09 	.word	0x3fc39a09
 8008580:	1d8e78af 	.word	0x1d8e78af
 8008584:	3fcc71c5 	.word	0x3fcc71c5
 8008588:	9997fa04 	.word	0x9997fa04
 800858c:	3fd99999 	.word	0x3fd99999
 8008590:	c3500000 	.word	0xc3500000
 8008594:	43500000 	.word	0x43500000
 8008598:	7fefffff 	.word	0x7fefffff
 800859c:	3ff00000 	.word	0x3ff00000
 80085a0:	3fe00000 	.word	0x3fe00000

080085a4 <copysign>:
 80085a4:	ec51 0b10 	vmov	r0, r1, d0
 80085a8:	ee11 0a90 	vmov	r0, s3
 80085ac:	ee10 2a10 	vmov	r2, s0
 80085b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80085b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80085b8:	ea41 0300 	orr.w	r3, r1, r0
 80085bc:	ec43 2b10 	vmov	d0, r2, r3
 80085c0:	4770      	bx	lr
	...

080085c4 <_init>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr

080085d0 <_fini>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr
